
PID_Myself.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a600  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  0800a710  0800a710  0001a710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800addc  0800addc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800addc  0800addc  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800addc  0800addc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800addc  0800addc  0001addc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ade0  0800ade0  0001ade0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800ade4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200001e8  0800afcc  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  0800afcc  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0b4  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b7  00000000  00000000  0002f2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  00031580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  000325d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000dff4  00000000  00000000  00033560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000497a  00000000  00000000  00041554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00045ece  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005bc8  00000000  00000000  00045f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a6f8 	.word	0x0800a6f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800a6f8 	.word	0x0800a6f8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <__aeabi_d2lz>:
 800119c:	b538      	push	{r3, r4, r5, lr}
 800119e:	4605      	mov	r5, r0
 80011a0:	460c      	mov	r4, r1
 80011a2:	2200      	movs	r2, #0
 80011a4:	2300      	movs	r3, #0
 80011a6:	4628      	mov	r0, r5
 80011a8:	4621      	mov	r1, r4
 80011aa:	f7ff fc07 	bl	80009bc <__aeabi_dcmplt>
 80011ae:	b928      	cbnz	r0, 80011bc <__aeabi_d2lz+0x20>
 80011b0:	4628      	mov	r0, r5
 80011b2:	4621      	mov	r1, r4
 80011b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011b8:	f000 b80a 	b.w	80011d0 <__aeabi_d2ulz>
 80011bc:	4628      	mov	r0, r5
 80011be:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011c2:	f000 f805 	bl	80011d0 <__aeabi_d2ulz>
 80011c6:	4240      	negs	r0, r0
 80011c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011cc:	bd38      	pop	{r3, r4, r5, pc}
 80011ce:	bf00      	nop

080011d0 <__aeabi_d2ulz>:
 80011d0:	b5d0      	push	{r4, r6, r7, lr}
 80011d2:	2200      	movs	r2, #0
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <__aeabi_d2ulz+0x34>)
 80011d6:	4606      	mov	r6, r0
 80011d8:	460f      	mov	r7, r1
 80011da:	f7ff f97d 	bl	80004d8 <__aeabi_dmul>
 80011de:	f7ff fc53 	bl	8000a88 <__aeabi_d2uiz>
 80011e2:	4604      	mov	r4, r0
 80011e4:	f7ff f8fe 	bl	80003e4 <__aeabi_ui2d>
 80011e8:	2200      	movs	r2, #0
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <__aeabi_d2ulz+0x38>)
 80011ec:	f7ff f974 	bl	80004d8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4630      	mov	r0, r6
 80011f6:	4639      	mov	r1, r7
 80011f8:	f7fe ffb6 	bl	8000168 <__aeabi_dsub>
 80011fc:	f7ff fc44 	bl	8000a88 <__aeabi_d2uiz>
 8001200:	4621      	mov	r1, r4
 8001202:	bdd0      	pop	{r4, r6, r7, pc}
 8001204:	3df00000 	.word	0x3df00000
 8001208:	41f00000 	.word	0x41f00000

0800120c <PWM_control_position>:
//			HAL_GPIO_WritePin(IN1_GPIO_Port,IN1_Pin,GPIO_PIN_RESET);
//			htim1.Instance->CCR3 = 0;
//		}
//}
void PWM_control_position(TIM_HandleTypeDef *htim, float duty)
{
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  //	if(duty>90.0)
  //	{
  //		duty = 90.0;
  //	}
  if (duty > 0)
 8001216:	f04f 0100 	mov.w	r1, #0
 800121a:	6838      	ldr	r0, [r7, #0]
 800121c:	f7ff ff6e 	bl	80010fc <__aeabi_fcmpgt>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d025      	beq.n	8001272 <PWM_control_position+0x66>
  {
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001226:	2201      	movs	r2, #1
 8001228:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800122c:	4831      	ldr	r0, [pc, #196]	; (80012f4 <PWM_control_position+0xe8>)
 800122e:	f002 f90f 	bl	8003450 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET); // chieu thuan cung chieu kim dong ho
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001238:	482e      	ldr	r0, [pc, #184]	; (80012f4 <PWM_control_position+0xe8>)
 800123a:	f002 f909 	bl	8003450 <HAL_GPIO_WritePin>
    htim1.Instance->CCR3 = duty * (htim1.Instance->ARR) / 100;
 800123e:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <PWM_control_position+0xec>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fd45 	bl	8000cd4 <__aeabi_ui2f>
 800124a:	4603      	mov	r3, r0
 800124c:	6839      	ldr	r1, [r7, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fd98 	bl	8000d84 <__aeabi_fmul>
 8001254:	4603      	mov	r3, r0
 8001256:	4929      	ldr	r1, [pc, #164]	; (80012fc <PWM_control_position+0xf0>)
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fe47 	bl	8000eec <__aeabi_fdiv>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <PWM_control_position+0xec>)
 8001264:	681c      	ldr	r4, [r3, #0]
 8001266:	4610      	mov	r0, r2
 8001268:	f7ff ff78 	bl	800115c <__aeabi_f2uiz>
 800126c:	4603      	mov	r3, r0
 800126e:	63e3      	str	r3, [r4, #60]	; 0x3c
  else
  {
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
  }
}
 8001270:	e03c      	b.n	80012ec <PWM_control_position+0xe0>
  else if (duty < 0)
 8001272:	f04f 0100 	mov.w	r1, #0
 8001276:	6838      	ldr	r0, [r7, #0]
 8001278:	f7ff ff22 	bl	80010c0 <__aeabi_fcmplt>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d028      	beq.n	80012d4 <PWM_control_position+0xc8>
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001288:	481a      	ldr	r0, [pc, #104]	; (80012f4 <PWM_control_position+0xe8>)
 800128a:	f002 f8e1 	bl	8003450 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001294:	4817      	ldr	r0, [pc, #92]	; (80012f4 <PWM_control_position+0xe8>)
 8001296:	f002 f8db 	bl	8003450 <HAL_GPIO_WritePin>
    htim1.Instance->CCR3 = (-duty) * (htim1.Instance->ARR) / 100; // nguoc chieu kim dong ho
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80012a0:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <PWM_control_position+0xec>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fd14 	bl	8000cd4 <__aeabi_ui2f>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4619      	mov	r1, r3
 80012b0:	4620      	mov	r0, r4
 80012b2:	f7ff fd67 	bl	8000d84 <__aeabi_fmul>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4910      	ldr	r1, [pc, #64]	; (80012fc <PWM_control_position+0xf0>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fe16 	bl	8000eec <__aeabi_fdiv>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <PWM_control_position+0xec>)
 80012c6:	681c      	ldr	r4, [r3, #0]
 80012c8:	4610      	mov	r0, r2
 80012ca:	f7ff ff47 	bl	800115c <__aeabi_f2uiz>
 80012ce:	4603      	mov	r3, r0
 80012d0:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 80012d2:	e00b      	b.n	80012ec <PWM_control_position+0xe0>
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012da:	4806      	ldr	r0, [pc, #24]	; (80012f4 <PWM_control_position+0xe8>)
 80012dc:	f002 f8b8 	bl	8003450 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80012e0:	2201      	movs	r2, #1
 80012e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e6:	4803      	ldr	r0, [pc, #12]	; (80012f4 <PWM_control_position+0xe8>)
 80012e8:	f002 f8b2 	bl	8003450 <HAL_GPIO_WritePin>
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd90      	pop	{r4, r7, pc}
 80012f4:	40010c00 	.word	0x40010c00
 80012f8:	20000258 	.word	0x20000258
 80012fc:	42c80000 	.word	0x42c80000

08001300 <PWM_control_velocity>:
void PWM_control_velocity(TIM_HandleTypeDef *htim, float duty)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  if (duty > 0)
 800130a:	f04f 0100 	mov.w	r1, #0
 800130e:	6838      	ldr	r0, [r7, #0]
 8001310:	f7ff fef4 	bl	80010fc <__aeabi_fcmpgt>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d025      	beq.n	8001366 <PWM_control_velocity+0x66>
  {
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 800131a:	2201      	movs	r2, #1
 800131c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001320:	4831      	ldr	r0, [pc, #196]	; (80013e8 <PWM_control_velocity+0xe8>)
 8001322:	f002 f895 	bl	8003450 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET); // chieu thuan cung chieu kim dong ho
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132c:	482e      	ldr	r0, [pc, #184]	; (80013e8 <PWM_control_velocity+0xe8>)
 800132e:	f002 f88f 	bl	8003450 <HAL_GPIO_WritePin>
    htim1.Instance->CCR3 = duty * (htim1.Instance->ARR) / 100;
 8001332:	4b2e      	ldr	r3, [pc, #184]	; (80013ec <PWM_control_velocity+0xec>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fccb 	bl	8000cd4 <__aeabi_ui2f>
 800133e:	4603      	mov	r3, r0
 8001340:	6839      	ldr	r1, [r7, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fd1e 	bl	8000d84 <__aeabi_fmul>
 8001348:	4603      	mov	r3, r0
 800134a:	4929      	ldr	r1, [pc, #164]	; (80013f0 <PWM_control_velocity+0xf0>)
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fdcd 	bl	8000eec <__aeabi_fdiv>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b25      	ldr	r3, [pc, #148]	; (80013ec <PWM_control_velocity+0xec>)
 8001358:	681c      	ldr	r4, [r3, #0]
 800135a:	4610      	mov	r0, r2
 800135c:	f7ff fefe 	bl	800115c <__aeabi_f2uiz>
 8001360:	4603      	mov	r3, r0
 8001362:	63e3      	str	r3, [r4, #60]	; 0x3c
  else
  {
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
  }
}
 8001364:	e03c      	b.n	80013e0 <PWM_control_velocity+0xe0>
  else if (duty < 0)
 8001366:	f04f 0100 	mov.w	r1, #0
 800136a:	6838      	ldr	r0, [r7, #0]
 800136c:	f7ff fea8 	bl	80010c0 <__aeabi_fcmplt>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d028      	beq.n	80013c8 <PWM_control_velocity+0xc8>
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800137c:	481a      	ldr	r0, [pc, #104]	; (80013e8 <PWM_control_velocity+0xe8>)
 800137e:	f002 f867 	bl	8003450 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001388:	4817      	ldr	r0, [pc, #92]	; (80013e8 <PWM_control_velocity+0xe8>)
 800138a:	f002 f861 	bl	8003450 <HAL_GPIO_WritePin>
    htim1.Instance->CCR3 = (-duty) * (htim1.Instance->ARR) / 100; // nguoc chieu kim dong ho
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <PWM_control_velocity+0xec>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fc9a 	bl	8000cd4 <__aeabi_ui2f>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4619      	mov	r1, r3
 80013a4:	4620      	mov	r0, r4
 80013a6:	f7ff fced 	bl	8000d84 <__aeabi_fmul>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4910      	ldr	r1, [pc, #64]	; (80013f0 <PWM_control_velocity+0xf0>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fd9c 	bl	8000eec <__aeabi_fdiv>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <PWM_control_velocity+0xec>)
 80013ba:	681c      	ldr	r4, [r3, #0]
 80013bc:	4610      	mov	r0, r2
 80013be:	f7ff fecd 	bl	800115c <__aeabi_f2uiz>
 80013c2:	4603      	mov	r3, r0
 80013c4:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 80013c6:	e00b      	b.n	80013e0 <PWM_control_velocity+0xe0>
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <PWM_control_velocity+0xe8>)
 80013d0:	f002 f83e 	bl	8003450 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013da:	4803      	ldr	r0, [pc, #12]	; (80013e8 <PWM_control_velocity+0xe8>)
 80013dc:	f002 f838 	bl	8003450 <HAL_GPIO_WritePin>
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd90      	pop	{r4, r7, pc}
 80013e8:	40010c00 	.word	0x40010c00
 80013ec:	20000258 	.word	0x20000258
 80013f0:	42c80000 	.word	0x42c80000

080013f4 <encoder>:
//
//		encoder_value -> pre_counter = now_counter;
//}  // velocity:   // vong/phut

void encoder()
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  if (data_recFromPC[0] == 0x44)
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <encoder+0x60>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b44      	cmp	r3, #68	; 0x44
 80013fe:	d10a      	bne.n	8001416 <encoder+0x22>
  {
    htim2.Instance->CNT = 0;
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <encoder+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2200      	movs	r2, #0
 8001406:	625a      	str	r2, [r3, #36]	; 0x24
    instance_enc.speed_by_encoder = 0;
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <encoder+0x68>)
 800140a:	2200      	movs	r2, #0
 800140c:	809a      	strh	r2, [r3, #4]
    instance_enc.pre_speed_by_encoder = 0;
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <encoder+0x68>)
 8001410:	2200      	movs	r2, #0
 8001412:	80da      	strh	r2, [r3, #6]
    instance_enc.pre_speed_by_encoder = htim2.Instance->CNT;
    //	instance_enc.speed_by_encoder = htim2.Instance->CNT;
    instance_enc.position += instance_enc.speed_by_encoder;
  }
  //	htim2.Instance->CNT = 0;
}
 8001414:	e01a      	b.n	800144c <encoder+0x58>
    instance_enc.speed_by_encoder = htim2.Instance->CNT - instance_enc.pre_speed_by_encoder;
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <encoder+0x64>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	b29a      	uxth	r2, r3
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <encoder+0x68>)
 8001420:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001424:	b29b      	uxth	r3, r3
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	b29b      	uxth	r3, r3
 800142a:	b21a      	sxth	r2, r3
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <encoder+0x68>)
 800142e:	809a      	strh	r2, [r3, #4]
    instance_enc.pre_speed_by_encoder = htim2.Instance->CNT;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <encoder+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	b21a      	sxth	r2, r3
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <encoder+0x68>)
 800143a:	80da      	strh	r2, [r3, #6]
    instance_enc.position += instance_enc.speed_by_encoder;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <encoder+0x68>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a06      	ldr	r2, [pc, #24]	; (800145c <encoder+0x68>)
 8001442:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001446:	4413      	add	r3, r2
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <encoder+0x68>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	200004bc 	.word	0x200004bc
 8001458:	200002a0 	.word	0x200002a0
 800145c:	20000440 	.word	0x20000440

08001460 <send_data_to_Qt>:
/**
 *
 */

void send_data_to_Qt()
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	; 0x30
 8001464:	af02      	add	r7, sp, #8
  if (checkModeFromQt == 1 && flagAccept == 1)
 8001466:	4b62      	ldr	r3, [pc, #392]	; (80015f0 <send_data_to_Qt+0x190>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b01      	cmp	r3, #1
 800146c:	f040 8089 	bne.w	8001582 <send_data_to_Qt+0x122>
 8001470:	4b60      	ldr	r3, [pc, #384]	; (80015f4 <send_data_to_Qt+0x194>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	f040 8084 	bne.w	8001582 <send_data_to_Qt+0x122>
  {
//    sprintf(sendDataToSTM, "%f ", now_position);
//    HAL_UART_Transmit(&huart1, (uint8_t *)sendDataToSTM, strlen(sendDataToSTM), 200);
	  char float_to_char[sizeof(float)];
	  char mode = 0x66;
 800147a:	2366      	movs	r3, #102	; 0x66
 800147c:	74fb      	strb	r3, [r7, #19]
	  char so1 = 0x23;
 800147e:	2323      	movs	r3, #35	; 0x23
 8001480:	74bb      	strb	r3, [r7, #18]
	  char so2 = 0x02;
 8001482:	2302      	movs	r3, #2
 8001484:	747b      	strb	r3, [r7, #17]
	  char so3 = 0x45;
 8001486:	2345      	movs	r3, #69	; 0x45
 8001488:	743b      	strb	r3, [r7, #16]
	  char so4 = 0x03;
 800148a:	2303      	movs	r3, #3
 800148c:	73fb      	strb	r3, [r7, #15]
	  char so5 = 0x04;
 800148e:	2304      	movs	r3, #4
 8001490:	73bb      	strb	r3, [r7, #14]
//	  now_position = 15.23;   // ms sua de
	  count_test++;
 8001492:	4b59      	ldr	r3, [pc, #356]	; (80015f8 <send_data_to_Qt+0x198>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b57      	ldr	r3, [pc, #348]	; (80015f8 <send_data_to_Qt+0x198>)
 800149c:	701a      	strb	r2, [r3, #0]
	  if(count_test == 200)
 800149e:	4b56      	ldr	r3, [pc, #344]	; (80015f8 <send_data_to_Qt+0x198>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2bc8      	cmp	r3, #200	; 0xc8
 80014a4:	d10c      	bne.n	80014c0 <send_data_to_Qt+0x60>
	  {
		  now_position1 += 5;
 80014a6:	4b55      	ldr	r3, [pc, #340]	; (80015fc <send_data_to_Qt+0x19c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4955      	ldr	r1, [pc, #340]	; (8001600 <send_data_to_Qt+0x1a0>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fb61 	bl	8000b74 <__addsf3>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b51      	ldr	r3, [pc, #324]	; (80015fc <send_data_to_Qt+0x19c>)
 80014b8:	601a      	str	r2, [r3, #0]
		  count_test = 0;
 80014ba:	4b4f      	ldr	r3, [pc, #316]	; (80015f8 <send_data_to_Qt+0x198>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
 80014c0:	4b4e      	ldr	r3, [pc, #312]	; (80015fc <send_data_to_Qt+0x19c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
	  }
	  memcpy(float_to_char, &now_position1, sizeof(float));  // real thi bo so 1 ra
 80014c4:	617b      	str	r3, [r7, #20]
//	  uint8_t *array_data;
//	  array_data = (uint8_t *)malloc(5);
	  uint8_t index = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  uint8_t *mang;
	  mang = (uint8_t *)malloc(6);
 80014cc:	2006      	movs	r0, #6
 80014ce:	f004 fcd3 	bl	8005e78 <malloc>
 80014d2:	4603      	mov	r3, r0
 80014d4:	623b      	str	r3, [r7, #32]
//	  memcpy(array_data + index, &mode, 1); // Mode la 0x66 , neu Qt nhan 0x66 la vi tri
//	  index += 1;
	  memcpy(mang + index, &mode, 1);
 80014d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014da:	6a3a      	ldr	r2, [r7, #32]
 80014dc:	4413      	add	r3, r2
 80014de:	7cfa      	ldrb	r2, [r7, #19]
 80014e0:	701a      	strb	r2, [r3, #0]
	  index += 1;
 80014e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014e6:	3301      	adds	r3, #1
 80014e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  memcpy(mang + index, &so1, 1);
 80014ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014f0:	6a3a      	ldr	r2, [r7, #32]
 80014f2:	4413      	add	r3, r2
 80014f4:	7cba      	ldrb	r2, [r7, #18]
 80014f6:	701a      	strb	r2, [r3, #0]
	  	  index += 1;
 80014f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014fc:	3301      	adds	r3, #1
 80014fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  memcpy(mang + index, &so2, 1);
 8001502:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001506:	6a3a      	ldr	r2, [r7, #32]
 8001508:	4413      	add	r3, r2
 800150a:	7c7a      	ldrb	r2, [r7, #17]
 800150c:	701a      	strb	r2, [r3, #0]
	  		index += 1;
 800150e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001512:	3301      	adds	r3, #1
 8001514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  memcpy(mang + index, &so3, 1);
 8001518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800151c:	6a3a      	ldr	r2, [r7, #32]
 800151e:	4413      	add	r3, r2
 8001520:	7c3a      	ldrb	r2, [r7, #16]
 8001522:	701a      	strb	r2, [r3, #0]
	  		index += 1;
 8001524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001528:	3301      	adds	r3, #1
 800152a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  memcpy(mang + index, &so4, 1);
 800152e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001532:	6a3a      	ldr	r2, [r7, #32]
 8001534:	4413      	add	r3, r2
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	701a      	strb	r2, [r3, #0]
	  		index += 1;
 800153a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800153e:	3301      	adds	r3, #1
 8001540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  memcpy(mang + index, &so5, 1);
 8001544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001548:	6a3a      	ldr	r2, [r7, #32]
 800154a:	4413      	add	r3, r2
 800154c:	7bba      	ldrb	r2, [r7, #14]
 800154e:	701a      	strb	r2, [r3, #0]
	  		index += 1;
 8001550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001554:	3301      	adds	r3, #1
 8001556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
//	  memcpy(array_data + index, float_to_char, 4);
//	  char mang[] = {0x53, 0x53, 0x22, 0x02, 0x65};
//	  UART_frame_data(&uart_here, array_data, PROTO_DATA_SIZE_TX, uart_here.au8TxBuffer, &frame_tx_lenght);
	  UART_frame_data(&uart_here, (uint8_t *)mang, PROTO_DATA_SIZE_TX + 1, uart_here.au8TxBuffer, &frame_tx_lenght);
 800155a:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <send_data_to_Qt+0x1a4>)
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	4b2a      	ldr	r3, [pc, #168]	; (8001608 <send_data_to_Qt+0x1a8>)
 8001560:	2206      	movs	r2, #6
 8001562:	6a39      	ldr	r1, [r7, #32]
 8001564:	4828      	ldr	r0, [pc, #160]	; (8001608 <send_data_to_Qt+0x1a8>)
 8001566:	f004 fbe3 	bl	8005d30 <UART_frame_data>
//	  UART_get_data(&uart_here, uart_here.au8TxBuffer, &get_data_lenght);
	  HAL_UART_Transmit_DMA(&huart1, uart_here.au8TxBuffer, frame_tx_lenght);
 800156a:	4b26      	ldr	r3, [pc, #152]	; (8001604 <send_data_to_Qt+0x1a4>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	4925      	ldr	r1, [pc, #148]	; (8001608 <send_data_to_Qt+0x1a8>)
 8001572:	4826      	ldr	r0, [pc, #152]	; (800160c <send_data_to_Qt+0x1ac>)
 8001574:	f003 fe36 	bl	80051e4 <HAL_UART_Transmit_DMA>
//	  free(array_data);
	  free(mang);
 8001578:	6a38      	ldr	r0, [r7, #32]
 800157a:	f004 fc85 	bl	8005e88 <free>
  {
 800157e:	bf00      	nop
	  	  memcpy(array_data + index, float_to_char, 4);
	  	  UART_frame_data(&uart_here, array_data, PROTO_DATA_SIZE_TX, uart_here.au8TxBuffer, &frame_tx_lenght);
	  	  HAL_UART_Transmit_DMA(&huart1, uart_here.au8TxBuffer, frame_tx_lenght);
	  	  free(array_data);
  }
}
 8001580:	e032      	b.n	80015e8 <send_data_to_Qt+0x188>
  else if (checkModeFromQt == 2 && flagAccept == 1)
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <send_data_to_Qt+0x190>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d12e      	bne.n	80015e8 <send_data_to_Qt+0x188>
 800158a:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <send_data_to_Qt+0x194>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d12a      	bne.n	80015e8 <send_data_to_Qt+0x188>
	  	  char mode = 0x77;
 8001592:	2377      	movs	r3, #119	; 0x77
 8001594:	71fb      	strb	r3, [r7, #7]
 8001596:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <send_data_to_Qt+0x1b0>)
 8001598:	681b      	ldr	r3, [r3, #0]
	  	  memcpy(float_to_char, &velocity_real, sizeof(float));
 800159a:	60bb      	str	r3, [r7, #8]
	  	  array_data = (uint8_t *)malloc(5);
 800159c:	2005      	movs	r0, #5
 800159e:	f004 fc6b 	bl	8005e78 <malloc>
 80015a2:	4603      	mov	r3, r0
 80015a4:	61fb      	str	r3, [r7, #28]
	  	  uint8_t index = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	76fb      	strb	r3, [r7, #27]
	  	  memcpy(array_data + index, &mode, 1); // Mode la 0x77 , neu Qt nhan 0x77 la velocity
 80015aa:	7efb      	ldrb	r3, [r7, #27]
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	4413      	add	r3, r2
 80015b0:	79fa      	ldrb	r2, [r7, #7]
 80015b2:	701a      	strb	r2, [r3, #0]
	  	  index += 1;
 80015b4:	7efb      	ldrb	r3, [r7, #27]
 80015b6:	3301      	adds	r3, #1
 80015b8:	76fb      	strb	r3, [r7, #27]
	  	  memcpy(array_data + index, float_to_char, 4);
 80015ba:	7efb      	ldrb	r3, [r7, #27]
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	4413      	add	r3, r2
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	601a      	str	r2, [r3, #0]
	  	  UART_frame_data(&uart_here, array_data, PROTO_DATA_SIZE_TX, uart_here.au8TxBuffer, &frame_tx_lenght);
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <send_data_to_Qt+0x1a4>)
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <send_data_to_Qt+0x1a8>)
 80015ca:	2205      	movs	r2, #5
 80015cc:	69f9      	ldr	r1, [r7, #28]
 80015ce:	480e      	ldr	r0, [pc, #56]	; (8001608 <send_data_to_Qt+0x1a8>)
 80015d0:	f004 fbae 	bl	8005d30 <UART_frame_data>
	  	  HAL_UART_Transmit_DMA(&huart1, uart_here.au8TxBuffer, frame_tx_lenght);
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <send_data_to_Qt+0x1a4>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	490b      	ldr	r1, [pc, #44]	; (8001608 <send_data_to_Qt+0x1a8>)
 80015dc:	480b      	ldr	r0, [pc, #44]	; (800160c <send_data_to_Qt+0x1ac>)
 80015de:	f003 fe01 	bl	80051e4 <HAL_UART_Transmit_DMA>
	  	  free(array_data);
 80015e2:	69f8      	ldr	r0, [r7, #28]
 80015e4:	f004 fc50 	bl	8005e88 <free>
}
 80015e8:	bf00      	nop
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000431 	.word	0x20000431
 80015f4:	20000430 	.word	0x20000430
 80015f8:	20000474 	.word	0x20000474
 80015fc:	20000004 	.word	0x20000004
 8001600:	40a00000 	.word	0x40a00000
 8001604:	20000472 	.word	0x20000472
 8001608:	20000454 	.word	0x20000454
 800160c:	20000330 	.word	0x20000330
 8001610:	20000420 	.word	0x20000420
 8001614:	00000000 	.word	0x00000000

08001618 <control_PID_Position>:
void control_PID_Position(PID_control *pid_tune, float setpoint_posi_rotation, float Kp, float Ki, float Kd)
{
 8001618:	b5b0      	push	{r4, r5, r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
  //	instance_enc.velocity_not = instance_enc.velocity;
  //	if(instance_enc.velocity_not < 0)
  //	{
  //		instance_enc.velocity_not = -instance_enc.velocity_not;   // am thi doi thanh duong cho de dung PID =))))
  //	}
  now_position = (float)instance_enc.position * 360 / 1980; // now_position = độ
 8001626:	4b58      	ldr	r3, [pc, #352]	; (8001788 <control_PID_Position+0x170>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fb56 	bl	8000cdc <__aeabi_i2f>
 8001630:	4603      	mov	r3, r0
 8001632:	4956      	ldr	r1, [pc, #344]	; (800178c <control_PID_Position+0x174>)
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fba5 	bl	8000d84 <__aeabi_fmul>
 800163a:	4603      	mov	r3, r0
 800163c:	4954      	ldr	r1, [pc, #336]	; (8001790 <control_PID_Position+0x178>)
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fc54 	bl	8000eec <__aeabi_fdiv>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	4b52      	ldr	r3, [pc, #328]	; (8001794 <control_PID_Position+0x17c>)
 800164a:	601a      	str	r2, [r3, #0]
  number_rotation = now_position / 360;
 800164c:	4b51      	ldr	r3, [pc, #324]	; (8001794 <control_PID_Position+0x17c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	494e      	ldr	r1, [pc, #312]	; (800178c <control_PID_Position+0x174>)
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fc4a 	bl	8000eec <__aeabi_fdiv>
 8001658:	4603      	mov	r3, r0
 800165a:	461a      	mov	r2, r3
 800165c:	4b4e      	ldr	r3, [pc, #312]	; (8001798 <control_PID_Position+0x180>)
 800165e:	601a      	str	r2, [r3, #0]
  //	setpoint_posi_degrees = setpoint_posi_rotation*360;   // setpoint_posi_rotation la set số vòng cho dễ set
  //	now_position1 = 0.85*now_position1 + 0.15*now_position;
  error_posi = setpoint_posi_rotation - (now_position);
 8001660:	4b4c      	ldr	r3, [pc, #304]	; (8001794 <control_PID_Position+0x17c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	68b8      	ldr	r0, [r7, #8]
 8001668:	f7ff fa82 	bl	8000b70 <__aeabi_fsub>
 800166c:	4603      	mov	r3, r0
 800166e:	461a      	mov	r2, r3
 8001670:	4b4a      	ldr	r3, [pc, #296]	; (800179c <control_PID_Position+0x184>)
 8001672:	601a      	str	r2, [r3, #0]
  pid_tune->P_part = error_posi;
 8001674:	4b49      	ldr	r3, [pc, #292]	; (800179c <control_PID_Position+0x184>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	601a      	str	r2, [r3, #0]
  pid_tune->I_part += error_posi * Ts;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe fed1 	bl	8000428 <__aeabi_f2d>
 8001686:	4604      	mov	r4, r0
 8001688:	460d      	mov	r5, r1
 800168a:	4b44      	ldr	r3, [pc, #272]	; (800179c <control_PID_Position+0x184>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe feca 	bl	8000428 <__aeabi_f2d>
 8001694:	a33a      	add	r3, pc, #232	; (adr r3, 8001780 <control_PID_Position+0x168>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe ff1d 	bl	80004d8 <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4620      	mov	r0, r4
 80016a4:	4629      	mov	r1, r5
 80016a6:	f7fe fd61 	bl	800016c <__adddf3>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f7ff fa09 	bl	8000ac8 <__aeabi_d2f>
 80016b6:	4602      	mov	r2, r0
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	605a      	str	r2, [r3, #4]
  //	if(error < 0.03*setpoint)
  //	{
  //		pid_tune->I_part = 0;
  //	}
  pid_tune->D_part = (error_posi - pre_error_posi) / Ts;
 80016bc:	4b37      	ldr	r3, [pc, #220]	; (800179c <control_PID_Position+0x184>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a37      	ldr	r2, [pc, #220]	; (80017a0 <control_PID_Position+0x188>)
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fa52 	bl	8000b70 <__aeabi_fsub>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe feaa 	bl	8000428 <__aeabi_f2d>
 80016d4:	a32a      	add	r3, pc, #168	; (adr r3, 8001780 <control_PID_Position+0x168>)
 80016d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016da:	f7ff f827 	bl	800072c <__aeabi_ddiv>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff f9ef 	bl	8000ac8 <__aeabi_d2f>
 80016ea:	4602      	mov	r2, r0
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	609a      	str	r2, [r3, #8]
  output_pid_posi = Kp * (pid_tune->P_part) + Ki * (pid_tune->I_part) + Kd * (pid_tune->D_part);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fb44 	bl	8000d84 <__aeabi_fmul>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461c      	mov	r4, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	6839      	ldr	r1, [r7, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fb3c 	bl	8000d84 <__aeabi_fmul>
 800170c:	4603      	mov	r3, r0
 800170e:	4619      	mov	r1, r3
 8001710:	4620      	mov	r0, r4
 8001712:	f7ff fa2f 	bl	8000b74 <__addsf3>
 8001716:	4603      	mov	r3, r0
 8001718:	461c      	mov	r4, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	6a39      	ldr	r1, [r7, #32]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fb2f 	bl	8000d84 <__aeabi_fmul>
 8001726:	4603      	mov	r3, r0
 8001728:	4619      	mov	r1, r3
 800172a:	4620      	mov	r0, r4
 800172c:	f7ff fa22 	bl	8000b74 <__addsf3>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <control_PID_Position+0x18c>)
 8001736:	601a      	str	r2, [r3, #0]
  if (output_pid_posi > 100.0)
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <control_PID_Position+0x18c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	491a      	ldr	r1, [pc, #104]	; (80017a8 <control_PID_Position+0x190>)
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fcdc 	bl	80010fc <__aeabi_fcmpgt>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <control_PID_Position+0x13a>
  {
    output_pid_posi = 100.0;
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <control_PID_Position+0x18c>)
 800174c:	4a16      	ldr	r2, [pc, #88]	; (80017a8 <control_PID_Position+0x190>)
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e00b      	b.n	800176a <control_PID_Position+0x152>
  }
  else if (output_pid_posi < -100)
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <control_PID_Position+0x18c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4915      	ldr	r1, [pc, #84]	; (80017ac <control_PID_Position+0x194>)
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fcb1 	bl	80010c0 <__aeabi_fcmplt>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <control_PID_Position+0x152>
  {
    output_pid_posi = -100.0;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <control_PID_Position+0x18c>)
 8001766:	4a11      	ldr	r2, [pc, #68]	; (80017ac <control_PID_Position+0x194>)
 8001768:	601a      	str	r2, [r3, #0]
  }
  //	else if(output_pid < 0)
  //	{
  //		output_pid = 0;
  //	}
  pre_error_posi = error_posi;
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <control_PID_Position+0x184>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <control_PID_Position+0x188>)
 8001770:	6013      	str	r3, [r2, #0]
}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bdb0      	pop	{r4, r5, r7, pc}
 800177a:	bf00      	nop
 800177c:	f3af 8000 	nop.w
 8001780:	47ae147b 	.word	0x47ae147b
 8001784:	3f847ae1 	.word	0x3f847ae1
 8001788:	20000440 	.word	0x20000440
 800178c:	43b40000 	.word	0x43b40000
 8001790:	44f78000 	.word	0x44f78000
 8001794:	20000418 	.word	0x20000418
 8001798:	2000041c 	.word	0x2000041c
 800179c:	20000408 	.word	0x20000408
 80017a0:	2000040c 	.word	0x2000040c
 80017a4:	20000404 	.word	0x20000404
 80017a8:	42c80000 	.word	0x42c80000
 80017ac:	c2c80000 	.word	0xc2c80000

080017b0 <control_PID_Velocity>:
void control_PID_Velocity(PID_control *pid_tune, float setpoint_velo, float Kp, float Ki, float Kd)
{ // velocity vong/phut
 80017b0:	b5b0      	push	{r4, r5, r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	603b      	str	r3, [r7, #0]
  velocity_real = (float)instance_enc.speed_by_encoder * 60.0f / (Ts * Pulseee);
 80017be:	4b5e      	ldr	r3, [pc, #376]	; (8001938 <control_PID_Velocity+0x188>)
 80017c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fa89 	bl	8000cdc <__aeabi_i2f>
 80017ca:	4603      	mov	r3, r0
 80017cc:	495b      	ldr	r1, [pc, #364]	; (800193c <control_PID_Velocity+0x18c>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fad8 	bl	8000d84 <__aeabi_fmul>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fe26 	bl	8000428 <__aeabi_f2d>
 80017dc:	a352      	add	r3, pc, #328	; (adr r3, 8001928 <control_PID_Velocity+0x178>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7fe ffa3 	bl	800072c <__aeabi_ddiv>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f7ff f96b 	bl	8000ac8 <__aeabi_d2f>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a52      	ldr	r2, [pc, #328]	; (8001940 <control_PID_Velocity+0x190>)
 80017f6:	6013      	str	r3, [r2, #0]
  error_velo = setpoint_velo - (velocity_real);
 80017f8:	4b51      	ldr	r3, [pc, #324]	; (8001940 <control_PID_Velocity+0x190>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	68b8      	ldr	r0, [r7, #8]
 8001800:	f7ff f9b6 	bl	8000b70 <__aeabi_fsub>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	4b4e      	ldr	r3, [pc, #312]	; (8001944 <control_PID_Velocity+0x194>)
 800180a:	601a      	str	r2, [r3, #0]
  instance_enc.velocity = velocity_real;
 800180c:	4b4c      	ldr	r3, [pc, #304]	; (8001940 <control_PID_Velocity+0x190>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fc7d 	bl	8001110 <__aeabi_f2iz>
 8001816:	4603      	mov	r3, r0
 8001818:	4a47      	ldr	r2, [pc, #284]	; (8001938 <control_PID_Velocity+0x188>)
 800181a:	60d3      	str	r3, [r2, #12]
  pid_tune->P_part = error_velo;
 800181c:	4b49      	ldr	r3, [pc, #292]	; (8001944 <control_PID_Velocity+0x194>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	601a      	str	r2, [r3, #0]
  pid_tune->I_part += error_velo * Ts;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fdfd 	bl	8000428 <__aeabi_f2d>
 800182e:	4604      	mov	r4, r0
 8001830:	460d      	mov	r5, r1
 8001832:	4b44      	ldr	r3, [pc, #272]	; (8001944 <control_PID_Velocity+0x194>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fdf6 	bl	8000428 <__aeabi_f2d>
 800183c:	a33c      	add	r3, pc, #240	; (adr r3, 8001930 <control_PID_Velocity+0x180>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	f7fe fe49 	bl	80004d8 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4620      	mov	r0, r4
 800184c:	4629      	mov	r1, r5
 800184e:	f7fe fc8d 	bl	800016c <__adddf3>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	f7ff f935 	bl	8000ac8 <__aeabi_d2f>
 800185e:	4602      	mov	r2, r0
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	605a      	str	r2, [r3, #4]
  pid_tune->D_part = (error_velo - pre_error_velo) / Ts;
 8001864:	4b37      	ldr	r3, [pc, #220]	; (8001944 <control_PID_Velocity+0x194>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a37      	ldr	r2, [pc, #220]	; (8001948 <control_PID_Velocity+0x198>)
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	4611      	mov	r1, r2
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff f97e 	bl	8000b70 <__aeabi_fsub>
 8001874:	4603      	mov	r3, r0
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fdd6 	bl	8000428 <__aeabi_f2d>
 800187c:	a32c      	add	r3, pc, #176	; (adr r3, 8001930 <control_PID_Velocity+0x180>)
 800187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001882:	f7fe ff53 	bl	800072c <__aeabi_ddiv>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff f91b 	bl	8000ac8 <__aeabi_d2f>
 8001892:	4602      	mov	r2, r0
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	609a      	str	r2, [r3, #8]
  output_pid_velo = Kp * (pid_tune->P_part) + Ki * (pid_tune->I_part) + Kd * (pid_tune->D_part);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fa70 	bl	8000d84 <__aeabi_fmul>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461c      	mov	r4, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	6839      	ldr	r1, [r7, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fa68 	bl	8000d84 <__aeabi_fmul>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4619      	mov	r1, r3
 80018b8:	4620      	mov	r0, r4
 80018ba:	f7ff f95b 	bl	8000b74 <__addsf3>
 80018be:	4603      	mov	r3, r0
 80018c0:	461c      	mov	r4, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	6a39      	ldr	r1, [r7, #32]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fa5b 	bl	8000d84 <__aeabi_fmul>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4619      	mov	r1, r3
 80018d2:	4620      	mov	r0, r4
 80018d4:	f7ff f94e 	bl	8000b74 <__addsf3>
 80018d8:	4603      	mov	r3, r0
 80018da:	461a      	mov	r2, r3
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <control_PID_Velocity+0x19c>)
 80018de:	601a      	str	r2, [r3, #0]
  if (output_pid_velo > 100.0)
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <control_PID_Velocity+0x19c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	491a      	ldr	r1, [pc, #104]	; (8001950 <control_PID_Velocity+0x1a0>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fc08 	bl	80010fc <__aeabi_fcmpgt>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <control_PID_Velocity+0x14a>
  {
    output_pid_velo = 100.0;
 80018f2:	4b16      	ldr	r3, [pc, #88]	; (800194c <control_PID_Velocity+0x19c>)
 80018f4:	4a16      	ldr	r2, [pc, #88]	; (8001950 <control_PID_Velocity+0x1a0>)
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e00b      	b.n	8001912 <control_PID_Velocity+0x162>
  }
  else if (output_pid_velo < -100)
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <control_PID_Velocity+0x19c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4915      	ldr	r1, [pc, #84]	; (8001954 <control_PID_Velocity+0x1a4>)
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fbdd 	bl	80010c0 <__aeabi_fcmplt>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <control_PID_Velocity+0x162>
  {
    output_pid_velo = -100.0;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <control_PID_Velocity+0x19c>)
 800190e:	4a11      	ldr	r2, [pc, #68]	; (8001954 <control_PID_Velocity+0x1a4>)
 8001910:	601a      	str	r2, [r3, #0]
  }
  pre_error_velo = error_velo;
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <control_PID_Velocity+0x194>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a0c      	ldr	r2, [pc, #48]	; (8001948 <control_PID_Velocity+0x198>)
 8001918:	6013      	str	r3, [r2, #0]
}
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bdb0      	pop	{r4, r5, r7, pc}
 8001922:	bf00      	nop
 8001924:	f3af 8000 	nop.w
 8001928:	cccccccd 	.word	0xcccccccd
 800192c:	4033cccc 	.word	0x4033cccc
 8001930:	47ae147b 	.word	0x47ae147b
 8001934:	3f847ae1 	.word	0x3f847ae1
 8001938:	20000440 	.word	0x20000440
 800193c:	42700000 	.word	0x42700000
 8001940:	20000420 	.word	0x20000420
 8001944:	20000410 	.word	0x20000410
 8001948:	20000414 	.word	0x20000414
 800194c:	20000400 	.word	0x20000400
 8001950:	42c80000 	.word	0x42c80000
 8001954:	c2c80000 	.word	0xc2c80000

08001958 <tune_PID_after>:

void tune_PID_after(Select_Tune select)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af02      	add	r7, sp, #8
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  switch (select)
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 8099 	beq.w	8001a9c <tune_PID_after+0x144>
 800196a:	2b01      	cmp	r3, #1
 800196c:	f040 80ae 	bne.w	8001acc <tune_PID_after+0x174>
  {
  case Select_Posi:
    if (count_PID_position_first_time == true)
 8001970:	4b59      	ldr	r3, [pc, #356]	; (8001ad8 <tune_PID_after+0x180>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d027      	beq.n	80019c8 <tune_PID_after+0x70>
    {
      control_PID_Position(&PID_contr, setpointQt, Kp_true, Ki_true, Kd_true);      // theo độ, tinh o lan dau vua moi chay dong co 1 lan duy nhat
 8001978:	4b58      	ldr	r3, [pc, #352]	; (8001adc <tune_PID_after+0x184>)
 800197a:	6819      	ldr	r1, [r3, #0]
 800197c:	4b58      	ldr	r3, [pc, #352]	; (8001ae0 <tune_PID_after+0x188>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b58      	ldr	r3, [pc, #352]	; (8001ae4 <tune_PID_after+0x18c>)
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	4b58      	ldr	r3, [pc, #352]	; (8001ae8 <tune_PID_after+0x190>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	4603      	mov	r3, r0
 800198c:	4857      	ldr	r0, [pc, #348]	; (8001aec <tune_PID_after+0x194>)
 800198e:	f7ff fe43 	bl	8001618 <control_PID_Position>
      control_PID_Velocity(&PID_contr, output_pid_posi, Kp_true, Ki_true, Kd_true); // setpoint cua speed bang voi output cua position
 8001992:	4b57      	ldr	r3, [pc, #348]	; (8001af0 <tune_PID_after+0x198>)
 8001994:	6819      	ldr	r1, [r3, #0]
 8001996:	4b52      	ldr	r3, [pc, #328]	; (8001ae0 <tune_PID_after+0x188>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4b52      	ldr	r3, [pc, #328]	; (8001ae4 <tune_PID_after+0x18c>)
 800199c:	6818      	ldr	r0, [r3, #0]
 800199e:	4b52      	ldr	r3, [pc, #328]	; (8001ae8 <tune_PID_after+0x190>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	4603      	mov	r3, r0
 80019a6:	4851      	ldr	r0, [pc, #324]	; (8001aec <tune_PID_after+0x194>)
 80019a8:	f7ff ff02 	bl	80017b0 <control_PID_Velocity>
      output_pid = output_pid_velo;
 80019ac:	4b51      	ldr	r3, [pc, #324]	; (8001af4 <tune_PID_after+0x19c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a51      	ldr	r2, [pc, #324]	; (8001af8 <tune_PID_after+0x1a0>)
 80019b2:	6013      	str	r3, [r2, #0]
      PWM_control_position(&htim1, output_pid);
 80019b4:	4b50      	ldr	r3, [pc, #320]	; (8001af8 <tune_PID_after+0x1a0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	4850      	ldr	r0, [pc, #320]	; (8001afc <tune_PID_after+0x1a4>)
 80019bc:	f7ff fc26 	bl	800120c <PWM_control_position>
      count_PID_position_first_time = false;
 80019c0:	4b45      	ldr	r3, [pc, #276]	; (8001ad8 <tune_PID_after+0x180>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
      break;
 80019c6:	e082      	b.n	8001ace <tune_PID_after+0x176>
    }
    if (count_PID == 3) // 5 lan tinh PID toc do moi tinh 1 lan PID vi tri
 80019c8:	4b4d      	ldr	r3, [pc, #308]	; (8001b00 <tune_PID_after+0x1a8>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d138      	bne.n	8001a42 <tune_PID_after+0xea>
    {
      if (countUpdate == 250)
 80019d0:	4b4c      	ldr	r3, [pc, #304]	; (8001b04 <tune_PID_after+0x1ac>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2bfa      	cmp	r3, #250	; 0xfa
 80019d6:	d10c      	bne.n	80019f2 <tune_PID_after+0x9a>
      {
        setpointQt += 10;
 80019d8:	4b40      	ldr	r3, [pc, #256]	; (8001adc <tune_PID_after+0x184>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	494a      	ldr	r1, [pc, #296]	; (8001b08 <tune_PID_after+0x1b0>)
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f8c8 	bl	8000b74 <__addsf3>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b3c      	ldr	r3, [pc, #240]	; (8001adc <tune_PID_after+0x184>)
 80019ea:	601a      	str	r2, [r3, #0]
        countUpdate = 0;
 80019ec:	4b45      	ldr	r3, [pc, #276]	; (8001b04 <tune_PID_after+0x1ac>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
      }
      control_PID_Position(&PID_contr, setpointQt, Kp_true, Ki_true, Kd_true);      // tinh lai output_pid_posi moi
 80019f2:	4b3a      	ldr	r3, [pc, #232]	; (8001adc <tune_PID_after+0x184>)
 80019f4:	6819      	ldr	r1, [r3, #0]
 80019f6:	4b3a      	ldr	r3, [pc, #232]	; (8001ae0 <tune_PID_after+0x188>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b3a      	ldr	r3, [pc, #232]	; (8001ae4 <tune_PID_after+0x18c>)
 80019fc:	6818      	ldr	r0, [r3, #0]
 80019fe:	4b3a      	ldr	r3, [pc, #232]	; (8001ae8 <tune_PID_after+0x190>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	4603      	mov	r3, r0
 8001a06:	4839      	ldr	r0, [pc, #228]	; (8001aec <tune_PID_after+0x194>)
 8001a08:	f7ff fe06 	bl	8001618 <control_PID_Position>
      control_PID_Velocity(&PID_contr, output_pid_posi, Kp_true, Ki_true, Kd_true); // setpoint cua speed bang voi output cua position
 8001a0c:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <tune_PID_after+0x198>)
 8001a0e:	6819      	ldr	r1, [r3, #0]
 8001a10:	4b33      	ldr	r3, [pc, #204]	; (8001ae0 <tune_PID_after+0x188>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <tune_PID_after+0x18c>)
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	4b33      	ldr	r3, [pc, #204]	; (8001ae8 <tune_PID_after+0x190>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4832      	ldr	r0, [pc, #200]	; (8001aec <tune_PID_after+0x194>)
 8001a22:	f7ff fec5 	bl	80017b0 <control_PID_Velocity>
      output_pid = output_pid_velo;
 8001a26:	4b33      	ldr	r3, [pc, #204]	; (8001af4 <tune_PID_after+0x19c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a33      	ldr	r2, [pc, #204]	; (8001af8 <tune_PID_after+0x1a0>)
 8001a2c:	6013      	str	r3, [r2, #0]
      PWM_control_position(&htim1, output_pid);
 8001a2e:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <tune_PID_after+0x1a0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4619      	mov	r1, r3
 8001a34:	4831      	ldr	r0, [pc, #196]	; (8001afc <tune_PID_after+0x1a4>)
 8001a36:	f7ff fbe9 	bl	800120c <PWM_control_position>
      count_PID = 0;
 8001a3a:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <tune_PID_after+0x1a8>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
      break;
 8001a40:	e045      	b.n	8001ace <tune_PID_after+0x176>
    }
    else if (count_PID != 3)
 8001a42:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <tune_PID_after+0x1a8>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d028      	beq.n	8001a9c <tune_PID_after+0x144>
    {
      if (countUpdate == 250)
 8001a4a:	4b2e      	ldr	r3, [pc, #184]	; (8001b04 <tune_PID_after+0x1ac>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2bfa      	cmp	r3, #250	; 0xfa
 8001a50:	d10c      	bne.n	8001a6c <tune_PID_after+0x114>
      {
        setpointQt += 10;
 8001a52:	4b22      	ldr	r3, [pc, #136]	; (8001adc <tune_PID_after+0x184>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	492c      	ldr	r1, [pc, #176]	; (8001b08 <tune_PID_after+0x1b0>)
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f88b 	bl	8000b74 <__addsf3>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <tune_PID_after+0x184>)
 8001a64:	601a      	str	r2, [r3, #0]
        countUpdate = 0;
 8001a66:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <tune_PID_after+0x1ac>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
      }
      control_PID_Velocity(&PID_contr, output_pid_posi, Kp_true, Ki_true, Kd_true); // setpoint cua speed bang voi output cua position
 8001a6c:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <tune_PID_after+0x198>)
 8001a6e:	6819      	ldr	r1, [r3, #0]
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <tune_PID_after+0x188>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <tune_PID_after+0x18c>)
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <tune_PID_after+0x190>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	4603      	mov	r3, r0
 8001a80:	481a      	ldr	r0, [pc, #104]	; (8001aec <tune_PID_after+0x194>)
 8001a82:	f7ff fe95 	bl	80017b0 <control_PID_Velocity>
      output_pid = output_pid_velo;
 8001a86:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <tune_PID_after+0x19c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a1b      	ldr	r2, [pc, #108]	; (8001af8 <tune_PID_after+0x1a0>)
 8001a8c:	6013      	str	r3, [r2, #0]
      PWM_control_position(&htim1, output_pid);
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <tune_PID_after+0x1a0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4619      	mov	r1, r3
 8001a94:	4819      	ldr	r0, [pc, #100]	; (8001afc <tune_PID_after+0x1a4>)
 8001a96:	f7ff fbb9 	bl	800120c <PWM_control_position>
      break;
 8001a9a:	e018      	b.n	8001ace <tune_PID_after+0x176>
//    if (countUpdate == 250)
//    {
//      setpointQt += 10;
//      countUpdate = 0;
//    }
    control_PID_Velocity(&PID_contr, setpointQt, Kp_true, Ki_true, Kd_true);
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <tune_PID_after+0x184>)
 8001a9e:	6819      	ldr	r1, [r3, #0]
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <tune_PID_after+0x188>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <tune_PID_after+0x18c>)
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <tune_PID_after+0x190>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	4603      	mov	r3, r0
 8001ab0:	480e      	ldr	r0, [pc, #56]	; (8001aec <tune_PID_after+0x194>)
 8001ab2:	f7ff fe7d 	bl	80017b0 <control_PID_Velocity>
    output_pid = output_pid_velo; // dong nhat het ve output_pid cho de kiem soat @_@
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <tune_PID_after+0x19c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a0f      	ldr	r2, [pc, #60]	; (8001af8 <tune_PID_after+0x1a0>)
 8001abc:	6013      	str	r3, [r2, #0]
    PWM_control_velocity(&htim1, output_pid);
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <tune_PID_after+0x1a0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480d      	ldr	r0, [pc, #52]	; (8001afc <tune_PID_after+0x1a4>)
 8001ac6:	f7ff fc1b 	bl	8001300 <PWM_control_velocity>
    break;
 8001aca:	e000      	b.n	8001ace <tune_PID_after+0x176>
  default:
    break;
 8001acc:	bf00      	nop
  }
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	200004b8 	.word	0x200004b8
 8001ae0:	20000424 	.word	0x20000424
 8001ae4:	20000428 	.word	0x20000428
 8001ae8:	2000042c 	.word	0x2000042c
 8001aec:	20000434 	.word	0x20000434
 8001af0:	20000404 	.word	0x20000404
 8001af4:	20000400 	.word	0x20000400
 8001af8:	200003fc 	.word	0x200003fc
 8001afc:	20000258 	.word	0x20000258
 8001b00:	20000432 	.word	0x20000432
 8001b04:	20000433 	.word	0x20000433
 8001b08:	41200000 	.word	0x41200000

08001b0c <HAL_TIM_PeriodElapsedCallback>:
//     break;
//   }
// }

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a16      	ldr	r2, [pc, #88]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d101      	bne.n	8001b22 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    //		encoder(&htim2,&instance_enc);
    encoder();
 8001b1e:	f7ff fc69 	bl	80013f4 <encoder>
  }

  if (checkModeFromQt == 1 && flagAccept == 1)
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d113      	bne.n	8001b52 <HAL_TIM_PeriodElapsedCallback+0x46>
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d10f      	bne.n	8001b52 <HAL_TIM_PeriodElapsedCallback+0x46>
  {
    count_PID++;
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	3301      	adds	r3, #1
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001b3c:	701a      	strb	r2, [r3, #0]
    countUpdate++;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	3301      	adds	r3, #1
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001b48:	701a      	strb	r2, [r3, #0]
    tune_PID_after(Select_Posi);
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f7ff ff04 	bl	8001958 <tune_PID_after>
 8001b50:	e00a      	b.n	8001b68 <HAL_TIM_PeriodElapsedCallback+0x5c>
  }
  else if (checkModeFromQt == 2 && flagAccept == 1)
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d106      	bne.n	8001b68 <HAL_TIM_PeriodElapsedCallback+0x5c>
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d102      	bne.n	8001b68 <HAL_TIM_PeriodElapsedCallback+0x5c>
  {
    // control_PID_Velocity(&PID_contr, setpointQt, Kp_true, Ki_true, Kd_true);
    //	  control_PID_Velocity(&PID_contr, 30, 0.7, 1.9, 0.04);
//	countUpdate++;
    tune_PID_after(Select_Velo);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f7ff fef8 	bl	8001958 <tune_PID_after>
  }
  send_data_to_Qt();
 8001b68:	f7ff fc7a 	bl	8001460 <send_data_to_Qt>
  //  	control_PID_Velocity(&PID_contr, 40, Kp_true, Kd_true, Ki_true); // toc do 30vong/phut
  //  	select_mode(Select_Velo);
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40000400 	.word	0x40000400
 8001b78:	20000431 	.word	0x20000431
 8001b7c:	20000430 	.word	0x20000430
 8001b80:	20000432 	.word	0x20000432
 8001b84:	20000433 	.word	0x20000433

08001b88 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a15      	ldr	r2, [pc, #84]	; (8001bec <HAL_UART_RxCpltCallback+0x64>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d124      	bne.n	8001be4 <HAL_UART_RxCpltCallback+0x5c>
  {
    if (data_rx == PROTO_END_BYTE)
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_UART_RxCpltCallback+0x68>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d10e      	bne.n	8001bc0 <HAL_UART_RxCpltCallback+0x38>
    {
      //     data_uart[uart_count++] = '\0';
      data_uart[uart_count++] = data_rx;
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_UART_RxCpltCallback+0x6c>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	b2d1      	uxtb	r1, r2
 8001baa:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <HAL_UART_RxCpltCallback+0x6c>)
 8001bac:	7011      	strb	r1, [r2, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_UART_RxCpltCallback+0x68>)
 8001bb2:	7819      	ldrb	r1, [r3, #0]
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <HAL_UART_RxCpltCallback+0x70>)
 8001bb6:	5499      	strb	r1, [r3, r2]

      uart_flag = 1; // co ky tu  la chuoi da duoc truyen xong
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <HAL_UART_RxCpltCallback+0x74>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]
 8001bbe:	e00c      	b.n	8001bda <HAL_UART_RxCpltCallback+0x52>
    }
    else
    {
      data_uart[uart_count] = data_rx;
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <HAL_UART_RxCpltCallback+0x6c>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_UART_RxCpltCallback+0x68>)
 8001bc8:	7819      	ldrb	r1, [r3, #0]
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_UART_RxCpltCallback+0x70>)
 8001bcc:	5499      	strb	r1, [r3, r2]
      uart_count++;
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_UART_RxCpltCallback+0x6c>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <HAL_UART_RxCpltCallback+0x6c>)
 8001bd8:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&data_rx, 1);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4904      	ldr	r1, [pc, #16]	; (8001bf0 <HAL_UART_RxCpltCallback+0x68>)
 8001bde:	4808      	ldr	r0, [pc, #32]	; (8001c00 <HAL_UART_RxCpltCallback+0x78>)
 8001be0:	f003 fad0 	bl	8005184 <HAL_UART_Receive_IT>
  }
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40013800 	.word	0x40013800
 8001bf0:	200004b2 	.word	0x200004b2
 8001bf4:	200004b3 	.word	0x200004b3
 8001bf8:	20000480 	.word	0x20000480
 8001bfc:	200004b4 	.word	0x200004b4
 8001c00:	20000330 	.word	0x20000330

08001c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c0a:	f000 fe8f 	bl	800292c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c0e:	f000 f92b 	bl	8001e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c12:	f000 fb1b 	bl	800224c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c16:	f000 faf3 	bl	8002200 <MX_DMA_Init>
  MX_I2C1_Init();
 8001c1a:	f000 f967 	bl	8001eec <MX_I2C1_Init>
  MX_TIM1_Init();
 8001c1e:	f000 f993 	bl	8001f48 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c22:	f000 fa21 	bl	8002068 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c26:	f000 fa73 	bl	8002110 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001c2a:	f000 fabf 	bl	80021ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001c2e:	213c      	movs	r1, #60	; 0x3c
 8001c30:	4875      	ldr	r0, [pc, #468]	; (8001e08 <main+0x204>)
 8001c32:	f002 fbb9 	bl	80043a8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001c36:	4875      	ldr	r0, [pc, #468]	; (8001e0c <main+0x208>)
 8001c38:	f002 f9d0 	bl	8003fdc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001c3c:	2108      	movs	r1, #8
 8001c3e:	4874      	ldr	r0, [pc, #464]	; (8001e10 <main+0x20c>)
 8001c40:	f002 fa6e 	bl	8004120 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&data_rx, 1);
 8001c44:	2201      	movs	r2, #1
 8001c46:	4973      	ldr	r1, [pc, #460]	; (8001e14 <main+0x210>)
 8001c48:	4873      	ldr	r0, [pc, #460]	; (8001e18 <main+0x214>)
 8001c4a:	f003 fa9b 	bl	8005184 <HAL_UART_Receive_IT>
  while (1)
  {
    //	  a = __HAL_TIM_GET_COUNTER(&htim2);
    //	  HAL_GPIO_WritePin(IN1_GPIO_Port,IN1_Pin,GPIO_PIN_SET);
    //	  HAL_GPIO_WritePin(IN2_GPIO_Port,IN2_Pin,GPIO_PIN_RESET); chieu thuan cung chieu kim dong ho day!!!
    real_data = 1;
 8001c4e:	4b73      	ldr	r3, [pc, #460]	; (8001e1c <main+0x218>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]
    if (uart_flag == 1)
 8001c54:	4b72      	ldr	r3, [pc, #456]	; (8001e20 <main+0x21c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d1f8      	bne.n	8001c4e <main+0x4a>
    {
      memset(data_recFromPC, 0, uart_count);
 8001c5c:	4b71      	ldr	r3, [pc, #452]	; (8001e24 <main+0x220>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	2100      	movs	r1, #0
 8001c64:	4870      	ldr	r0, [pc, #448]	; (8001e28 <main+0x224>)
 8001c66:	f004 f925 	bl	8005eb4 <memset>
      //    memset(uart_here.au8RxBuffer, 0, PROTO_DATA_SIZE_RX+4);
      memcpy(uart_here.au8RxBuffer, (uint8_t *)data_uart, uart_count);
 8001c6a:	4b6e      	ldr	r3, [pc, #440]	; (8001e24 <main+0x220>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	496e      	ldr	r1, [pc, #440]	; (8001e2c <main+0x228>)
 8001c72:	486f      	ldr	r0, [pc, #444]	; (8001e30 <main+0x22c>)
 8001c74:	f004 f910 	bl	8005e98 <memcpy>
      check_true_false = UART_get_data(&uart_here, (uint8_t *)data_recFromPC, &get_data_lenght); // sau ham nay data_recfromPC se chua cac data byte cua Kp Ki Kd
 8001c78:	4a6e      	ldr	r2, [pc, #440]	; (8001e34 <main+0x230>)
 8001c7a:	496b      	ldr	r1, [pc, #428]	; (8001e28 <main+0x224>)
 8001c7c:	486e      	ldr	r0, [pc, #440]	; (8001e38 <main+0x234>)
 8001c7e:	f003 ffbb 	bl	8005bf8 <UART_get_data>
 8001c82:	4603      	mov	r3, r0
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b6d      	ldr	r3, [pc, #436]	; (8001e3c <main+0x238>)
 8001c88:	701a      	strb	r2, [r3, #0]
 //     char message[] = {0};
      if (check_true_false == -1)
 8001c8a:	4b6c      	ldr	r3, [pc, #432]	; (8001e3c <main+0x238>)
 8001c8c:	f993 3000 	ldrsb.w	r3, [r3]
 8001c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c94:	d103      	bne.n	8001c9e <main+0x9a>
      {
        real_data = 0;
 8001c96:	4b61      	ldr	r3, [pc, #388]	; (8001e1c <main+0x218>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	e012      	b.n	8001cc4 <main+0xc0>
        // hien thi thong bao No valid message found tren Qt
//        sprintf(message, "No valid message because %d", check_true_false);
//        HAL_UART_Transmit_DMA(&huart1, (uint8_t *)message, strlen(message));
      }
      else if (check_true_false == -2)
 8001c9e:	4b67      	ldr	r3, [pc, #412]	; (8001e3c <main+0x238>)
 8001ca0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ca4:	f113 0f02 	cmn.w	r3, #2
 8001ca8:	d103      	bne.n	8001cb2 <main+0xae>
      {
        real_data = 0;
 8001caa:	4b5c      	ldr	r3, [pc, #368]	; (8001e1c <main+0x218>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
 8001cb0:	e008      	b.n	8001cc4 <main+0xc0>
//        sprintf(message, "Invalid CRC because %d", check_true_false);
//        HAL_UART_Transmit_DMA(&huart1, (uint8_t *)message, strlen(message));
        // hien thi Invalid CRC tren Qt
      }
      else if (check_true_false == -3)
 8001cb2:	4b62      	ldr	r3, [pc, #392]	; (8001e3c <main+0x238>)
 8001cb4:	f993 3000 	ldrsb.w	r3, [r3]
 8001cb8:	f113 0f03 	cmn.w	r3, #3
 8001cbc:	d102      	bne.n	8001cc4 <main+0xc0>
      {
        real_data = 0;
 8001cbe:	4b57      	ldr	r3, [pc, #348]	; (8001e1c <main+0x218>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
//        sprintf(message, "Destination buffer too small because %d", check_true_false);
//        HAL_UART_Transmit_DMA(&huart1, (uint8_t *)message, strlen(message));
        // hien thi Destination buffer too small tren Qt
      }
      if (real_data == 1)
 8001cc4:	4b55      	ldr	r3, [pc, #340]	; (8001e1c <main+0x218>)
 8001cc6:	f993 3000 	ldrsb.w	r3, [r3]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	f040 808d 	bne.w	8001dea <main+0x1e6>
      {
        while (1) // neu toi duoc day thi đã nhận đúng data rồi
        {
          //   strcpy(data_recFromPC, data_uart);
          if (data_recFromPC[0] == 0x22) // 'S' la set a' :))
 8001cd0:	4b55      	ldr	r3, [pc, #340]	; (8001e28 <main+0x224>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b22      	cmp	r3, #34	; 0x22
 8001cd6:	d108      	bne.n	8001cea <main+0xe6>
          {
            //  checkModeFromQt = string_cut_checkMode(data_recFromPC);
            setpointQt = *((float *)(data_recFromPC + 1));
 8001cd8:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <main+0x224>)
 8001cda:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001cde:	4a58      	ldr	r2, [pc, #352]	; (8001e40 <main+0x23c>)
 8001ce0:	6013      	str	r3, [r2, #0]
            checkModeFromQt = 1;
 8001ce2:	4b58      	ldr	r3, [pc, #352]	; (8001e44 <main+0x240>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
            break;
 8001ce8:	e07f      	b.n	8001dea <main+0x1e6>
          }
          else if (data_recFromPC[0] == 0x33) // 'S' la set a' :))
 8001cea:	4b4f      	ldr	r3, [pc, #316]	; (8001e28 <main+0x224>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b33      	cmp	r3, #51	; 0x33
 8001cf0:	d108      	bne.n	8001d04 <main+0x100>
          {

            setpointQt = *((float *)(data_recFromPC + 1));
 8001cf2:	4b4d      	ldr	r3, [pc, #308]	; (8001e28 <main+0x224>)
 8001cf4:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001cf8:	4a51      	ldr	r2, [pc, #324]	; (8001e40 <main+0x23c>)
 8001cfa:	6013      	str	r3, [r2, #0]
            checkModeFromQt = 2;
 8001cfc:	4b51      	ldr	r3, [pc, #324]	; (8001e44 <main+0x240>)
 8001cfe:	2202      	movs	r2, #2
 8001d00:	701a      	strb	r2, [r3, #0]
            break;
 8001d02:	e072      	b.n	8001dea <main+0x1e6>
          }
          else if (data_recFromPC[0] == 0x55) // G la GOOOO!!! a' :)), nhap nut RUN trong GUI thi gửi chữ 'G'
 8001d04:	4b48      	ldr	r3, [pc, #288]	; (8001e28 <main+0x224>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b55      	cmp	r3, #85	; 0x55
 8001d0a:	d103      	bne.n	8001d14 <main+0x110>
          {
            flagAccept = 1;
 8001d0c:	4b4e      	ldr	r3, [pc, #312]	; (8001e48 <main+0x244>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
            break;
 8001d12:	e06a      	b.n	8001dea <main+0x1e6>
          }
          //      else if (data_recFromPC[0] == 'K')
          else if (data_recFromPC[0] == 0x11)
 8001d14:	4b44      	ldr	r3, [pc, #272]	; (8001e28 <main+0x224>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b11      	cmp	r3, #17
 8001d1a:	d10f      	bne.n	8001d3c <main+0x138>
          {
            //        Kp_true = string_cut(data_recFromPC, "Kp");
            //        Ki_true = string_cut(data_recFromPC, "Ki");
            //        Kd_true = string_cut(data_recFromPC, "Kd");
            Kp_true = *((float *)(data_recFromPC + 1));
 8001d1c:	4b42      	ldr	r3, [pc, #264]	; (8001e28 <main+0x224>)
 8001d1e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001d22:	4a4a      	ldr	r2, [pc, #296]	; (8001e4c <main+0x248>)
 8001d24:	6013      	str	r3, [r2, #0]
            Ki_true = *((float *)(data_recFromPC + 5));
 8001d26:	4b40      	ldr	r3, [pc, #256]	; (8001e28 <main+0x224>)
 8001d28:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8001d2c:	4a48      	ldr	r2, [pc, #288]	; (8001e50 <main+0x24c>)
 8001d2e:	6013      	str	r3, [r2, #0]
            Kd_true = *((float *)(data_recFromPC + 9));
 8001d30:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <main+0x224>)
 8001d32:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8001d36:	4a47      	ldr	r2, [pc, #284]	; (8001e54 <main+0x250>)
 8001d38:	6013      	str	r3, [r2, #0]
            break;
 8001d3a:	e056      	b.n	8001dea <main+0x1e6>
          }
          else if (data_recFromPC[0] == 0x44)
 8001d3c:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <main+0x224>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b44      	cmp	r3, #68	; 0x44
 8001d42:	d1c5      	bne.n	8001cd0 <main+0xcc>
          {
            Kp_true = Ki_true = Kd_true = 0; // nhan nut Reset
 8001d44:	4b43      	ldr	r3, [pc, #268]	; (8001e54 <main+0x250>)
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	4b41      	ldr	r3, [pc, #260]	; (8001e54 <main+0x250>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a3f      	ldr	r2, [pc, #252]	; (8001e50 <main+0x24c>)
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4b3e      	ldr	r3, [pc, #248]	; (8001e50 <main+0x24c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a3c      	ldr	r2, [pc, #240]	; (8001e4c <main+0x248>)
 8001d5a:	6013      	str	r3, [r2, #0]
            htim2.Instance->CNT = 0;
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <main+0x204>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2200      	movs	r2, #0
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24
            instance_enc.position = 0;
 8001d64:	4b3c      	ldr	r3, [pc, #240]	; (8001e58 <main+0x254>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
            instance_enc.speed_by_encoder = 0;
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <main+0x254>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	809a      	strh	r2, [r3, #4]
            setpointQt = 0;
 8001d70:	4b33      	ldr	r3, [pc, #204]	; (8001e40 <main+0x23c>)
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
            if (checkModeFromQt == 1)
 8001d78:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <main+0x240>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d10d      	bne.n	8001d9c <main+0x198>
            {
              control_PID_Position(&PID_contr, setpointQt, Kp_true, Ki_true, Kd_true);
 8001d80:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <main+0x23c>)
 8001d82:	6819      	ldr	r1, [r3, #0]
 8001d84:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <main+0x248>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <main+0x24c>)
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <main+0x250>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	4603      	mov	r3, r0
 8001d94:	4831      	ldr	r0, [pc, #196]	; (8001e5c <main+0x258>)
 8001d96:	f7ff fc3f 	bl	8001618 <control_PID_Position>
 8001d9a:	e010      	b.n	8001dbe <main+0x1ba>
            }
            else if (checkModeFromQt == 2)
 8001d9c:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <main+0x240>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d10c      	bne.n	8001dbe <main+0x1ba>
            {
              control_PID_Velocity(&PID_contr, setpointQt, Kp_true, Ki_true, Kd_true);
 8001da4:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <main+0x23c>)
 8001da6:	6819      	ldr	r1, [r3, #0]
 8001da8:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <main+0x248>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <main+0x24c>)
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <main+0x250>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	4603      	mov	r3, r0
 8001db8:	4828      	ldr	r0, [pc, #160]	; (8001e5c <main+0x258>)
 8001dba:	f7ff fcf9 	bl	80017b0 <control_PID_Velocity>
            }
            output_pid = 0;
 8001dbe:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <main+0x25c>)
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET); // ko co cai nay dong co no chi dung lai thui chu ko co het keu :)))
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dcc:	4825      	ldr	r0, [pc, #148]	; (8001e64 <main+0x260>)
 8001dce:	f001 fb3f 	bl	8003450 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dd8:	4822      	ldr	r0, [pc, #136]	; (8001e64 <main+0x260>)
 8001dda:	f001 fb39 	bl	8003450 <HAL_GPIO_WritePin>
            checkModeFromQt = 0; // do co ham nay = 0, nen phai set output_pid ve 0 luon do no ko nhay vo ham tinh output_pid tu Kp Ki Kd
 8001dde:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <main+0x240>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
            flagAccept = 0;
 8001de4:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <main+0x244>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
            break;
          }
        }
      }
      memset(data_uart, 0, uart_count);
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <main+0x220>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	2100      	movs	r1, #0
 8001df2:	480e      	ldr	r0, [pc, #56]	; (8001e2c <main+0x228>)
 8001df4:	f004 f85e 	bl	8005eb4 <memset>
      uart_flag = 0;
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <main+0x21c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
      uart_count = 0;
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <main+0x220>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
    real_data = 1;
 8001e04:	e723      	b.n	8001c4e <main+0x4a>
 8001e06:	bf00      	nop
 8001e08:	200002a0 	.word	0x200002a0
 8001e0c:	200002e8 	.word	0x200002e8
 8001e10:	20000258 	.word	0x20000258
 8001e14:	200004b2 	.word	0x200004b2
 8001e18:	20000330 	.word	0x20000330
 8001e1c:	20000001 	.word	0x20000001
 8001e20:	200004b4 	.word	0x200004b4
 8001e24:	200004b3 	.word	0x200004b3
 8001e28:	200004bc 	.word	0x200004bc
 8001e2c:	20000480 	.word	0x20000480
 8001e30:	2000045d 	.word	0x2000045d
 8001e34:	20000450 	.word	0x20000450
 8001e38:	20000454 	.word	0x20000454
 8001e3c:	20000471 	.word	0x20000471
 8001e40:	200004b8 	.word	0x200004b8
 8001e44:	20000431 	.word	0x20000431
 8001e48:	20000430 	.word	0x20000430
 8001e4c:	20000424 	.word	0x20000424
 8001e50:	20000428 	.word	0x20000428
 8001e54:	2000042c 	.word	0x2000042c
 8001e58:	20000440 	.word	0x20000440
 8001e5c:	20000434 	.word	0x20000434
 8001e60:	200003fc 	.word	0x200003fc
 8001e64:	40010c00 	.word	0x40010c00

08001e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b090      	sub	sp, #64	; 0x40
 8001e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e6e:	f107 0318 	add.w	r3, r7, #24
 8001e72:	2228      	movs	r2, #40	; 0x28
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f004 f81c 	bl	8005eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e92:	2310      	movs	r3, #16
 8001e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e96:	2302      	movs	r3, #2
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001e9e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea4:	f107 0318 	add.w	r3, r7, #24
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f001 fc2d 	bl	8003708 <HAL_RCC_OscConfig>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001eb4:	f000 fa0a 	bl	80022cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb8:	230f      	movs	r3, #15
 8001eba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f001 fe9a 	bl	8003c0c <HAL_RCC_ClockConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001ede:	f000 f9f5 	bl	80022cc <Error_Handler>
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	3740      	adds	r7, #64	; 0x40
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001ef2:	4a13      	ldr	r2, [pc, #76]	; (8001f40 <MX_I2C1_Init+0x54>)
 8001ef4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001ef8:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <MX_I2C1_Init+0x58>)
 8001efa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001efc:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001f0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <MX_I2C1_Init+0x50>)
 8001f2a:	f001 faa9 	bl	8003480 <HAL_I2C_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f34:	f000 f9ca 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000204 	.word	0x20000204
 8001f40:	40005400 	.word	0x40005400
 8001f44:	000186a0 	.word	0x000186a0

08001f48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b092      	sub	sp, #72	; 0x48
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
 8001f68:	615a      	str	r2, [r3, #20]
 8001f6a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	2220      	movs	r2, #32
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 ff9e 	bl	8005eb4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f78:	4b39      	ldr	r3, [pc, #228]	; (8002060 <MX_TIM1_Init+0x118>)
 8001f7a:	4a3a      	ldr	r2, [pc, #232]	; (8002064 <MX_TIM1_Init+0x11c>)
 8001f7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8001f7e:	4b38      	ldr	r3, [pc, #224]	; (8002060 <MX_TIM1_Init+0x118>)
 8001f80:	223f      	movs	r2, #63	; 0x3f
 8001f82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f84:	4b36      	ldr	r3, [pc, #216]	; (8002060 <MX_TIM1_Init+0x118>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001f8a:	4b35      	ldr	r3, [pc, #212]	; (8002060 <MX_TIM1_Init+0x118>)
 8001f8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f92:	4b33      	ldr	r3, [pc, #204]	; (8002060 <MX_TIM1_Init+0x118>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f98:	4b31      	ldr	r3, [pc, #196]	; (8002060 <MX_TIM1_Init+0x118>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9e:	4b30      	ldr	r3, [pc, #192]	; (8002060 <MX_TIM1_Init+0x118>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fa4:	482e      	ldr	r0, [pc, #184]	; (8002060 <MX_TIM1_Init+0x118>)
 8001fa6:	f002 f86b 	bl	8004080 <HAL_TIM_PWM_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001fb0:	f000 f98c 	bl	80022cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4827      	ldr	r0, [pc, #156]	; (8002060 <MX_TIM1_Init+0x118>)
 8001fc4:	f002 ffd0 	bl	8004f68 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001fce:	f000 f97d 	bl	80022cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fd2:	2360      	movs	r3, #96	; 0x60
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	481a      	ldr	r0, [pc, #104]	; (8002060 <MX_TIM1_Init+0x118>)
 8001ff8:	f002 fb6c 	bl	80046d4 <HAL_TIM_PWM_ConfigChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002002:	f000 f963 	bl	80022cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200a:	2208      	movs	r2, #8
 800200c:	4619      	mov	r1, r3
 800200e:	4814      	ldr	r0, [pc, #80]	; (8002060 <MX_TIM1_Init+0x118>)
 8002010:	f002 fb60 	bl	80046d4 <HAL_TIM_PWM_ConfigChannel>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800201a:	f000 f957 	bl	80022cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002032:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002036:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	4619      	mov	r1, r3
 8002040:	4807      	ldr	r0, [pc, #28]	; (8002060 <MX_TIM1_Init+0x118>)
 8002042:	f002 ffef 	bl	8005024 <HAL_TIMEx_ConfigBreakDeadTime>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800204c:	f000 f93e 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002050:	4803      	ldr	r0, [pc, #12]	; (8002060 <MX_TIM1_Init+0x118>)
 8002052:	f000 fa43 	bl	80024dc <HAL_TIM_MspPostInit>

}
 8002056:	bf00      	nop
 8002058:	3748      	adds	r7, #72	; 0x48
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000258 	.word	0x20000258
 8002064:	40012c00 	.word	0x40012c00

08002068 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08c      	sub	sp, #48	; 0x30
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800206e:	f107 030c 	add.w	r3, r7, #12
 8002072:	2224      	movs	r2, #36	; 0x24
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f003 ff1c 	bl	8005eb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002084:	4b21      	ldr	r3, [pc, #132]	; (800210c <MX_TIM2_Init+0xa4>)
 8002086:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800208a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800208c:	4b1f      	ldr	r3, [pc, #124]	; (800210c <MX_TIM2_Init+0xa4>)
 800208e:	2200      	movs	r2, #0
 8002090:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002092:	4b1e      	ldr	r3, [pc, #120]	; (800210c <MX_TIM2_Init+0xa4>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <MX_TIM2_Init+0xa4>)
 800209a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800209e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a0:	4b1a      	ldr	r3, [pc, #104]	; (800210c <MX_TIM2_Init+0xa4>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a6:	4b19      	ldr	r3, [pc, #100]	; (800210c <MX_TIM2_Init+0xa4>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020ac:	2303      	movs	r3, #3
 80020ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020b4:	2301      	movs	r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020c0:	2300      	movs	r3, #0
 80020c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020c4:	2301      	movs	r3, #1
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	4619      	mov	r1, r3
 80020d6:	480d      	ldr	r0, [pc, #52]	; (800210c <MX_TIM2_Init+0xa4>)
 80020d8:	f002 f8c4 	bl	8004264 <HAL_TIM_Encoder_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80020e2:	f000 f8f3 	bl	80022cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	4619      	mov	r1, r3
 80020f2:	4806      	ldr	r0, [pc, #24]	; (800210c <MX_TIM2_Init+0xa4>)
 80020f4:	f002 ff38 	bl	8004f68 <HAL_TIMEx_MasterConfigSynchronization>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80020fe:	f000 f8e5 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	3730      	adds	r7, #48	; 0x30
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	200002a0 	.word	0x200002a0

08002110 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002116:	f107 0308 	add.w	r3, r7, #8
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002124:	463b      	mov	r3, r7
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <MX_TIM3_Init+0x94>)
 800212e:	4a1e      	ldr	r2, [pc, #120]	; (80021a8 <MX_TIM3_Init+0x98>)
 8002130:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 8002132:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <MX_TIM3_Init+0x94>)
 8002134:	f240 227f 	movw	r2, #639	; 0x27f
 8002138:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <MX_TIM3_Init+0x94>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <MX_TIM3_Init+0x94>)
 8002142:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002146:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002148:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <MX_TIM3_Init+0x94>)
 800214a:	2200      	movs	r2, #0
 800214c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214e:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <MX_TIM3_Init+0x94>)
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002154:	4813      	ldr	r0, [pc, #76]	; (80021a4 <MX_TIM3_Init+0x94>)
 8002156:	f001 fef1 	bl	8003f3c <HAL_TIM_Base_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002160:	f000 f8b4 	bl	80022cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002168:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	4619      	mov	r1, r3
 8002170:	480c      	ldr	r0, [pc, #48]	; (80021a4 <MX_TIM3_Init+0x94>)
 8002172:	f002 fb6d 	bl	8004850 <HAL_TIM_ConfigClockSource>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800217c:	f000 f8a6 	bl	80022cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002180:	2300      	movs	r3, #0
 8002182:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002188:	463b      	mov	r3, r7
 800218a:	4619      	mov	r1, r3
 800218c:	4805      	ldr	r0, [pc, #20]	; (80021a4 <MX_TIM3_Init+0x94>)
 800218e:	f002 feeb 	bl	8004f68 <HAL_TIMEx_MasterConfigSynchronization>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002198:	f000 f898 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800219c:	bf00      	nop
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	200002e8 	.word	0x200002e8
 80021a8:	40000400 	.word	0x40000400

080021ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <MX_USART1_UART_Init+0x4c>)
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <MX_USART1_UART_Init+0x50>)
 80021b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <MX_USART1_UART_Init+0x4c>)
 80021b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <MX_USART1_UART_Init+0x4c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <MX_USART1_UART_Init+0x4c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <MX_USART1_UART_Init+0x4c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <MX_USART1_UART_Init+0x4c>)
 80021d2:	220c      	movs	r2, #12
 80021d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <MX_USART1_UART_Init+0x4c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <MX_USART1_UART_Init+0x4c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <MX_USART1_UART_Init+0x4c>)
 80021e4:	f002 ff81 	bl	80050ea <HAL_UART_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021ee:	f000 f86d 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000330 	.word	0x20000330
 80021fc:	40013800 	.word	0x40013800

08002200 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <MX_DMA_Init+0x48>)
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	4a0f      	ldr	r2, [pc, #60]	; (8002248 <MX_DMA_Init+0x48>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6153      	str	r3, [r2, #20]
 8002212:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <MX_DMA_Init+0x48>)
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	200e      	movs	r0, #14
 8002224:	f000 fcbb 	bl	8002b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002228:	200e      	movs	r0, #14
 800222a:	f000 fcd4 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	200f      	movs	r0, #15
 8002234:	f000 fcb3 	bl	8002b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002238:	200f      	movs	r0, #15
 800223a:	f000 fccc 	bl	8002bd6 <HAL_NVIC_EnableIRQ>

}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000

0800224c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002252:	f107 0308 	add.w	r3, r7, #8
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <MX_GPIO_Init+0x78>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <MX_GPIO_Init+0x78>)
 8002266:	f043 0304 	orr.w	r3, r3, #4
 800226a:	6193      	str	r3, [r2, #24]
 800226c:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <MX_GPIO_Init+0x78>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	607b      	str	r3, [r7, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <MX_GPIO_Init+0x78>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	4a11      	ldr	r2, [pc, #68]	; (80022c4 <MX_GPIO_Init+0x78>)
 800227e:	f043 0308 	orr.w	r3, r3, #8
 8002282:	6193      	str	r3, [r2, #24]
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <MX_GPIO_Init+0x78>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8002290:	2200      	movs	r2, #0
 8002292:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002296:	480c      	ldr	r0, [pc, #48]	; (80022c8 <MX_GPIO_Init+0x7c>)
 8002298:	f001 f8da 	bl	8003450 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 800229c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80022a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a2:	2301      	movs	r3, #1
 80022a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2302      	movs	r3, #2
 80022ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ae:	f107 0308 	add.w	r3, r7, #8
 80022b2:	4619      	mov	r1, r3
 80022b4:	4804      	ldr	r0, [pc, #16]	; (80022c8 <MX_GPIO_Init+0x7c>)
 80022b6:	f000 ff47 	bl	8003148 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022ba:	bf00      	nop
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40010c00 	.word	0x40010c00

080022cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022d0:	b672      	cpsid	i
}
 80022d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <Error_Handler+0x8>
	...

080022d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_MspInit+0x5c>)
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	4a14      	ldr	r2, [pc, #80]	; (8002334 <HAL_MspInit+0x5c>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6193      	str	r3, [r2, #24]
 80022ea:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_MspInit+0x5c>)
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <HAL_MspInit+0x5c>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <HAL_MspInit+0x5c>)
 80022fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002300:	61d3      	str	r3, [r2, #28]
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_MspInit+0x5c>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_MspInit+0x60>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	4a04      	ldr	r2, [pc, #16]	; (8002338 <HAL_MspInit+0x60>)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	40021000 	.word	0x40021000
 8002338:	40010000 	.word	0x40010000

0800233c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a1d      	ldr	r2, [pc, #116]	; (80023cc <HAL_I2C_MspInit+0x90>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d132      	bne.n	80023c2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235c:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <HAL_I2C_MspInit+0x94>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4a1b      	ldr	r2, [pc, #108]	; (80023d0 <HAL_I2C_MspInit+0x94>)
 8002362:	f043 0308 	orr.w	r3, r3, #8
 8002366:	6193      	str	r3, [r2, #24]
 8002368:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <HAL_I2C_MspInit+0x94>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002374:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800237a:	2312      	movs	r3, #18
 800237c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800237e:	2303      	movs	r3, #3
 8002380:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	4619      	mov	r1, r3
 8002388:	4812      	ldr	r0, [pc, #72]	; (80023d4 <HAL_I2C_MspInit+0x98>)
 800238a:	f000 fedd 	bl	8003148 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_I2C_MspInit+0x9c>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	f043 0302 	orr.w	r3, r3, #2
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
 80023a4:	4a0c      	ldr	r2, [pc, #48]	; (80023d8 <HAL_I2C_MspInit+0x9c>)
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <HAL_I2C_MspInit+0x94>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	4a08      	ldr	r2, [pc, #32]	; (80023d0 <HAL_I2C_MspInit+0x94>)
 80023b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023b4:	61d3      	str	r3, [r2, #28]
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_I2C_MspInit+0x94>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023c2:	bf00      	nop
 80023c4:	3728      	adds	r7, #40	; 0x28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40005400 	.word	0x40005400
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40010c00 	.word	0x40010c00
 80023d8:	40010000 	.word	0x40010000

080023dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a09      	ldr	r2, [pc, #36]	; (8002410 <HAL_TIM_PWM_MspInit+0x34>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d10b      	bne.n	8002406 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <HAL_TIM_PWM_MspInit+0x38>)
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	4a08      	ldr	r2, [pc, #32]	; (8002414 <HAL_TIM_PWM_MspInit+0x38>)
 80023f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023f8:	6193      	str	r3, [r2, #24]
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_TIM_PWM_MspInit+0x38>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	40012c00 	.word	0x40012c00
 8002414:	40021000 	.word	0x40021000

08002418 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 0310 	add.w	r3, r7, #16
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002436:	d123      	bne.n	8002480 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002438:	4b13      	ldr	r3, [pc, #76]	; (8002488 <HAL_TIM_Encoder_MspInit+0x70>)
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	4a12      	ldr	r2, [pc, #72]	; (8002488 <HAL_TIM_Encoder_MspInit+0x70>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	61d3      	str	r3, [r2, #28]
 8002444:	4b10      	ldr	r3, [pc, #64]	; (8002488 <HAL_TIM_Encoder_MspInit+0x70>)
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002450:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <HAL_TIM_Encoder_MspInit+0x70>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	4a0c      	ldr	r2, [pc, #48]	; (8002488 <HAL_TIM_Encoder_MspInit+0x70>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	6193      	str	r3, [r2, #24]
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_TIM_Encoder_MspInit+0x70>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_ENCODER1_Pin|TIM2_ENCODER2_Pin;
 8002468:	2303      	movs	r3, #3
 800246a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	4619      	mov	r1, r3
 800247a:	4804      	ldr	r0, [pc, #16]	; (800248c <HAL_TIM_Encoder_MspInit+0x74>)
 800247c:	f000 fe64 	bl	8003148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002480:	bf00      	nop
 8002482:	3720      	adds	r7, #32
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000
 800248c:	40010800 	.word	0x40010800

08002490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0d      	ldr	r2, [pc, #52]	; (80024d4 <HAL_TIM_Base_MspInit+0x44>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d113      	bne.n	80024ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <HAL_TIM_Base_MspInit+0x48>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4a0c      	ldr	r2, [pc, #48]	; (80024d8 <HAL_TIM_Base_MspInit+0x48>)
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	61d3      	str	r3, [r2, #28]
 80024ae:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <HAL_TIM_Base_MspInit+0x48>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2100      	movs	r1, #0
 80024be:	201d      	movs	r0, #29
 80024c0:	f000 fb6d 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024c4:	201d      	movs	r0, #29
 80024c6:	f000 fb86 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40000400 	.word	0x40000400
 80024d8:	40021000 	.word	0x40021000

080024dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 0310 	add.w	r3, r7, #16
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a10      	ldr	r2, [pc, #64]	; (8002538 <HAL_TIM_MspPostInit+0x5c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d118      	bne.n	800252e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <HAL_TIM_MspPostInit+0x60>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	4a0e      	ldr	r2, [pc, #56]	; (800253c <HAL_TIM_MspPostInit+0x60>)
 8002502:	f043 0304 	orr.w	r3, r3, #4
 8002506:	6193      	str	r3, [r2, #24]
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <HAL_TIM_MspPostInit+0x60>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_CH2_Pin|PWM_CH3_Pin;
 8002514:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2302      	movs	r3, #2
 8002520:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002522:	f107 0310 	add.w	r3, r7, #16
 8002526:	4619      	mov	r1, r3
 8002528:	4805      	ldr	r0, [pc, #20]	; (8002540 <HAL_TIM_MspPostInit+0x64>)
 800252a:	f000 fe0d 	bl	8003148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800252e:	bf00      	nop
 8002530:	3720      	adds	r7, #32
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40012c00 	.word	0x40012c00
 800253c:	40021000 	.word	0x40021000
 8002540:	40010800 	.word	0x40010800

08002544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a4d      	ldr	r2, [pc, #308]	; (8002694 <HAL_UART_MspInit+0x150>)
 8002560:	4293      	cmp	r3, r2
 8002562:	f040 8092 	bne.w	800268a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002566:	4b4c      	ldr	r3, [pc, #304]	; (8002698 <HAL_UART_MspInit+0x154>)
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	4a4b      	ldr	r2, [pc, #300]	; (8002698 <HAL_UART_MspInit+0x154>)
 800256c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002570:	6193      	str	r3, [r2, #24]
 8002572:	4b49      	ldr	r3, [pc, #292]	; (8002698 <HAL_UART_MspInit+0x154>)
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800257e:	4b46      	ldr	r3, [pc, #280]	; (8002698 <HAL_UART_MspInit+0x154>)
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	4a45      	ldr	r2, [pc, #276]	; (8002698 <HAL_UART_MspInit+0x154>)
 8002584:	f043 0308 	orr.w	r3, r3, #8
 8002588:	6193      	str	r3, [r2, #24]
 800258a:	4b43      	ldr	r3, [pc, #268]	; (8002698 <HAL_UART_MspInit+0x154>)
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002596:	2340      	movs	r3, #64	; 0x40
 8002598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2302      	movs	r3, #2
 800259c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800259e:	2303      	movs	r3, #3
 80025a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	4619      	mov	r1, r3
 80025a8:	483c      	ldr	r0, [pc, #240]	; (800269c <HAL_UART_MspInit+0x158>)
 80025aa:	f000 fdcd 	bl	8003148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025b6:	2301      	movs	r3, #1
 80025b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4619      	mov	r1, r3
 80025c0:	4836      	ldr	r0, [pc, #216]	; (800269c <HAL_UART_MspInit+0x158>)
 80025c2:	f000 fdc1 	bl	8003148 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80025c6:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <HAL_UART_MspInit+0x15c>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	f043 0304 	orr.w	r3, r3, #4
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
 80025dc:	4a30      	ldr	r2, [pc, #192]	; (80026a0 <HAL_UART_MspInit+0x15c>)
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80025e2:	4b30      	ldr	r3, [pc, #192]	; (80026a4 <HAL_UART_MspInit+0x160>)
 80025e4:	4a30      	ldr	r2, [pc, #192]	; (80026a8 <HAL_UART_MspInit+0x164>)
 80025e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025e8:	4b2e      	ldr	r3, [pc, #184]	; (80026a4 <HAL_UART_MspInit+0x160>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ee:	4b2d      	ldr	r3, [pc, #180]	; (80026a4 <HAL_UART_MspInit+0x160>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025f4:	4b2b      	ldr	r3, [pc, #172]	; (80026a4 <HAL_UART_MspInit+0x160>)
 80025f6:	2280      	movs	r2, #128	; 0x80
 80025f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025fa:	4b2a      	ldr	r3, [pc, #168]	; (80026a4 <HAL_UART_MspInit+0x160>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002600:	4b28      	ldr	r3, [pc, #160]	; (80026a4 <HAL_UART_MspInit+0x160>)
 8002602:	2200      	movs	r2, #0
 8002604:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002606:	4b27      	ldr	r3, [pc, #156]	; (80026a4 <HAL_UART_MspInit+0x160>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800260c:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <HAL_UART_MspInit+0x160>)
 800260e:	2200      	movs	r2, #0
 8002610:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002612:	4824      	ldr	r0, [pc, #144]	; (80026a4 <HAL_UART_MspInit+0x160>)
 8002614:	f000 fafa 	bl	8002c0c <HAL_DMA_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 800261e:	f7ff fe55 	bl	80022cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a1f      	ldr	r2, [pc, #124]	; (80026a4 <HAL_UART_MspInit+0x160>)
 8002626:	639a      	str	r2, [r3, #56]	; 0x38
 8002628:	4a1e      	ldr	r2, [pc, #120]	; (80026a4 <HAL_UART_MspInit+0x160>)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800262e:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <HAL_UART_MspInit+0x168>)
 8002630:	4a1f      	ldr	r2, [pc, #124]	; (80026b0 <HAL_UART_MspInit+0x16c>)
 8002632:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <HAL_UART_MspInit+0x168>)
 8002636:	2210      	movs	r2, #16
 8002638:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800263a:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <HAL_UART_MspInit+0x168>)
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <HAL_UART_MspInit+0x168>)
 8002642:	2280      	movs	r2, #128	; 0x80
 8002644:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_UART_MspInit+0x168>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800264c:	4b17      	ldr	r3, [pc, #92]	; (80026ac <HAL_UART_MspInit+0x168>)
 800264e:	2200      	movs	r2, #0
 8002650:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002652:	4b16      	ldr	r3, [pc, #88]	; (80026ac <HAL_UART_MspInit+0x168>)
 8002654:	2200      	movs	r2, #0
 8002656:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002658:	4b14      	ldr	r3, [pc, #80]	; (80026ac <HAL_UART_MspInit+0x168>)
 800265a:	2200      	movs	r2, #0
 800265c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800265e:	4813      	ldr	r0, [pc, #76]	; (80026ac <HAL_UART_MspInit+0x168>)
 8002660:	f000 fad4 	bl	8002c0c <HAL_DMA_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800266a:	f7ff fe2f 	bl	80022cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <HAL_UART_MspInit+0x168>)
 8002672:	635a      	str	r2, [r3, #52]	; 0x34
 8002674:	4a0d      	ldr	r2, [pc, #52]	; (80026ac <HAL_UART_MspInit+0x168>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	2025      	movs	r0, #37	; 0x25
 8002680:	f000 fa8d 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002684:	2025      	movs	r0, #37	; 0x25
 8002686:	f000 faa6 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800268a:	bf00      	nop
 800268c:	3728      	adds	r7, #40	; 0x28
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40013800 	.word	0x40013800
 8002698:	40021000 	.word	0x40021000
 800269c:	40010c00 	.word	0x40010c00
 80026a0:	40010000 	.word	0x40010000
 80026a4:	20000374 	.word	0x20000374
 80026a8:	40020058 	.word	0x40020058
 80026ac:	200003b8 	.word	0x200003b8
 80026b0:	40020044 	.word	0x40020044

080026b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <NMI_Handler+0x4>

080026ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026be:	e7fe      	b.n	80026be <HardFault_Handler+0x4>

080026c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <MemManage_Handler+0x4>

080026c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ca:	e7fe      	b.n	80026ca <BusFault_Handler+0x4>

080026cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d0:	e7fe      	b.n	80026d0 <UsageFault_Handler+0x4>

080026d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ea:	b480      	push	{r7}
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr

080026f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026fa:	f000 f95d 	bl	80029b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002708:	4802      	ldr	r0, [pc, #8]	; (8002714 <DMA1_Channel4_IRQHandler+0x10>)
 800270a:	f000 fbe9 	bl	8002ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200003b8 	.word	0x200003b8

08002718 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800271c:	4802      	ldr	r0, [pc, #8]	; (8002728 <DMA1_Channel5_IRQHandler+0x10>)
 800271e:	f000 fbdf 	bl	8002ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000374 	.word	0x20000374

0800272c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002730:	4802      	ldr	r0, [pc, #8]	; (800273c <TIM3_IRQHandler+0x10>)
 8002732:	f001 fec7 	bl	80044c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	200002e8 	.word	0x200002e8

08002740 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002744:	4802      	ldr	r0, [pc, #8]	; (8002750 <USART1_IRQHandler+0x10>)
 8002746:	f002 fdb9 	bl	80052bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000330 	.word	0x20000330

08002754 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return 1;
 8002758:	2301      	movs	r3, #1
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <_kill>:

int _kill(int pid, int sig)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800276c:	f003 fb5a 	bl	8005e24 <__errno>
 8002770:	4603      	mov	r3, r0
 8002772:	2216      	movs	r2, #22
 8002774:	601a      	str	r2, [r3, #0]
  return -1;
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <_exit>:

void _exit (int status)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800278a:	f04f 31ff 	mov.w	r1, #4294967295
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ffe7 	bl	8002762 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002794:	e7fe      	b.n	8002794 <_exit+0x12>

08002796 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	e00a      	b.n	80027be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027a8:	f3af 8000 	nop.w
 80027ac:	4601      	mov	r1, r0
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	60ba      	str	r2, [r7, #8]
 80027b4:	b2ca      	uxtb	r2, r1
 80027b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	3301      	adds	r3, #1
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	dbf0      	blt.n	80027a8 <_read+0x12>
  }

  return len;
 80027c6:	687b      	ldr	r3, [r7, #4]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	e009      	b.n	80027f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	60ba      	str	r2, [r7, #8]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	3301      	adds	r3, #1
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	dbf1      	blt.n	80027e2 <_write+0x12>
  }
  return len;
 80027fe:	687b      	ldr	r3, [r7, #4]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <_close>:

int _close(int file)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002810:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800282e:	605a      	str	r2, [r3, #4]
  return 0;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <_isatty>:

int _isatty(int file)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002844:	2301      	movs	r3, #1
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end;             /* Symbol defined in the linker script */
  extern uint8_t _estack;          /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002870:	4a14      	ldr	r2, [pc, #80]	; (80028c4 <_sbrk+0x5c>)
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <_sbrk+0x60>)
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800287c:	4b13      	ldr	r3, [pc, #76]	; (80028cc <_sbrk+0x64>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <_sbrk+0x64>)
 8002886:	4a12      	ldr	r2, [pc, #72]	; (80028d0 <_sbrk+0x68>)
 8002888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <_sbrk+0x64>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	429a      	cmp	r2, r3
 8002896:	d207      	bcs.n	80028a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002898:	f003 fac4 	bl	8005e24 <__errno>
 800289c:	4603      	mov	r3, r0
 800289e:	220c      	movs	r2, #12
 80028a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
 80028a6:	e009      	b.n	80028bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028a8:	4b08      	ldr	r3, [pc, #32]	; (80028cc <_sbrk+0x64>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ae:	4b07      	ldr	r3, [pc, #28]	; (80028cc <_sbrk+0x64>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	4a05      	ldr	r2, [pc, #20]	; (80028cc <_sbrk+0x64>)
 80028b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ba:	68fb      	ldr	r3, [r7, #12]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20005000 	.word	0x20005000
 80028c8:	00000400 	.word	0x00000400
 80028cc:	20000478 	.word	0x20000478
 80028d0:	20000500 	.word	0x20000500

080028d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e0:	480c      	ldr	r0, [pc, #48]	; (8002914 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028e2:	490d      	ldr	r1, [pc, #52]	; (8002918 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028e4:	4a0d      	ldr	r2, [pc, #52]	; (800291c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e8:	e002      	b.n	80028f0 <LoopCopyDataInit>

080028ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ee:	3304      	adds	r3, #4

080028f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f4:	d3f9      	bcc.n	80028ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028f8:	4c0a      	ldr	r4, [pc, #40]	; (8002924 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028fc:	e001      	b.n	8002902 <LoopFillZerobss>

080028fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002900:	3204      	adds	r2, #4

08002902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002904:	d3fb      	bcc.n	80028fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002906:	f7ff ffe5 	bl	80028d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800290a:	f003 fa91 	bl	8005e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800290e:	f7ff f979 	bl	8001c04 <main>
  bx lr
 8002912:	4770      	bx	lr
  ldr r0, =_sdata
 8002914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002918:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800291c:	0800ade4 	.word	0x0800ade4
  ldr r2, =_sbss
 8002920:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002924:	20000500 	.word	0x20000500

08002928 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002928:	e7fe      	b.n	8002928 <ADC1_2_IRQHandler>
	...

0800292c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <HAL_Init+0x28>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a07      	ldr	r2, [pc, #28]	; (8002954 <HAL_Init+0x28>)
 8002936:	f043 0310 	orr.w	r3, r3, #16
 800293a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800293c:	2003      	movs	r0, #3
 800293e:	f000 f923 	bl	8002b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002942:	200f      	movs	r0, #15
 8002944:	f000 f808 	bl	8002958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002948:	f7ff fcc6 	bl	80022d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40022000 	.word	0x40022000

08002958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <HAL_InitTick+0x54>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_InitTick+0x58>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800296e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002972:	fbb2 f3f3 	udiv	r3, r2, r3
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f93b 	bl	8002bf2 <HAL_SYSTICK_Config>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e00e      	b.n	80029a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b0f      	cmp	r3, #15
 800298a:	d80a      	bhi.n	80029a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800298c:	2200      	movs	r2, #0
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	f04f 30ff 	mov.w	r0, #4294967295
 8002994:	f000 f903 	bl	8002b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002998:	4a06      	ldr	r2, [pc, #24]	; (80029b4 <HAL_InitTick+0x5c>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	e000      	b.n	80029a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000008 	.word	0x20000008
 80029b0:	20000010 	.word	0x20000010
 80029b4:	2000000c 	.word	0x2000000c

080029b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_IncTick+0x1c>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_IncTick+0x20>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	4a03      	ldr	r2, [pc, #12]	; (80029d8 <HAL_IncTick+0x20>)
 80029ca:	6013      	str	r3, [r2, #0]
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	20000010 	.word	0x20000010
 80029d8:	2000047c 	.word	0x2000047c

080029dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return uwTick;
 80029e0:	4b02      	ldr	r3, [pc, #8]	; (80029ec <HAL_GetTick+0x10>)
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	2000047c 	.word	0x2000047c

080029f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a22:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	60d3      	str	r3, [r2, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <__NVIC_GetPriorityGrouping+0x18>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	0a1b      	lsrs	r3, r3, #8
 8002a42:	f003 0307 	and.w	r3, r3, #7
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	db0b      	blt.n	8002a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	f003 021f 	and.w	r2, r3, #31
 8002a6c:	4906      	ldr	r1, [pc, #24]	; (8002a88 <__NVIC_EnableIRQ+0x34>)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	2001      	movs	r0, #1
 8002a76:	fa00 f202 	lsl.w	r2, r0, r2
 8002a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	e000e100 	.word	0xe000e100

08002a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	6039      	str	r1, [r7, #0]
 8002a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	db0a      	blt.n	8002ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	490c      	ldr	r1, [pc, #48]	; (8002ad8 <__NVIC_SetPriority+0x4c>)
 8002aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aaa:	0112      	lsls	r2, r2, #4
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	440b      	add	r3, r1
 8002ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab4:	e00a      	b.n	8002acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	4908      	ldr	r1, [pc, #32]	; (8002adc <__NVIC_SetPriority+0x50>)
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	3b04      	subs	r3, #4
 8002ac4:	0112      	lsls	r2, r2, #4
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	440b      	add	r3, r1
 8002aca:	761a      	strb	r2, [r3, #24]
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000e100 	.word	0xe000e100
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b089      	sub	sp, #36	; 0x24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f1c3 0307 	rsb	r3, r3, #7
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	bf28      	it	cs
 8002afe:	2304      	movcs	r3, #4
 8002b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3304      	adds	r3, #4
 8002b06:	2b06      	cmp	r3, #6
 8002b08:	d902      	bls.n	8002b10 <NVIC_EncodePriority+0x30>
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3b03      	subs	r3, #3
 8002b0e:	e000      	b.n	8002b12 <NVIC_EncodePriority+0x32>
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b14:	f04f 32ff 	mov.w	r2, #4294967295
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43da      	mvns	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	401a      	ands	r2, r3
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b28:	f04f 31ff 	mov.w	r1, #4294967295
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b32:	43d9      	mvns	r1, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b38:	4313      	orrs	r3, r2
         );
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3724      	adds	r7, #36	; 0x24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b54:	d301      	bcc.n	8002b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b56:	2301      	movs	r3, #1
 8002b58:	e00f      	b.n	8002b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <SysTick_Config+0x40>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b62:	210f      	movs	r1, #15
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	f7ff ff90 	bl	8002a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <SysTick_Config+0x40>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b72:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <SysTick_Config+0x40>)
 8002b74:	2207      	movs	r2, #7
 8002b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	e000e010 	.word	0xe000e010

08002b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff ff2d 	bl	80029f0 <__NVIC_SetPriorityGrouping>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb0:	f7ff ff42 	bl	8002a38 <__NVIC_GetPriorityGrouping>
 8002bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	6978      	ldr	r0, [r7, #20]
 8002bbc:	f7ff ff90 	bl	8002ae0 <NVIC_EncodePriority>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff5f 	bl	8002a8c <__NVIC_SetPriority>
}
 8002bce:	bf00      	nop
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff35 	bl	8002a54 <__NVIC_EnableIRQ>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ffa2 	bl	8002b44 <SysTick_Config>
 8002c00:	4603      	mov	r3, r0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e043      	b.n	8002caa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <HAL_DMA_Init+0xa8>)
 8002c2a:	4413      	add	r3, r2
 8002c2c:	4a22      	ldr	r2, [pc, #136]	; (8002cb8 <HAL_DMA_Init+0xac>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	091b      	lsrs	r3, r3, #4
 8002c34:	009a      	lsls	r2, r3, #2
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a1f      	ldr	r2, [pc, #124]	; (8002cbc <HAL_DMA_Init+0xb0>)
 8002c3e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c56:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	bffdfff8 	.word	0xbffdfff8
 8002cb8:	cccccccd 	.word	0xcccccccd
 8002cbc:	40020000 	.word	0x40020000

08002cc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_DMA_Start_IT+0x20>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e04a      	b.n	8002d76 <HAL_DMA_Start_IT+0xb6>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d13a      	bne.n	8002d68 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68b9      	ldr	r1, [r7, #8]
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f9e8 	bl	80030ec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 020e 	orr.w	r2, r2, #14
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	e00f      	b.n	8002d56 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0204 	bic.w	r2, r2, #4
 8002d44:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 020a 	orr.w	r2, r2, #10
 8002d54:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0201 	orr.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e005      	b.n	8002d74 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d70:	2302      	movs	r3, #2
 8002d72:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b085      	sub	sp, #20
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d008      	beq.n	8002da6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2204      	movs	r2, #4
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e020      	b.n	8002de8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 020e 	bic.w	r2, r2, #14
 8002db4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0201 	bic.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dce:	2101      	movs	r1, #1
 8002dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
	...

08002df4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d005      	beq.n	8002e16 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
 8002e14:	e051      	b.n	8002eba <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 020e 	bic.w	r2, r2, #14
 8002e24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0201 	bic.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a22      	ldr	r2, [pc, #136]	; (8002ec4 <HAL_DMA_Abort_IT+0xd0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d029      	beq.n	8002e94 <HAL_DMA_Abort_IT+0xa0>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a20      	ldr	r2, [pc, #128]	; (8002ec8 <HAL_DMA_Abort_IT+0xd4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d022      	beq.n	8002e90 <HAL_DMA_Abort_IT+0x9c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1f      	ldr	r2, [pc, #124]	; (8002ecc <HAL_DMA_Abort_IT+0xd8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d01a      	beq.n	8002e8a <HAL_DMA_Abort_IT+0x96>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a1d      	ldr	r2, [pc, #116]	; (8002ed0 <HAL_DMA_Abort_IT+0xdc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d012      	beq.n	8002e84 <HAL_DMA_Abort_IT+0x90>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a1c      	ldr	r2, [pc, #112]	; (8002ed4 <HAL_DMA_Abort_IT+0xe0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00a      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x8a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a1a      	ldr	r2, [pc, #104]	; (8002ed8 <HAL_DMA_Abort_IT+0xe4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d102      	bne.n	8002e78 <HAL_DMA_Abort_IT+0x84>
 8002e72:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e76:	e00e      	b.n	8002e96 <HAL_DMA_Abort_IT+0xa2>
 8002e78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e7c:	e00b      	b.n	8002e96 <HAL_DMA_Abort_IT+0xa2>
 8002e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e82:	e008      	b.n	8002e96 <HAL_DMA_Abort_IT+0xa2>
 8002e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e88:	e005      	b.n	8002e96 <HAL_DMA_Abort_IT+0xa2>
 8002e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e8e:	e002      	b.n	8002e96 <HAL_DMA_Abort_IT+0xa2>
 8002e90:	2310      	movs	r3, #16
 8002e92:	e000      	b.n	8002e96 <HAL_DMA_Abort_IT+0xa2>
 8002e94:	2301      	movs	r3, #1
 8002e96:	4a11      	ldr	r2, [pc, #68]	; (8002edc <HAL_DMA_Abort_IT+0xe8>)
 8002e98:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	4798      	blx	r3
    } 
  }
  return status;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40020008 	.word	0x40020008
 8002ec8:	4002001c 	.word	0x4002001c
 8002ecc:	40020030 	.word	0x40020030
 8002ed0:	40020044 	.word	0x40020044
 8002ed4:	40020058 	.word	0x40020058
 8002ed8:	4002006c 	.word	0x4002006c
 8002edc:	40020000 	.word	0x40020000

08002ee0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	2204      	movs	r2, #4
 8002efe:	409a      	lsls	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d04f      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0xc8>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d04a      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d107      	bne.n	8002f30 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0204 	bic.w	r2, r2, #4
 8002f2e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a66      	ldr	r2, [pc, #408]	; (80030d0 <HAL_DMA_IRQHandler+0x1f0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d029      	beq.n	8002f8e <HAL_DMA_IRQHandler+0xae>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a65      	ldr	r2, [pc, #404]	; (80030d4 <HAL_DMA_IRQHandler+0x1f4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d022      	beq.n	8002f8a <HAL_DMA_IRQHandler+0xaa>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a63      	ldr	r2, [pc, #396]	; (80030d8 <HAL_DMA_IRQHandler+0x1f8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d01a      	beq.n	8002f84 <HAL_DMA_IRQHandler+0xa4>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a62      	ldr	r2, [pc, #392]	; (80030dc <HAL_DMA_IRQHandler+0x1fc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d012      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x9e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a60      	ldr	r2, [pc, #384]	; (80030e0 <HAL_DMA_IRQHandler+0x200>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00a      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x98>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a5f      	ldr	r2, [pc, #380]	; (80030e4 <HAL_DMA_IRQHandler+0x204>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d102      	bne.n	8002f72 <HAL_DMA_IRQHandler+0x92>
 8002f6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f70:	e00e      	b.n	8002f90 <HAL_DMA_IRQHandler+0xb0>
 8002f72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002f76:	e00b      	b.n	8002f90 <HAL_DMA_IRQHandler+0xb0>
 8002f78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f7c:	e008      	b.n	8002f90 <HAL_DMA_IRQHandler+0xb0>
 8002f7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f82:	e005      	b.n	8002f90 <HAL_DMA_IRQHandler+0xb0>
 8002f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f88:	e002      	b.n	8002f90 <HAL_DMA_IRQHandler+0xb0>
 8002f8a:	2340      	movs	r3, #64	; 0x40
 8002f8c:	e000      	b.n	8002f90 <HAL_DMA_IRQHandler+0xb0>
 8002f8e:	2304      	movs	r3, #4
 8002f90:	4a55      	ldr	r2, [pc, #340]	; (80030e8 <HAL_DMA_IRQHandler+0x208>)
 8002f92:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8094 	beq.w	80030c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002fa6:	e08e      	b.n	80030c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	2202      	movs	r2, #2
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d056      	beq.n	8003066 <HAL_DMA_IRQHandler+0x186>
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d051      	beq.n	8003066 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0320 	and.w	r3, r3, #32
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10b      	bne.n	8002fe8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 020a 	bic.w	r2, r2, #10
 8002fde:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a38      	ldr	r2, [pc, #224]	; (80030d0 <HAL_DMA_IRQHandler+0x1f0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d029      	beq.n	8003046 <HAL_DMA_IRQHandler+0x166>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a37      	ldr	r2, [pc, #220]	; (80030d4 <HAL_DMA_IRQHandler+0x1f4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d022      	beq.n	8003042 <HAL_DMA_IRQHandler+0x162>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a35      	ldr	r2, [pc, #212]	; (80030d8 <HAL_DMA_IRQHandler+0x1f8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d01a      	beq.n	800303c <HAL_DMA_IRQHandler+0x15c>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a34      	ldr	r2, [pc, #208]	; (80030dc <HAL_DMA_IRQHandler+0x1fc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d012      	beq.n	8003036 <HAL_DMA_IRQHandler+0x156>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a32      	ldr	r2, [pc, #200]	; (80030e0 <HAL_DMA_IRQHandler+0x200>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00a      	beq.n	8003030 <HAL_DMA_IRQHandler+0x150>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a31      	ldr	r2, [pc, #196]	; (80030e4 <HAL_DMA_IRQHandler+0x204>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d102      	bne.n	800302a <HAL_DMA_IRQHandler+0x14a>
 8003024:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003028:	e00e      	b.n	8003048 <HAL_DMA_IRQHandler+0x168>
 800302a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800302e:	e00b      	b.n	8003048 <HAL_DMA_IRQHandler+0x168>
 8003030:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003034:	e008      	b.n	8003048 <HAL_DMA_IRQHandler+0x168>
 8003036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800303a:	e005      	b.n	8003048 <HAL_DMA_IRQHandler+0x168>
 800303c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003040:	e002      	b.n	8003048 <HAL_DMA_IRQHandler+0x168>
 8003042:	2320      	movs	r3, #32
 8003044:	e000      	b.n	8003048 <HAL_DMA_IRQHandler+0x168>
 8003046:	2302      	movs	r3, #2
 8003048:	4a27      	ldr	r2, [pc, #156]	; (80030e8 <HAL_DMA_IRQHandler+0x208>)
 800304a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	2b00      	cmp	r3, #0
 800305a:	d034      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003064:	e02f      	b.n	80030c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	2208      	movs	r2, #8
 800306c:	409a      	lsls	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4013      	ands	r3, r2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d028      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x1e8>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d023      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 020e 	bic.w	r2, r2, #14
 800308e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003098:	2101      	movs	r1, #1
 800309a:	fa01 f202 	lsl.w	r2, r1, r2
 800309e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d004      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
    }
  }
  return;
 80030c6:	bf00      	nop
 80030c8:	bf00      	nop
}
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40020008 	.word	0x40020008
 80030d4:	4002001c 	.word	0x4002001c
 80030d8:	40020030 	.word	0x40020030
 80030dc:	40020044 	.word	0x40020044
 80030e0:	40020058 	.word	0x40020058
 80030e4:	4002006c 	.word	0x4002006c
 80030e8:	40020000 	.word	0x40020000

080030ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	2101      	movs	r1, #1
 8003104:	fa01 f202 	lsl.w	r2, r1, r2
 8003108:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b10      	cmp	r3, #16
 8003118:	d108      	bne.n	800312c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800312a:	e007      	b.n	800313c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	60da      	str	r2, [r3, #12]
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr
	...

08003148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003148:	b480      	push	{r7}
 800314a:	b08b      	sub	sp, #44	; 0x2c
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003152:	2300      	movs	r3, #0
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003156:	2300      	movs	r3, #0
 8003158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800315a:	e169      	b.n	8003430 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800315c:	2201      	movs	r2, #1
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	429a      	cmp	r2, r3
 8003176:	f040 8158 	bne.w	800342a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4a9a      	ldr	r2, [pc, #616]	; (80033e8 <HAL_GPIO_Init+0x2a0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d05e      	beq.n	8003242 <HAL_GPIO_Init+0xfa>
 8003184:	4a98      	ldr	r2, [pc, #608]	; (80033e8 <HAL_GPIO_Init+0x2a0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d875      	bhi.n	8003276 <HAL_GPIO_Init+0x12e>
 800318a:	4a98      	ldr	r2, [pc, #608]	; (80033ec <HAL_GPIO_Init+0x2a4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d058      	beq.n	8003242 <HAL_GPIO_Init+0xfa>
 8003190:	4a96      	ldr	r2, [pc, #600]	; (80033ec <HAL_GPIO_Init+0x2a4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d86f      	bhi.n	8003276 <HAL_GPIO_Init+0x12e>
 8003196:	4a96      	ldr	r2, [pc, #600]	; (80033f0 <HAL_GPIO_Init+0x2a8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d052      	beq.n	8003242 <HAL_GPIO_Init+0xfa>
 800319c:	4a94      	ldr	r2, [pc, #592]	; (80033f0 <HAL_GPIO_Init+0x2a8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d869      	bhi.n	8003276 <HAL_GPIO_Init+0x12e>
 80031a2:	4a94      	ldr	r2, [pc, #592]	; (80033f4 <HAL_GPIO_Init+0x2ac>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d04c      	beq.n	8003242 <HAL_GPIO_Init+0xfa>
 80031a8:	4a92      	ldr	r2, [pc, #584]	; (80033f4 <HAL_GPIO_Init+0x2ac>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d863      	bhi.n	8003276 <HAL_GPIO_Init+0x12e>
 80031ae:	4a92      	ldr	r2, [pc, #584]	; (80033f8 <HAL_GPIO_Init+0x2b0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d046      	beq.n	8003242 <HAL_GPIO_Init+0xfa>
 80031b4:	4a90      	ldr	r2, [pc, #576]	; (80033f8 <HAL_GPIO_Init+0x2b0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d85d      	bhi.n	8003276 <HAL_GPIO_Init+0x12e>
 80031ba:	2b12      	cmp	r3, #18
 80031bc:	d82a      	bhi.n	8003214 <HAL_GPIO_Init+0xcc>
 80031be:	2b12      	cmp	r3, #18
 80031c0:	d859      	bhi.n	8003276 <HAL_GPIO_Init+0x12e>
 80031c2:	a201      	add	r2, pc, #4	; (adr r2, 80031c8 <HAL_GPIO_Init+0x80>)
 80031c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c8:	08003243 	.word	0x08003243
 80031cc:	0800321d 	.word	0x0800321d
 80031d0:	0800322f 	.word	0x0800322f
 80031d4:	08003271 	.word	0x08003271
 80031d8:	08003277 	.word	0x08003277
 80031dc:	08003277 	.word	0x08003277
 80031e0:	08003277 	.word	0x08003277
 80031e4:	08003277 	.word	0x08003277
 80031e8:	08003277 	.word	0x08003277
 80031ec:	08003277 	.word	0x08003277
 80031f0:	08003277 	.word	0x08003277
 80031f4:	08003277 	.word	0x08003277
 80031f8:	08003277 	.word	0x08003277
 80031fc:	08003277 	.word	0x08003277
 8003200:	08003277 	.word	0x08003277
 8003204:	08003277 	.word	0x08003277
 8003208:	08003277 	.word	0x08003277
 800320c:	08003225 	.word	0x08003225
 8003210:	08003239 	.word	0x08003239
 8003214:	4a79      	ldr	r2, [pc, #484]	; (80033fc <HAL_GPIO_Init+0x2b4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800321a:	e02c      	b.n	8003276 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	623b      	str	r3, [r7, #32]
          break;
 8003222:	e029      	b.n	8003278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	3304      	adds	r3, #4
 800322a:	623b      	str	r3, [r7, #32]
          break;
 800322c:	e024      	b.n	8003278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	3308      	adds	r3, #8
 8003234:	623b      	str	r3, [r7, #32]
          break;
 8003236:	e01f      	b.n	8003278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	330c      	adds	r3, #12
 800323e:	623b      	str	r3, [r7, #32]
          break;
 8003240:	e01a      	b.n	8003278 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800324a:	2304      	movs	r3, #4
 800324c:	623b      	str	r3, [r7, #32]
          break;
 800324e:	e013      	b.n	8003278 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d105      	bne.n	8003264 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003258:	2308      	movs	r3, #8
 800325a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	611a      	str	r2, [r3, #16]
          break;
 8003262:	e009      	b.n	8003278 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003264:	2308      	movs	r3, #8
 8003266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	615a      	str	r2, [r3, #20]
          break;
 800326e:	e003      	b.n	8003278 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003270:	2300      	movs	r3, #0
 8003272:	623b      	str	r3, [r7, #32]
          break;
 8003274:	e000      	b.n	8003278 <HAL_GPIO_Init+0x130>
          break;
 8003276:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2bff      	cmp	r3, #255	; 0xff
 800327c:	d801      	bhi.n	8003282 <HAL_GPIO_Init+0x13a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	e001      	b.n	8003286 <HAL_GPIO_Init+0x13e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3304      	adds	r3, #4
 8003286:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	2bff      	cmp	r3, #255	; 0xff
 800328c:	d802      	bhi.n	8003294 <HAL_GPIO_Init+0x14c>
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	e002      	b.n	800329a <HAL_GPIO_Init+0x152>
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	3b08      	subs	r3, #8
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	210f      	movs	r1, #15
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	401a      	ands	r2, r3
 80032ac:	6a39      	ldr	r1, [r7, #32]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	fa01 f303 	lsl.w	r3, r1, r3
 80032b4:	431a      	orrs	r2, r3
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 80b1 	beq.w	800342a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032c8:	4b4d      	ldr	r3, [pc, #308]	; (8003400 <HAL_GPIO_Init+0x2b8>)
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	4a4c      	ldr	r2, [pc, #304]	; (8003400 <HAL_GPIO_Init+0x2b8>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6193      	str	r3, [r2, #24]
 80032d4:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <HAL_GPIO_Init+0x2b8>)
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032e0:	4a48      	ldr	r2, [pc, #288]	; (8003404 <HAL_GPIO_Init+0x2bc>)
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	089b      	lsrs	r3, r3, #2
 80032e6:	3302      	adds	r3, #2
 80032e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	220f      	movs	r2, #15
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4013      	ands	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a40      	ldr	r2, [pc, #256]	; (8003408 <HAL_GPIO_Init+0x2c0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d013      	beq.n	8003334 <HAL_GPIO_Init+0x1ec>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a3f      	ldr	r2, [pc, #252]	; (800340c <HAL_GPIO_Init+0x2c4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00d      	beq.n	8003330 <HAL_GPIO_Init+0x1e8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a3e      	ldr	r2, [pc, #248]	; (8003410 <HAL_GPIO_Init+0x2c8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d007      	beq.n	800332c <HAL_GPIO_Init+0x1e4>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a3d      	ldr	r2, [pc, #244]	; (8003414 <HAL_GPIO_Init+0x2cc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <HAL_GPIO_Init+0x1e0>
 8003324:	2303      	movs	r3, #3
 8003326:	e006      	b.n	8003336 <HAL_GPIO_Init+0x1ee>
 8003328:	2304      	movs	r3, #4
 800332a:	e004      	b.n	8003336 <HAL_GPIO_Init+0x1ee>
 800332c:	2302      	movs	r3, #2
 800332e:	e002      	b.n	8003336 <HAL_GPIO_Init+0x1ee>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_GPIO_Init+0x1ee>
 8003334:	2300      	movs	r3, #0
 8003336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003338:	f002 0203 	and.w	r2, r2, #3
 800333c:	0092      	lsls	r2, r2, #2
 800333e:	4093      	lsls	r3, r2
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003346:	492f      	ldr	r1, [pc, #188]	; (8003404 <HAL_GPIO_Init+0x2bc>)
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	3302      	adds	r3, #2
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d006      	beq.n	800336e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003360:	4b2d      	ldr	r3, [pc, #180]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	492c      	ldr	r1, [pc, #176]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]
 800336c:	e006      	b.n	800337c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800336e:	4b2a      	ldr	r3, [pc, #168]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	43db      	mvns	r3, r3
 8003376:	4928      	ldr	r1, [pc, #160]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 8003378:	4013      	ands	r3, r2
 800337a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d006      	beq.n	8003396 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003388:	4b23      	ldr	r3, [pc, #140]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	4922      	ldr	r1, [pc, #136]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	4313      	orrs	r3, r2
 8003392:	604b      	str	r3, [r1, #4]
 8003394:	e006      	b.n	80033a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003396:	4b20      	ldr	r3, [pc, #128]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	43db      	mvns	r3, r3
 800339e:	491e      	ldr	r1, [pc, #120]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d006      	beq.n	80033be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033b0:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	4918      	ldr	r1, [pc, #96]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	608b      	str	r3, [r1, #8]
 80033bc:	e006      	b.n	80033cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033be:	4b16      	ldr	r3, [pc, #88]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	4914      	ldr	r1, [pc, #80]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d021      	beq.n	800341c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	490e      	ldr	r1, [pc, #56]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60cb      	str	r3, [r1, #12]
 80033e4:	e021      	b.n	800342a <HAL_GPIO_Init+0x2e2>
 80033e6:	bf00      	nop
 80033e8:	10320000 	.word	0x10320000
 80033ec:	10310000 	.word	0x10310000
 80033f0:	10220000 	.word	0x10220000
 80033f4:	10210000 	.word	0x10210000
 80033f8:	10120000 	.word	0x10120000
 80033fc:	10110000 	.word	0x10110000
 8003400:	40021000 	.word	0x40021000
 8003404:	40010000 	.word	0x40010000
 8003408:	40010800 	.word	0x40010800
 800340c:	40010c00 	.word	0x40010c00
 8003410:	40011000 	.word	0x40011000
 8003414:	40011400 	.word	0x40011400
 8003418:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_GPIO_Init+0x304>)
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	43db      	mvns	r3, r3
 8003424:	4909      	ldr	r1, [pc, #36]	; (800344c <HAL_GPIO_Init+0x304>)
 8003426:	4013      	ands	r3, r2
 8003428:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	3301      	adds	r3, #1
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	fa22 f303 	lsr.w	r3, r2, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	f47f ae8e 	bne.w	800315c <HAL_GPIO_Init+0x14>
  }
}
 8003440:	bf00      	nop
 8003442:	bf00      	nop
 8003444:	372c      	adds	r7, #44	; 0x2c
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr
 800344c:	40010400 	.word	0x40010400

08003450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	807b      	strh	r3, [r7, #2]
 800345c:	4613      	mov	r3, r2
 800345e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003460:	787b      	ldrb	r3, [r7, #1]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003466:	887a      	ldrh	r2, [r7, #2]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800346c:	e003      	b.n	8003476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800346e:	887b      	ldrh	r3, [r7, #2]
 8003470:	041a      	lsls	r2, r3, #16
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	611a      	str	r2, [r3, #16]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr

08003480 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e12b      	b.n	80036ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fe ff48 	bl	800233c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2224      	movs	r2, #36	; 0x24
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0201 	bic.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034e4:	f000 fce4 	bl	8003eb0 <HAL_RCC_GetPCLK1Freq>
 80034e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4a81      	ldr	r2, [pc, #516]	; (80036f4 <HAL_I2C_Init+0x274>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d807      	bhi.n	8003504 <HAL_I2C_Init+0x84>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4a80      	ldr	r2, [pc, #512]	; (80036f8 <HAL_I2C_Init+0x278>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	bf94      	ite	ls
 80034fc:	2301      	movls	r3, #1
 80034fe:	2300      	movhi	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	e006      	b.n	8003512 <HAL_I2C_Init+0x92>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4a7d      	ldr	r2, [pc, #500]	; (80036fc <HAL_I2C_Init+0x27c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	bf94      	ite	ls
 800350c:	2301      	movls	r3, #1
 800350e:	2300      	movhi	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0e7      	b.n	80036ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4a78      	ldr	r2, [pc, #480]	; (8003700 <HAL_I2C_Init+0x280>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	0c9b      	lsrs	r3, r3, #18
 8003524:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	4a6a      	ldr	r2, [pc, #424]	; (80036f4 <HAL_I2C_Init+0x274>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d802      	bhi.n	8003554 <HAL_I2C_Init+0xd4>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3301      	adds	r3, #1
 8003552:	e009      	b.n	8003568 <HAL_I2C_Init+0xe8>
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	4a69      	ldr	r2, [pc, #420]	; (8003704 <HAL_I2C_Init+0x284>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	099b      	lsrs	r3, r3, #6
 8003566:	3301      	adds	r3, #1
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	430b      	orrs	r3, r1
 800356e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800357a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	495c      	ldr	r1, [pc, #368]	; (80036f4 <HAL_I2C_Init+0x274>)
 8003584:	428b      	cmp	r3, r1
 8003586:	d819      	bhi.n	80035bc <HAL_I2C_Init+0x13c>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	1e59      	subs	r1, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	fbb1 f3f3 	udiv	r3, r1, r3
 8003596:	1c59      	adds	r1, r3, #1
 8003598:	f640 73fc 	movw	r3, #4092	; 0xffc
 800359c:	400b      	ands	r3, r1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <HAL_I2C_Init+0x138>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1e59      	subs	r1, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80035b0:	3301      	adds	r3, #1
 80035b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b6:	e051      	b.n	800365c <HAL_I2C_Init+0x1dc>
 80035b8:	2304      	movs	r3, #4
 80035ba:	e04f      	b.n	800365c <HAL_I2C_Init+0x1dc>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d111      	bne.n	80035e8 <HAL_I2C_Init+0x168>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	1e58      	subs	r0, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6859      	ldr	r1, [r3, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	440b      	add	r3, r1
 80035d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d6:	3301      	adds	r3, #1
 80035d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf0c      	ite	eq
 80035e0:	2301      	moveq	r3, #1
 80035e2:	2300      	movne	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e012      	b.n	800360e <HAL_I2C_Init+0x18e>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	1e58      	subs	r0, r3, #1
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6859      	ldr	r1, [r3, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	0099      	lsls	r1, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80035fe:	3301      	adds	r3, #1
 8003600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf0c      	ite	eq
 8003608:	2301      	moveq	r3, #1
 800360a:	2300      	movne	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_I2C_Init+0x196>
 8003612:	2301      	movs	r3, #1
 8003614:	e022      	b.n	800365c <HAL_I2C_Init+0x1dc>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10e      	bne.n	800363c <HAL_I2C_Init+0x1bc>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1e58      	subs	r0, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6859      	ldr	r1, [r3, #4]
 8003626:	460b      	mov	r3, r1
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	440b      	add	r3, r1
 800362c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003630:	3301      	adds	r3, #1
 8003632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800363a:	e00f      	b.n	800365c <HAL_I2C_Init+0x1dc>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	1e58      	subs	r0, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	0099      	lsls	r1, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003652:	3301      	adds	r3, #1
 8003654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003658:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	6809      	ldr	r1, [r1, #0]
 8003660:	4313      	orrs	r3, r2
 8003662:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69da      	ldr	r2, [r3, #28]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800368a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6911      	ldr	r1, [r2, #16]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	68d2      	ldr	r2, [r2, #12]
 8003696:	4311      	orrs	r1, r2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	430b      	orrs	r3, r1
 800369e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	000186a0 	.word	0x000186a0
 80036f8:	001e847f 	.word	0x001e847f
 80036fc:	003d08ff 	.word	0x003d08ff
 8003700:	431bde83 	.word	0x431bde83
 8003704:	10624dd3 	.word	0x10624dd3

08003708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e272      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8087 	beq.w	8003836 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003728:	4b92      	ldr	r3, [pc, #584]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 030c 	and.w	r3, r3, #12
 8003730:	2b04      	cmp	r3, #4
 8003732:	d00c      	beq.n	800374e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003734:	4b8f      	ldr	r3, [pc, #572]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	2b08      	cmp	r3, #8
 800373e:	d112      	bne.n	8003766 <HAL_RCC_OscConfig+0x5e>
 8003740:	4b8c      	ldr	r3, [pc, #560]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374c:	d10b      	bne.n	8003766 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374e:	4b89      	ldr	r3, [pc, #548]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d06c      	beq.n	8003834 <HAL_RCC_OscConfig+0x12c>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d168      	bne.n	8003834 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e24c      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376e:	d106      	bne.n	800377e <HAL_RCC_OscConfig+0x76>
 8003770:	4b80      	ldr	r3, [pc, #512]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a7f      	ldr	r2, [pc, #508]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	e02e      	b.n	80037dc <HAL_RCC_OscConfig+0xd4>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x98>
 8003786:	4b7b      	ldr	r3, [pc, #492]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a7a      	ldr	r2, [pc, #488]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 800378c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	4b78      	ldr	r3, [pc, #480]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a77      	ldr	r2, [pc, #476]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e01d      	b.n	80037dc <HAL_RCC_OscConfig+0xd4>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0xbc>
 80037aa:	4b72      	ldr	r3, [pc, #456]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a71      	ldr	r2, [pc, #452]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b6f      	ldr	r3, [pc, #444]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a6e      	ldr	r2, [pc, #440]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e00b      	b.n	80037dc <HAL_RCC_OscConfig+0xd4>
 80037c4:	4b6b      	ldr	r3, [pc, #428]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a6a      	ldr	r2, [pc, #424]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b68      	ldr	r3, [pc, #416]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a67      	ldr	r2, [pc, #412]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d013      	beq.n	800380c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7ff f8fa 	bl	80029dc <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037ec:	f7ff f8f6 	bl	80029dc <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	; 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e200      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	4b5d      	ldr	r3, [pc, #372]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0xe4>
 800380a:	e014      	b.n	8003836 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7ff f8e6 	bl	80029dc <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003814:	f7ff f8e2 	bl	80029dc <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e1ec      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003826:	4b53      	ldr	r3, [pc, #332]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x10c>
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d063      	beq.n	800390a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003842:	4b4c      	ldr	r3, [pc, #304]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800384e:	4b49      	ldr	r3, [pc, #292]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	2b08      	cmp	r3, #8
 8003858:	d11c      	bne.n	8003894 <HAL_RCC_OscConfig+0x18c>
 800385a:	4b46      	ldr	r3, [pc, #280]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d116      	bne.n	8003894 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003866:	4b43      	ldr	r3, [pc, #268]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <HAL_RCC_OscConfig+0x176>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d001      	beq.n	800387e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e1c0      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387e:	4b3d      	ldr	r3, [pc, #244]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4939      	ldr	r1, [pc, #228]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003892:	e03a      	b.n	800390a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800389c:	4b36      	ldr	r3, [pc, #216]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a2:	f7ff f89b 	bl	80029dc <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038aa:	f7ff f897 	bl	80029dc <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e1a1      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038bc:	4b2d      	ldr	r3, [pc, #180]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c8:	4b2a      	ldr	r3, [pc, #168]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4927      	ldr	r1, [pc, #156]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]
 80038dc:	e015      	b.n	800390a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038de:	4b26      	ldr	r3, [pc, #152]	; (8003978 <HAL_RCC_OscConfig+0x270>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7ff f87a 	bl	80029dc <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ec:	f7ff f876 	bl	80029dc <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e180      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d03a      	beq.n	800398c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d019      	beq.n	8003952 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391e:	4b17      	ldr	r3, [pc, #92]	; (800397c <HAL_RCC_OscConfig+0x274>)
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003924:	f7ff f85a 	bl	80029dc <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800392c:	f7ff f856 	bl	80029dc <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e160      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393e:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800394a:	2001      	movs	r0, #1
 800394c:	f000 fad8 	bl	8003f00 <RCC_Delay>
 8003950:	e01c      	b.n	800398c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003952:	4b0a      	ldr	r3, [pc, #40]	; (800397c <HAL_RCC_OscConfig+0x274>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003958:	f7ff f840 	bl	80029dc <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800395e:	e00f      	b.n	8003980 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003960:	f7ff f83c 	bl	80029dc <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d908      	bls.n	8003980 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e146      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000
 8003978:	42420000 	.word	0x42420000
 800397c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003980:	4b92      	ldr	r3, [pc, #584]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e9      	bne.n	8003960 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80a6 	beq.w	8003ae6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399a:	2300      	movs	r3, #0
 800399c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800399e:	4b8b      	ldr	r3, [pc, #556]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10d      	bne.n	80039c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039aa:	4b88      	ldr	r3, [pc, #544]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	4a87      	ldr	r2, [pc, #540]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b4:	61d3      	str	r3, [r2, #28]
 80039b6:	4b85      	ldr	r3, [pc, #532]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039c2:	2301      	movs	r3, #1
 80039c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c6:	4b82      	ldr	r3, [pc, #520]	; (8003bd0 <HAL_RCC_OscConfig+0x4c8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d118      	bne.n	8003a04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039d2:	4b7f      	ldr	r3, [pc, #508]	; (8003bd0 <HAL_RCC_OscConfig+0x4c8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a7e      	ldr	r2, [pc, #504]	; (8003bd0 <HAL_RCC_OscConfig+0x4c8>)
 80039d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039de:	f7fe fffd 	bl	80029dc <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e6:	f7fe fff9 	bl	80029dc <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b64      	cmp	r3, #100	; 0x64
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e103      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f8:	4b75      	ldr	r3, [pc, #468]	; (8003bd0 <HAL_RCC_OscConfig+0x4c8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d106      	bne.n	8003a1a <HAL_RCC_OscConfig+0x312>
 8003a0c:	4b6f      	ldr	r3, [pc, #444]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	4a6e      	ldr	r2, [pc, #440]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	6213      	str	r3, [r2, #32]
 8003a18:	e02d      	b.n	8003a76 <HAL_RCC_OscConfig+0x36e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10c      	bne.n	8003a3c <HAL_RCC_OscConfig+0x334>
 8003a22:	4b6a      	ldr	r3, [pc, #424]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	4a69      	ldr	r2, [pc, #420]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	6213      	str	r3, [r2, #32]
 8003a2e:	4b67      	ldr	r3, [pc, #412]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	4a66      	ldr	r2, [pc, #408]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	f023 0304 	bic.w	r3, r3, #4
 8003a38:	6213      	str	r3, [r2, #32]
 8003a3a:	e01c      	b.n	8003a76 <HAL_RCC_OscConfig+0x36e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2b05      	cmp	r3, #5
 8003a42:	d10c      	bne.n	8003a5e <HAL_RCC_OscConfig+0x356>
 8003a44:	4b61      	ldr	r3, [pc, #388]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	4a60      	ldr	r2, [pc, #384]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a4a:	f043 0304 	orr.w	r3, r3, #4
 8003a4e:	6213      	str	r3, [r2, #32]
 8003a50:	4b5e      	ldr	r3, [pc, #376]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	4a5d      	ldr	r2, [pc, #372]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	6213      	str	r3, [r2, #32]
 8003a5c:	e00b      	b.n	8003a76 <HAL_RCC_OscConfig+0x36e>
 8003a5e:	4b5b      	ldr	r3, [pc, #364]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	4a5a      	ldr	r2, [pc, #360]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	6213      	str	r3, [r2, #32]
 8003a6a:	4b58      	ldr	r3, [pc, #352]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	4a57      	ldr	r2, [pc, #348]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a70:	f023 0304 	bic.w	r3, r3, #4
 8003a74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d015      	beq.n	8003aaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7e:	f7fe ffad 	bl	80029dc <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a84:	e00a      	b.n	8003a9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fe ffa9 	bl	80029dc <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e0b1      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9c:	4b4b      	ldr	r3, [pc, #300]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ee      	beq.n	8003a86 <HAL_RCC_OscConfig+0x37e>
 8003aa8:	e014      	b.n	8003ad4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aaa:	f7fe ff97 	bl	80029dc <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab2:	f7fe ff93 	bl	80029dc <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e09b      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac8:	4b40      	ldr	r3, [pc, #256]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1ee      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ad4:	7dfb      	ldrb	r3, [r7, #23]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d105      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ada:	4b3c      	ldr	r3, [pc, #240]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	4a3b      	ldr	r2, [pc, #236]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 8087 	beq.w	8003bfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003af0:	4b36      	ldr	r3, [pc, #216]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d061      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d146      	bne.n	8003b92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b04:	4b33      	ldr	r3, [pc, #204]	; (8003bd4 <HAL_RCC_OscConfig+0x4cc>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0a:	f7fe ff67 	bl	80029dc <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b12:	f7fe ff63 	bl	80029dc <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e06d      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b24:	4b29      	ldr	r3, [pc, #164]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f0      	bne.n	8003b12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b38:	d108      	bne.n	8003b4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b3a:	4b24      	ldr	r3, [pc, #144]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	4921      	ldr	r1, [pc, #132]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b4c:	4b1f      	ldr	r3, [pc, #124]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a19      	ldr	r1, [r3, #32]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	491b      	ldr	r1, [pc, #108]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b64:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <HAL_RCC_OscConfig+0x4cc>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6a:	f7fe ff37 	bl	80029dc <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b72:	f7fe ff33 	bl	80029dc <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e03d      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b84:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_OscConfig+0x46a>
 8003b90:	e035      	b.n	8003bfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b92:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <HAL_RCC_OscConfig+0x4cc>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7fe ff20 	bl	80029dc <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fe ff1c 	bl	80029dc <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e026      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x498>
 8003bbe:	e01e      	b.n	8003bfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d107      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e019      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40007000 	.word	0x40007000
 8003bd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_RCC_OscConfig+0x500>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d106      	bne.n	8003bfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40021000 	.word	0x40021000

08003c0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e0d0      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c20:	4b6a      	ldr	r3, [pc, #424]	; (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d910      	bls.n	8003c50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2e:	4b67      	ldr	r3, [pc, #412]	; (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 0207 	bic.w	r2, r3, #7
 8003c36:	4965      	ldr	r1, [pc, #404]	; (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3e:	4b63      	ldr	r3, [pc, #396]	; (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0b8      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d020      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c68:	4b59      	ldr	r3, [pc, #356]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4a58      	ldr	r2, [pc, #352]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c80:	4b53      	ldr	r3, [pc, #332]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	4a52      	ldr	r2, [pc, #328]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c8c:	4b50      	ldr	r3, [pc, #320]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	494d      	ldr	r1, [pc, #308]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d040      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	4b47      	ldr	r3, [pc, #284]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d115      	bne.n	8003cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e07f      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d107      	bne.n	8003cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cca:	4b41      	ldr	r3, [pc, #260]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e073      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cda:	4b3d      	ldr	r3, [pc, #244]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e06b      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cea:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f023 0203 	bic.w	r2, r3, #3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	4936      	ldr	r1, [pc, #216]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cfc:	f7fe fe6e 	bl	80029dc <HAL_GetTick>
 8003d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d02:	e00a      	b.n	8003d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d04:	f7fe fe6a 	bl	80029dc <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e053      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1a:	4b2d      	ldr	r3, [pc, #180]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 020c 	and.w	r2, r3, #12
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d1eb      	bne.n	8003d04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d210      	bcs.n	8003d5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 0207 	bic.w	r2, r3, #7
 8003d42:	4922      	ldr	r1, [pc, #136]	; (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e032      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d68:	4b19      	ldr	r3, [pc, #100]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4916      	ldr	r1, [pc, #88]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d86:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	490e      	ldr	r1, [pc, #56]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d9a:	f000 f821 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	490a      	ldr	r1, [pc, #40]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dac:	5ccb      	ldrb	r3, [r1, r3]
 8003dae:	fa22 f303 	lsr.w	r3, r2, r3
 8003db2:	4a09      	ldr	r2, [pc, #36]	; (8003dd8 <HAL_RCC_ClockConfig+0x1cc>)
 8003db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_RCC_ClockConfig+0x1d0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fe fdcc 	bl	8002958 <HAL_InitTick>

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40022000 	.word	0x40022000
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	0800a720 	.word	0x0800a720
 8003dd8:	20000008 	.word	0x20000008
 8003ddc:	2000000c 	.word	0x2000000c

08003de0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de0:	b490      	push	{r4, r7}
 8003de2:	b08a      	sub	sp, #40	; 0x28
 8003de4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003de6:	4b29      	ldr	r3, [pc, #164]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xac>)
 8003de8:	1d3c      	adds	r4, r7, #4
 8003dea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003df0:	f240 2301 	movw	r3, #513	; 0x201
 8003df4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	61fb      	str	r3, [r7, #28]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61bb      	str	r3, [r7, #24]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e0a:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f003 030c 	and.w	r3, r3, #12
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d002      	beq.n	8003e20 <HAL_RCC_GetSysClockFreq+0x40>
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d003      	beq.n	8003e26 <HAL_RCC_GetSysClockFreq+0x46>
 8003e1e:	e02b      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e20:	4b1c      	ldr	r3, [pc, #112]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e22:	623b      	str	r3, [r7, #32]
      break;
 8003e24:	e02b      	b.n	8003e7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	0c9b      	lsrs	r3, r3, #18
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	3328      	adds	r3, #40	; 0x28
 8003e30:	443b      	add	r3, r7
 8003e32:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e36:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d012      	beq.n	8003e68 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e42:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	0c5b      	lsrs	r3, r3, #17
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	3328      	adds	r3, #40	; 0x28
 8003e4e:	443b      	add	r3, r7
 8003e50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	4a0e      	ldr	r2, [pc, #56]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e5a:	fb03 f202 	mul.w	r2, r3, r2
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
 8003e66:	e004      	b.n	8003e72 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	4a0b      	ldr	r2, [pc, #44]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e6c:	fb02 f303 	mul.w	r3, r2, r3
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	623b      	str	r3, [r7, #32]
      break;
 8003e76:	e002      	b.n	8003e7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e7a:	623b      	str	r3, [r7, #32]
      break;
 8003e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3728      	adds	r7, #40	; 0x28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc90      	pop	{r4, r7}
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	0800a710 	.word	0x0800a710
 8003e90:	40021000 	.word	0x40021000
 8003e94:	007a1200 	.word	0x007a1200
 8003e98:	003d0900 	.word	0x003d0900

08003e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea0:	4b02      	ldr	r3, [pc, #8]	; (8003eac <HAL_RCC_GetHCLKFreq+0x10>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr
 8003eac:	20000008 	.word	0x20000008

08003eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eb4:	f7ff fff2 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	4903      	ldr	r1, [pc, #12]	; (8003ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ec6:	5ccb      	ldrb	r3, [r1, r3]
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	0800a730 	.word	0x0800a730

08003ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003edc:	f7ff ffde 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	0adb      	lsrs	r3, r3, #11
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4903      	ldr	r1, [pc, #12]	; (8003efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	0800a730 	.word	0x0800a730

08003f00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f08:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <RCC_Delay+0x34>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a0a      	ldr	r2, [pc, #40]	; (8003f38 <RCC_Delay+0x38>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	0a5b      	lsrs	r3, r3, #9
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	fb02 f303 	mul.w	r3, r2, r3
 8003f1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f1c:	bf00      	nop
  }
  while (Delay --);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1e5a      	subs	r2, r3, #1
 8003f22:	60fa      	str	r2, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1f9      	bne.n	8003f1c <RCC_Delay+0x1c>
}
 8003f28:	bf00      	nop
 8003f2a:	bf00      	nop
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr
 8003f34:	20000008 	.word	0x20000008
 8003f38:	10624dd3 	.word	0x10624dd3

08003f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e041      	b.n	8003fd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fe fa94 	bl	8002490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3304      	adds	r3, #4
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	f000 fd50 	bl	8004a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d001      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e03a      	b.n	800406a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a18      	ldr	r2, [pc, #96]	; (8004074 <HAL_TIM_Base_Start_IT+0x98>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00e      	beq.n	8004034 <HAL_TIM_Base_Start_IT+0x58>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401e:	d009      	beq.n	8004034 <HAL_TIM_Base_Start_IT+0x58>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a14      	ldr	r2, [pc, #80]	; (8004078 <HAL_TIM_Base_Start_IT+0x9c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d004      	beq.n	8004034 <HAL_TIM_Base_Start_IT+0x58>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a13      	ldr	r2, [pc, #76]	; (800407c <HAL_TIM_Base_Start_IT+0xa0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d111      	bne.n	8004058 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b06      	cmp	r3, #6
 8004044:	d010      	beq.n	8004068 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0201 	orr.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004056:	e007      	b.n	8004068 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr
 8004074:	40012c00 	.word	0x40012c00
 8004078:	40000400 	.word	0x40000400
 800407c:	40000800 	.word	0x40000800

08004080 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e041      	b.n	8004116 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fe f998 	bl	80023dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3304      	adds	r3, #4
 80040bc:	4619      	mov	r1, r3
 80040be:	4610      	mov	r0, r2
 80040c0:	f000 fcae 	bl	8004a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d109      	bne.n	8004144 <HAL_TIM_PWM_Start+0x24>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b01      	cmp	r3, #1
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	e022      	b.n	800418a <HAL_TIM_PWM_Start+0x6a>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b04      	cmp	r3, #4
 8004148:	d109      	bne.n	800415e <HAL_TIM_PWM_Start+0x3e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b01      	cmp	r3, #1
 8004154:	bf14      	ite	ne
 8004156:	2301      	movne	r3, #1
 8004158:	2300      	moveq	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	e015      	b.n	800418a <HAL_TIM_PWM_Start+0x6a>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b08      	cmp	r3, #8
 8004162:	d109      	bne.n	8004178 <HAL_TIM_PWM_Start+0x58>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	bf14      	ite	ne
 8004170:	2301      	movne	r3, #1
 8004172:	2300      	moveq	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	e008      	b.n	800418a <HAL_TIM_PWM_Start+0x6a>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b01      	cmp	r3, #1
 8004182:	bf14      	ite	ne
 8004184:	2301      	movne	r3, #1
 8004186:	2300      	moveq	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e05e      	b.n	8004250 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d104      	bne.n	80041a2 <HAL_TIM_PWM_Start+0x82>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a0:	e013      	b.n	80041ca <HAL_TIM_PWM_Start+0xaa>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d104      	bne.n	80041b2 <HAL_TIM_PWM_Start+0x92>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b0:	e00b      	b.n	80041ca <HAL_TIM_PWM_Start+0xaa>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d104      	bne.n	80041c2 <HAL_TIM_PWM_Start+0xa2>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c0:	e003      	b.n	80041ca <HAL_TIM_PWM_Start+0xaa>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2202      	movs	r2, #2
 80041c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2201      	movs	r2, #1
 80041d0:	6839      	ldr	r1, [r7, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fea4 	bl	8004f20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1e      	ldr	r2, [pc, #120]	; (8004258 <HAL_TIM_PWM_Start+0x138>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d107      	bne.n	80041f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a18      	ldr	r2, [pc, #96]	; (8004258 <HAL_TIM_PWM_Start+0x138>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00e      	beq.n	800421a <HAL_TIM_PWM_Start+0xfa>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004204:	d009      	beq.n	800421a <HAL_TIM_PWM_Start+0xfa>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a14      	ldr	r2, [pc, #80]	; (800425c <HAL_TIM_PWM_Start+0x13c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d004      	beq.n	800421a <HAL_TIM_PWM_Start+0xfa>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a12      	ldr	r2, [pc, #72]	; (8004260 <HAL_TIM_PWM_Start+0x140>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d111      	bne.n	800423e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b06      	cmp	r3, #6
 800422a:	d010      	beq.n	800424e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423c:	e007      	b.n	800424e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0201 	orr.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40012c00 	.word	0x40012c00
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800

08004264 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e093      	b.n	80043a0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d106      	bne.n	8004292 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7fe f8c3 	bl	8002418 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042a8:	f023 0307 	bic.w	r3, r3, #7
 80042ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3304      	adds	r3, #4
 80042b6:	4619      	mov	r1, r3
 80042b8:	4610      	mov	r0, r2
 80042ba:	f000 fbb1 	bl	8004a20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	4313      	orrs	r3, r2
 80042de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e6:	f023 0303 	bic.w	r3, r3, #3
 80042ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	4313      	orrs	r3, r2
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004304:	f023 030c 	bic.w	r3, r3, #12
 8004308:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004310:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004314:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	4313      	orrs	r3, r2
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	011a      	lsls	r2, r3, #4
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	031b      	lsls	r3, r3, #12
 8004334:	4313      	orrs	r3, r2
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004342:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	4313      	orrs	r3, r2
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d110      	bne.n	80043fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d102      	bne.n	80043e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80043de:	7b7b      	ldrb	r3, [r7, #13]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d001      	beq.n	80043e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e069      	b.n	80044bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f8:	e031      	b.n	800445e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d110      	bne.n	8004422 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004400:	7bbb      	ldrb	r3, [r7, #14]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d102      	bne.n	800440c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004406:	7b3b      	ldrb	r3, [r7, #12]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d001      	beq.n	8004410 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e055      	b.n	80044bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004420:	e01d      	b.n	800445e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d108      	bne.n	800443a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004428:	7bbb      	ldrb	r3, [r7, #14]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d105      	bne.n	800443a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800442e:	7b7b      	ldrb	r3, [r7, #13]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d102      	bne.n	800443a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004434:	7b3b      	ldrb	r3, [r7, #12]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d001      	beq.n	800443e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e03e      	b.n	80044bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2202      	movs	r2, #2
 8004442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2202      	movs	r2, #2
 800444a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2202      	movs	r2, #2
 8004452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_TIM_Encoder_Start+0xc4>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b04      	cmp	r3, #4
 8004468:	d008      	beq.n	800447c <HAL_TIM_Encoder_Start+0xd4>
 800446a:	e00f      	b.n	800448c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2201      	movs	r2, #1
 8004472:	2100      	movs	r1, #0
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fd53 	bl	8004f20 <TIM_CCxChannelCmd>
      break;
 800447a:	e016      	b.n	80044aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2201      	movs	r2, #1
 8004482:	2104      	movs	r1, #4
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fd4b 	bl	8004f20 <TIM_CCxChannelCmd>
      break;
 800448a:	e00e      	b.n	80044aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2201      	movs	r2, #1
 8004492:	2100      	movs	r1, #0
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fd43 	bl	8004f20 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2201      	movs	r2, #1
 80044a0:	2104      	movs	r1, #4
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fd3c 	bl	8004f20 <TIM_CCxChannelCmd>
      break;
 80044a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0201 	orr.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d122      	bne.n	8004520 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d11b      	bne.n	8004520 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0202 	mvn.w	r2, #2
 80044f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa6f 	bl	80049ea <HAL_TIM_IC_CaptureCallback>
 800450c:	e005      	b.n	800451a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fa62 	bl	80049d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fa71 	bl	80049fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b04      	cmp	r3, #4
 800452c:	d122      	bne.n	8004574 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b04      	cmp	r3, #4
 800453a:	d11b      	bne.n	8004574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0204 	mvn.w	r2, #4
 8004544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fa45 	bl	80049ea <HAL_TIM_IC_CaptureCallback>
 8004560:	e005      	b.n	800456e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fa38 	bl	80049d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fa47 	bl	80049fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b08      	cmp	r3, #8
 8004580:	d122      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b08      	cmp	r3, #8
 800458e:	d11b      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0208 	mvn.w	r2, #8
 8004598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2204      	movs	r2, #4
 800459e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fa1b 	bl	80049ea <HAL_TIM_IC_CaptureCallback>
 80045b4:	e005      	b.n	80045c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fa0e 	bl	80049d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fa1d 	bl	80049fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	2b10      	cmp	r3, #16
 80045d4:	d122      	bne.n	800461c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d11b      	bne.n	800461c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0210 	mvn.w	r2, #16
 80045ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2208      	movs	r2, #8
 80045f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f9f1 	bl	80049ea <HAL_TIM_IC_CaptureCallback>
 8004608:	e005      	b.n	8004616 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f9e4 	bl	80049d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f9f3 	bl	80049fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b01      	cmp	r3, #1
 8004628:	d10e      	bne.n	8004648 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b01      	cmp	r3, #1
 8004636:	d107      	bne.n	8004648 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0201 	mvn.w	r2, #1
 8004640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7fd fa62 	bl	8001b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004652:	2b80      	cmp	r3, #128	; 0x80
 8004654:	d10e      	bne.n	8004674 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004660:	2b80      	cmp	r3, #128	; 0x80
 8004662:	d107      	bne.n	8004674 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800466c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fd32 	bl	80050d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467e:	2b40      	cmp	r3, #64	; 0x40
 8004680:	d10e      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468c:	2b40      	cmp	r3, #64	; 0x40
 800468e:	d107      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f9b7 	bl	8004a0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d10e      	bne.n	80046cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d107      	bne.n	80046cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0220 	mvn.w	r2, #32
 80046c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fcfd 	bl	80050c6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046cc:	bf00      	nop
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e0ac      	b.n	8004848 <HAL_TIM_PWM_ConfigChannel+0x174>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b0c      	cmp	r3, #12
 80046fa:	f200 809f 	bhi.w	800483c <HAL_TIM_PWM_ConfigChannel+0x168>
 80046fe:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004704:	08004739 	.word	0x08004739
 8004708:	0800483d 	.word	0x0800483d
 800470c:	0800483d 	.word	0x0800483d
 8004710:	0800483d 	.word	0x0800483d
 8004714:	08004779 	.word	0x08004779
 8004718:	0800483d 	.word	0x0800483d
 800471c:	0800483d 	.word	0x0800483d
 8004720:	0800483d 	.word	0x0800483d
 8004724:	080047bb 	.word	0x080047bb
 8004728:	0800483d 	.word	0x0800483d
 800472c:	0800483d 	.word	0x0800483d
 8004730:	0800483d 	.word	0x0800483d
 8004734:	080047fb 	.word	0x080047fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68b9      	ldr	r1, [r7, #8]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f9d0 	bl	8004ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699a      	ldr	r2, [r3, #24]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0208 	orr.w	r2, r2, #8
 8004752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0204 	bic.w	r2, r2, #4
 8004762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6999      	ldr	r1, [r3, #24]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	619a      	str	r2, [r3, #24]
      break;
 8004776:	e062      	b.n	800483e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68b9      	ldr	r1, [r7, #8]
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fa16 	bl	8004bb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699a      	ldr	r2, [r3, #24]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6999      	ldr	r1, [r3, #24]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	021a      	lsls	r2, r3, #8
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	619a      	str	r2, [r3, #24]
      break;
 80047b8:	e041      	b.n	800483e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 fa5f 	bl	8004c84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69da      	ldr	r2, [r3, #28]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0208 	orr.w	r2, r2, #8
 80047d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0204 	bic.w	r2, r2, #4
 80047e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69d9      	ldr	r1, [r3, #28]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	61da      	str	r2, [r3, #28]
      break;
 80047f8:	e021      	b.n	800483e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68b9      	ldr	r1, [r7, #8]
 8004800:	4618      	mov	r0, r3
 8004802:	f000 faa9 	bl	8004d58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69da      	ldr	r2, [r3, #28]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69da      	ldr	r2, [r3, #28]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69d9      	ldr	r1, [r3, #28]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	021a      	lsls	r2, r3, #8
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	61da      	str	r2, [r3, #28]
      break;
 800483a:	e000      	b.n	800483e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800483c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_TIM_ConfigClockSource+0x18>
 8004864:	2302      	movs	r3, #2
 8004866:	e0b3      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x180>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004886:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800488e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048a0:	d03e      	beq.n	8004920 <HAL_TIM_ConfigClockSource+0xd0>
 80048a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048a6:	f200 8087 	bhi.w	80049b8 <HAL_TIM_ConfigClockSource+0x168>
 80048aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ae:	f000 8085 	beq.w	80049bc <HAL_TIM_ConfigClockSource+0x16c>
 80048b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b6:	d87f      	bhi.n	80049b8 <HAL_TIM_ConfigClockSource+0x168>
 80048b8:	2b70      	cmp	r3, #112	; 0x70
 80048ba:	d01a      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0xa2>
 80048bc:	2b70      	cmp	r3, #112	; 0x70
 80048be:	d87b      	bhi.n	80049b8 <HAL_TIM_ConfigClockSource+0x168>
 80048c0:	2b60      	cmp	r3, #96	; 0x60
 80048c2:	d050      	beq.n	8004966 <HAL_TIM_ConfigClockSource+0x116>
 80048c4:	2b60      	cmp	r3, #96	; 0x60
 80048c6:	d877      	bhi.n	80049b8 <HAL_TIM_ConfigClockSource+0x168>
 80048c8:	2b50      	cmp	r3, #80	; 0x50
 80048ca:	d03c      	beq.n	8004946 <HAL_TIM_ConfigClockSource+0xf6>
 80048cc:	2b50      	cmp	r3, #80	; 0x50
 80048ce:	d873      	bhi.n	80049b8 <HAL_TIM_ConfigClockSource+0x168>
 80048d0:	2b40      	cmp	r3, #64	; 0x40
 80048d2:	d058      	beq.n	8004986 <HAL_TIM_ConfigClockSource+0x136>
 80048d4:	2b40      	cmp	r3, #64	; 0x40
 80048d6:	d86f      	bhi.n	80049b8 <HAL_TIM_ConfigClockSource+0x168>
 80048d8:	2b30      	cmp	r3, #48	; 0x30
 80048da:	d064      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0x156>
 80048dc:	2b30      	cmp	r3, #48	; 0x30
 80048de:	d86b      	bhi.n	80049b8 <HAL_TIM_ConfigClockSource+0x168>
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d060      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0x156>
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d867      	bhi.n	80049b8 <HAL_TIM_ConfigClockSource+0x168>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d05c      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0x156>
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d05a      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80048f0:	e062      	b.n	80049b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6818      	ldr	r0, [r3, #0]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6899      	ldr	r1, [r3, #8]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f000 faee 	bl	8004ee2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004914:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	609a      	str	r2, [r3, #8]
      break;
 800491e:	e04e      	b.n	80049be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6818      	ldr	r0, [r3, #0]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	6899      	ldr	r1, [r3, #8]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f000 fad7 	bl	8004ee2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004942:	609a      	str	r2, [r3, #8]
      break;
 8004944:	e03b      	b.n	80049be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	6859      	ldr	r1, [r3, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	461a      	mov	r2, r3
 8004954:	f000 fa4e 	bl	8004df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2150      	movs	r1, #80	; 0x50
 800495e:	4618      	mov	r0, r3
 8004960:	f000 faa5 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004964:	e02b      	b.n	80049be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	6859      	ldr	r1, [r3, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	461a      	mov	r2, r3
 8004974:	f000 fa6c 	bl	8004e50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2160      	movs	r1, #96	; 0x60
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fa95 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 8004984:	e01b      	b.n	80049be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	6859      	ldr	r1, [r3, #4]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	461a      	mov	r2, r3
 8004994:	f000 fa2e 	bl	8004df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2140      	movs	r1, #64	; 0x40
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fa85 	bl	8004eae <TIM_ITRx_SetConfig>
      break;
 80049a4:	e00b      	b.n	80049be <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4619      	mov	r1, r3
 80049b0:	4610      	mov	r0, r2
 80049b2:	f000 fa7c 	bl	8004eae <TIM_ITRx_SetConfig>
        break;
 80049b6:	e002      	b.n	80049be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80049b8:	bf00      	nop
 80049ba:	e000      	b.n	80049be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80049bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bc80      	pop	{r7}
 80049e8:	4770      	bx	lr

080049ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr

080049fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr

08004a0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr

08004a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a29      	ldr	r2, [pc, #164]	; (8004ad8 <TIM_Base_SetConfig+0xb8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00b      	beq.n	8004a50 <TIM_Base_SetConfig+0x30>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3e:	d007      	beq.n	8004a50 <TIM_Base_SetConfig+0x30>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a26      	ldr	r2, [pc, #152]	; (8004adc <TIM_Base_SetConfig+0xbc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_Base_SetConfig+0x30>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a25      	ldr	r2, [pc, #148]	; (8004ae0 <TIM_Base_SetConfig+0xc0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d108      	bne.n	8004a62 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <TIM_Base_SetConfig+0xb8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00b      	beq.n	8004a82 <TIM_Base_SetConfig+0x62>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a70:	d007      	beq.n	8004a82 <TIM_Base_SetConfig+0x62>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a19      	ldr	r2, [pc, #100]	; (8004adc <TIM_Base_SetConfig+0xbc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d003      	beq.n	8004a82 <TIM_Base_SetConfig+0x62>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a18      	ldr	r2, [pc, #96]	; (8004ae0 <TIM_Base_SetConfig+0xc0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d108      	bne.n	8004a94 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a07      	ldr	r2, [pc, #28]	; (8004ad8 <TIM_Base_SetConfig+0xb8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d103      	bne.n	8004ac8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	615a      	str	r2, [r3, #20]
}
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr
 8004ad8:	40012c00 	.word	0x40012c00
 8004adc:	40000400 	.word	0x40000400
 8004ae0:	40000800 	.word	0x40000800

08004ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	f023 0201 	bic.w	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0303 	bic.w	r3, r3, #3
 8004b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f023 0302 	bic.w	r3, r3, #2
 8004b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a1c      	ldr	r2, [pc, #112]	; (8004bac <TIM_OC1_SetConfig+0xc8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d10c      	bne.n	8004b5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f023 0308 	bic.w	r3, r3, #8
 8004b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f023 0304 	bic.w	r3, r3, #4
 8004b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a13      	ldr	r2, [pc, #76]	; (8004bac <TIM_OC1_SetConfig+0xc8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d111      	bne.n	8004b86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	621a      	str	r2, [r3, #32]
}
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40012c00 	.word	0x40012c00

08004bb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	f023 0210 	bic.w	r2, r3, #16
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f023 0320 	bic.w	r3, r3, #32
 8004bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a1d      	ldr	r2, [pc, #116]	; (8004c80 <TIM_OC2_SetConfig+0xd0>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d10d      	bne.n	8004c2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a14      	ldr	r2, [pc, #80]	; (8004c80 <TIM_OC2_SetConfig+0xd0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d113      	bne.n	8004c5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	621a      	str	r2, [r3, #32]
}
 8004c76:	bf00      	nop
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr
 8004c80:	40012c00 	.word	0x40012c00

08004c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0303 	bic.w	r3, r3, #3
 8004cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	021b      	lsls	r3, r3, #8
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <TIM_OC3_SetConfig+0xd0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d10d      	bne.n	8004cfe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a14      	ldr	r2, [pc, #80]	; (8004d54 <TIM_OC3_SetConfig+0xd0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d113      	bne.n	8004d2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	621a      	str	r2, [r3, #32]
}
 8004d48:	bf00      	nop
 8004d4a:	371c      	adds	r7, #28
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40012c00 	.word	0x40012c00

08004d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	031b      	lsls	r3, r3, #12
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a0f      	ldr	r2, [pc, #60]	; (8004df0 <TIM_OC4_SetConfig+0x98>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d109      	bne.n	8004dcc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	019b      	lsls	r3, r3, #6
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	621a      	str	r2, [r3, #32]
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr
 8004df0:	40012c00 	.word	0x40012c00

08004df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	f023 0201 	bic.w	r2, r3, #1
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f023 030a 	bic.w	r3, r3, #10
 8004e30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	621a      	str	r2, [r3, #32]
}
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr

08004e50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	f023 0210 	bic.w	r2, r3, #16
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	031b      	lsls	r3, r3, #12
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	621a      	str	r2, [r3, #32]
}
 8004ea4:	bf00      	nop
 8004ea6:	371c      	adds	r7, #28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr

08004eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f043 0307 	orr.w	r3, r3, #7
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	609a      	str	r2, [r3, #8]
}
 8004ed8:	bf00      	nop
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bc80      	pop	{r7}
 8004ee0:	4770      	bx	lr

08004ee2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b087      	sub	sp, #28
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	607a      	str	r2, [r7, #4]
 8004eee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004efc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	021a      	lsls	r2, r3, #8
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	609a      	str	r2, [r3, #8]
}
 8004f16:	bf00      	nop
 8004f18:	371c      	adds	r7, #28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr

08004f20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f003 031f 	and.w	r3, r3, #31
 8004f32:	2201      	movs	r2, #1
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a1a      	ldr	r2, [r3, #32]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	43db      	mvns	r3, r3
 8004f42:	401a      	ands	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a1a      	ldr	r2, [r3, #32]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f003 031f 	and.w	r3, r3, #31
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	fa01 f303 	lsl.w	r3, r1, r3
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bc80      	pop	{r7}
 8004f66:	4770      	bx	lr

08004f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e046      	b.n	800500e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a16      	ldr	r2, [pc, #88]	; (8005018 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00e      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fcc:	d009      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a12      	ldr	r2, [pc, #72]	; (800501c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d004      	beq.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a10      	ldr	r2, [pc, #64]	; (8005020 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d10c      	bne.n	8004ffc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr
 8005018:	40012c00 	.word	0x40012c00
 800501c:	40000400 	.word	0x40000400
 8005020:	40000800 	.word	0x40000800

08005024 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005038:	2b01      	cmp	r3, #1
 800503a:	d101      	bne.n	8005040 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800503c:	2302      	movs	r3, #2
 800503e:	e03d      	b.n	80050bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr

080050c6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr

080050d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr

080050ea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b082      	sub	sp, #8
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e03f      	b.n	800517c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d106      	bne.n	8005116 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7fd fa17 	bl	8002544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2224      	movs	r2, #36	; 0x24
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800512c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fcb4 	bl	8005a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005142:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695a      	ldr	r2, [r3, #20]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005152:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005162:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	4613      	mov	r3, r2
 8005190:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b20      	cmp	r3, #32
 800519c:	d11d      	bne.n	80051da <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <HAL_UART_Receive_IT+0x26>
 80051a4:	88fb      	ldrh	r3, [r7, #6]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e016      	b.n	80051dc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_UART_Receive_IT+0x38>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e00f      	b.n	80051dc <HAL_UART_Receive_IT+0x58>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80051ca:	88fb      	ldrh	r3, [r7, #6]
 80051cc:	461a      	mov	r2, r3
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 fac4 	bl	800575e <UART_Start_Receive_IT>
 80051d6:	4603      	mov	r3, r0
 80051d8:	e000      	b.n	80051dc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80051da:	2302      	movs	r3, #2
  }
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	4613      	mov	r3, r2
 80051f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d153      	bne.n	80052a6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <HAL_UART_Transmit_DMA+0x26>
 8005204:	88fb      	ldrh	r3, [r7, #6]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e04c      	b.n	80052a8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_UART_Transmit_DMA+0x38>
 8005218:	2302      	movs	r3, #2
 800521a:	e045      	b.n	80052a8 <HAL_UART_Transmit_DMA+0xc4>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	88fa      	ldrh	r2, [r7, #6]
 800522e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	88fa      	ldrh	r2, [r7, #6]
 8005234:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2221      	movs	r2, #33	; 0x21
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005248:	4a19      	ldr	r2, [pc, #100]	; (80052b0 <HAL_UART_Transmit_DMA+0xcc>)
 800524a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005250:	4a18      	ldr	r2, [pc, #96]	; (80052b4 <HAL_UART_Transmit_DMA+0xd0>)
 8005252:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005258:	4a17      	ldr	r2, [pc, #92]	; (80052b8 <HAL_UART_Transmit_DMA+0xd4>)
 800525a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005260:	2200      	movs	r2, #0
 8005262:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8005264:	f107 0308 	add.w	r3, r7, #8
 8005268:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	6819      	ldr	r1, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3304      	adds	r3, #4
 8005278:	461a      	mov	r2, r3
 800527a:	88fb      	ldrh	r3, [r7, #6]
 800527c:	f7fd fd20 	bl	8002cc0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005288:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	695a      	ldr	r2, [r3, #20]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052a0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	e000      	b.n	80052a8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80052a6:	2302      	movs	r3, #2
  }
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	0800565d 	.word	0x0800565d
 80052b4:	080056af 	.word	0x080056af
 80052b8:	080056cb 	.word	0x080056cb

080052bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08a      	sub	sp, #40	; 0x28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80052dc:	2300      	movs	r3, #0
 80052de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10d      	bne.n	800530e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	f003 0320 	and.w	r3, r3, #32
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d008      	beq.n	800530e <HAL_UART_IRQHandler+0x52>
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	f003 0320 	and.w	r3, r3, #32
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fb1e 	bl	8005948 <UART_Receive_IT>
      return;
 800530c:	e17b      	b.n	8005606 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 80b1 	beq.w	8005478 <HAL_UART_IRQHandler+0x1bc>
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d105      	bne.n	800532c <HAL_UART_IRQHandler+0x70>
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 80a6 	beq.w	8005478 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <HAL_UART_IRQHandler+0x90>
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	f043 0201 	orr.w	r2, r3, #1
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <HAL_UART_IRQHandler+0xb0>
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d005      	beq.n	800536c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	f043 0202 	orr.w	r2, r3, #2
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <HAL_UART_IRQHandler+0xd0>
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005384:	f043 0204 	orr.w	r2, r3, #4
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00f      	beq.n	80053b6 <HAL_UART_IRQHandler+0xfa>
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b00      	cmp	r3, #0
 800539e:	d104      	bne.n	80053aa <HAL_UART_IRQHandler+0xee>
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d005      	beq.n	80053b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f043 0208 	orr.w	r2, r3, #8
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 811e 	beq.w	80055fc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d007      	beq.n	80053da <HAL_UART_IRQHandler+0x11e>
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d002      	beq.n	80053da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 fab7 	bl	8005948 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	bf14      	ite	ne
 80053e8:	2301      	movne	r3, #1
 80053ea:	2300      	moveq	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d102      	bne.n	8005402 <HAL_UART_IRQHandler+0x146>
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d031      	beq.n	8005466 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f9f9 	bl	80057fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005412:	2b00      	cmp	r3, #0
 8005414:	d023      	beq.n	800545e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	695a      	ldr	r2, [r3, #20]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005424:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542a:	2b00      	cmp	r3, #0
 800542c:	d013      	beq.n	8005456 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	4a76      	ldr	r2, [pc, #472]	; (800560c <HAL_UART_IRQHandler+0x350>)
 8005434:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	4618      	mov	r0, r3
 800543c:	f7fd fcda 	bl	8002df4 <HAL_DMA_Abort_IT>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d016      	beq.n	8005474 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005450:	4610      	mov	r0, r2
 8005452:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005454:	e00e      	b.n	8005474 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f8ec 	bl	8005634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545c:	e00a      	b.n	8005474 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f8e8 	bl	8005634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005464:	e006      	b.n	8005474 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f8e4 	bl	8005634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005472:	e0c3      	b.n	80055fc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005474:	bf00      	nop
    return;
 8005476:	e0c1      	b.n	80055fc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547c:	2b01      	cmp	r3, #1
 800547e:	f040 80a1 	bne.w	80055c4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 809b 	beq.w	80055c4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	f003 0310 	and.w	r3, r3, #16
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 8095 	beq.w	80055c4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d04e      	beq.n	800555c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80054c8:	8a3b      	ldrh	r3, [r7, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 8098 	beq.w	8005600 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054d4:	8a3a      	ldrh	r2, [r7, #16]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	f080 8092 	bcs.w	8005600 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	8a3a      	ldrh	r2, [r7, #16]
 80054e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	d02b      	beq.n	8005544 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054fa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695a      	ldr	r2, [r3, #20]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0201 	bic.w	r2, r2, #1
 800550a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	695a      	ldr	r2, [r3, #20]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800551a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0210 	bic.w	r2, r2, #16
 8005538:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553e:	4618      	mov	r0, r3
 8005540:	f7fd fc1d 	bl	8002d7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800554c:	b29b      	uxth	r3, r3
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	b29b      	uxth	r3, r3
 8005552:	4619      	mov	r1, r3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f876 	bl	8005646 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800555a:	e051      	b.n	8005600 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005564:	b29b      	uxth	r3, r3
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800556e:	b29b      	uxth	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d047      	beq.n	8005604 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005574:	8a7b      	ldrh	r3, [r7, #18]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d044      	beq.n	8005604 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005588:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695a      	ldr	r2, [r3, #20]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0201 	bic.w	r2, r2, #1
 8005598:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0210 	bic.w	r2, r2, #16
 80055b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055b8:	8a7b      	ldrh	r3, [r7, #18]
 80055ba:	4619      	mov	r1, r3
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f842 	bl	8005646 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80055c2:	e01f      	b.n	8005604 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d008      	beq.n	80055e0 <HAL_UART_IRQHandler+0x324>
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f94e 	bl	800587a <UART_Transmit_IT>
    return;
 80055de:	e012      	b.n	8005606 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00d      	beq.n	8005606 <HAL_UART_IRQHandler+0x34a>
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d008      	beq.n	8005606 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f98f 	bl	8005918 <UART_EndTransmit_IT>
    return;
 80055fa:	e004      	b.n	8005606 <HAL_UART_IRQHandler+0x34a>
    return;
 80055fc:	bf00      	nop
 80055fe:	e002      	b.n	8005606 <HAL_UART_IRQHandler+0x34a>
      return;
 8005600:	bf00      	nop
 8005602:	e000      	b.n	8005606 <HAL_UART_IRQHandler+0x34a>
      return;
 8005604:	bf00      	nop
  }
}
 8005606:	3728      	adds	r7, #40	; 0x28
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	08005853 	.word	0x08005853

08005610 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr

08005622 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	bc80      	pop	{r7}
 8005632:	4770      	bx	lr

08005634 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	bc80      	pop	{r7}
 8005644:	4770      	bx	lr

08005646 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	460b      	mov	r3, r1
 8005650:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr

0800565c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0320 	and.w	r3, r3, #32
 8005674:	2b00      	cmp	r3, #0
 8005676:	d113      	bne.n	80056a0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695a      	ldr	r2, [r3, #20]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800568c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800569c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800569e:	e002      	b.n	80056a6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f7ff ffb5 	bl	8005610 <HAL_UART_TxCpltCallback>
}
 80056a6:	bf00      	nop
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b084      	sub	sp, #16
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f7ff ffb0 	bl	8005622 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056c2:	bf00      	nop
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b084      	sub	sp, #16
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	bf14      	ite	ne
 80056ea:	2301      	movne	r3, #1
 80056ec:	2300      	moveq	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b21      	cmp	r3, #33	; 0x21
 80056fc:	d108      	bne.n	8005710 <UART_DMAError+0x46>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2200      	movs	r2, #0
 8005708:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800570a:	68b8      	ldr	r0, [r7, #8]
 800570c:	f000 f860 	bl	80057d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571a:	2b00      	cmp	r3, #0
 800571c:	bf14      	ite	ne
 800571e:	2301      	movne	r3, #1
 8005720:	2300      	moveq	r3, #0
 8005722:	b2db      	uxtb	r3, r3
 8005724:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b22      	cmp	r3, #34	; 0x22
 8005730:	d108      	bne.n	8005744 <UART_DMAError+0x7a>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2200      	movs	r2, #0
 800573c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800573e:	68b8      	ldr	r0, [r7, #8]
 8005740:	f000 f85b 	bl	80057fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	f043 0210 	orr.w	r2, r3, #16
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005750:	68b8      	ldr	r0, [r7, #8]
 8005752:	f7ff ff6f 	bl	8005634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005756:	bf00      	nop
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800575e:	b480      	push	{r7}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	4613      	mov	r3, r2
 800576a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	88fa      	ldrh	r2, [r7, #6]
 8005776:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	88fa      	ldrh	r2, [r7, #6]
 800577c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2222      	movs	r2, #34	; 0x22
 8005788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057a2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	695a      	ldr	r2, [r3, #20]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0220 	orr.w	r2, r2, #32
 80057c2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr

080057d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80057e6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bc80      	pop	{r7}
 80057f8:	4770      	bx	lr

080057fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005810:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	695a      	ldr	r2, [r3, #20]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0201 	bic.w	r2, r2, #1
 8005820:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005826:	2b01      	cmp	r3, #1
 8005828:	d107      	bne.n	800583a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 0210 	bic.w	r2, r2, #16
 8005838:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2220      	movs	r2, #32
 800583e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr

08005852 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f7ff fee1 	bl	8005634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005872:	bf00      	nop
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b21      	cmp	r3, #33	; 0x21
 800588c:	d13e      	bne.n	800590c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005896:	d114      	bne.n	80058c2 <UART_Transmit_IT+0x48>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d110      	bne.n	80058c2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	1c9a      	adds	r2, r3, #2
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	621a      	str	r2, [r3, #32]
 80058c0:	e008      	b.n	80058d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	1c59      	adds	r1, r3, #1
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6211      	str	r1, [r2, #32]
 80058cc:	781a      	ldrb	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058d8:	b29b      	uxth	r3, r3
 80058da:	3b01      	subs	r3, #1
 80058dc:	b29b      	uxth	r3, r3
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	4619      	mov	r1, r3
 80058e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10f      	bne.n	8005908 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68da      	ldr	r2, [r3, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005906:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005908:	2300      	movs	r3, #0
 800590a:	e000      	b.n	800590e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800590c:	2302      	movs	r3, #2
  }
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	bc80      	pop	{r7}
 8005916:	4770      	bx	lr

08005918 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800592e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff fe69 	bl	8005610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b22      	cmp	r3, #34	; 0x22
 800595a:	f040 8099 	bne.w	8005a90 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005966:	d117      	bne.n	8005998 <UART_Receive_IT+0x50>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d113      	bne.n	8005998 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005970:	2300      	movs	r3, #0
 8005972:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005978:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	b29b      	uxth	r3, r3
 8005982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005986:	b29a      	uxth	r2, r3
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005990:	1c9a      	adds	r2, r3, #2
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	629a      	str	r2, [r3, #40]	; 0x28
 8005996:	e026      	b.n	80059e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800599e:	2300      	movs	r3, #0
 80059a0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059aa:	d007      	beq.n	80059bc <UART_Receive_IT+0x74>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10a      	bne.n	80059ca <UART_Receive_IT+0x82>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d106      	bne.n	80059ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	701a      	strb	r2, [r3, #0]
 80059c8:	e008      	b.n	80059dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4619      	mov	r1, r3
 80059f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d148      	bne.n	8005a8c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0220 	bic.w	r2, r2, #32
 8005a08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695a      	ldr	r2, [r3, #20]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0201 	bic.w	r2, r2, #1
 8005a28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d123      	bne.n	8005a82 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0210 	bic.w	r2, r2, #16
 8005a4e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0310 	and.w	r3, r3, #16
 8005a5a:	2b10      	cmp	r3, #16
 8005a5c:	d10a      	bne.n	8005a74 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60fb      	str	r3, [r7, #12]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff fde3 	bl	8005646 <HAL_UARTEx_RxEventCallback>
 8005a80:	e002      	b.n	8005a88 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7fc f880 	bl	8001b88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e002      	b.n	8005a92 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	e000      	b.n	8005a92 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005a90:	2302      	movs	r3, #2
  }
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005ad6:	f023 030c 	bic.w	r3, r3, #12
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6812      	ldr	r2, [r2, #0]
 8005ade:	68b9      	ldr	r1, [r7, #8]
 8005ae0:	430b      	orrs	r3, r1
 8005ae2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a2c      	ldr	r2, [pc, #176]	; (8005bb0 <UART_SetConfig+0x114>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d103      	bne.n	8005b0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b04:	f7fe f9e8 	bl	8003ed8 <HAL_RCC_GetPCLK2Freq>
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	e002      	b.n	8005b12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b0c:	f7fe f9d0 	bl	8003eb0 <HAL_RCC_GetPCLK1Freq>
 8005b10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	009a      	lsls	r2, r3, #2
 8005b1c:	441a      	add	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b28:	4a22      	ldr	r2, [pc, #136]	; (8005bb4 <UART_SetConfig+0x118>)
 8005b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2e:	095b      	lsrs	r3, r3, #5
 8005b30:	0119      	lsls	r1, r3, #4
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4613      	mov	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	009a      	lsls	r2, r3, #2
 8005b3c:	441a      	add	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b48:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <UART_SetConfig+0x118>)
 8005b4a:	fba3 0302 	umull	r0, r3, r3, r2
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	2064      	movs	r0, #100	; 0x64
 8005b52:	fb00 f303 	mul.w	r3, r0, r3
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	3332      	adds	r3, #50	; 0x32
 8005b5c:	4a15      	ldr	r2, [pc, #84]	; (8005bb4 <UART_SetConfig+0x118>)
 8005b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b62:	095b      	lsrs	r3, r3, #5
 8005b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b68:	4419      	add	r1, r3
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	009a      	lsls	r2, r3, #2
 8005b74:	441a      	add	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b80:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <UART_SetConfig+0x118>)
 8005b82:	fba3 0302 	umull	r0, r3, r3, r2
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	2064      	movs	r0, #100	; 0x64
 8005b8a:	fb00 f303 	mul.w	r3, r0, r3
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	3332      	adds	r3, #50	; 0x32
 8005b94:	4a07      	ldr	r2, [pc, #28]	; (8005bb4 <UART_SetConfig+0x118>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	f003 020f 	and.w	r2, r3, #15
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	440a      	add	r2, r1
 8005ba6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ba8:	bf00      	nop
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40013800 	.word	0x40013800
 8005bb4:	51eb851f 	.word	0x51eb851f

08005bb8 <crc16_floating>:
	for(counter = 0; counter < len; counter++)
		crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(uint8_t *)buf++)&0x00FF];
	return crc;
}

uint16_t crc16_floating(uint8_t next, uint16_t seed) {
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	460a      	mov	r2, r1
 8005bc2:	71fb      	strb	r3, [r7, #7]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	80bb      	strh	r3, [r7, #4]
    return (seed<<8) ^ crc16tab[(seed>>8) ^ next & 0x00FF];
 8005bc8:	88bb      	ldrh	r3, [r7, #4]
 8005bca:	021b      	lsls	r3, r3, #8
 8005bcc:	b21a      	sxth	r2, r3
 8005bce:	88bb      	ldrh	r3, [r7, #4]
 8005bd0:	0a1b      	lsrs	r3, r3, #8
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	79fb      	ldrb	r3, [r7, #7]
 8005bd8:	404b      	eors	r3, r1
 8005bda:	4906      	ldr	r1, [pc, #24]	; (8005bf4 <crc16_floating+0x3c>)
 8005bdc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005be0:	b21b      	sxth	r3, r3
 8005be2:	4053      	eors	r3, r2
 8005be4:	b21b      	sxth	r3, r3
 8005be6:	b29b      	uxth	r3, r3
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bc80      	pop	{r7}
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	0800a738 	.word	0x0800a738

08005bf8 <UART_get_data>:
#include <uart_proto.h>
#include <crc16.h>

int8_t UART_get_data(uart_proto_handle_t *uart, uint8_t *pu8Dest, uint16_t *pu16Dest_len)
{   
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08c      	sub	sp, #48	; 0x30
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
	uint8_t *pu8Src = uart->au8RxBuffer;   // RxBuffer  = TT 0.5 0.6 1 CR RC ST
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	3309      	adds	r3, #9
 8005c08:	62fb      	str	r3, [r7, #44]	; 0x2c
	const uint8_t *pu8Src_start = pu8Src;  // neu gap bien DA : Kp 
 8005c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0c:	623b      	str	r3, [r7, #32]
	const uint8_t *pu8Src_end = pu8Src + PROTO_BUFF_SIZE_RX - 1;
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	3310      	adds	r3, #16
 8005c12:	61fb      	str	r3, [r7, #28]
	const uint8_t *pu8Dest_start = pu8Dest;
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	61bb      	str	r3, [r7, #24]
	uint16_t crc_check = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	857b      	strh	r3, [r7, #42]	; 0x2a

	// Advance src to start byte
	while(pu8Src < pu8Src_end && *pu8Src != PROTO_START_BYTE) ++pu8Src;
 8005c1c:	e002      	b.n	8005c24 <UART_get_data+0x2c>
 8005c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c20:	3301      	adds	r3, #1
 8005c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d203      	bcs.n	8005c34 <UART_get_data+0x3c>
 8005c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d1f4      	bne.n	8005c1e <UART_get_data+0x26>
	// Set our error return val for dest_len
	*pu16Dest_len = pu8Src - pu8Src_start;
 8005c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	801a      	strh	r2, [r3, #0]
	if(pu8Src >= pu8Src_end)
 8005c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d302      	bcc.n	8005c4e <UART_get_data+0x56>
			return -1;
 8005c48:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4c:	e06c      	b.n	8005d28 <UART_get_data+0x130>

	// Loop through the data
	++pu8Src;
 8005c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c50:	3301      	adds	r3, #1
 8005c52:	62fb      	str	r3, [r7, #44]	; 0x2c
	int prev_escape = 0;
 8005c54:	2300      	movs	r3, #0
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
	char orig_char;
	while(pu8Src < pu8Src_end - 2) {
 8005c58:	e031      	b.n	8005cbe <UART_get_data+0xc6>
			if(prev_escape) {
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d014      	beq.n	8005c8a <UART_get_data+0x92>
					prev_escape = 0;
 8005c60:	2300      	movs	r3, #0
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24
					orig_char = (*pu8Src) ^ 0x20;
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	f083 0320 	eor.w	r3, r3, #32
 8005c6c:	757b      	strb	r3, [r7, #21]
					crc_check = crc16_floating(orig_char, crc_check);
 8005c6e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005c70:	7d7b      	ldrb	r3, [r7, #21]
 8005c72:	4611      	mov	r1, r2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff ff9f 	bl	8005bb8 <crc16_floating>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	857b      	strh	r3, [r7, #42]	; 0x2a
					*(pu8Dest++) = orig_char;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	60ba      	str	r2, [r7, #8]
 8005c84:	7d7a      	ldrb	r2, [r7, #21]
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	e016      	b.n	8005cb8 <UART_get_data+0xc0>
			}
			else if (*pu8Src == PROTO_ESC_BYTE) {
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b7e      	cmp	r3, #126	; 0x7e
 8005c90:	d102      	bne.n	8005c98 <UART_get_data+0xa0>
					prev_escape = 1;
 8005c92:	2301      	movs	r3, #1
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
 8005c96:	e00f      	b.n	8005cb8 <UART_get_data+0xc0>
			}
			else {
					orig_char = *pu8Src;
 8005c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	757b      	strb	r3, [r7, #21]
					crc_check = crc16_floating(orig_char, crc_check);
 8005c9e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8005ca0:	7d7b      	ldrb	r3, [r7, #21]
 8005ca2:	4611      	mov	r1, r2
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7ff ff87 	bl	8005bb8 <crc16_floating>
 8005caa:	4603      	mov	r3, r0
 8005cac:	857b      	strh	r3, [r7, #42]	; 0x2a
					*(pu8Dest++) = orig_char;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	60ba      	str	r2, [r7, #8]
 8005cb4:	7d7a      	ldrb	r2, [r7, #21]
 8005cb6:	701a      	strb	r2, [r3, #0]
			}
			++pu8Src;
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cba:	3301      	adds	r3, #1
 8005cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(pu8Src < pu8Src_end - 2) {
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	3b02      	subs	r3, #2
 8005cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d3c8      	bcc.n	8005c5a <UART_get_data+0x62>
	}

	// Check that we actually hit the end
	if(pu8Src[2] != PROTO_END_BYTE)
 8005cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cca:	3302      	adds	r3, #2
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d002      	beq.n	8005cd8 <UART_get_data+0xe0>
			return -1;
 8005cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd6:	e027      	b.n	8005d28 <UART_get_data+0x130>

	// Check CRC
	uint16_t crc = (uint16_t)(*pu8Src)<<8 | *(pu8Src+1);
 8005cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	021b      	lsls	r3, r3, #8
 8005cde:	b21a      	sxth	r2, r3
 8005ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	b21b      	sxth	r3, r3
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	b21b      	sxth	r3, r3
 8005cec:	82fb      	strh	r3, [r7, #22]
	pu8Src += 3;
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	3303      	adds	r3, #3
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(crc != crc_check) {
 8005cf4:	8afa      	ldrh	r2, [r7, #22]
 8005cf6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d008      	beq.n	8005d0e <UART_get_data+0x116>
			*pu16Dest_len = pu8Src - pu8Src_start;
 8005cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	801a      	strh	r2, [r3, #0]
			return -2;
 8005d08:	f06f 0301 	mvn.w	r3, #1
 8005d0c:	e00c      	b.n	8005d28 <UART_get_data+0x130>
	}

	*pu16Dest_len = pu8Dest - pu8Dest_start;
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	801a      	strh	r2, [r3, #0]
	return (pu8Src - pu8Src_start) - 1;
 8005d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	b25b      	sxtb	r3, r3
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3730      	adds	r7, #48	; 0x30
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <UART_frame_data>:
 // TT (DA TA) CR CR ST
 // 
void UART_frame_data(uart_proto_handle_t *uart, uint8_t *pu8Src, uint16_t u8Src_len, uint8_t *pu8Dest, uint16_t *pu16Dest_len)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	603b      	str	r3, [r7, #0]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	80fb      	strh	r3, [r7, #6]
//	uint8_t *pu8Dest = uart->au8TxBuffer;
	const uint8_t *pu8Src_end = pu8Src + u8Src_len;
 8005d40:	88fb      	ldrh	r3, [r7, #6]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	4413      	add	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]
	const uint8_t *pu8Dest_start = pu8Dest;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	613b      	str	r3, [r7, #16]
	uint16_t crc = 0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	83fb      	strh	r3, [r7, #30]

	*(pu8Dest++) = PROTO_START_BYTE;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	603a      	str	r2, [r7, #0]
 8005d56:	2202      	movs	r2, #2
 8005d58:	701a      	strb	r2, [r3, #0]

	int prev_escape = 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61bb      	str	r3, [r7, #24]
	while(pu8Src < pu8Src_end) {
 8005d5e:	e03d      	b.n	8005ddc <UART_frame_data+0xac>
			if(prev_escape) {
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d014      	beq.n	8005d90 <UART_frame_data+0x60>
					prev_escape = 0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	61bb      	str	r3, [r7, #24]
					crc = crc16_floating(*pu8Src, crc);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	8bfa      	ldrh	r2, [r7, #30]
 8005d70:	4611      	mov	r1, r2
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff ff20 	bl	8005bb8 <crc16_floating>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	83fb      	strh	r3, [r7, #30]
					*(pu8Dest++) = *(pu8Src) ^ 0x20;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	781a      	ldrb	r2, [r3, #0]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	1c59      	adds	r1, r3, #1
 8005d84:	6039      	str	r1, [r7, #0]
 8005d86:	f082 0220 	eor.w	r2, r2, #32
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	e022      	b.n	8005dd6 <UART_frame_data+0xa6>
			}
			else if (*pu8Src == PROTO_START_BYTE || *pu8Src == PROTO_ESC_BYTE || *pu8Src == PROTO_END_BYTE) {
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d007      	beq.n	8005da8 <UART_frame_data+0x78>
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2b7e      	cmp	r3, #126	; 0x7e
 8005d9e:	d003      	beq.n	8005da8 <UART_frame_data+0x78>
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d107      	bne.n	8005db8 <UART_frame_data+0x88>
					prev_escape = 1;
 8005da8:	2301      	movs	r3, #1
 8005daa:	61bb      	str	r3, [r7, #24]
					*(pu8Dest++) = PROTO_ESC_BYTE;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	1c5a      	adds	r2, r3, #1
 8005db0:	603a      	str	r2, [r7, #0]
 8005db2:	227e      	movs	r2, #126	; 0x7e
 8005db4:	701a      	strb	r2, [r3, #0]
					continue;
 8005db6:	e011      	b.n	8005ddc <UART_frame_data+0xac>
			}
			else {
					crc = crc16_floating(*pu8Src, crc);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	8bfa      	ldrh	r2, [r7, #30]
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff fef9 	bl	8005bb8 <crc16_floating>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	83fb      	strh	r3, [r7, #30]
					*(pu8Dest++) = *pu8Src;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	603a      	str	r2, [r7, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	7812      	ldrb	r2, [r2, #0]
 8005dd4:	701a      	strb	r2, [r3, #0]
			}
			++pu8Src;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	60bb      	str	r3, [r7, #8]
	while(pu8Src < pu8Src_end) {
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d3bd      	bcc.n	8005d60 <UART_frame_data+0x30>
	}

	// Set the CRC

	//Casting the CRC to lets the word be assigned to a non-word boundary in memory
	*(pu8Dest) = (char)(crc >>8);
 8005de4:	8bfb      	ldrh	r3, [r7, #30]
 8005de6:	0a1b      	lsrs	r3, r3, #8
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	701a      	strb	r2, [r3, #0]
	pu8Dest++;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	3301      	adds	r3, #1
 8005df4:	603b      	str	r3, [r7, #0]
	*(pu8Dest) = (char)crc;
 8005df6:	8bfb      	ldrh	r3, [r7, #30]
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	701a      	strb	r2, [r3, #0]
	pu8Dest++;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	3301      	adds	r3, #1
 8005e02:	603b      	str	r3, [r7, #0]

	*(pu8Dest++) = PROTO_END_BYTE;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	603a      	str	r2, [r7, #0]
 8005e0a:	2203      	movs	r2, #3
 8005e0c:	701a      	strb	r2, [r3, #0]
	*(pu16Dest_len) = pu8Dest - pu8Dest_start;
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e18:	801a      	strh	r2, [r3, #0]
}
 8005e1a:	bf00      	nop
 8005e1c:	3720      	adds	r7, #32
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <__errno>:
 8005e24:	4b01      	ldr	r3, [pc, #4]	; (8005e2c <__errno+0x8>)
 8005e26:	6818      	ldr	r0, [r3, #0]
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	20000014 	.word	0x20000014

08005e30 <__libc_init_array>:
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	2600      	movs	r6, #0
 8005e34:	4d0c      	ldr	r5, [pc, #48]	; (8005e68 <__libc_init_array+0x38>)
 8005e36:	4c0d      	ldr	r4, [pc, #52]	; (8005e6c <__libc_init_array+0x3c>)
 8005e38:	1b64      	subs	r4, r4, r5
 8005e3a:	10a4      	asrs	r4, r4, #2
 8005e3c:	42a6      	cmp	r6, r4
 8005e3e:	d109      	bne.n	8005e54 <__libc_init_array+0x24>
 8005e40:	f004 fc5a 	bl	800a6f8 <_init>
 8005e44:	2600      	movs	r6, #0
 8005e46:	4d0a      	ldr	r5, [pc, #40]	; (8005e70 <__libc_init_array+0x40>)
 8005e48:	4c0a      	ldr	r4, [pc, #40]	; (8005e74 <__libc_init_array+0x44>)
 8005e4a:	1b64      	subs	r4, r4, r5
 8005e4c:	10a4      	asrs	r4, r4, #2
 8005e4e:	42a6      	cmp	r6, r4
 8005e50:	d105      	bne.n	8005e5e <__libc_init_array+0x2e>
 8005e52:	bd70      	pop	{r4, r5, r6, pc}
 8005e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e58:	4798      	blx	r3
 8005e5a:	3601      	adds	r6, #1
 8005e5c:	e7ee      	b.n	8005e3c <__libc_init_array+0xc>
 8005e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e62:	4798      	blx	r3
 8005e64:	3601      	adds	r6, #1
 8005e66:	e7f2      	b.n	8005e4e <__libc_init_array+0x1e>
 8005e68:	0800addc 	.word	0x0800addc
 8005e6c:	0800addc 	.word	0x0800addc
 8005e70:	0800addc 	.word	0x0800addc
 8005e74:	0800ade0 	.word	0x0800ade0

08005e78 <malloc>:
 8005e78:	4b02      	ldr	r3, [pc, #8]	; (8005e84 <malloc+0xc>)
 8005e7a:	4601      	mov	r1, r0
 8005e7c:	6818      	ldr	r0, [r3, #0]
 8005e7e:	f000 b889 	b.w	8005f94 <_malloc_r>
 8005e82:	bf00      	nop
 8005e84:	20000014 	.word	0x20000014

08005e88 <free>:
 8005e88:	4b02      	ldr	r3, [pc, #8]	; (8005e94 <free+0xc>)
 8005e8a:	4601      	mov	r1, r0
 8005e8c:	6818      	ldr	r0, [r3, #0]
 8005e8e:	f000 b819 	b.w	8005ec4 <_free_r>
 8005e92:	bf00      	nop
 8005e94:	20000014 	.word	0x20000014

08005e98 <memcpy>:
 8005e98:	440a      	add	r2, r1
 8005e9a:	4291      	cmp	r1, r2
 8005e9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ea0:	d100      	bne.n	8005ea4 <memcpy+0xc>
 8005ea2:	4770      	bx	lr
 8005ea4:	b510      	push	{r4, lr}
 8005ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eaa:	4291      	cmp	r1, r2
 8005eac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eb0:	d1f9      	bne.n	8005ea6 <memcpy+0xe>
 8005eb2:	bd10      	pop	{r4, pc}

08005eb4 <memset>:
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	4402      	add	r2, r0
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d100      	bne.n	8005ebe <memset+0xa>
 8005ebc:	4770      	bx	lr
 8005ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8005ec2:	e7f9      	b.n	8005eb8 <memset+0x4>

08005ec4 <_free_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	4605      	mov	r5, r0
 8005ec8:	2900      	cmp	r1, #0
 8005eca:	d040      	beq.n	8005f4e <_free_r+0x8a>
 8005ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ed0:	1f0c      	subs	r4, r1, #4
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	bfb8      	it	lt
 8005ed6:	18e4      	addlt	r4, r4, r3
 8005ed8:	f003 f806 	bl	8008ee8 <__malloc_lock>
 8005edc:	4a1c      	ldr	r2, [pc, #112]	; (8005f50 <_free_r+0x8c>)
 8005ede:	6813      	ldr	r3, [r2, #0]
 8005ee0:	b933      	cbnz	r3, 8005ef0 <_free_r+0x2c>
 8005ee2:	6063      	str	r3, [r4, #4]
 8005ee4:	6014      	str	r4, [r2, #0]
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eec:	f003 b802 	b.w	8008ef4 <__malloc_unlock>
 8005ef0:	42a3      	cmp	r3, r4
 8005ef2:	d908      	bls.n	8005f06 <_free_r+0x42>
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	1821      	adds	r1, r4, r0
 8005ef8:	428b      	cmp	r3, r1
 8005efa:	bf01      	itttt	eq
 8005efc:	6819      	ldreq	r1, [r3, #0]
 8005efe:	685b      	ldreq	r3, [r3, #4]
 8005f00:	1809      	addeq	r1, r1, r0
 8005f02:	6021      	streq	r1, [r4, #0]
 8005f04:	e7ed      	b.n	8005ee2 <_free_r+0x1e>
 8005f06:	461a      	mov	r2, r3
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	b10b      	cbz	r3, 8005f10 <_free_r+0x4c>
 8005f0c:	42a3      	cmp	r3, r4
 8005f0e:	d9fa      	bls.n	8005f06 <_free_r+0x42>
 8005f10:	6811      	ldr	r1, [r2, #0]
 8005f12:	1850      	adds	r0, r2, r1
 8005f14:	42a0      	cmp	r0, r4
 8005f16:	d10b      	bne.n	8005f30 <_free_r+0x6c>
 8005f18:	6820      	ldr	r0, [r4, #0]
 8005f1a:	4401      	add	r1, r0
 8005f1c:	1850      	adds	r0, r2, r1
 8005f1e:	4283      	cmp	r3, r0
 8005f20:	6011      	str	r1, [r2, #0]
 8005f22:	d1e0      	bne.n	8005ee6 <_free_r+0x22>
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	4401      	add	r1, r0
 8005f2a:	6011      	str	r1, [r2, #0]
 8005f2c:	6053      	str	r3, [r2, #4]
 8005f2e:	e7da      	b.n	8005ee6 <_free_r+0x22>
 8005f30:	d902      	bls.n	8005f38 <_free_r+0x74>
 8005f32:	230c      	movs	r3, #12
 8005f34:	602b      	str	r3, [r5, #0]
 8005f36:	e7d6      	b.n	8005ee6 <_free_r+0x22>
 8005f38:	6820      	ldr	r0, [r4, #0]
 8005f3a:	1821      	adds	r1, r4, r0
 8005f3c:	428b      	cmp	r3, r1
 8005f3e:	bf01      	itttt	eq
 8005f40:	6819      	ldreq	r1, [r3, #0]
 8005f42:	685b      	ldreq	r3, [r3, #4]
 8005f44:	1809      	addeq	r1, r1, r0
 8005f46:	6021      	streq	r1, [r4, #0]
 8005f48:	6063      	str	r3, [r4, #4]
 8005f4a:	6054      	str	r4, [r2, #4]
 8005f4c:	e7cb      	b.n	8005ee6 <_free_r+0x22>
 8005f4e:	bd38      	pop	{r3, r4, r5, pc}
 8005f50:	200004f0 	.word	0x200004f0

08005f54 <sbrk_aligned>:
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	4e0e      	ldr	r6, [pc, #56]	; (8005f90 <sbrk_aligned+0x3c>)
 8005f58:	460c      	mov	r4, r1
 8005f5a:	6831      	ldr	r1, [r6, #0]
 8005f5c:	4605      	mov	r5, r0
 8005f5e:	b911      	cbnz	r1, 8005f66 <sbrk_aligned+0x12>
 8005f60:	f000 fefa 	bl	8006d58 <_sbrk_r>
 8005f64:	6030      	str	r0, [r6, #0]
 8005f66:	4621      	mov	r1, r4
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f000 fef5 	bl	8006d58 <_sbrk_r>
 8005f6e:	1c43      	adds	r3, r0, #1
 8005f70:	d00a      	beq.n	8005f88 <sbrk_aligned+0x34>
 8005f72:	1cc4      	adds	r4, r0, #3
 8005f74:	f024 0403 	bic.w	r4, r4, #3
 8005f78:	42a0      	cmp	r0, r4
 8005f7a:	d007      	beq.n	8005f8c <sbrk_aligned+0x38>
 8005f7c:	1a21      	subs	r1, r4, r0
 8005f7e:	4628      	mov	r0, r5
 8005f80:	f000 feea 	bl	8006d58 <_sbrk_r>
 8005f84:	3001      	adds	r0, #1
 8005f86:	d101      	bne.n	8005f8c <sbrk_aligned+0x38>
 8005f88:	f04f 34ff 	mov.w	r4, #4294967295
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
 8005f90:	200004f4 	.word	0x200004f4

08005f94 <_malloc_r>:
 8005f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f98:	1ccd      	adds	r5, r1, #3
 8005f9a:	f025 0503 	bic.w	r5, r5, #3
 8005f9e:	3508      	adds	r5, #8
 8005fa0:	2d0c      	cmp	r5, #12
 8005fa2:	bf38      	it	cc
 8005fa4:	250c      	movcc	r5, #12
 8005fa6:	2d00      	cmp	r5, #0
 8005fa8:	4607      	mov	r7, r0
 8005faa:	db01      	blt.n	8005fb0 <_malloc_r+0x1c>
 8005fac:	42a9      	cmp	r1, r5
 8005fae:	d905      	bls.n	8005fbc <_malloc_r+0x28>
 8005fb0:	230c      	movs	r3, #12
 8005fb2:	2600      	movs	r6, #0
 8005fb4:	603b      	str	r3, [r7, #0]
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fbc:	4e2e      	ldr	r6, [pc, #184]	; (8006078 <_malloc_r+0xe4>)
 8005fbe:	f002 ff93 	bl	8008ee8 <__malloc_lock>
 8005fc2:	6833      	ldr	r3, [r6, #0]
 8005fc4:	461c      	mov	r4, r3
 8005fc6:	bb34      	cbnz	r4, 8006016 <_malloc_r+0x82>
 8005fc8:	4629      	mov	r1, r5
 8005fca:	4638      	mov	r0, r7
 8005fcc:	f7ff ffc2 	bl	8005f54 <sbrk_aligned>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	d14d      	bne.n	8006072 <_malloc_r+0xde>
 8005fd6:	6834      	ldr	r4, [r6, #0]
 8005fd8:	4626      	mov	r6, r4
 8005fda:	2e00      	cmp	r6, #0
 8005fdc:	d140      	bne.n	8006060 <_malloc_r+0xcc>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	eb04 0803 	add.w	r8, r4, r3
 8005fe8:	f000 feb6 	bl	8006d58 <_sbrk_r>
 8005fec:	4580      	cmp	r8, r0
 8005fee:	d13a      	bne.n	8006066 <_malloc_r+0xd2>
 8005ff0:	6821      	ldr	r1, [r4, #0]
 8005ff2:	3503      	adds	r5, #3
 8005ff4:	1a6d      	subs	r5, r5, r1
 8005ff6:	f025 0503 	bic.w	r5, r5, #3
 8005ffa:	3508      	adds	r5, #8
 8005ffc:	2d0c      	cmp	r5, #12
 8005ffe:	bf38      	it	cc
 8006000:	250c      	movcc	r5, #12
 8006002:	4638      	mov	r0, r7
 8006004:	4629      	mov	r1, r5
 8006006:	f7ff ffa5 	bl	8005f54 <sbrk_aligned>
 800600a:	3001      	adds	r0, #1
 800600c:	d02b      	beq.n	8006066 <_malloc_r+0xd2>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	442b      	add	r3, r5
 8006012:	6023      	str	r3, [r4, #0]
 8006014:	e00e      	b.n	8006034 <_malloc_r+0xa0>
 8006016:	6822      	ldr	r2, [r4, #0]
 8006018:	1b52      	subs	r2, r2, r5
 800601a:	d41e      	bmi.n	800605a <_malloc_r+0xc6>
 800601c:	2a0b      	cmp	r2, #11
 800601e:	d916      	bls.n	800604e <_malloc_r+0xba>
 8006020:	1961      	adds	r1, r4, r5
 8006022:	42a3      	cmp	r3, r4
 8006024:	6025      	str	r5, [r4, #0]
 8006026:	bf18      	it	ne
 8006028:	6059      	strne	r1, [r3, #4]
 800602a:	6863      	ldr	r3, [r4, #4]
 800602c:	bf08      	it	eq
 800602e:	6031      	streq	r1, [r6, #0]
 8006030:	5162      	str	r2, [r4, r5]
 8006032:	604b      	str	r3, [r1, #4]
 8006034:	4638      	mov	r0, r7
 8006036:	f104 060b 	add.w	r6, r4, #11
 800603a:	f002 ff5b 	bl	8008ef4 <__malloc_unlock>
 800603e:	f026 0607 	bic.w	r6, r6, #7
 8006042:	1d23      	adds	r3, r4, #4
 8006044:	1af2      	subs	r2, r6, r3
 8006046:	d0b6      	beq.n	8005fb6 <_malloc_r+0x22>
 8006048:	1b9b      	subs	r3, r3, r6
 800604a:	50a3      	str	r3, [r4, r2]
 800604c:	e7b3      	b.n	8005fb6 <_malloc_r+0x22>
 800604e:	6862      	ldr	r2, [r4, #4]
 8006050:	42a3      	cmp	r3, r4
 8006052:	bf0c      	ite	eq
 8006054:	6032      	streq	r2, [r6, #0]
 8006056:	605a      	strne	r2, [r3, #4]
 8006058:	e7ec      	b.n	8006034 <_malloc_r+0xa0>
 800605a:	4623      	mov	r3, r4
 800605c:	6864      	ldr	r4, [r4, #4]
 800605e:	e7b2      	b.n	8005fc6 <_malloc_r+0x32>
 8006060:	4634      	mov	r4, r6
 8006062:	6876      	ldr	r6, [r6, #4]
 8006064:	e7b9      	b.n	8005fda <_malloc_r+0x46>
 8006066:	230c      	movs	r3, #12
 8006068:	4638      	mov	r0, r7
 800606a:	603b      	str	r3, [r7, #0]
 800606c:	f002 ff42 	bl	8008ef4 <__malloc_unlock>
 8006070:	e7a1      	b.n	8005fb6 <_malloc_r+0x22>
 8006072:	6025      	str	r5, [r4, #0]
 8006074:	e7de      	b.n	8006034 <_malloc_r+0xa0>
 8006076:	bf00      	nop
 8006078:	200004f0 	.word	0x200004f0

0800607c <__cvt>:
 800607c:	2b00      	cmp	r3, #0
 800607e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006082:	461f      	mov	r7, r3
 8006084:	bfbb      	ittet	lt
 8006086:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800608a:	461f      	movlt	r7, r3
 800608c:	2300      	movge	r3, #0
 800608e:	232d      	movlt	r3, #45	; 0x2d
 8006090:	b088      	sub	sp, #32
 8006092:	4614      	mov	r4, r2
 8006094:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006096:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006098:	7013      	strb	r3, [r2, #0]
 800609a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800609c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80060a0:	f023 0820 	bic.w	r8, r3, #32
 80060a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060a8:	d005      	beq.n	80060b6 <__cvt+0x3a>
 80060aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80060ae:	d100      	bne.n	80060b2 <__cvt+0x36>
 80060b0:	3501      	adds	r5, #1
 80060b2:	2302      	movs	r3, #2
 80060b4:	e000      	b.n	80060b8 <__cvt+0x3c>
 80060b6:	2303      	movs	r3, #3
 80060b8:	aa07      	add	r2, sp, #28
 80060ba:	9204      	str	r2, [sp, #16]
 80060bc:	aa06      	add	r2, sp, #24
 80060be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80060c2:	e9cd 3500 	strd	r3, r5, [sp]
 80060c6:	4622      	mov	r2, r4
 80060c8:	463b      	mov	r3, r7
 80060ca:	f001 fd95 	bl	8007bf8 <_dtoa_r>
 80060ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80060d2:	4606      	mov	r6, r0
 80060d4:	d102      	bne.n	80060dc <__cvt+0x60>
 80060d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060d8:	07db      	lsls	r3, r3, #31
 80060da:	d522      	bpl.n	8006122 <__cvt+0xa6>
 80060dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060e0:	eb06 0905 	add.w	r9, r6, r5
 80060e4:	d110      	bne.n	8006108 <__cvt+0x8c>
 80060e6:	7833      	ldrb	r3, [r6, #0]
 80060e8:	2b30      	cmp	r3, #48	; 0x30
 80060ea:	d10a      	bne.n	8006102 <__cvt+0x86>
 80060ec:	2200      	movs	r2, #0
 80060ee:	2300      	movs	r3, #0
 80060f0:	4620      	mov	r0, r4
 80060f2:	4639      	mov	r1, r7
 80060f4:	f7fa fc58 	bl	80009a8 <__aeabi_dcmpeq>
 80060f8:	b918      	cbnz	r0, 8006102 <__cvt+0x86>
 80060fa:	f1c5 0501 	rsb	r5, r5, #1
 80060fe:	f8ca 5000 	str.w	r5, [sl]
 8006102:	f8da 3000 	ldr.w	r3, [sl]
 8006106:	4499      	add	r9, r3
 8006108:	2200      	movs	r2, #0
 800610a:	2300      	movs	r3, #0
 800610c:	4620      	mov	r0, r4
 800610e:	4639      	mov	r1, r7
 8006110:	f7fa fc4a 	bl	80009a8 <__aeabi_dcmpeq>
 8006114:	b108      	cbz	r0, 800611a <__cvt+0x9e>
 8006116:	f8cd 901c 	str.w	r9, [sp, #28]
 800611a:	2230      	movs	r2, #48	; 0x30
 800611c:	9b07      	ldr	r3, [sp, #28]
 800611e:	454b      	cmp	r3, r9
 8006120:	d307      	bcc.n	8006132 <__cvt+0xb6>
 8006122:	4630      	mov	r0, r6
 8006124:	9b07      	ldr	r3, [sp, #28]
 8006126:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006128:	1b9b      	subs	r3, r3, r6
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	b008      	add	sp, #32
 800612e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006132:	1c59      	adds	r1, r3, #1
 8006134:	9107      	str	r1, [sp, #28]
 8006136:	701a      	strb	r2, [r3, #0]
 8006138:	e7f0      	b.n	800611c <__cvt+0xa0>

0800613a <__exponent>:
 800613a:	4603      	mov	r3, r0
 800613c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800613e:	2900      	cmp	r1, #0
 8006140:	f803 2b02 	strb.w	r2, [r3], #2
 8006144:	bfb6      	itet	lt
 8006146:	222d      	movlt	r2, #45	; 0x2d
 8006148:	222b      	movge	r2, #43	; 0x2b
 800614a:	4249      	neglt	r1, r1
 800614c:	2909      	cmp	r1, #9
 800614e:	7042      	strb	r2, [r0, #1]
 8006150:	dd2b      	ble.n	80061aa <__exponent+0x70>
 8006152:	f10d 0407 	add.w	r4, sp, #7
 8006156:	46a4      	mov	ip, r4
 8006158:	270a      	movs	r7, #10
 800615a:	fb91 f6f7 	sdiv	r6, r1, r7
 800615e:	460a      	mov	r2, r1
 8006160:	46a6      	mov	lr, r4
 8006162:	fb07 1516 	mls	r5, r7, r6, r1
 8006166:	2a63      	cmp	r2, #99	; 0x63
 8006168:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800616c:	4631      	mov	r1, r6
 800616e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006172:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006176:	dcf0      	bgt.n	800615a <__exponent+0x20>
 8006178:	3130      	adds	r1, #48	; 0x30
 800617a:	f1ae 0502 	sub.w	r5, lr, #2
 800617e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006182:	4629      	mov	r1, r5
 8006184:	1c44      	adds	r4, r0, #1
 8006186:	4561      	cmp	r1, ip
 8006188:	d30a      	bcc.n	80061a0 <__exponent+0x66>
 800618a:	f10d 0209 	add.w	r2, sp, #9
 800618e:	eba2 020e 	sub.w	r2, r2, lr
 8006192:	4565      	cmp	r5, ip
 8006194:	bf88      	it	hi
 8006196:	2200      	movhi	r2, #0
 8006198:	4413      	add	r3, r2
 800619a:	1a18      	subs	r0, r3, r0
 800619c:	b003      	add	sp, #12
 800619e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061a4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80061a8:	e7ed      	b.n	8006186 <__exponent+0x4c>
 80061aa:	2330      	movs	r3, #48	; 0x30
 80061ac:	3130      	adds	r1, #48	; 0x30
 80061ae:	7083      	strb	r3, [r0, #2]
 80061b0:	70c1      	strb	r1, [r0, #3]
 80061b2:	1d03      	adds	r3, r0, #4
 80061b4:	e7f1      	b.n	800619a <__exponent+0x60>
	...

080061b8 <_printf_float>:
 80061b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061bc:	b091      	sub	sp, #68	; 0x44
 80061be:	460c      	mov	r4, r1
 80061c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80061c4:	4616      	mov	r6, r2
 80061c6:	461f      	mov	r7, r3
 80061c8:	4605      	mov	r5, r0
 80061ca:	f002 fe69 	bl	8008ea0 <_localeconv_r>
 80061ce:	6803      	ldr	r3, [r0, #0]
 80061d0:	4618      	mov	r0, r3
 80061d2:	9309      	str	r3, [sp, #36]	; 0x24
 80061d4:	f7f9 ffbc 	bl	8000150 <strlen>
 80061d8:	2300      	movs	r3, #0
 80061da:	930e      	str	r3, [sp, #56]	; 0x38
 80061dc:	f8d8 3000 	ldr.w	r3, [r8]
 80061e0:	900a      	str	r0, [sp, #40]	; 0x28
 80061e2:	3307      	adds	r3, #7
 80061e4:	f023 0307 	bic.w	r3, r3, #7
 80061e8:	f103 0208 	add.w	r2, r3, #8
 80061ec:	f894 9018 	ldrb.w	r9, [r4, #24]
 80061f0:	f8d4 b000 	ldr.w	fp, [r4]
 80061f4:	f8c8 2000 	str.w	r2, [r8]
 80061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006200:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006204:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006208:	930b      	str	r3, [sp, #44]	; 0x2c
 800620a:	f04f 32ff 	mov.w	r2, #4294967295
 800620e:	4640      	mov	r0, r8
 8006210:	4b9c      	ldr	r3, [pc, #624]	; (8006484 <_printf_float+0x2cc>)
 8006212:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006214:	f7fa fbfa 	bl	8000a0c <__aeabi_dcmpun>
 8006218:	bb70      	cbnz	r0, 8006278 <_printf_float+0xc0>
 800621a:	f04f 32ff 	mov.w	r2, #4294967295
 800621e:	4640      	mov	r0, r8
 8006220:	4b98      	ldr	r3, [pc, #608]	; (8006484 <_printf_float+0x2cc>)
 8006222:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006224:	f7fa fbd4 	bl	80009d0 <__aeabi_dcmple>
 8006228:	bb30      	cbnz	r0, 8006278 <_printf_float+0xc0>
 800622a:	2200      	movs	r2, #0
 800622c:	2300      	movs	r3, #0
 800622e:	4640      	mov	r0, r8
 8006230:	4651      	mov	r1, sl
 8006232:	f7fa fbc3 	bl	80009bc <__aeabi_dcmplt>
 8006236:	b110      	cbz	r0, 800623e <_printf_float+0x86>
 8006238:	232d      	movs	r3, #45	; 0x2d
 800623a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800623e:	4b92      	ldr	r3, [pc, #584]	; (8006488 <_printf_float+0x2d0>)
 8006240:	4892      	ldr	r0, [pc, #584]	; (800648c <_printf_float+0x2d4>)
 8006242:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006246:	bf94      	ite	ls
 8006248:	4698      	movls	r8, r3
 800624a:	4680      	movhi	r8, r0
 800624c:	2303      	movs	r3, #3
 800624e:	f04f 0a00 	mov.w	sl, #0
 8006252:	6123      	str	r3, [r4, #16]
 8006254:	f02b 0304 	bic.w	r3, fp, #4
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	4633      	mov	r3, r6
 800625c:	4621      	mov	r1, r4
 800625e:	4628      	mov	r0, r5
 8006260:	9700      	str	r7, [sp, #0]
 8006262:	aa0f      	add	r2, sp, #60	; 0x3c
 8006264:	f000 f9d4 	bl	8006610 <_printf_common>
 8006268:	3001      	adds	r0, #1
 800626a:	f040 8090 	bne.w	800638e <_printf_float+0x1d6>
 800626e:	f04f 30ff 	mov.w	r0, #4294967295
 8006272:	b011      	add	sp, #68	; 0x44
 8006274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006278:	4642      	mov	r2, r8
 800627a:	4653      	mov	r3, sl
 800627c:	4640      	mov	r0, r8
 800627e:	4651      	mov	r1, sl
 8006280:	f7fa fbc4 	bl	8000a0c <__aeabi_dcmpun>
 8006284:	b148      	cbz	r0, 800629a <_printf_float+0xe2>
 8006286:	f1ba 0f00 	cmp.w	sl, #0
 800628a:	bfb8      	it	lt
 800628c:	232d      	movlt	r3, #45	; 0x2d
 800628e:	4880      	ldr	r0, [pc, #512]	; (8006490 <_printf_float+0x2d8>)
 8006290:	bfb8      	it	lt
 8006292:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006296:	4b7f      	ldr	r3, [pc, #508]	; (8006494 <_printf_float+0x2dc>)
 8006298:	e7d3      	b.n	8006242 <_printf_float+0x8a>
 800629a:	6863      	ldr	r3, [r4, #4]
 800629c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	d142      	bne.n	800632a <_printf_float+0x172>
 80062a4:	2306      	movs	r3, #6
 80062a6:	6063      	str	r3, [r4, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	9206      	str	r2, [sp, #24]
 80062ac:	aa0e      	add	r2, sp, #56	; 0x38
 80062ae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80062b2:	aa0d      	add	r2, sp, #52	; 0x34
 80062b4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80062b8:	9203      	str	r2, [sp, #12]
 80062ba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80062be:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80062c2:	6023      	str	r3, [r4, #0]
 80062c4:	6863      	ldr	r3, [r4, #4]
 80062c6:	4642      	mov	r2, r8
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	4628      	mov	r0, r5
 80062cc:	4653      	mov	r3, sl
 80062ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80062d0:	f7ff fed4 	bl	800607c <__cvt>
 80062d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062d6:	4680      	mov	r8, r0
 80062d8:	2947      	cmp	r1, #71	; 0x47
 80062da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80062dc:	d108      	bne.n	80062f0 <_printf_float+0x138>
 80062de:	1cc8      	adds	r0, r1, #3
 80062e0:	db02      	blt.n	80062e8 <_printf_float+0x130>
 80062e2:	6863      	ldr	r3, [r4, #4]
 80062e4:	4299      	cmp	r1, r3
 80062e6:	dd40      	ble.n	800636a <_printf_float+0x1b2>
 80062e8:	f1a9 0902 	sub.w	r9, r9, #2
 80062ec:	fa5f f989 	uxtb.w	r9, r9
 80062f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80062f4:	d81f      	bhi.n	8006336 <_printf_float+0x17e>
 80062f6:	464a      	mov	r2, r9
 80062f8:	3901      	subs	r1, #1
 80062fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80062fe:	910d      	str	r1, [sp, #52]	; 0x34
 8006300:	f7ff ff1b 	bl	800613a <__exponent>
 8006304:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006306:	4682      	mov	sl, r0
 8006308:	1813      	adds	r3, r2, r0
 800630a:	2a01      	cmp	r2, #1
 800630c:	6123      	str	r3, [r4, #16]
 800630e:	dc02      	bgt.n	8006316 <_printf_float+0x15e>
 8006310:	6822      	ldr	r2, [r4, #0]
 8006312:	07d2      	lsls	r2, r2, #31
 8006314:	d501      	bpl.n	800631a <_printf_float+0x162>
 8006316:	3301      	adds	r3, #1
 8006318:	6123      	str	r3, [r4, #16]
 800631a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800631e:	2b00      	cmp	r3, #0
 8006320:	d09b      	beq.n	800625a <_printf_float+0xa2>
 8006322:	232d      	movs	r3, #45	; 0x2d
 8006324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006328:	e797      	b.n	800625a <_printf_float+0xa2>
 800632a:	2947      	cmp	r1, #71	; 0x47
 800632c:	d1bc      	bne.n	80062a8 <_printf_float+0xf0>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1ba      	bne.n	80062a8 <_printf_float+0xf0>
 8006332:	2301      	movs	r3, #1
 8006334:	e7b7      	b.n	80062a6 <_printf_float+0xee>
 8006336:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800633a:	d118      	bne.n	800636e <_printf_float+0x1b6>
 800633c:	2900      	cmp	r1, #0
 800633e:	6863      	ldr	r3, [r4, #4]
 8006340:	dd0b      	ble.n	800635a <_printf_float+0x1a2>
 8006342:	6121      	str	r1, [r4, #16]
 8006344:	b913      	cbnz	r3, 800634c <_printf_float+0x194>
 8006346:	6822      	ldr	r2, [r4, #0]
 8006348:	07d0      	lsls	r0, r2, #31
 800634a:	d502      	bpl.n	8006352 <_printf_float+0x19a>
 800634c:	3301      	adds	r3, #1
 800634e:	440b      	add	r3, r1
 8006350:	6123      	str	r3, [r4, #16]
 8006352:	f04f 0a00 	mov.w	sl, #0
 8006356:	65a1      	str	r1, [r4, #88]	; 0x58
 8006358:	e7df      	b.n	800631a <_printf_float+0x162>
 800635a:	b913      	cbnz	r3, 8006362 <_printf_float+0x1aa>
 800635c:	6822      	ldr	r2, [r4, #0]
 800635e:	07d2      	lsls	r2, r2, #31
 8006360:	d501      	bpl.n	8006366 <_printf_float+0x1ae>
 8006362:	3302      	adds	r3, #2
 8006364:	e7f4      	b.n	8006350 <_printf_float+0x198>
 8006366:	2301      	movs	r3, #1
 8006368:	e7f2      	b.n	8006350 <_printf_float+0x198>
 800636a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800636e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006370:	4299      	cmp	r1, r3
 8006372:	db05      	blt.n	8006380 <_printf_float+0x1c8>
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	6121      	str	r1, [r4, #16]
 8006378:	07d8      	lsls	r0, r3, #31
 800637a:	d5ea      	bpl.n	8006352 <_printf_float+0x19a>
 800637c:	1c4b      	adds	r3, r1, #1
 800637e:	e7e7      	b.n	8006350 <_printf_float+0x198>
 8006380:	2900      	cmp	r1, #0
 8006382:	bfcc      	ite	gt
 8006384:	2201      	movgt	r2, #1
 8006386:	f1c1 0202 	rsble	r2, r1, #2
 800638a:	4413      	add	r3, r2
 800638c:	e7e0      	b.n	8006350 <_printf_float+0x198>
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	055a      	lsls	r2, r3, #21
 8006392:	d407      	bmi.n	80063a4 <_printf_float+0x1ec>
 8006394:	6923      	ldr	r3, [r4, #16]
 8006396:	4642      	mov	r2, r8
 8006398:	4631      	mov	r1, r6
 800639a:	4628      	mov	r0, r5
 800639c:	47b8      	blx	r7
 800639e:	3001      	adds	r0, #1
 80063a0:	d12b      	bne.n	80063fa <_printf_float+0x242>
 80063a2:	e764      	b.n	800626e <_printf_float+0xb6>
 80063a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80063a8:	f240 80dd 	bls.w	8006566 <_printf_float+0x3ae>
 80063ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063b0:	2200      	movs	r2, #0
 80063b2:	2300      	movs	r3, #0
 80063b4:	f7fa faf8 	bl	80009a8 <__aeabi_dcmpeq>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d033      	beq.n	8006424 <_printf_float+0x26c>
 80063bc:	2301      	movs	r3, #1
 80063be:	4631      	mov	r1, r6
 80063c0:	4628      	mov	r0, r5
 80063c2:	4a35      	ldr	r2, [pc, #212]	; (8006498 <_printf_float+0x2e0>)
 80063c4:	47b8      	blx	r7
 80063c6:	3001      	adds	r0, #1
 80063c8:	f43f af51 	beq.w	800626e <_printf_float+0xb6>
 80063cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80063d0:	429a      	cmp	r2, r3
 80063d2:	db02      	blt.n	80063da <_printf_float+0x222>
 80063d4:	6823      	ldr	r3, [r4, #0]
 80063d6:	07d8      	lsls	r0, r3, #31
 80063d8:	d50f      	bpl.n	80063fa <_printf_float+0x242>
 80063da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063de:	4631      	mov	r1, r6
 80063e0:	4628      	mov	r0, r5
 80063e2:	47b8      	blx	r7
 80063e4:	3001      	adds	r0, #1
 80063e6:	f43f af42 	beq.w	800626e <_printf_float+0xb6>
 80063ea:	f04f 0800 	mov.w	r8, #0
 80063ee:	f104 091a 	add.w	r9, r4, #26
 80063f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063f4:	3b01      	subs	r3, #1
 80063f6:	4543      	cmp	r3, r8
 80063f8:	dc09      	bgt.n	800640e <_printf_float+0x256>
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	079b      	lsls	r3, r3, #30
 80063fe:	f100 8102 	bmi.w	8006606 <_printf_float+0x44e>
 8006402:	68e0      	ldr	r0, [r4, #12]
 8006404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006406:	4298      	cmp	r0, r3
 8006408:	bfb8      	it	lt
 800640a:	4618      	movlt	r0, r3
 800640c:	e731      	b.n	8006272 <_printf_float+0xba>
 800640e:	2301      	movs	r3, #1
 8006410:	464a      	mov	r2, r9
 8006412:	4631      	mov	r1, r6
 8006414:	4628      	mov	r0, r5
 8006416:	47b8      	blx	r7
 8006418:	3001      	adds	r0, #1
 800641a:	f43f af28 	beq.w	800626e <_printf_float+0xb6>
 800641e:	f108 0801 	add.w	r8, r8, #1
 8006422:	e7e6      	b.n	80063f2 <_printf_float+0x23a>
 8006424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006426:	2b00      	cmp	r3, #0
 8006428:	dc38      	bgt.n	800649c <_printf_float+0x2e4>
 800642a:	2301      	movs	r3, #1
 800642c:	4631      	mov	r1, r6
 800642e:	4628      	mov	r0, r5
 8006430:	4a19      	ldr	r2, [pc, #100]	; (8006498 <_printf_float+0x2e0>)
 8006432:	47b8      	blx	r7
 8006434:	3001      	adds	r0, #1
 8006436:	f43f af1a 	beq.w	800626e <_printf_float+0xb6>
 800643a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800643e:	4313      	orrs	r3, r2
 8006440:	d102      	bne.n	8006448 <_printf_float+0x290>
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	07d9      	lsls	r1, r3, #31
 8006446:	d5d8      	bpl.n	80063fa <_printf_float+0x242>
 8006448:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800644c:	4631      	mov	r1, r6
 800644e:	4628      	mov	r0, r5
 8006450:	47b8      	blx	r7
 8006452:	3001      	adds	r0, #1
 8006454:	f43f af0b 	beq.w	800626e <_printf_float+0xb6>
 8006458:	f04f 0900 	mov.w	r9, #0
 800645c:	f104 0a1a 	add.w	sl, r4, #26
 8006460:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006462:	425b      	negs	r3, r3
 8006464:	454b      	cmp	r3, r9
 8006466:	dc01      	bgt.n	800646c <_printf_float+0x2b4>
 8006468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800646a:	e794      	b.n	8006396 <_printf_float+0x1de>
 800646c:	2301      	movs	r3, #1
 800646e:	4652      	mov	r2, sl
 8006470:	4631      	mov	r1, r6
 8006472:	4628      	mov	r0, r5
 8006474:	47b8      	blx	r7
 8006476:	3001      	adds	r0, #1
 8006478:	f43f aef9 	beq.w	800626e <_printf_float+0xb6>
 800647c:	f109 0901 	add.w	r9, r9, #1
 8006480:	e7ee      	b.n	8006460 <_printf_float+0x2a8>
 8006482:	bf00      	nop
 8006484:	7fefffff 	.word	0x7fefffff
 8006488:	0800a93c 	.word	0x0800a93c
 800648c:	0800a940 	.word	0x0800a940
 8006490:	0800a948 	.word	0x0800a948
 8006494:	0800a944 	.word	0x0800a944
 8006498:	0800a94c 	.word	0x0800a94c
 800649c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800649e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064a0:	429a      	cmp	r2, r3
 80064a2:	bfa8      	it	ge
 80064a4:	461a      	movge	r2, r3
 80064a6:	2a00      	cmp	r2, #0
 80064a8:	4691      	mov	r9, r2
 80064aa:	dc37      	bgt.n	800651c <_printf_float+0x364>
 80064ac:	f04f 0b00 	mov.w	fp, #0
 80064b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064b4:	f104 021a 	add.w	r2, r4, #26
 80064b8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80064bc:	ebaa 0309 	sub.w	r3, sl, r9
 80064c0:	455b      	cmp	r3, fp
 80064c2:	dc33      	bgt.n	800652c <_printf_float+0x374>
 80064c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80064c8:	429a      	cmp	r2, r3
 80064ca:	db3b      	blt.n	8006544 <_printf_float+0x38c>
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	07da      	lsls	r2, r3, #31
 80064d0:	d438      	bmi.n	8006544 <_printf_float+0x38c>
 80064d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064d6:	eba3 020a 	sub.w	r2, r3, sl
 80064da:	eba3 0901 	sub.w	r9, r3, r1
 80064de:	4591      	cmp	r9, r2
 80064e0:	bfa8      	it	ge
 80064e2:	4691      	movge	r9, r2
 80064e4:	f1b9 0f00 	cmp.w	r9, #0
 80064e8:	dc34      	bgt.n	8006554 <_printf_float+0x39c>
 80064ea:	f04f 0800 	mov.w	r8, #0
 80064ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064f2:	f104 0a1a 	add.w	sl, r4, #26
 80064f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80064fa:	1a9b      	subs	r3, r3, r2
 80064fc:	eba3 0309 	sub.w	r3, r3, r9
 8006500:	4543      	cmp	r3, r8
 8006502:	f77f af7a 	ble.w	80063fa <_printf_float+0x242>
 8006506:	2301      	movs	r3, #1
 8006508:	4652      	mov	r2, sl
 800650a:	4631      	mov	r1, r6
 800650c:	4628      	mov	r0, r5
 800650e:	47b8      	blx	r7
 8006510:	3001      	adds	r0, #1
 8006512:	f43f aeac 	beq.w	800626e <_printf_float+0xb6>
 8006516:	f108 0801 	add.w	r8, r8, #1
 800651a:	e7ec      	b.n	80064f6 <_printf_float+0x33e>
 800651c:	4613      	mov	r3, r2
 800651e:	4631      	mov	r1, r6
 8006520:	4642      	mov	r2, r8
 8006522:	4628      	mov	r0, r5
 8006524:	47b8      	blx	r7
 8006526:	3001      	adds	r0, #1
 8006528:	d1c0      	bne.n	80064ac <_printf_float+0x2f4>
 800652a:	e6a0      	b.n	800626e <_printf_float+0xb6>
 800652c:	2301      	movs	r3, #1
 800652e:	4631      	mov	r1, r6
 8006530:	4628      	mov	r0, r5
 8006532:	920b      	str	r2, [sp, #44]	; 0x2c
 8006534:	47b8      	blx	r7
 8006536:	3001      	adds	r0, #1
 8006538:	f43f ae99 	beq.w	800626e <_printf_float+0xb6>
 800653c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800653e:	f10b 0b01 	add.w	fp, fp, #1
 8006542:	e7b9      	b.n	80064b8 <_printf_float+0x300>
 8006544:	4631      	mov	r1, r6
 8006546:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800654a:	4628      	mov	r0, r5
 800654c:	47b8      	blx	r7
 800654e:	3001      	adds	r0, #1
 8006550:	d1bf      	bne.n	80064d2 <_printf_float+0x31a>
 8006552:	e68c      	b.n	800626e <_printf_float+0xb6>
 8006554:	464b      	mov	r3, r9
 8006556:	4631      	mov	r1, r6
 8006558:	4628      	mov	r0, r5
 800655a:	eb08 020a 	add.w	r2, r8, sl
 800655e:	47b8      	blx	r7
 8006560:	3001      	adds	r0, #1
 8006562:	d1c2      	bne.n	80064ea <_printf_float+0x332>
 8006564:	e683      	b.n	800626e <_printf_float+0xb6>
 8006566:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006568:	2a01      	cmp	r2, #1
 800656a:	dc01      	bgt.n	8006570 <_printf_float+0x3b8>
 800656c:	07db      	lsls	r3, r3, #31
 800656e:	d537      	bpl.n	80065e0 <_printf_float+0x428>
 8006570:	2301      	movs	r3, #1
 8006572:	4642      	mov	r2, r8
 8006574:	4631      	mov	r1, r6
 8006576:	4628      	mov	r0, r5
 8006578:	47b8      	blx	r7
 800657a:	3001      	adds	r0, #1
 800657c:	f43f ae77 	beq.w	800626e <_printf_float+0xb6>
 8006580:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006584:	4631      	mov	r1, r6
 8006586:	4628      	mov	r0, r5
 8006588:	47b8      	blx	r7
 800658a:	3001      	adds	r0, #1
 800658c:	f43f ae6f 	beq.w	800626e <_printf_float+0xb6>
 8006590:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006594:	2200      	movs	r2, #0
 8006596:	2300      	movs	r3, #0
 8006598:	f7fa fa06 	bl	80009a8 <__aeabi_dcmpeq>
 800659c:	b9d8      	cbnz	r0, 80065d6 <_printf_float+0x41e>
 800659e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065a0:	f108 0201 	add.w	r2, r8, #1
 80065a4:	3b01      	subs	r3, #1
 80065a6:	4631      	mov	r1, r6
 80065a8:	4628      	mov	r0, r5
 80065aa:	47b8      	blx	r7
 80065ac:	3001      	adds	r0, #1
 80065ae:	d10e      	bne.n	80065ce <_printf_float+0x416>
 80065b0:	e65d      	b.n	800626e <_printf_float+0xb6>
 80065b2:	2301      	movs	r3, #1
 80065b4:	464a      	mov	r2, r9
 80065b6:	4631      	mov	r1, r6
 80065b8:	4628      	mov	r0, r5
 80065ba:	47b8      	blx	r7
 80065bc:	3001      	adds	r0, #1
 80065be:	f43f ae56 	beq.w	800626e <_printf_float+0xb6>
 80065c2:	f108 0801 	add.w	r8, r8, #1
 80065c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065c8:	3b01      	subs	r3, #1
 80065ca:	4543      	cmp	r3, r8
 80065cc:	dcf1      	bgt.n	80065b2 <_printf_float+0x3fa>
 80065ce:	4653      	mov	r3, sl
 80065d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80065d4:	e6e0      	b.n	8006398 <_printf_float+0x1e0>
 80065d6:	f04f 0800 	mov.w	r8, #0
 80065da:	f104 091a 	add.w	r9, r4, #26
 80065de:	e7f2      	b.n	80065c6 <_printf_float+0x40e>
 80065e0:	2301      	movs	r3, #1
 80065e2:	4642      	mov	r2, r8
 80065e4:	e7df      	b.n	80065a6 <_printf_float+0x3ee>
 80065e6:	2301      	movs	r3, #1
 80065e8:	464a      	mov	r2, r9
 80065ea:	4631      	mov	r1, r6
 80065ec:	4628      	mov	r0, r5
 80065ee:	47b8      	blx	r7
 80065f0:	3001      	adds	r0, #1
 80065f2:	f43f ae3c 	beq.w	800626e <_printf_float+0xb6>
 80065f6:	f108 0801 	add.w	r8, r8, #1
 80065fa:	68e3      	ldr	r3, [r4, #12]
 80065fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80065fe:	1a5b      	subs	r3, r3, r1
 8006600:	4543      	cmp	r3, r8
 8006602:	dcf0      	bgt.n	80065e6 <_printf_float+0x42e>
 8006604:	e6fd      	b.n	8006402 <_printf_float+0x24a>
 8006606:	f04f 0800 	mov.w	r8, #0
 800660a:	f104 0919 	add.w	r9, r4, #25
 800660e:	e7f4      	b.n	80065fa <_printf_float+0x442>

08006610 <_printf_common>:
 8006610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006614:	4616      	mov	r6, r2
 8006616:	4699      	mov	r9, r3
 8006618:	688a      	ldr	r2, [r1, #8]
 800661a:	690b      	ldr	r3, [r1, #16]
 800661c:	4607      	mov	r7, r0
 800661e:	4293      	cmp	r3, r2
 8006620:	bfb8      	it	lt
 8006622:	4613      	movlt	r3, r2
 8006624:	6033      	str	r3, [r6, #0]
 8006626:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800662a:	460c      	mov	r4, r1
 800662c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006630:	b10a      	cbz	r2, 8006636 <_printf_common+0x26>
 8006632:	3301      	adds	r3, #1
 8006634:	6033      	str	r3, [r6, #0]
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	0699      	lsls	r1, r3, #26
 800663a:	bf42      	ittt	mi
 800663c:	6833      	ldrmi	r3, [r6, #0]
 800663e:	3302      	addmi	r3, #2
 8006640:	6033      	strmi	r3, [r6, #0]
 8006642:	6825      	ldr	r5, [r4, #0]
 8006644:	f015 0506 	ands.w	r5, r5, #6
 8006648:	d106      	bne.n	8006658 <_printf_common+0x48>
 800664a:	f104 0a19 	add.w	sl, r4, #25
 800664e:	68e3      	ldr	r3, [r4, #12]
 8006650:	6832      	ldr	r2, [r6, #0]
 8006652:	1a9b      	subs	r3, r3, r2
 8006654:	42ab      	cmp	r3, r5
 8006656:	dc28      	bgt.n	80066aa <_printf_common+0x9a>
 8006658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800665c:	1e13      	subs	r3, r2, #0
 800665e:	6822      	ldr	r2, [r4, #0]
 8006660:	bf18      	it	ne
 8006662:	2301      	movne	r3, #1
 8006664:	0692      	lsls	r2, r2, #26
 8006666:	d42d      	bmi.n	80066c4 <_printf_common+0xb4>
 8006668:	4649      	mov	r1, r9
 800666a:	4638      	mov	r0, r7
 800666c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006670:	47c0      	blx	r8
 8006672:	3001      	adds	r0, #1
 8006674:	d020      	beq.n	80066b8 <_printf_common+0xa8>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	68e5      	ldr	r5, [r4, #12]
 800667a:	f003 0306 	and.w	r3, r3, #6
 800667e:	2b04      	cmp	r3, #4
 8006680:	bf18      	it	ne
 8006682:	2500      	movne	r5, #0
 8006684:	6832      	ldr	r2, [r6, #0]
 8006686:	f04f 0600 	mov.w	r6, #0
 800668a:	68a3      	ldr	r3, [r4, #8]
 800668c:	bf08      	it	eq
 800668e:	1aad      	subeq	r5, r5, r2
 8006690:	6922      	ldr	r2, [r4, #16]
 8006692:	bf08      	it	eq
 8006694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006698:	4293      	cmp	r3, r2
 800669a:	bfc4      	itt	gt
 800669c:	1a9b      	subgt	r3, r3, r2
 800669e:	18ed      	addgt	r5, r5, r3
 80066a0:	341a      	adds	r4, #26
 80066a2:	42b5      	cmp	r5, r6
 80066a4:	d11a      	bne.n	80066dc <_printf_common+0xcc>
 80066a6:	2000      	movs	r0, #0
 80066a8:	e008      	b.n	80066bc <_printf_common+0xac>
 80066aa:	2301      	movs	r3, #1
 80066ac:	4652      	mov	r2, sl
 80066ae:	4649      	mov	r1, r9
 80066b0:	4638      	mov	r0, r7
 80066b2:	47c0      	blx	r8
 80066b4:	3001      	adds	r0, #1
 80066b6:	d103      	bne.n	80066c0 <_printf_common+0xb0>
 80066b8:	f04f 30ff 	mov.w	r0, #4294967295
 80066bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c0:	3501      	adds	r5, #1
 80066c2:	e7c4      	b.n	800664e <_printf_common+0x3e>
 80066c4:	2030      	movs	r0, #48	; 0x30
 80066c6:	18e1      	adds	r1, r4, r3
 80066c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066cc:	1c5a      	adds	r2, r3, #1
 80066ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066d2:	4422      	add	r2, r4
 80066d4:	3302      	adds	r3, #2
 80066d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066da:	e7c5      	b.n	8006668 <_printf_common+0x58>
 80066dc:	2301      	movs	r3, #1
 80066de:	4622      	mov	r2, r4
 80066e0:	4649      	mov	r1, r9
 80066e2:	4638      	mov	r0, r7
 80066e4:	47c0      	blx	r8
 80066e6:	3001      	adds	r0, #1
 80066e8:	d0e6      	beq.n	80066b8 <_printf_common+0xa8>
 80066ea:	3601      	adds	r6, #1
 80066ec:	e7d9      	b.n	80066a2 <_printf_common+0x92>
	...

080066f0 <_printf_i>:
 80066f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066f4:	7e0f      	ldrb	r7, [r1, #24]
 80066f6:	4691      	mov	r9, r2
 80066f8:	2f78      	cmp	r7, #120	; 0x78
 80066fa:	4680      	mov	r8, r0
 80066fc:	460c      	mov	r4, r1
 80066fe:	469a      	mov	sl, r3
 8006700:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006702:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006706:	d807      	bhi.n	8006718 <_printf_i+0x28>
 8006708:	2f62      	cmp	r7, #98	; 0x62
 800670a:	d80a      	bhi.n	8006722 <_printf_i+0x32>
 800670c:	2f00      	cmp	r7, #0
 800670e:	f000 80d9 	beq.w	80068c4 <_printf_i+0x1d4>
 8006712:	2f58      	cmp	r7, #88	; 0x58
 8006714:	f000 80a4 	beq.w	8006860 <_printf_i+0x170>
 8006718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800671c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006720:	e03a      	b.n	8006798 <_printf_i+0xa8>
 8006722:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006726:	2b15      	cmp	r3, #21
 8006728:	d8f6      	bhi.n	8006718 <_printf_i+0x28>
 800672a:	a101      	add	r1, pc, #4	; (adr r1, 8006730 <_printf_i+0x40>)
 800672c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006730:	08006789 	.word	0x08006789
 8006734:	0800679d 	.word	0x0800679d
 8006738:	08006719 	.word	0x08006719
 800673c:	08006719 	.word	0x08006719
 8006740:	08006719 	.word	0x08006719
 8006744:	08006719 	.word	0x08006719
 8006748:	0800679d 	.word	0x0800679d
 800674c:	08006719 	.word	0x08006719
 8006750:	08006719 	.word	0x08006719
 8006754:	08006719 	.word	0x08006719
 8006758:	08006719 	.word	0x08006719
 800675c:	080068ab 	.word	0x080068ab
 8006760:	080067cd 	.word	0x080067cd
 8006764:	0800688d 	.word	0x0800688d
 8006768:	08006719 	.word	0x08006719
 800676c:	08006719 	.word	0x08006719
 8006770:	080068cd 	.word	0x080068cd
 8006774:	08006719 	.word	0x08006719
 8006778:	080067cd 	.word	0x080067cd
 800677c:	08006719 	.word	0x08006719
 8006780:	08006719 	.word	0x08006719
 8006784:	08006895 	.word	0x08006895
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	1d1a      	adds	r2, r3, #4
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	602a      	str	r2, [r5, #0]
 8006790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006798:	2301      	movs	r3, #1
 800679a:	e0a4      	b.n	80068e6 <_printf_i+0x1f6>
 800679c:	6820      	ldr	r0, [r4, #0]
 800679e:	6829      	ldr	r1, [r5, #0]
 80067a0:	0606      	lsls	r6, r0, #24
 80067a2:	f101 0304 	add.w	r3, r1, #4
 80067a6:	d50a      	bpl.n	80067be <_printf_i+0xce>
 80067a8:	680e      	ldr	r6, [r1, #0]
 80067aa:	602b      	str	r3, [r5, #0]
 80067ac:	2e00      	cmp	r6, #0
 80067ae:	da03      	bge.n	80067b8 <_printf_i+0xc8>
 80067b0:	232d      	movs	r3, #45	; 0x2d
 80067b2:	4276      	negs	r6, r6
 80067b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067b8:	230a      	movs	r3, #10
 80067ba:	485e      	ldr	r0, [pc, #376]	; (8006934 <_printf_i+0x244>)
 80067bc:	e019      	b.n	80067f2 <_printf_i+0x102>
 80067be:	680e      	ldr	r6, [r1, #0]
 80067c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067c4:	602b      	str	r3, [r5, #0]
 80067c6:	bf18      	it	ne
 80067c8:	b236      	sxthne	r6, r6
 80067ca:	e7ef      	b.n	80067ac <_printf_i+0xbc>
 80067cc:	682b      	ldr	r3, [r5, #0]
 80067ce:	6820      	ldr	r0, [r4, #0]
 80067d0:	1d19      	adds	r1, r3, #4
 80067d2:	6029      	str	r1, [r5, #0]
 80067d4:	0601      	lsls	r1, r0, #24
 80067d6:	d501      	bpl.n	80067dc <_printf_i+0xec>
 80067d8:	681e      	ldr	r6, [r3, #0]
 80067da:	e002      	b.n	80067e2 <_printf_i+0xf2>
 80067dc:	0646      	lsls	r6, r0, #25
 80067de:	d5fb      	bpl.n	80067d8 <_printf_i+0xe8>
 80067e0:	881e      	ldrh	r6, [r3, #0]
 80067e2:	2f6f      	cmp	r7, #111	; 0x6f
 80067e4:	bf0c      	ite	eq
 80067e6:	2308      	moveq	r3, #8
 80067e8:	230a      	movne	r3, #10
 80067ea:	4852      	ldr	r0, [pc, #328]	; (8006934 <_printf_i+0x244>)
 80067ec:	2100      	movs	r1, #0
 80067ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067f2:	6865      	ldr	r5, [r4, #4]
 80067f4:	2d00      	cmp	r5, #0
 80067f6:	bfa8      	it	ge
 80067f8:	6821      	ldrge	r1, [r4, #0]
 80067fa:	60a5      	str	r5, [r4, #8]
 80067fc:	bfa4      	itt	ge
 80067fe:	f021 0104 	bicge.w	r1, r1, #4
 8006802:	6021      	strge	r1, [r4, #0]
 8006804:	b90e      	cbnz	r6, 800680a <_printf_i+0x11a>
 8006806:	2d00      	cmp	r5, #0
 8006808:	d04d      	beq.n	80068a6 <_printf_i+0x1b6>
 800680a:	4615      	mov	r5, r2
 800680c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006810:	fb03 6711 	mls	r7, r3, r1, r6
 8006814:	5dc7      	ldrb	r7, [r0, r7]
 8006816:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800681a:	4637      	mov	r7, r6
 800681c:	42bb      	cmp	r3, r7
 800681e:	460e      	mov	r6, r1
 8006820:	d9f4      	bls.n	800680c <_printf_i+0x11c>
 8006822:	2b08      	cmp	r3, #8
 8006824:	d10b      	bne.n	800683e <_printf_i+0x14e>
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	07de      	lsls	r6, r3, #31
 800682a:	d508      	bpl.n	800683e <_printf_i+0x14e>
 800682c:	6923      	ldr	r3, [r4, #16]
 800682e:	6861      	ldr	r1, [r4, #4]
 8006830:	4299      	cmp	r1, r3
 8006832:	bfde      	ittt	le
 8006834:	2330      	movle	r3, #48	; 0x30
 8006836:	f805 3c01 	strble.w	r3, [r5, #-1]
 800683a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800683e:	1b52      	subs	r2, r2, r5
 8006840:	6122      	str	r2, [r4, #16]
 8006842:	464b      	mov	r3, r9
 8006844:	4621      	mov	r1, r4
 8006846:	4640      	mov	r0, r8
 8006848:	f8cd a000 	str.w	sl, [sp]
 800684c:	aa03      	add	r2, sp, #12
 800684e:	f7ff fedf 	bl	8006610 <_printf_common>
 8006852:	3001      	adds	r0, #1
 8006854:	d14c      	bne.n	80068f0 <_printf_i+0x200>
 8006856:	f04f 30ff 	mov.w	r0, #4294967295
 800685a:	b004      	add	sp, #16
 800685c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006860:	4834      	ldr	r0, [pc, #208]	; (8006934 <_printf_i+0x244>)
 8006862:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006866:	6829      	ldr	r1, [r5, #0]
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	f851 6b04 	ldr.w	r6, [r1], #4
 800686e:	6029      	str	r1, [r5, #0]
 8006870:	061d      	lsls	r5, r3, #24
 8006872:	d514      	bpl.n	800689e <_printf_i+0x1ae>
 8006874:	07df      	lsls	r7, r3, #31
 8006876:	bf44      	itt	mi
 8006878:	f043 0320 	orrmi.w	r3, r3, #32
 800687c:	6023      	strmi	r3, [r4, #0]
 800687e:	b91e      	cbnz	r6, 8006888 <_printf_i+0x198>
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	f023 0320 	bic.w	r3, r3, #32
 8006886:	6023      	str	r3, [r4, #0]
 8006888:	2310      	movs	r3, #16
 800688a:	e7af      	b.n	80067ec <_printf_i+0xfc>
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	f043 0320 	orr.w	r3, r3, #32
 8006892:	6023      	str	r3, [r4, #0]
 8006894:	2378      	movs	r3, #120	; 0x78
 8006896:	4828      	ldr	r0, [pc, #160]	; (8006938 <_printf_i+0x248>)
 8006898:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800689c:	e7e3      	b.n	8006866 <_printf_i+0x176>
 800689e:	0659      	lsls	r1, r3, #25
 80068a0:	bf48      	it	mi
 80068a2:	b2b6      	uxthmi	r6, r6
 80068a4:	e7e6      	b.n	8006874 <_printf_i+0x184>
 80068a6:	4615      	mov	r5, r2
 80068a8:	e7bb      	b.n	8006822 <_printf_i+0x132>
 80068aa:	682b      	ldr	r3, [r5, #0]
 80068ac:	6826      	ldr	r6, [r4, #0]
 80068ae:	1d18      	adds	r0, r3, #4
 80068b0:	6961      	ldr	r1, [r4, #20]
 80068b2:	6028      	str	r0, [r5, #0]
 80068b4:	0635      	lsls	r5, r6, #24
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	d501      	bpl.n	80068be <_printf_i+0x1ce>
 80068ba:	6019      	str	r1, [r3, #0]
 80068bc:	e002      	b.n	80068c4 <_printf_i+0x1d4>
 80068be:	0670      	lsls	r0, r6, #25
 80068c0:	d5fb      	bpl.n	80068ba <_printf_i+0x1ca>
 80068c2:	8019      	strh	r1, [r3, #0]
 80068c4:	2300      	movs	r3, #0
 80068c6:	4615      	mov	r5, r2
 80068c8:	6123      	str	r3, [r4, #16]
 80068ca:	e7ba      	b.n	8006842 <_printf_i+0x152>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	2100      	movs	r1, #0
 80068d0:	1d1a      	adds	r2, r3, #4
 80068d2:	602a      	str	r2, [r5, #0]
 80068d4:	681d      	ldr	r5, [r3, #0]
 80068d6:	6862      	ldr	r2, [r4, #4]
 80068d8:	4628      	mov	r0, r5
 80068da:	f002 faf7 	bl	8008ecc <memchr>
 80068de:	b108      	cbz	r0, 80068e4 <_printf_i+0x1f4>
 80068e0:	1b40      	subs	r0, r0, r5
 80068e2:	6060      	str	r0, [r4, #4]
 80068e4:	6863      	ldr	r3, [r4, #4]
 80068e6:	6123      	str	r3, [r4, #16]
 80068e8:	2300      	movs	r3, #0
 80068ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068ee:	e7a8      	b.n	8006842 <_printf_i+0x152>
 80068f0:	462a      	mov	r2, r5
 80068f2:	4649      	mov	r1, r9
 80068f4:	4640      	mov	r0, r8
 80068f6:	6923      	ldr	r3, [r4, #16]
 80068f8:	47d0      	blx	sl
 80068fa:	3001      	adds	r0, #1
 80068fc:	d0ab      	beq.n	8006856 <_printf_i+0x166>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	079b      	lsls	r3, r3, #30
 8006902:	d413      	bmi.n	800692c <_printf_i+0x23c>
 8006904:	68e0      	ldr	r0, [r4, #12]
 8006906:	9b03      	ldr	r3, [sp, #12]
 8006908:	4298      	cmp	r0, r3
 800690a:	bfb8      	it	lt
 800690c:	4618      	movlt	r0, r3
 800690e:	e7a4      	b.n	800685a <_printf_i+0x16a>
 8006910:	2301      	movs	r3, #1
 8006912:	4632      	mov	r2, r6
 8006914:	4649      	mov	r1, r9
 8006916:	4640      	mov	r0, r8
 8006918:	47d0      	blx	sl
 800691a:	3001      	adds	r0, #1
 800691c:	d09b      	beq.n	8006856 <_printf_i+0x166>
 800691e:	3501      	adds	r5, #1
 8006920:	68e3      	ldr	r3, [r4, #12]
 8006922:	9903      	ldr	r1, [sp, #12]
 8006924:	1a5b      	subs	r3, r3, r1
 8006926:	42ab      	cmp	r3, r5
 8006928:	dcf2      	bgt.n	8006910 <_printf_i+0x220>
 800692a:	e7eb      	b.n	8006904 <_printf_i+0x214>
 800692c:	2500      	movs	r5, #0
 800692e:	f104 0619 	add.w	r6, r4, #25
 8006932:	e7f5      	b.n	8006920 <_printf_i+0x230>
 8006934:	0800a94e 	.word	0x0800a94e
 8006938:	0800a95f 	.word	0x0800a95f

0800693c <_scanf_float>:
 800693c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006940:	b087      	sub	sp, #28
 8006942:	9303      	str	r3, [sp, #12]
 8006944:	688b      	ldr	r3, [r1, #8]
 8006946:	4617      	mov	r7, r2
 8006948:	1e5a      	subs	r2, r3, #1
 800694a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800694e:	bf85      	ittet	hi
 8006950:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006954:	195b      	addhi	r3, r3, r5
 8006956:	2300      	movls	r3, #0
 8006958:	9302      	strhi	r3, [sp, #8]
 800695a:	bf88      	it	hi
 800695c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006960:	468b      	mov	fp, r1
 8006962:	f04f 0500 	mov.w	r5, #0
 8006966:	bf8c      	ite	hi
 8006968:	608b      	strhi	r3, [r1, #8]
 800696a:	9302      	strls	r3, [sp, #8]
 800696c:	680b      	ldr	r3, [r1, #0]
 800696e:	4680      	mov	r8, r0
 8006970:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006974:	f84b 3b1c 	str.w	r3, [fp], #28
 8006978:	460c      	mov	r4, r1
 800697a:	465e      	mov	r6, fp
 800697c:	46aa      	mov	sl, r5
 800697e:	46a9      	mov	r9, r5
 8006980:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006984:	9501      	str	r5, [sp, #4]
 8006986:	68a2      	ldr	r2, [r4, #8]
 8006988:	b152      	cbz	r2, 80069a0 <_scanf_float+0x64>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2b4e      	cmp	r3, #78	; 0x4e
 8006990:	d864      	bhi.n	8006a5c <_scanf_float+0x120>
 8006992:	2b40      	cmp	r3, #64	; 0x40
 8006994:	d83c      	bhi.n	8006a10 <_scanf_float+0xd4>
 8006996:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800699a:	b2c8      	uxtb	r0, r1
 800699c:	280e      	cmp	r0, #14
 800699e:	d93a      	bls.n	8006a16 <_scanf_float+0xda>
 80069a0:	f1b9 0f00 	cmp.w	r9, #0
 80069a4:	d003      	beq.n	80069ae <_scanf_float+0x72>
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069ac:	6023      	str	r3, [r4, #0]
 80069ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069b2:	f1ba 0f01 	cmp.w	sl, #1
 80069b6:	f200 8113 	bhi.w	8006be0 <_scanf_float+0x2a4>
 80069ba:	455e      	cmp	r6, fp
 80069bc:	f200 8105 	bhi.w	8006bca <_scanf_float+0x28e>
 80069c0:	2501      	movs	r5, #1
 80069c2:	4628      	mov	r0, r5
 80069c4:	b007      	add	sp, #28
 80069c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80069ce:	2a0d      	cmp	r2, #13
 80069d0:	d8e6      	bhi.n	80069a0 <_scanf_float+0x64>
 80069d2:	a101      	add	r1, pc, #4	; (adr r1, 80069d8 <_scanf_float+0x9c>)
 80069d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80069d8:	08006b17 	.word	0x08006b17
 80069dc:	080069a1 	.word	0x080069a1
 80069e0:	080069a1 	.word	0x080069a1
 80069e4:	080069a1 	.word	0x080069a1
 80069e8:	08006b77 	.word	0x08006b77
 80069ec:	08006b4f 	.word	0x08006b4f
 80069f0:	080069a1 	.word	0x080069a1
 80069f4:	080069a1 	.word	0x080069a1
 80069f8:	08006b25 	.word	0x08006b25
 80069fc:	080069a1 	.word	0x080069a1
 8006a00:	080069a1 	.word	0x080069a1
 8006a04:	080069a1 	.word	0x080069a1
 8006a08:	080069a1 	.word	0x080069a1
 8006a0c:	08006add 	.word	0x08006add
 8006a10:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006a14:	e7db      	b.n	80069ce <_scanf_float+0x92>
 8006a16:	290e      	cmp	r1, #14
 8006a18:	d8c2      	bhi.n	80069a0 <_scanf_float+0x64>
 8006a1a:	a001      	add	r0, pc, #4	; (adr r0, 8006a20 <_scanf_float+0xe4>)
 8006a1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006a20:	08006acf 	.word	0x08006acf
 8006a24:	080069a1 	.word	0x080069a1
 8006a28:	08006acf 	.word	0x08006acf
 8006a2c:	08006b63 	.word	0x08006b63
 8006a30:	080069a1 	.word	0x080069a1
 8006a34:	08006a7d 	.word	0x08006a7d
 8006a38:	08006ab9 	.word	0x08006ab9
 8006a3c:	08006ab9 	.word	0x08006ab9
 8006a40:	08006ab9 	.word	0x08006ab9
 8006a44:	08006ab9 	.word	0x08006ab9
 8006a48:	08006ab9 	.word	0x08006ab9
 8006a4c:	08006ab9 	.word	0x08006ab9
 8006a50:	08006ab9 	.word	0x08006ab9
 8006a54:	08006ab9 	.word	0x08006ab9
 8006a58:	08006ab9 	.word	0x08006ab9
 8006a5c:	2b6e      	cmp	r3, #110	; 0x6e
 8006a5e:	d809      	bhi.n	8006a74 <_scanf_float+0x138>
 8006a60:	2b60      	cmp	r3, #96	; 0x60
 8006a62:	d8b2      	bhi.n	80069ca <_scanf_float+0x8e>
 8006a64:	2b54      	cmp	r3, #84	; 0x54
 8006a66:	d077      	beq.n	8006b58 <_scanf_float+0x21c>
 8006a68:	2b59      	cmp	r3, #89	; 0x59
 8006a6a:	d199      	bne.n	80069a0 <_scanf_float+0x64>
 8006a6c:	2d07      	cmp	r5, #7
 8006a6e:	d197      	bne.n	80069a0 <_scanf_float+0x64>
 8006a70:	2508      	movs	r5, #8
 8006a72:	e029      	b.n	8006ac8 <_scanf_float+0x18c>
 8006a74:	2b74      	cmp	r3, #116	; 0x74
 8006a76:	d06f      	beq.n	8006b58 <_scanf_float+0x21c>
 8006a78:	2b79      	cmp	r3, #121	; 0x79
 8006a7a:	e7f6      	b.n	8006a6a <_scanf_float+0x12e>
 8006a7c:	6821      	ldr	r1, [r4, #0]
 8006a7e:	05c8      	lsls	r0, r1, #23
 8006a80:	d51a      	bpl.n	8006ab8 <_scanf_float+0x17c>
 8006a82:	9b02      	ldr	r3, [sp, #8]
 8006a84:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006a88:	6021      	str	r1, [r4, #0]
 8006a8a:	f109 0901 	add.w	r9, r9, #1
 8006a8e:	b11b      	cbz	r3, 8006a98 <_scanf_float+0x15c>
 8006a90:	3b01      	subs	r3, #1
 8006a92:	3201      	adds	r2, #1
 8006a94:	9302      	str	r3, [sp, #8]
 8006a96:	60a2      	str	r2, [r4, #8]
 8006a98:	68a3      	ldr	r3, [r4, #8]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	60a3      	str	r3, [r4, #8]
 8006a9e:	6923      	ldr	r3, [r4, #16]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	6123      	str	r3, [r4, #16]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	607b      	str	r3, [r7, #4]
 8006aac:	f340 8084 	ble.w	8006bb8 <_scanf_float+0x27c>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	603b      	str	r3, [r7, #0]
 8006ab6:	e766      	b.n	8006986 <_scanf_float+0x4a>
 8006ab8:	eb1a 0f05 	cmn.w	sl, r5
 8006abc:	f47f af70 	bne.w	80069a0 <_scanf_float+0x64>
 8006ac0:	6822      	ldr	r2, [r4, #0]
 8006ac2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006ac6:	6022      	str	r2, [r4, #0]
 8006ac8:	f806 3b01 	strb.w	r3, [r6], #1
 8006acc:	e7e4      	b.n	8006a98 <_scanf_float+0x15c>
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	0610      	lsls	r0, r2, #24
 8006ad2:	f57f af65 	bpl.w	80069a0 <_scanf_float+0x64>
 8006ad6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ada:	e7f4      	b.n	8006ac6 <_scanf_float+0x18a>
 8006adc:	f1ba 0f00 	cmp.w	sl, #0
 8006ae0:	d10e      	bne.n	8006b00 <_scanf_float+0x1c4>
 8006ae2:	f1b9 0f00 	cmp.w	r9, #0
 8006ae6:	d10e      	bne.n	8006b06 <_scanf_float+0x1ca>
 8006ae8:	6822      	ldr	r2, [r4, #0]
 8006aea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006aee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006af2:	d108      	bne.n	8006b06 <_scanf_float+0x1ca>
 8006af4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006af8:	f04f 0a01 	mov.w	sl, #1
 8006afc:	6022      	str	r2, [r4, #0]
 8006afe:	e7e3      	b.n	8006ac8 <_scanf_float+0x18c>
 8006b00:	f1ba 0f02 	cmp.w	sl, #2
 8006b04:	d055      	beq.n	8006bb2 <_scanf_float+0x276>
 8006b06:	2d01      	cmp	r5, #1
 8006b08:	d002      	beq.n	8006b10 <_scanf_float+0x1d4>
 8006b0a:	2d04      	cmp	r5, #4
 8006b0c:	f47f af48 	bne.w	80069a0 <_scanf_float+0x64>
 8006b10:	3501      	adds	r5, #1
 8006b12:	b2ed      	uxtb	r5, r5
 8006b14:	e7d8      	b.n	8006ac8 <_scanf_float+0x18c>
 8006b16:	f1ba 0f01 	cmp.w	sl, #1
 8006b1a:	f47f af41 	bne.w	80069a0 <_scanf_float+0x64>
 8006b1e:	f04f 0a02 	mov.w	sl, #2
 8006b22:	e7d1      	b.n	8006ac8 <_scanf_float+0x18c>
 8006b24:	b97d      	cbnz	r5, 8006b46 <_scanf_float+0x20a>
 8006b26:	f1b9 0f00 	cmp.w	r9, #0
 8006b2a:	f47f af3c 	bne.w	80069a6 <_scanf_float+0x6a>
 8006b2e:	6822      	ldr	r2, [r4, #0]
 8006b30:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b34:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b38:	f47f af39 	bne.w	80069ae <_scanf_float+0x72>
 8006b3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b40:	2501      	movs	r5, #1
 8006b42:	6022      	str	r2, [r4, #0]
 8006b44:	e7c0      	b.n	8006ac8 <_scanf_float+0x18c>
 8006b46:	2d03      	cmp	r5, #3
 8006b48:	d0e2      	beq.n	8006b10 <_scanf_float+0x1d4>
 8006b4a:	2d05      	cmp	r5, #5
 8006b4c:	e7de      	b.n	8006b0c <_scanf_float+0x1d0>
 8006b4e:	2d02      	cmp	r5, #2
 8006b50:	f47f af26 	bne.w	80069a0 <_scanf_float+0x64>
 8006b54:	2503      	movs	r5, #3
 8006b56:	e7b7      	b.n	8006ac8 <_scanf_float+0x18c>
 8006b58:	2d06      	cmp	r5, #6
 8006b5a:	f47f af21 	bne.w	80069a0 <_scanf_float+0x64>
 8006b5e:	2507      	movs	r5, #7
 8006b60:	e7b2      	b.n	8006ac8 <_scanf_float+0x18c>
 8006b62:	6822      	ldr	r2, [r4, #0]
 8006b64:	0591      	lsls	r1, r2, #22
 8006b66:	f57f af1b 	bpl.w	80069a0 <_scanf_float+0x64>
 8006b6a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006b6e:	6022      	str	r2, [r4, #0]
 8006b70:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b74:	e7a8      	b.n	8006ac8 <_scanf_float+0x18c>
 8006b76:	6822      	ldr	r2, [r4, #0]
 8006b78:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006b7c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006b80:	d006      	beq.n	8006b90 <_scanf_float+0x254>
 8006b82:	0550      	lsls	r0, r2, #21
 8006b84:	f57f af0c 	bpl.w	80069a0 <_scanf_float+0x64>
 8006b88:	f1b9 0f00 	cmp.w	r9, #0
 8006b8c:	f43f af0f 	beq.w	80069ae <_scanf_float+0x72>
 8006b90:	0591      	lsls	r1, r2, #22
 8006b92:	bf58      	it	pl
 8006b94:	9901      	ldrpl	r1, [sp, #4]
 8006b96:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b9a:	bf58      	it	pl
 8006b9c:	eba9 0101 	subpl.w	r1, r9, r1
 8006ba0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006ba4:	f04f 0900 	mov.w	r9, #0
 8006ba8:	bf58      	it	pl
 8006baa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006bae:	6022      	str	r2, [r4, #0]
 8006bb0:	e78a      	b.n	8006ac8 <_scanf_float+0x18c>
 8006bb2:	f04f 0a03 	mov.w	sl, #3
 8006bb6:	e787      	b.n	8006ac8 <_scanf_float+0x18c>
 8006bb8:	4639      	mov	r1, r7
 8006bba:	4640      	mov	r0, r8
 8006bbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006bc0:	4798      	blx	r3
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	f43f aedf 	beq.w	8006986 <_scanf_float+0x4a>
 8006bc8:	e6ea      	b.n	80069a0 <_scanf_float+0x64>
 8006bca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bce:	463a      	mov	r2, r7
 8006bd0:	4640      	mov	r0, r8
 8006bd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bd6:	4798      	blx	r3
 8006bd8:	6923      	ldr	r3, [r4, #16]
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	6123      	str	r3, [r4, #16]
 8006bde:	e6ec      	b.n	80069ba <_scanf_float+0x7e>
 8006be0:	1e6b      	subs	r3, r5, #1
 8006be2:	2b06      	cmp	r3, #6
 8006be4:	d825      	bhi.n	8006c32 <_scanf_float+0x2f6>
 8006be6:	2d02      	cmp	r5, #2
 8006be8:	d836      	bhi.n	8006c58 <_scanf_float+0x31c>
 8006bea:	455e      	cmp	r6, fp
 8006bec:	f67f aee8 	bls.w	80069c0 <_scanf_float+0x84>
 8006bf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bf4:	463a      	mov	r2, r7
 8006bf6:	4640      	mov	r0, r8
 8006bf8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bfc:	4798      	blx	r3
 8006bfe:	6923      	ldr	r3, [r4, #16]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	6123      	str	r3, [r4, #16]
 8006c04:	e7f1      	b.n	8006bea <_scanf_float+0x2ae>
 8006c06:	9802      	ldr	r0, [sp, #8]
 8006c08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c0c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006c10:	463a      	mov	r2, r7
 8006c12:	9002      	str	r0, [sp, #8]
 8006c14:	4640      	mov	r0, r8
 8006c16:	4798      	blx	r3
 8006c18:	6923      	ldr	r3, [r4, #16]
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	6123      	str	r3, [r4, #16]
 8006c1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c22:	fa5f fa8a 	uxtb.w	sl, sl
 8006c26:	f1ba 0f02 	cmp.w	sl, #2
 8006c2a:	d1ec      	bne.n	8006c06 <_scanf_float+0x2ca>
 8006c2c:	3d03      	subs	r5, #3
 8006c2e:	b2ed      	uxtb	r5, r5
 8006c30:	1b76      	subs	r6, r6, r5
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	05da      	lsls	r2, r3, #23
 8006c36:	d52f      	bpl.n	8006c98 <_scanf_float+0x35c>
 8006c38:	055b      	lsls	r3, r3, #21
 8006c3a:	d510      	bpl.n	8006c5e <_scanf_float+0x322>
 8006c3c:	455e      	cmp	r6, fp
 8006c3e:	f67f aebf 	bls.w	80069c0 <_scanf_float+0x84>
 8006c42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c46:	463a      	mov	r2, r7
 8006c48:	4640      	mov	r0, r8
 8006c4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c4e:	4798      	blx	r3
 8006c50:	6923      	ldr	r3, [r4, #16]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	6123      	str	r3, [r4, #16]
 8006c56:	e7f1      	b.n	8006c3c <_scanf_float+0x300>
 8006c58:	46aa      	mov	sl, r5
 8006c5a:	9602      	str	r6, [sp, #8]
 8006c5c:	e7df      	b.n	8006c1e <_scanf_float+0x2e2>
 8006c5e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006c62:	6923      	ldr	r3, [r4, #16]
 8006c64:	2965      	cmp	r1, #101	; 0x65
 8006c66:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c6a:	f106 35ff 	add.w	r5, r6, #4294967295
 8006c6e:	6123      	str	r3, [r4, #16]
 8006c70:	d00c      	beq.n	8006c8c <_scanf_float+0x350>
 8006c72:	2945      	cmp	r1, #69	; 0x45
 8006c74:	d00a      	beq.n	8006c8c <_scanf_float+0x350>
 8006c76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c7a:	463a      	mov	r2, r7
 8006c7c:	4640      	mov	r0, r8
 8006c7e:	4798      	blx	r3
 8006c80:	6923      	ldr	r3, [r4, #16]
 8006c82:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	1eb5      	subs	r5, r6, #2
 8006c8a:	6123      	str	r3, [r4, #16]
 8006c8c:	463a      	mov	r2, r7
 8006c8e:	4640      	mov	r0, r8
 8006c90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c94:	4798      	blx	r3
 8006c96:	462e      	mov	r6, r5
 8006c98:	6825      	ldr	r5, [r4, #0]
 8006c9a:	f015 0510 	ands.w	r5, r5, #16
 8006c9e:	d155      	bne.n	8006d4c <_scanf_float+0x410>
 8006ca0:	7035      	strb	r5, [r6, #0]
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cac:	d11b      	bne.n	8006ce6 <_scanf_float+0x3aa>
 8006cae:	9b01      	ldr	r3, [sp, #4]
 8006cb0:	454b      	cmp	r3, r9
 8006cb2:	eba3 0209 	sub.w	r2, r3, r9
 8006cb6:	d123      	bne.n	8006d00 <_scanf_float+0x3c4>
 8006cb8:	2200      	movs	r2, #0
 8006cba:	4659      	mov	r1, fp
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	f000 fe8b 	bl	80079d8 <_strtod_r>
 8006cc2:	6822      	ldr	r2, [r4, #0]
 8006cc4:	9b03      	ldr	r3, [sp, #12]
 8006cc6:	f012 0f02 	tst.w	r2, #2
 8006cca:	4606      	mov	r6, r0
 8006ccc:	460f      	mov	r7, r1
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	d021      	beq.n	8006d16 <_scanf_float+0x3da>
 8006cd2:	1d1a      	adds	r2, r3, #4
 8006cd4:	9903      	ldr	r1, [sp, #12]
 8006cd6:	600a      	str	r2, [r1, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	e9c3 6700 	strd	r6, r7, [r3]
 8006cde:	68e3      	ldr	r3, [r4, #12]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	60e3      	str	r3, [r4, #12]
 8006ce4:	e66d      	b.n	80069c2 <_scanf_float+0x86>
 8006ce6:	9b04      	ldr	r3, [sp, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d0e5      	beq.n	8006cb8 <_scanf_float+0x37c>
 8006cec:	9905      	ldr	r1, [sp, #20]
 8006cee:	230a      	movs	r3, #10
 8006cf0:	462a      	mov	r2, r5
 8006cf2:	4640      	mov	r0, r8
 8006cf4:	3101      	adds	r1, #1
 8006cf6:	f000 fef1 	bl	8007adc <_strtol_r>
 8006cfa:	9b04      	ldr	r3, [sp, #16]
 8006cfc:	9e05      	ldr	r6, [sp, #20]
 8006cfe:	1ac2      	subs	r2, r0, r3
 8006d00:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006d04:	429e      	cmp	r6, r3
 8006d06:	bf28      	it	cs
 8006d08:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	4910      	ldr	r1, [pc, #64]	; (8006d50 <_scanf_float+0x414>)
 8006d10:	f000 f836 	bl	8006d80 <siprintf>
 8006d14:	e7d0      	b.n	8006cb8 <_scanf_float+0x37c>
 8006d16:	f012 0f04 	tst.w	r2, #4
 8006d1a:	f103 0204 	add.w	r2, r3, #4
 8006d1e:	d1d9      	bne.n	8006cd4 <_scanf_float+0x398>
 8006d20:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006d24:	f8cc 2000 	str.w	r2, [ip]
 8006d28:	f8d3 8000 	ldr.w	r8, [r3]
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	f7f9 fe6c 	bl	8000a0c <__aeabi_dcmpun>
 8006d34:	b128      	cbz	r0, 8006d42 <_scanf_float+0x406>
 8006d36:	4807      	ldr	r0, [pc, #28]	; (8006d54 <_scanf_float+0x418>)
 8006d38:	f000 f81e 	bl	8006d78 <nanf>
 8006d3c:	f8c8 0000 	str.w	r0, [r8]
 8006d40:	e7cd      	b.n	8006cde <_scanf_float+0x3a2>
 8006d42:	4630      	mov	r0, r6
 8006d44:	4639      	mov	r1, r7
 8006d46:	f7f9 febf 	bl	8000ac8 <__aeabi_d2f>
 8006d4a:	e7f7      	b.n	8006d3c <_scanf_float+0x400>
 8006d4c:	2500      	movs	r5, #0
 8006d4e:	e638      	b.n	80069c2 <_scanf_float+0x86>
 8006d50:	0800a970 	.word	0x0800a970
 8006d54:	0800ad78 	.word	0x0800ad78

08006d58 <_sbrk_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	4d05      	ldr	r5, [pc, #20]	; (8006d74 <_sbrk_r+0x1c>)
 8006d5e:	4604      	mov	r4, r0
 8006d60:	4608      	mov	r0, r1
 8006d62:	602b      	str	r3, [r5, #0]
 8006d64:	f7fb fd80 	bl	8002868 <_sbrk>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_sbrk_r+0x1a>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_sbrk_r+0x1a>
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	200004f8 	.word	0x200004f8

08006d78 <nanf>:
 8006d78:	4800      	ldr	r0, [pc, #0]	; (8006d7c <nanf+0x4>)
 8006d7a:	4770      	bx	lr
 8006d7c:	7fc00000 	.word	0x7fc00000

08006d80 <siprintf>:
 8006d80:	b40e      	push	{r1, r2, r3}
 8006d82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d86:	b500      	push	{lr}
 8006d88:	b09c      	sub	sp, #112	; 0x70
 8006d8a:	ab1d      	add	r3, sp, #116	; 0x74
 8006d8c:	9002      	str	r0, [sp, #8]
 8006d8e:	9006      	str	r0, [sp, #24]
 8006d90:	9107      	str	r1, [sp, #28]
 8006d92:	9104      	str	r1, [sp, #16]
 8006d94:	4808      	ldr	r0, [pc, #32]	; (8006db8 <siprintf+0x38>)
 8006d96:	4909      	ldr	r1, [pc, #36]	; (8006dbc <siprintf+0x3c>)
 8006d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d9c:	9105      	str	r1, [sp, #20]
 8006d9e:	6800      	ldr	r0, [r0, #0]
 8006da0:	a902      	add	r1, sp, #8
 8006da2:	9301      	str	r3, [sp, #4]
 8006da4:	f002 fdd4 	bl	8009950 <_svfiprintf_r>
 8006da8:	2200      	movs	r2, #0
 8006daa:	9b02      	ldr	r3, [sp, #8]
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	b01c      	add	sp, #112	; 0x70
 8006db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006db4:	b003      	add	sp, #12
 8006db6:	4770      	bx	lr
 8006db8:	20000014 	.word	0x20000014
 8006dbc:	ffff0208 	.word	0xffff0208

08006dc0 <sulp>:
 8006dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc4:	460f      	mov	r7, r1
 8006dc6:	4690      	mov	r8, r2
 8006dc8:	f002 fc0a 	bl	80095e0 <__ulp>
 8006dcc:	4604      	mov	r4, r0
 8006dce:	460d      	mov	r5, r1
 8006dd0:	f1b8 0f00 	cmp.w	r8, #0
 8006dd4:	d011      	beq.n	8006dfa <sulp+0x3a>
 8006dd6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006dda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	dd0b      	ble.n	8006dfa <sulp+0x3a>
 8006de2:	2400      	movs	r4, #0
 8006de4:	051b      	lsls	r3, r3, #20
 8006de6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006dea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006dee:	4622      	mov	r2, r4
 8006df0:	462b      	mov	r3, r5
 8006df2:	f7f9 fb71 	bl	80004d8 <__aeabi_dmul>
 8006df6:	4604      	mov	r4, r0
 8006df8:	460d      	mov	r5, r1
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e02:	0000      	movs	r0, r0
 8006e04:	0000      	movs	r0, r0
	...

08006e08 <_strtod_l>:
 8006e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0c:	469b      	mov	fp, r3
 8006e0e:	2300      	movs	r3, #0
 8006e10:	b09f      	sub	sp, #124	; 0x7c
 8006e12:	931a      	str	r3, [sp, #104]	; 0x68
 8006e14:	4b9e      	ldr	r3, [pc, #632]	; (8007090 <_strtod_l+0x288>)
 8006e16:	4682      	mov	sl, r0
 8006e18:	681f      	ldr	r7, [r3, #0]
 8006e1a:	460e      	mov	r6, r1
 8006e1c:	4638      	mov	r0, r7
 8006e1e:	9215      	str	r2, [sp, #84]	; 0x54
 8006e20:	f7f9 f996 	bl	8000150 <strlen>
 8006e24:	f04f 0800 	mov.w	r8, #0
 8006e28:	4604      	mov	r4, r0
 8006e2a:	f04f 0900 	mov.w	r9, #0
 8006e2e:	9619      	str	r6, [sp, #100]	; 0x64
 8006e30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e32:	781a      	ldrb	r2, [r3, #0]
 8006e34:	2a2b      	cmp	r2, #43	; 0x2b
 8006e36:	d04c      	beq.n	8006ed2 <_strtod_l+0xca>
 8006e38:	d83a      	bhi.n	8006eb0 <_strtod_l+0xa8>
 8006e3a:	2a0d      	cmp	r2, #13
 8006e3c:	d833      	bhi.n	8006ea6 <_strtod_l+0x9e>
 8006e3e:	2a08      	cmp	r2, #8
 8006e40:	d833      	bhi.n	8006eaa <_strtod_l+0xa2>
 8006e42:	2a00      	cmp	r2, #0
 8006e44:	d03d      	beq.n	8006ec2 <_strtod_l+0xba>
 8006e46:	2300      	movs	r3, #0
 8006e48:	930a      	str	r3, [sp, #40]	; 0x28
 8006e4a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006e4c:	782b      	ldrb	r3, [r5, #0]
 8006e4e:	2b30      	cmp	r3, #48	; 0x30
 8006e50:	f040 80aa 	bne.w	8006fa8 <_strtod_l+0x1a0>
 8006e54:	786b      	ldrb	r3, [r5, #1]
 8006e56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e5a:	2b58      	cmp	r3, #88	; 0x58
 8006e5c:	d166      	bne.n	8006f2c <_strtod_l+0x124>
 8006e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e60:	4650      	mov	r0, sl
 8006e62:	9301      	str	r3, [sp, #4]
 8006e64:	ab1a      	add	r3, sp, #104	; 0x68
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	4a8a      	ldr	r2, [pc, #552]	; (8007094 <_strtod_l+0x28c>)
 8006e6a:	f8cd b008 	str.w	fp, [sp, #8]
 8006e6e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006e70:	a919      	add	r1, sp, #100	; 0x64
 8006e72:	f001 fd17 	bl	80088a4 <__gethex>
 8006e76:	f010 0607 	ands.w	r6, r0, #7
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	d005      	beq.n	8006e8a <_strtod_l+0x82>
 8006e7e:	2e06      	cmp	r6, #6
 8006e80:	d129      	bne.n	8006ed6 <_strtod_l+0xce>
 8006e82:	2300      	movs	r3, #0
 8006e84:	3501      	adds	r5, #1
 8006e86:	9519      	str	r5, [sp, #100]	; 0x64
 8006e88:	930a      	str	r3, [sp, #40]	; 0x28
 8006e8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f040 858a 	bne.w	80079a6 <_strtod_l+0xb9e>
 8006e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e94:	b1d3      	cbz	r3, 8006ecc <_strtod_l+0xc4>
 8006e96:	4642      	mov	r2, r8
 8006e98:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	b01f      	add	sp, #124	; 0x7c
 8006ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea6:	2a20      	cmp	r2, #32
 8006ea8:	d1cd      	bne.n	8006e46 <_strtod_l+0x3e>
 8006eaa:	3301      	adds	r3, #1
 8006eac:	9319      	str	r3, [sp, #100]	; 0x64
 8006eae:	e7bf      	b.n	8006e30 <_strtod_l+0x28>
 8006eb0:	2a2d      	cmp	r2, #45	; 0x2d
 8006eb2:	d1c8      	bne.n	8006e46 <_strtod_l+0x3e>
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	920a      	str	r2, [sp, #40]	; 0x28
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	9219      	str	r2, [sp, #100]	; 0x64
 8006ebc:	785b      	ldrb	r3, [r3, #1]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1c3      	bne.n	8006e4a <_strtod_l+0x42>
 8006ec2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ec4:	9619      	str	r6, [sp, #100]	; 0x64
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f040 856b 	bne.w	80079a2 <_strtod_l+0xb9a>
 8006ecc:	4642      	mov	r2, r8
 8006ece:	464b      	mov	r3, r9
 8006ed0:	e7e4      	b.n	8006e9c <_strtod_l+0x94>
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	e7ef      	b.n	8006eb6 <_strtod_l+0xae>
 8006ed6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006ed8:	b13a      	cbz	r2, 8006eea <_strtod_l+0xe2>
 8006eda:	2135      	movs	r1, #53	; 0x35
 8006edc:	a81c      	add	r0, sp, #112	; 0x70
 8006ede:	f002 fc83 	bl	80097e8 <__copybits>
 8006ee2:	4650      	mov	r0, sl
 8006ee4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006ee6:	f002 f84b 	bl	8008f80 <_Bfree>
 8006eea:	3e01      	subs	r6, #1
 8006eec:	2e04      	cmp	r6, #4
 8006eee:	d806      	bhi.n	8006efe <_strtod_l+0xf6>
 8006ef0:	e8df f006 	tbb	[pc, r6]
 8006ef4:	1714030a 	.word	0x1714030a
 8006ef8:	0a          	.byte	0x0a
 8006ef9:	00          	.byte	0x00
 8006efa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006efe:	0721      	lsls	r1, r4, #28
 8006f00:	d5c3      	bpl.n	8006e8a <_strtod_l+0x82>
 8006f02:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006f06:	e7c0      	b.n	8006e8a <_strtod_l+0x82>
 8006f08:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006f0a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006f0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006f12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f16:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006f1a:	e7f0      	b.n	8006efe <_strtod_l+0xf6>
 8006f1c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007098 <_strtod_l+0x290>
 8006f20:	e7ed      	b.n	8006efe <_strtod_l+0xf6>
 8006f22:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006f26:	f04f 38ff 	mov.w	r8, #4294967295
 8006f2a:	e7e8      	b.n	8006efe <_strtod_l+0xf6>
 8006f2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	9219      	str	r2, [sp, #100]	; 0x64
 8006f32:	785b      	ldrb	r3, [r3, #1]
 8006f34:	2b30      	cmp	r3, #48	; 0x30
 8006f36:	d0f9      	beq.n	8006f2c <_strtod_l+0x124>
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0a6      	beq.n	8006e8a <_strtod_l+0x82>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	9307      	str	r3, [sp, #28]
 8006f40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f42:	220a      	movs	r2, #10
 8006f44:	9308      	str	r3, [sp, #32]
 8006f46:	2300      	movs	r3, #0
 8006f48:	469b      	mov	fp, r3
 8006f4a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006f4e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006f50:	7805      	ldrb	r5, [r0, #0]
 8006f52:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006f56:	b2d9      	uxtb	r1, r3
 8006f58:	2909      	cmp	r1, #9
 8006f5a:	d927      	bls.n	8006fac <_strtod_l+0x1a4>
 8006f5c:	4622      	mov	r2, r4
 8006f5e:	4639      	mov	r1, r7
 8006f60:	f002 fdfc 	bl	8009b5c <strncmp>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d033      	beq.n	8006fd0 <_strtod_l+0x1c8>
 8006f68:	2000      	movs	r0, #0
 8006f6a:	462a      	mov	r2, r5
 8006f6c:	465c      	mov	r4, fp
 8006f6e:	4603      	mov	r3, r0
 8006f70:	9004      	str	r0, [sp, #16]
 8006f72:	2a65      	cmp	r2, #101	; 0x65
 8006f74:	d001      	beq.n	8006f7a <_strtod_l+0x172>
 8006f76:	2a45      	cmp	r2, #69	; 0x45
 8006f78:	d114      	bne.n	8006fa4 <_strtod_l+0x19c>
 8006f7a:	b91c      	cbnz	r4, 8006f84 <_strtod_l+0x17c>
 8006f7c:	9a07      	ldr	r2, [sp, #28]
 8006f7e:	4302      	orrs	r2, r0
 8006f80:	d09f      	beq.n	8006ec2 <_strtod_l+0xba>
 8006f82:	2400      	movs	r4, #0
 8006f84:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006f86:	1c72      	adds	r2, r6, #1
 8006f88:	9219      	str	r2, [sp, #100]	; 0x64
 8006f8a:	7872      	ldrb	r2, [r6, #1]
 8006f8c:	2a2b      	cmp	r2, #43	; 0x2b
 8006f8e:	d079      	beq.n	8007084 <_strtod_l+0x27c>
 8006f90:	2a2d      	cmp	r2, #45	; 0x2d
 8006f92:	f000 8083 	beq.w	800709c <_strtod_l+0x294>
 8006f96:	2700      	movs	r7, #0
 8006f98:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006f9c:	2909      	cmp	r1, #9
 8006f9e:	f240 8083 	bls.w	80070a8 <_strtod_l+0x2a0>
 8006fa2:	9619      	str	r6, [sp, #100]	; 0x64
 8006fa4:	2500      	movs	r5, #0
 8006fa6:	e09f      	b.n	80070e8 <_strtod_l+0x2e0>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e7c8      	b.n	8006f3e <_strtod_l+0x136>
 8006fac:	f1bb 0f08 	cmp.w	fp, #8
 8006fb0:	bfd5      	itete	le
 8006fb2:	9906      	ldrle	r1, [sp, #24]
 8006fb4:	9905      	ldrgt	r1, [sp, #20]
 8006fb6:	fb02 3301 	mlale	r3, r2, r1, r3
 8006fba:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006fbe:	f100 0001 	add.w	r0, r0, #1
 8006fc2:	bfd4      	ite	le
 8006fc4:	9306      	strle	r3, [sp, #24]
 8006fc6:	9305      	strgt	r3, [sp, #20]
 8006fc8:	f10b 0b01 	add.w	fp, fp, #1
 8006fcc:	9019      	str	r0, [sp, #100]	; 0x64
 8006fce:	e7be      	b.n	8006f4e <_strtod_l+0x146>
 8006fd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fd2:	191a      	adds	r2, r3, r4
 8006fd4:	9219      	str	r2, [sp, #100]	; 0x64
 8006fd6:	5d1a      	ldrb	r2, [r3, r4]
 8006fd8:	f1bb 0f00 	cmp.w	fp, #0
 8006fdc:	d036      	beq.n	800704c <_strtod_l+0x244>
 8006fde:	465c      	mov	r4, fp
 8006fe0:	9004      	str	r0, [sp, #16]
 8006fe2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006fe6:	2b09      	cmp	r3, #9
 8006fe8:	d912      	bls.n	8007010 <_strtod_l+0x208>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e7c1      	b.n	8006f72 <_strtod_l+0x16a>
 8006fee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	9219      	str	r2, [sp, #100]	; 0x64
 8006ff6:	785a      	ldrb	r2, [r3, #1]
 8006ff8:	2a30      	cmp	r2, #48	; 0x30
 8006ffa:	d0f8      	beq.n	8006fee <_strtod_l+0x1e6>
 8006ffc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007000:	2b08      	cmp	r3, #8
 8007002:	f200 84d5 	bhi.w	80079b0 <_strtod_l+0xba8>
 8007006:	9004      	str	r0, [sp, #16]
 8007008:	2000      	movs	r0, #0
 800700a:	4604      	mov	r4, r0
 800700c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800700e:	9308      	str	r3, [sp, #32]
 8007010:	3a30      	subs	r2, #48	; 0x30
 8007012:	f100 0301 	add.w	r3, r0, #1
 8007016:	d013      	beq.n	8007040 <_strtod_l+0x238>
 8007018:	9904      	ldr	r1, [sp, #16]
 800701a:	1905      	adds	r5, r0, r4
 800701c:	4419      	add	r1, r3
 800701e:	9104      	str	r1, [sp, #16]
 8007020:	4623      	mov	r3, r4
 8007022:	210a      	movs	r1, #10
 8007024:	42ab      	cmp	r3, r5
 8007026:	d113      	bne.n	8007050 <_strtod_l+0x248>
 8007028:	1823      	adds	r3, r4, r0
 800702a:	2b08      	cmp	r3, #8
 800702c:	f104 0401 	add.w	r4, r4, #1
 8007030:	4404      	add	r4, r0
 8007032:	dc1b      	bgt.n	800706c <_strtod_l+0x264>
 8007034:	230a      	movs	r3, #10
 8007036:	9906      	ldr	r1, [sp, #24]
 8007038:	fb03 2301 	mla	r3, r3, r1, r2
 800703c:	9306      	str	r3, [sp, #24]
 800703e:	2300      	movs	r3, #0
 8007040:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007042:	4618      	mov	r0, r3
 8007044:	1c51      	adds	r1, r2, #1
 8007046:	9119      	str	r1, [sp, #100]	; 0x64
 8007048:	7852      	ldrb	r2, [r2, #1]
 800704a:	e7ca      	b.n	8006fe2 <_strtod_l+0x1da>
 800704c:	4658      	mov	r0, fp
 800704e:	e7d3      	b.n	8006ff8 <_strtod_l+0x1f0>
 8007050:	2b08      	cmp	r3, #8
 8007052:	dc04      	bgt.n	800705e <_strtod_l+0x256>
 8007054:	9f06      	ldr	r7, [sp, #24]
 8007056:	434f      	muls	r7, r1
 8007058:	9706      	str	r7, [sp, #24]
 800705a:	3301      	adds	r3, #1
 800705c:	e7e2      	b.n	8007024 <_strtod_l+0x21c>
 800705e:	1c5f      	adds	r7, r3, #1
 8007060:	2f10      	cmp	r7, #16
 8007062:	bfde      	ittt	le
 8007064:	9f05      	ldrle	r7, [sp, #20]
 8007066:	434f      	mulle	r7, r1
 8007068:	9705      	strle	r7, [sp, #20]
 800706a:	e7f6      	b.n	800705a <_strtod_l+0x252>
 800706c:	2c10      	cmp	r4, #16
 800706e:	bfdf      	itttt	le
 8007070:	230a      	movle	r3, #10
 8007072:	9905      	ldrle	r1, [sp, #20]
 8007074:	fb03 2301 	mlale	r3, r3, r1, r2
 8007078:	9305      	strle	r3, [sp, #20]
 800707a:	e7e0      	b.n	800703e <_strtod_l+0x236>
 800707c:	2300      	movs	r3, #0
 800707e:	9304      	str	r3, [sp, #16]
 8007080:	2301      	movs	r3, #1
 8007082:	e77b      	b.n	8006f7c <_strtod_l+0x174>
 8007084:	2700      	movs	r7, #0
 8007086:	1cb2      	adds	r2, r6, #2
 8007088:	9219      	str	r2, [sp, #100]	; 0x64
 800708a:	78b2      	ldrb	r2, [r6, #2]
 800708c:	e784      	b.n	8006f98 <_strtod_l+0x190>
 800708e:	bf00      	nop
 8007090:	0800abc0 	.word	0x0800abc0
 8007094:	0800a978 	.word	0x0800a978
 8007098:	7ff00000 	.word	0x7ff00000
 800709c:	2701      	movs	r7, #1
 800709e:	e7f2      	b.n	8007086 <_strtod_l+0x27e>
 80070a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80070a2:	1c51      	adds	r1, r2, #1
 80070a4:	9119      	str	r1, [sp, #100]	; 0x64
 80070a6:	7852      	ldrb	r2, [r2, #1]
 80070a8:	2a30      	cmp	r2, #48	; 0x30
 80070aa:	d0f9      	beq.n	80070a0 <_strtod_l+0x298>
 80070ac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80070b0:	2908      	cmp	r1, #8
 80070b2:	f63f af77 	bhi.w	8006fa4 <_strtod_l+0x19c>
 80070b6:	f04f 0e0a 	mov.w	lr, #10
 80070ba:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80070be:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80070c0:	9209      	str	r2, [sp, #36]	; 0x24
 80070c2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80070c4:	1c51      	adds	r1, r2, #1
 80070c6:	9119      	str	r1, [sp, #100]	; 0x64
 80070c8:	7852      	ldrb	r2, [r2, #1]
 80070ca:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80070ce:	2d09      	cmp	r5, #9
 80070d0:	d935      	bls.n	800713e <_strtod_l+0x336>
 80070d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80070d4:	1b49      	subs	r1, r1, r5
 80070d6:	2908      	cmp	r1, #8
 80070d8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80070dc:	dc02      	bgt.n	80070e4 <_strtod_l+0x2dc>
 80070de:	4565      	cmp	r5, ip
 80070e0:	bfa8      	it	ge
 80070e2:	4665      	movge	r5, ip
 80070e4:	b107      	cbz	r7, 80070e8 <_strtod_l+0x2e0>
 80070e6:	426d      	negs	r5, r5
 80070e8:	2c00      	cmp	r4, #0
 80070ea:	d14c      	bne.n	8007186 <_strtod_l+0x37e>
 80070ec:	9907      	ldr	r1, [sp, #28]
 80070ee:	4301      	orrs	r1, r0
 80070f0:	f47f aecb 	bne.w	8006e8a <_strtod_l+0x82>
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f47f aee4 	bne.w	8006ec2 <_strtod_l+0xba>
 80070fa:	2a69      	cmp	r2, #105	; 0x69
 80070fc:	d026      	beq.n	800714c <_strtod_l+0x344>
 80070fe:	dc23      	bgt.n	8007148 <_strtod_l+0x340>
 8007100:	2a49      	cmp	r2, #73	; 0x49
 8007102:	d023      	beq.n	800714c <_strtod_l+0x344>
 8007104:	2a4e      	cmp	r2, #78	; 0x4e
 8007106:	f47f aedc 	bne.w	8006ec2 <_strtod_l+0xba>
 800710a:	499d      	ldr	r1, [pc, #628]	; (8007380 <_strtod_l+0x578>)
 800710c:	a819      	add	r0, sp, #100	; 0x64
 800710e:	f001 fe17 	bl	8008d40 <__match>
 8007112:	2800      	cmp	r0, #0
 8007114:	f43f aed5 	beq.w	8006ec2 <_strtod_l+0xba>
 8007118:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	2b28      	cmp	r3, #40	; 0x28
 800711e:	d12c      	bne.n	800717a <_strtod_l+0x372>
 8007120:	4998      	ldr	r1, [pc, #608]	; (8007384 <_strtod_l+0x57c>)
 8007122:	aa1c      	add	r2, sp, #112	; 0x70
 8007124:	a819      	add	r0, sp, #100	; 0x64
 8007126:	f001 fe1f 	bl	8008d68 <__hexnan>
 800712a:	2805      	cmp	r0, #5
 800712c:	d125      	bne.n	800717a <_strtod_l+0x372>
 800712e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007130:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007134:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007138:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800713c:	e6a5      	b.n	8006e8a <_strtod_l+0x82>
 800713e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007142:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007146:	e7bc      	b.n	80070c2 <_strtod_l+0x2ba>
 8007148:	2a6e      	cmp	r2, #110	; 0x6e
 800714a:	e7dc      	b.n	8007106 <_strtod_l+0x2fe>
 800714c:	498e      	ldr	r1, [pc, #568]	; (8007388 <_strtod_l+0x580>)
 800714e:	a819      	add	r0, sp, #100	; 0x64
 8007150:	f001 fdf6 	bl	8008d40 <__match>
 8007154:	2800      	cmp	r0, #0
 8007156:	f43f aeb4 	beq.w	8006ec2 <_strtod_l+0xba>
 800715a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800715c:	498b      	ldr	r1, [pc, #556]	; (800738c <_strtod_l+0x584>)
 800715e:	3b01      	subs	r3, #1
 8007160:	a819      	add	r0, sp, #100	; 0x64
 8007162:	9319      	str	r3, [sp, #100]	; 0x64
 8007164:	f001 fdec 	bl	8008d40 <__match>
 8007168:	b910      	cbnz	r0, 8007170 <_strtod_l+0x368>
 800716a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800716c:	3301      	adds	r3, #1
 800716e:	9319      	str	r3, [sp, #100]	; 0x64
 8007170:	f04f 0800 	mov.w	r8, #0
 8007174:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007390 <_strtod_l+0x588>
 8007178:	e687      	b.n	8006e8a <_strtod_l+0x82>
 800717a:	4886      	ldr	r0, [pc, #536]	; (8007394 <_strtod_l+0x58c>)
 800717c:	f002 fce8 	bl	8009b50 <nan>
 8007180:	4680      	mov	r8, r0
 8007182:	4689      	mov	r9, r1
 8007184:	e681      	b.n	8006e8a <_strtod_l+0x82>
 8007186:	9b04      	ldr	r3, [sp, #16]
 8007188:	f1bb 0f00 	cmp.w	fp, #0
 800718c:	bf08      	it	eq
 800718e:	46a3      	moveq	fp, r4
 8007190:	1aeb      	subs	r3, r5, r3
 8007192:	2c10      	cmp	r4, #16
 8007194:	9806      	ldr	r0, [sp, #24]
 8007196:	4626      	mov	r6, r4
 8007198:	9307      	str	r3, [sp, #28]
 800719a:	bfa8      	it	ge
 800719c:	2610      	movge	r6, #16
 800719e:	f7f9 f921 	bl	80003e4 <__aeabi_ui2d>
 80071a2:	2c09      	cmp	r4, #9
 80071a4:	4680      	mov	r8, r0
 80071a6:	4689      	mov	r9, r1
 80071a8:	dd13      	ble.n	80071d2 <_strtod_l+0x3ca>
 80071aa:	4b7b      	ldr	r3, [pc, #492]	; (8007398 <_strtod_l+0x590>)
 80071ac:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80071b0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80071b4:	f7f9 f990 	bl	80004d8 <__aeabi_dmul>
 80071b8:	4680      	mov	r8, r0
 80071ba:	9805      	ldr	r0, [sp, #20]
 80071bc:	4689      	mov	r9, r1
 80071be:	f7f9 f911 	bl	80003e4 <__aeabi_ui2d>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4640      	mov	r0, r8
 80071c8:	4649      	mov	r1, r9
 80071ca:	f7f8 ffcf 	bl	800016c <__adddf3>
 80071ce:	4680      	mov	r8, r0
 80071d0:	4689      	mov	r9, r1
 80071d2:	2c0f      	cmp	r4, #15
 80071d4:	dc36      	bgt.n	8007244 <_strtod_l+0x43c>
 80071d6:	9b07      	ldr	r3, [sp, #28]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f43f ae56 	beq.w	8006e8a <_strtod_l+0x82>
 80071de:	dd22      	ble.n	8007226 <_strtod_l+0x41e>
 80071e0:	2b16      	cmp	r3, #22
 80071e2:	dc09      	bgt.n	80071f8 <_strtod_l+0x3f0>
 80071e4:	496c      	ldr	r1, [pc, #432]	; (8007398 <_strtod_l+0x590>)
 80071e6:	4642      	mov	r2, r8
 80071e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071ec:	464b      	mov	r3, r9
 80071ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071f2:	f7f9 f971 	bl	80004d8 <__aeabi_dmul>
 80071f6:	e7c3      	b.n	8007180 <_strtod_l+0x378>
 80071f8:	9a07      	ldr	r2, [sp, #28]
 80071fa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80071fe:	4293      	cmp	r3, r2
 8007200:	db20      	blt.n	8007244 <_strtod_l+0x43c>
 8007202:	4d65      	ldr	r5, [pc, #404]	; (8007398 <_strtod_l+0x590>)
 8007204:	f1c4 040f 	rsb	r4, r4, #15
 8007208:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800720c:	4642      	mov	r2, r8
 800720e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007212:	464b      	mov	r3, r9
 8007214:	f7f9 f960 	bl	80004d8 <__aeabi_dmul>
 8007218:	9b07      	ldr	r3, [sp, #28]
 800721a:	1b1c      	subs	r4, r3, r4
 800721c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007220:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007224:	e7e5      	b.n	80071f2 <_strtod_l+0x3ea>
 8007226:	9b07      	ldr	r3, [sp, #28]
 8007228:	3316      	adds	r3, #22
 800722a:	db0b      	blt.n	8007244 <_strtod_l+0x43c>
 800722c:	9b04      	ldr	r3, [sp, #16]
 800722e:	4640      	mov	r0, r8
 8007230:	1b5d      	subs	r5, r3, r5
 8007232:	4b59      	ldr	r3, [pc, #356]	; (8007398 <_strtod_l+0x590>)
 8007234:	4649      	mov	r1, r9
 8007236:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800723a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800723e:	f7f9 fa75 	bl	800072c <__aeabi_ddiv>
 8007242:	e79d      	b.n	8007180 <_strtod_l+0x378>
 8007244:	9b07      	ldr	r3, [sp, #28]
 8007246:	1ba6      	subs	r6, r4, r6
 8007248:	441e      	add	r6, r3
 800724a:	2e00      	cmp	r6, #0
 800724c:	dd74      	ble.n	8007338 <_strtod_l+0x530>
 800724e:	f016 030f 	ands.w	r3, r6, #15
 8007252:	d00a      	beq.n	800726a <_strtod_l+0x462>
 8007254:	4950      	ldr	r1, [pc, #320]	; (8007398 <_strtod_l+0x590>)
 8007256:	4642      	mov	r2, r8
 8007258:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800725c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007260:	464b      	mov	r3, r9
 8007262:	f7f9 f939 	bl	80004d8 <__aeabi_dmul>
 8007266:	4680      	mov	r8, r0
 8007268:	4689      	mov	r9, r1
 800726a:	f036 060f 	bics.w	r6, r6, #15
 800726e:	d052      	beq.n	8007316 <_strtod_l+0x50e>
 8007270:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007274:	dd27      	ble.n	80072c6 <_strtod_l+0x4be>
 8007276:	f04f 0b00 	mov.w	fp, #0
 800727a:	f8cd b010 	str.w	fp, [sp, #16]
 800727e:	f8cd b020 	str.w	fp, [sp, #32]
 8007282:	f8cd b018 	str.w	fp, [sp, #24]
 8007286:	2322      	movs	r3, #34	; 0x22
 8007288:	f04f 0800 	mov.w	r8, #0
 800728c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007390 <_strtod_l+0x588>
 8007290:	f8ca 3000 	str.w	r3, [sl]
 8007294:	9b08      	ldr	r3, [sp, #32]
 8007296:	2b00      	cmp	r3, #0
 8007298:	f43f adf7 	beq.w	8006e8a <_strtod_l+0x82>
 800729c:	4650      	mov	r0, sl
 800729e:	991a      	ldr	r1, [sp, #104]	; 0x68
 80072a0:	f001 fe6e 	bl	8008f80 <_Bfree>
 80072a4:	4650      	mov	r0, sl
 80072a6:	9906      	ldr	r1, [sp, #24]
 80072a8:	f001 fe6a 	bl	8008f80 <_Bfree>
 80072ac:	4650      	mov	r0, sl
 80072ae:	9904      	ldr	r1, [sp, #16]
 80072b0:	f001 fe66 	bl	8008f80 <_Bfree>
 80072b4:	4650      	mov	r0, sl
 80072b6:	9908      	ldr	r1, [sp, #32]
 80072b8:	f001 fe62 	bl	8008f80 <_Bfree>
 80072bc:	4659      	mov	r1, fp
 80072be:	4650      	mov	r0, sl
 80072c0:	f001 fe5e 	bl	8008f80 <_Bfree>
 80072c4:	e5e1      	b.n	8006e8a <_strtod_l+0x82>
 80072c6:	4b35      	ldr	r3, [pc, #212]	; (800739c <_strtod_l+0x594>)
 80072c8:	4640      	mov	r0, r8
 80072ca:	9305      	str	r3, [sp, #20]
 80072cc:	2300      	movs	r3, #0
 80072ce:	4649      	mov	r1, r9
 80072d0:	461f      	mov	r7, r3
 80072d2:	1136      	asrs	r6, r6, #4
 80072d4:	2e01      	cmp	r6, #1
 80072d6:	dc21      	bgt.n	800731c <_strtod_l+0x514>
 80072d8:	b10b      	cbz	r3, 80072de <_strtod_l+0x4d6>
 80072da:	4680      	mov	r8, r0
 80072dc:	4689      	mov	r9, r1
 80072de:	4b2f      	ldr	r3, [pc, #188]	; (800739c <_strtod_l+0x594>)
 80072e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80072e4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80072e8:	4642      	mov	r2, r8
 80072ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072ee:	464b      	mov	r3, r9
 80072f0:	f7f9 f8f2 	bl	80004d8 <__aeabi_dmul>
 80072f4:	4b26      	ldr	r3, [pc, #152]	; (8007390 <_strtod_l+0x588>)
 80072f6:	460a      	mov	r2, r1
 80072f8:	400b      	ands	r3, r1
 80072fa:	4929      	ldr	r1, [pc, #164]	; (80073a0 <_strtod_l+0x598>)
 80072fc:	4680      	mov	r8, r0
 80072fe:	428b      	cmp	r3, r1
 8007300:	d8b9      	bhi.n	8007276 <_strtod_l+0x46e>
 8007302:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007306:	428b      	cmp	r3, r1
 8007308:	bf86      	itte	hi
 800730a:	f04f 38ff 	movhi.w	r8, #4294967295
 800730e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80073a4 <_strtod_l+0x59c>
 8007312:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007316:	2300      	movs	r3, #0
 8007318:	9305      	str	r3, [sp, #20]
 800731a:	e07f      	b.n	800741c <_strtod_l+0x614>
 800731c:	07f2      	lsls	r2, r6, #31
 800731e:	d505      	bpl.n	800732c <_strtod_l+0x524>
 8007320:	9b05      	ldr	r3, [sp, #20]
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	f7f9 f8d7 	bl	80004d8 <__aeabi_dmul>
 800732a:	2301      	movs	r3, #1
 800732c:	9a05      	ldr	r2, [sp, #20]
 800732e:	3701      	adds	r7, #1
 8007330:	3208      	adds	r2, #8
 8007332:	1076      	asrs	r6, r6, #1
 8007334:	9205      	str	r2, [sp, #20]
 8007336:	e7cd      	b.n	80072d4 <_strtod_l+0x4cc>
 8007338:	d0ed      	beq.n	8007316 <_strtod_l+0x50e>
 800733a:	4276      	negs	r6, r6
 800733c:	f016 020f 	ands.w	r2, r6, #15
 8007340:	d00a      	beq.n	8007358 <_strtod_l+0x550>
 8007342:	4b15      	ldr	r3, [pc, #84]	; (8007398 <_strtod_l+0x590>)
 8007344:	4640      	mov	r0, r8
 8007346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800734a:	4649      	mov	r1, r9
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	f7f9 f9ec 	bl	800072c <__aeabi_ddiv>
 8007354:	4680      	mov	r8, r0
 8007356:	4689      	mov	r9, r1
 8007358:	1136      	asrs	r6, r6, #4
 800735a:	d0dc      	beq.n	8007316 <_strtod_l+0x50e>
 800735c:	2e1f      	cmp	r6, #31
 800735e:	dd23      	ble.n	80073a8 <_strtod_l+0x5a0>
 8007360:	f04f 0b00 	mov.w	fp, #0
 8007364:	f8cd b010 	str.w	fp, [sp, #16]
 8007368:	f8cd b020 	str.w	fp, [sp, #32]
 800736c:	f8cd b018 	str.w	fp, [sp, #24]
 8007370:	2322      	movs	r3, #34	; 0x22
 8007372:	f04f 0800 	mov.w	r8, #0
 8007376:	f04f 0900 	mov.w	r9, #0
 800737a:	f8ca 3000 	str.w	r3, [sl]
 800737e:	e789      	b.n	8007294 <_strtod_l+0x48c>
 8007380:	0800a949 	.word	0x0800a949
 8007384:	0800a98c 	.word	0x0800a98c
 8007388:	0800a941 	.word	0x0800a941
 800738c:	0800aacc 	.word	0x0800aacc
 8007390:	7ff00000 	.word	0x7ff00000
 8007394:	0800ad78 	.word	0x0800ad78
 8007398:	0800ac58 	.word	0x0800ac58
 800739c:	0800ac30 	.word	0x0800ac30
 80073a0:	7ca00000 	.word	0x7ca00000
 80073a4:	7fefffff 	.word	0x7fefffff
 80073a8:	f016 0310 	ands.w	r3, r6, #16
 80073ac:	bf18      	it	ne
 80073ae:	236a      	movne	r3, #106	; 0x6a
 80073b0:	4640      	mov	r0, r8
 80073b2:	9305      	str	r3, [sp, #20]
 80073b4:	4649      	mov	r1, r9
 80073b6:	2300      	movs	r3, #0
 80073b8:	4fb0      	ldr	r7, [pc, #704]	; (800767c <_strtod_l+0x874>)
 80073ba:	07f2      	lsls	r2, r6, #31
 80073bc:	d504      	bpl.n	80073c8 <_strtod_l+0x5c0>
 80073be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073c2:	f7f9 f889 	bl	80004d8 <__aeabi_dmul>
 80073c6:	2301      	movs	r3, #1
 80073c8:	1076      	asrs	r6, r6, #1
 80073ca:	f107 0708 	add.w	r7, r7, #8
 80073ce:	d1f4      	bne.n	80073ba <_strtod_l+0x5b2>
 80073d0:	b10b      	cbz	r3, 80073d6 <_strtod_l+0x5ce>
 80073d2:	4680      	mov	r8, r0
 80073d4:	4689      	mov	r9, r1
 80073d6:	9b05      	ldr	r3, [sp, #20]
 80073d8:	b1c3      	cbz	r3, 800740c <_strtod_l+0x604>
 80073da:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80073de:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	4649      	mov	r1, r9
 80073e6:	dd11      	ble.n	800740c <_strtod_l+0x604>
 80073e8:	2b1f      	cmp	r3, #31
 80073ea:	f340 8127 	ble.w	800763c <_strtod_l+0x834>
 80073ee:	2b34      	cmp	r3, #52	; 0x34
 80073f0:	bfd8      	it	le
 80073f2:	f04f 33ff 	movle.w	r3, #4294967295
 80073f6:	f04f 0800 	mov.w	r8, #0
 80073fa:	bfcf      	iteee	gt
 80073fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007400:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007404:	fa03 f202 	lslle.w	r2, r3, r2
 8007408:	ea02 0901 	andle.w	r9, r2, r1
 800740c:	2200      	movs	r2, #0
 800740e:	2300      	movs	r3, #0
 8007410:	4640      	mov	r0, r8
 8007412:	4649      	mov	r1, r9
 8007414:	f7f9 fac8 	bl	80009a8 <__aeabi_dcmpeq>
 8007418:	2800      	cmp	r0, #0
 800741a:	d1a1      	bne.n	8007360 <_strtod_l+0x558>
 800741c:	9b06      	ldr	r3, [sp, #24]
 800741e:	465a      	mov	r2, fp
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	4650      	mov	r0, sl
 8007424:	4623      	mov	r3, r4
 8007426:	9908      	ldr	r1, [sp, #32]
 8007428:	f001 fe12 	bl	8009050 <__s2b>
 800742c:	9008      	str	r0, [sp, #32]
 800742e:	2800      	cmp	r0, #0
 8007430:	f43f af21 	beq.w	8007276 <_strtod_l+0x46e>
 8007434:	9b04      	ldr	r3, [sp, #16]
 8007436:	f04f 0b00 	mov.w	fp, #0
 800743a:	1b5d      	subs	r5, r3, r5
 800743c:	9b07      	ldr	r3, [sp, #28]
 800743e:	f8cd b010 	str.w	fp, [sp, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	bfb4      	ite	lt
 8007446:	462b      	movlt	r3, r5
 8007448:	2300      	movge	r3, #0
 800744a:	930e      	str	r3, [sp, #56]	; 0x38
 800744c:	9b07      	ldr	r3, [sp, #28]
 800744e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007452:	9314      	str	r3, [sp, #80]	; 0x50
 8007454:	9b08      	ldr	r3, [sp, #32]
 8007456:	4650      	mov	r0, sl
 8007458:	6859      	ldr	r1, [r3, #4]
 800745a:	f001 fd51 	bl	8008f00 <_Balloc>
 800745e:	9006      	str	r0, [sp, #24]
 8007460:	2800      	cmp	r0, #0
 8007462:	f43f af10 	beq.w	8007286 <_strtod_l+0x47e>
 8007466:	9b08      	ldr	r3, [sp, #32]
 8007468:	300c      	adds	r0, #12
 800746a:	691a      	ldr	r2, [r3, #16]
 800746c:	f103 010c 	add.w	r1, r3, #12
 8007470:	3202      	adds	r2, #2
 8007472:	0092      	lsls	r2, r2, #2
 8007474:	f7fe fd10 	bl	8005e98 <memcpy>
 8007478:	ab1c      	add	r3, sp, #112	; 0x70
 800747a:	9301      	str	r3, [sp, #4]
 800747c:	ab1b      	add	r3, sp, #108	; 0x6c
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	4642      	mov	r2, r8
 8007482:	464b      	mov	r3, r9
 8007484:	4650      	mov	r0, sl
 8007486:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800748a:	f002 f923 	bl	80096d4 <__d2b>
 800748e:	901a      	str	r0, [sp, #104]	; 0x68
 8007490:	2800      	cmp	r0, #0
 8007492:	f43f aef8 	beq.w	8007286 <_strtod_l+0x47e>
 8007496:	2101      	movs	r1, #1
 8007498:	4650      	mov	r0, sl
 800749a:	f001 fe71 	bl	8009180 <__i2b>
 800749e:	4603      	mov	r3, r0
 80074a0:	9004      	str	r0, [sp, #16]
 80074a2:	2800      	cmp	r0, #0
 80074a4:	f43f aeef 	beq.w	8007286 <_strtod_l+0x47e>
 80074a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80074aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80074ac:	2d00      	cmp	r5, #0
 80074ae:	bfab      	itete	ge
 80074b0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80074b2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80074b4:	18ee      	addge	r6, r5, r3
 80074b6:	1b5c      	sublt	r4, r3, r5
 80074b8:	9b05      	ldr	r3, [sp, #20]
 80074ba:	bfa8      	it	ge
 80074bc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80074be:	eba5 0503 	sub.w	r5, r5, r3
 80074c2:	4415      	add	r5, r2
 80074c4:	4b6e      	ldr	r3, [pc, #440]	; (8007680 <_strtod_l+0x878>)
 80074c6:	f105 35ff 	add.w	r5, r5, #4294967295
 80074ca:	bfb8      	it	lt
 80074cc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80074ce:	429d      	cmp	r5, r3
 80074d0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80074d4:	f280 80c4 	bge.w	8007660 <_strtod_l+0x858>
 80074d8:	1b5b      	subs	r3, r3, r5
 80074da:	2b1f      	cmp	r3, #31
 80074dc:	f04f 0701 	mov.w	r7, #1
 80074e0:	eba2 0203 	sub.w	r2, r2, r3
 80074e4:	f300 80b1 	bgt.w	800764a <_strtod_l+0x842>
 80074e8:	2500      	movs	r5, #0
 80074ea:	fa07 f303 	lsl.w	r3, r7, r3
 80074ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80074f0:	18b7      	adds	r7, r6, r2
 80074f2:	9b05      	ldr	r3, [sp, #20]
 80074f4:	42be      	cmp	r6, r7
 80074f6:	4414      	add	r4, r2
 80074f8:	441c      	add	r4, r3
 80074fa:	4633      	mov	r3, r6
 80074fc:	bfa8      	it	ge
 80074fe:	463b      	movge	r3, r7
 8007500:	42a3      	cmp	r3, r4
 8007502:	bfa8      	it	ge
 8007504:	4623      	movge	r3, r4
 8007506:	2b00      	cmp	r3, #0
 8007508:	bfc2      	ittt	gt
 800750a:	1aff      	subgt	r7, r7, r3
 800750c:	1ae4      	subgt	r4, r4, r3
 800750e:	1af6      	subgt	r6, r6, r3
 8007510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007512:	2b00      	cmp	r3, #0
 8007514:	dd17      	ble.n	8007546 <_strtod_l+0x73e>
 8007516:	461a      	mov	r2, r3
 8007518:	4650      	mov	r0, sl
 800751a:	9904      	ldr	r1, [sp, #16]
 800751c:	f001 feee 	bl	80092fc <__pow5mult>
 8007520:	9004      	str	r0, [sp, #16]
 8007522:	2800      	cmp	r0, #0
 8007524:	f43f aeaf 	beq.w	8007286 <_strtod_l+0x47e>
 8007528:	4601      	mov	r1, r0
 800752a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800752c:	4650      	mov	r0, sl
 800752e:	f001 fe3d 	bl	80091ac <__multiply>
 8007532:	9009      	str	r0, [sp, #36]	; 0x24
 8007534:	2800      	cmp	r0, #0
 8007536:	f43f aea6 	beq.w	8007286 <_strtod_l+0x47e>
 800753a:	4650      	mov	r0, sl
 800753c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800753e:	f001 fd1f 	bl	8008f80 <_Bfree>
 8007542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007544:	931a      	str	r3, [sp, #104]	; 0x68
 8007546:	2f00      	cmp	r7, #0
 8007548:	f300 808e 	bgt.w	8007668 <_strtod_l+0x860>
 800754c:	9b07      	ldr	r3, [sp, #28]
 800754e:	2b00      	cmp	r3, #0
 8007550:	dd08      	ble.n	8007564 <_strtod_l+0x75c>
 8007552:	4650      	mov	r0, sl
 8007554:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007556:	9906      	ldr	r1, [sp, #24]
 8007558:	f001 fed0 	bl	80092fc <__pow5mult>
 800755c:	9006      	str	r0, [sp, #24]
 800755e:	2800      	cmp	r0, #0
 8007560:	f43f ae91 	beq.w	8007286 <_strtod_l+0x47e>
 8007564:	2c00      	cmp	r4, #0
 8007566:	dd08      	ble.n	800757a <_strtod_l+0x772>
 8007568:	4622      	mov	r2, r4
 800756a:	4650      	mov	r0, sl
 800756c:	9906      	ldr	r1, [sp, #24]
 800756e:	f001 ff1f 	bl	80093b0 <__lshift>
 8007572:	9006      	str	r0, [sp, #24]
 8007574:	2800      	cmp	r0, #0
 8007576:	f43f ae86 	beq.w	8007286 <_strtod_l+0x47e>
 800757a:	2e00      	cmp	r6, #0
 800757c:	dd08      	ble.n	8007590 <_strtod_l+0x788>
 800757e:	4632      	mov	r2, r6
 8007580:	4650      	mov	r0, sl
 8007582:	9904      	ldr	r1, [sp, #16]
 8007584:	f001 ff14 	bl	80093b0 <__lshift>
 8007588:	9004      	str	r0, [sp, #16]
 800758a:	2800      	cmp	r0, #0
 800758c:	f43f ae7b 	beq.w	8007286 <_strtod_l+0x47e>
 8007590:	4650      	mov	r0, sl
 8007592:	9a06      	ldr	r2, [sp, #24]
 8007594:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007596:	f001 ff97 	bl	80094c8 <__mdiff>
 800759a:	4683      	mov	fp, r0
 800759c:	2800      	cmp	r0, #0
 800759e:	f43f ae72 	beq.w	8007286 <_strtod_l+0x47e>
 80075a2:	2400      	movs	r4, #0
 80075a4:	68c3      	ldr	r3, [r0, #12]
 80075a6:	9904      	ldr	r1, [sp, #16]
 80075a8:	60c4      	str	r4, [r0, #12]
 80075aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80075ac:	f001 ff70 	bl	8009490 <__mcmp>
 80075b0:	42a0      	cmp	r0, r4
 80075b2:	da6b      	bge.n	800768c <_strtod_l+0x884>
 80075b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075b6:	ea53 0308 	orrs.w	r3, r3, r8
 80075ba:	f040 8091 	bne.w	80076e0 <_strtod_l+0x8d8>
 80075be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f040 808c 	bne.w	80076e0 <_strtod_l+0x8d8>
 80075c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80075cc:	0d1b      	lsrs	r3, r3, #20
 80075ce:	051b      	lsls	r3, r3, #20
 80075d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80075d4:	f240 8084 	bls.w	80076e0 <_strtod_l+0x8d8>
 80075d8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80075dc:	b91b      	cbnz	r3, 80075e6 <_strtod_l+0x7de>
 80075de:	f8db 3010 	ldr.w	r3, [fp, #16]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	dd7c      	ble.n	80076e0 <_strtod_l+0x8d8>
 80075e6:	4659      	mov	r1, fp
 80075e8:	2201      	movs	r2, #1
 80075ea:	4650      	mov	r0, sl
 80075ec:	f001 fee0 	bl	80093b0 <__lshift>
 80075f0:	9904      	ldr	r1, [sp, #16]
 80075f2:	4683      	mov	fp, r0
 80075f4:	f001 ff4c 	bl	8009490 <__mcmp>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	dd71      	ble.n	80076e0 <_strtod_l+0x8d8>
 80075fc:	9905      	ldr	r1, [sp, #20]
 80075fe:	464b      	mov	r3, r9
 8007600:	4a20      	ldr	r2, [pc, #128]	; (8007684 <_strtod_l+0x87c>)
 8007602:	2900      	cmp	r1, #0
 8007604:	f000 808c 	beq.w	8007720 <_strtod_l+0x918>
 8007608:	ea02 0109 	and.w	r1, r2, r9
 800760c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007610:	f300 8086 	bgt.w	8007720 <_strtod_l+0x918>
 8007614:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007618:	f77f aeaa 	ble.w	8007370 <_strtod_l+0x568>
 800761c:	4640      	mov	r0, r8
 800761e:	4649      	mov	r1, r9
 8007620:	4b19      	ldr	r3, [pc, #100]	; (8007688 <_strtod_l+0x880>)
 8007622:	2200      	movs	r2, #0
 8007624:	f7f8 ff58 	bl	80004d8 <__aeabi_dmul>
 8007628:	460b      	mov	r3, r1
 800762a:	4303      	orrs	r3, r0
 800762c:	bf08      	it	eq
 800762e:	2322      	moveq	r3, #34	; 0x22
 8007630:	4680      	mov	r8, r0
 8007632:	4689      	mov	r9, r1
 8007634:	bf08      	it	eq
 8007636:	f8ca 3000 	streq.w	r3, [sl]
 800763a:	e62f      	b.n	800729c <_strtod_l+0x494>
 800763c:	f04f 32ff 	mov.w	r2, #4294967295
 8007640:	fa02 f303 	lsl.w	r3, r2, r3
 8007644:	ea03 0808 	and.w	r8, r3, r8
 8007648:	e6e0      	b.n	800740c <_strtod_l+0x604>
 800764a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800764e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007652:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007656:	35e2      	adds	r5, #226	; 0xe2
 8007658:	fa07 f505 	lsl.w	r5, r7, r5
 800765c:	970f      	str	r7, [sp, #60]	; 0x3c
 800765e:	e747      	b.n	80074f0 <_strtod_l+0x6e8>
 8007660:	2301      	movs	r3, #1
 8007662:	2500      	movs	r5, #0
 8007664:	930f      	str	r3, [sp, #60]	; 0x3c
 8007666:	e743      	b.n	80074f0 <_strtod_l+0x6e8>
 8007668:	463a      	mov	r2, r7
 800766a:	4650      	mov	r0, sl
 800766c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800766e:	f001 fe9f 	bl	80093b0 <__lshift>
 8007672:	901a      	str	r0, [sp, #104]	; 0x68
 8007674:	2800      	cmp	r0, #0
 8007676:	f47f af69 	bne.w	800754c <_strtod_l+0x744>
 800767a:	e604      	b.n	8007286 <_strtod_l+0x47e>
 800767c:	0800a9a0 	.word	0x0800a9a0
 8007680:	fffffc02 	.word	0xfffffc02
 8007684:	7ff00000 	.word	0x7ff00000
 8007688:	39500000 	.word	0x39500000
 800768c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007690:	d165      	bne.n	800775e <_strtod_l+0x956>
 8007692:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007694:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007698:	b35a      	cbz	r2, 80076f2 <_strtod_l+0x8ea>
 800769a:	4a99      	ldr	r2, [pc, #612]	; (8007900 <_strtod_l+0xaf8>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d12b      	bne.n	80076f8 <_strtod_l+0x8f0>
 80076a0:	9b05      	ldr	r3, [sp, #20]
 80076a2:	4641      	mov	r1, r8
 80076a4:	b303      	cbz	r3, 80076e8 <_strtod_l+0x8e0>
 80076a6:	464a      	mov	r2, r9
 80076a8:	4b96      	ldr	r3, [pc, #600]	; (8007904 <_strtod_l+0xafc>)
 80076aa:	4013      	ands	r3, r2
 80076ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80076b0:	f04f 32ff 	mov.w	r2, #4294967295
 80076b4:	d81b      	bhi.n	80076ee <_strtod_l+0x8e6>
 80076b6:	0d1b      	lsrs	r3, r3, #20
 80076b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80076bc:	fa02 f303 	lsl.w	r3, r2, r3
 80076c0:	4299      	cmp	r1, r3
 80076c2:	d119      	bne.n	80076f8 <_strtod_l+0x8f0>
 80076c4:	4b90      	ldr	r3, [pc, #576]	; (8007908 <_strtod_l+0xb00>)
 80076c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d102      	bne.n	80076d2 <_strtod_l+0x8ca>
 80076cc:	3101      	adds	r1, #1
 80076ce:	f43f adda 	beq.w	8007286 <_strtod_l+0x47e>
 80076d2:	f04f 0800 	mov.w	r8, #0
 80076d6:	4b8b      	ldr	r3, [pc, #556]	; (8007904 <_strtod_l+0xafc>)
 80076d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076da:	401a      	ands	r2, r3
 80076dc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80076e0:	9b05      	ldr	r3, [sp, #20]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d19a      	bne.n	800761c <_strtod_l+0x814>
 80076e6:	e5d9      	b.n	800729c <_strtod_l+0x494>
 80076e8:	f04f 33ff 	mov.w	r3, #4294967295
 80076ec:	e7e8      	b.n	80076c0 <_strtod_l+0x8b8>
 80076ee:	4613      	mov	r3, r2
 80076f0:	e7e6      	b.n	80076c0 <_strtod_l+0x8b8>
 80076f2:	ea53 0308 	orrs.w	r3, r3, r8
 80076f6:	d081      	beq.n	80075fc <_strtod_l+0x7f4>
 80076f8:	b1e5      	cbz	r5, 8007734 <_strtod_l+0x92c>
 80076fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076fc:	421d      	tst	r5, r3
 80076fe:	d0ef      	beq.n	80076e0 <_strtod_l+0x8d8>
 8007700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007702:	4640      	mov	r0, r8
 8007704:	4649      	mov	r1, r9
 8007706:	9a05      	ldr	r2, [sp, #20]
 8007708:	b1c3      	cbz	r3, 800773c <_strtod_l+0x934>
 800770a:	f7ff fb59 	bl	8006dc0 <sulp>
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007716:	f7f8 fd29 	bl	800016c <__adddf3>
 800771a:	4680      	mov	r8, r0
 800771c:	4689      	mov	r9, r1
 800771e:	e7df      	b.n	80076e0 <_strtod_l+0x8d8>
 8007720:	4013      	ands	r3, r2
 8007722:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007726:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800772a:	f04f 38ff 	mov.w	r8, #4294967295
 800772e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007732:	e7d5      	b.n	80076e0 <_strtod_l+0x8d8>
 8007734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007736:	ea13 0f08 	tst.w	r3, r8
 800773a:	e7e0      	b.n	80076fe <_strtod_l+0x8f6>
 800773c:	f7ff fb40 	bl	8006dc0 <sulp>
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007748:	f7f8 fd0e 	bl	8000168 <__aeabi_dsub>
 800774c:	2200      	movs	r2, #0
 800774e:	2300      	movs	r3, #0
 8007750:	4680      	mov	r8, r0
 8007752:	4689      	mov	r9, r1
 8007754:	f7f9 f928 	bl	80009a8 <__aeabi_dcmpeq>
 8007758:	2800      	cmp	r0, #0
 800775a:	d0c1      	beq.n	80076e0 <_strtod_l+0x8d8>
 800775c:	e608      	b.n	8007370 <_strtod_l+0x568>
 800775e:	4658      	mov	r0, fp
 8007760:	9904      	ldr	r1, [sp, #16]
 8007762:	f002 f813 	bl	800978c <__ratio>
 8007766:	2200      	movs	r2, #0
 8007768:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800776c:	4606      	mov	r6, r0
 800776e:	460f      	mov	r7, r1
 8007770:	f7f9 f92e 	bl	80009d0 <__aeabi_dcmple>
 8007774:	2800      	cmp	r0, #0
 8007776:	d070      	beq.n	800785a <_strtod_l+0xa52>
 8007778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800777a:	2b00      	cmp	r3, #0
 800777c:	d042      	beq.n	8007804 <_strtod_l+0x9fc>
 800777e:	2600      	movs	r6, #0
 8007780:	4f62      	ldr	r7, [pc, #392]	; (800790c <_strtod_l+0xb04>)
 8007782:	4d62      	ldr	r5, [pc, #392]	; (800790c <_strtod_l+0xb04>)
 8007784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007786:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800778a:	0d1b      	lsrs	r3, r3, #20
 800778c:	051b      	lsls	r3, r3, #20
 800778e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007790:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007792:	4b5f      	ldr	r3, [pc, #380]	; (8007910 <_strtod_l+0xb08>)
 8007794:	429a      	cmp	r2, r3
 8007796:	f040 80c3 	bne.w	8007920 <_strtod_l+0xb18>
 800779a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800779c:	4640      	mov	r0, r8
 800779e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80077a2:	4649      	mov	r1, r9
 80077a4:	f001 ff1c 	bl	80095e0 <__ulp>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	4630      	mov	r0, r6
 80077ae:	4639      	mov	r1, r7
 80077b0:	f7f8 fe92 	bl	80004d8 <__aeabi_dmul>
 80077b4:	4642      	mov	r2, r8
 80077b6:	464b      	mov	r3, r9
 80077b8:	f7f8 fcd8 	bl	800016c <__adddf3>
 80077bc:	460b      	mov	r3, r1
 80077be:	4951      	ldr	r1, [pc, #324]	; (8007904 <_strtod_l+0xafc>)
 80077c0:	4a54      	ldr	r2, [pc, #336]	; (8007914 <_strtod_l+0xb0c>)
 80077c2:	4019      	ands	r1, r3
 80077c4:	4291      	cmp	r1, r2
 80077c6:	4680      	mov	r8, r0
 80077c8:	d95d      	bls.n	8007886 <_strtod_l+0xa7e>
 80077ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077cc:	4b4e      	ldr	r3, [pc, #312]	; (8007908 <_strtod_l+0xb00>)
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d103      	bne.n	80077da <_strtod_l+0x9d2>
 80077d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077d4:	3301      	adds	r3, #1
 80077d6:	f43f ad56 	beq.w	8007286 <_strtod_l+0x47e>
 80077da:	f04f 38ff 	mov.w	r8, #4294967295
 80077de:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007908 <_strtod_l+0xb00>
 80077e2:	4650      	mov	r0, sl
 80077e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80077e6:	f001 fbcb 	bl	8008f80 <_Bfree>
 80077ea:	4650      	mov	r0, sl
 80077ec:	9906      	ldr	r1, [sp, #24]
 80077ee:	f001 fbc7 	bl	8008f80 <_Bfree>
 80077f2:	4650      	mov	r0, sl
 80077f4:	9904      	ldr	r1, [sp, #16]
 80077f6:	f001 fbc3 	bl	8008f80 <_Bfree>
 80077fa:	4659      	mov	r1, fp
 80077fc:	4650      	mov	r0, sl
 80077fe:	f001 fbbf 	bl	8008f80 <_Bfree>
 8007802:	e627      	b.n	8007454 <_strtod_l+0x64c>
 8007804:	f1b8 0f00 	cmp.w	r8, #0
 8007808:	d119      	bne.n	800783e <_strtod_l+0xa36>
 800780a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800780c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007810:	b9e3      	cbnz	r3, 800784c <_strtod_l+0xa44>
 8007812:	2200      	movs	r2, #0
 8007814:	4630      	mov	r0, r6
 8007816:	4639      	mov	r1, r7
 8007818:	4b3c      	ldr	r3, [pc, #240]	; (800790c <_strtod_l+0xb04>)
 800781a:	f7f9 f8cf 	bl	80009bc <__aeabi_dcmplt>
 800781e:	b9c8      	cbnz	r0, 8007854 <_strtod_l+0xa4c>
 8007820:	2200      	movs	r2, #0
 8007822:	4630      	mov	r0, r6
 8007824:	4639      	mov	r1, r7
 8007826:	4b3c      	ldr	r3, [pc, #240]	; (8007918 <_strtod_l+0xb10>)
 8007828:	f7f8 fe56 	bl	80004d8 <__aeabi_dmul>
 800782c:	4604      	mov	r4, r0
 800782e:	460d      	mov	r5, r1
 8007830:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007834:	9416      	str	r4, [sp, #88]	; 0x58
 8007836:	9317      	str	r3, [sp, #92]	; 0x5c
 8007838:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800783c:	e7a2      	b.n	8007784 <_strtod_l+0x97c>
 800783e:	f1b8 0f01 	cmp.w	r8, #1
 8007842:	d103      	bne.n	800784c <_strtod_l+0xa44>
 8007844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007846:	2b00      	cmp	r3, #0
 8007848:	f43f ad92 	beq.w	8007370 <_strtod_l+0x568>
 800784c:	2600      	movs	r6, #0
 800784e:	2400      	movs	r4, #0
 8007850:	4f32      	ldr	r7, [pc, #200]	; (800791c <_strtod_l+0xb14>)
 8007852:	e796      	b.n	8007782 <_strtod_l+0x97a>
 8007854:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007856:	4d30      	ldr	r5, [pc, #192]	; (8007918 <_strtod_l+0xb10>)
 8007858:	e7ea      	b.n	8007830 <_strtod_l+0xa28>
 800785a:	4b2f      	ldr	r3, [pc, #188]	; (8007918 <_strtod_l+0xb10>)
 800785c:	2200      	movs	r2, #0
 800785e:	4630      	mov	r0, r6
 8007860:	4639      	mov	r1, r7
 8007862:	f7f8 fe39 	bl	80004d8 <__aeabi_dmul>
 8007866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007868:	4604      	mov	r4, r0
 800786a:	460d      	mov	r5, r1
 800786c:	b933      	cbnz	r3, 800787c <_strtod_l+0xa74>
 800786e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007872:	9010      	str	r0, [sp, #64]	; 0x40
 8007874:	9311      	str	r3, [sp, #68]	; 0x44
 8007876:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800787a:	e783      	b.n	8007784 <_strtod_l+0x97c>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007884:	e7f7      	b.n	8007876 <_strtod_l+0xa6e>
 8007886:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800788a:	9b05      	ldr	r3, [sp, #20]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1a8      	bne.n	80077e2 <_strtod_l+0x9da>
 8007890:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007894:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007896:	0d1b      	lsrs	r3, r3, #20
 8007898:	051b      	lsls	r3, r3, #20
 800789a:	429a      	cmp	r2, r3
 800789c:	d1a1      	bne.n	80077e2 <_strtod_l+0x9da>
 800789e:	4620      	mov	r0, r4
 80078a0:	4629      	mov	r1, r5
 80078a2:	f7f9 fc7b 	bl	800119c <__aeabi_d2lz>
 80078a6:	f7f8 fde9 	bl	800047c <__aeabi_l2d>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	4620      	mov	r0, r4
 80078b0:	4629      	mov	r1, r5
 80078b2:	f7f8 fc59 	bl	8000168 <__aeabi_dsub>
 80078b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078bc:	ea43 0308 	orr.w	r3, r3, r8
 80078c0:	4313      	orrs	r3, r2
 80078c2:	4604      	mov	r4, r0
 80078c4:	460d      	mov	r5, r1
 80078c6:	d066      	beq.n	8007996 <_strtod_l+0xb8e>
 80078c8:	a309      	add	r3, pc, #36	; (adr r3, 80078f0 <_strtod_l+0xae8>)
 80078ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ce:	f7f9 f875 	bl	80009bc <__aeabi_dcmplt>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	f47f ace2 	bne.w	800729c <_strtod_l+0x494>
 80078d8:	a307      	add	r3, pc, #28	; (adr r3, 80078f8 <_strtod_l+0xaf0>)
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	4620      	mov	r0, r4
 80078e0:	4629      	mov	r1, r5
 80078e2:	f7f9 f889 	bl	80009f8 <__aeabi_dcmpgt>
 80078e6:	2800      	cmp	r0, #0
 80078e8:	f43f af7b 	beq.w	80077e2 <_strtod_l+0x9da>
 80078ec:	e4d6      	b.n	800729c <_strtod_l+0x494>
 80078ee:	bf00      	nop
 80078f0:	94a03595 	.word	0x94a03595
 80078f4:	3fdfffff 	.word	0x3fdfffff
 80078f8:	35afe535 	.word	0x35afe535
 80078fc:	3fe00000 	.word	0x3fe00000
 8007900:	000fffff 	.word	0x000fffff
 8007904:	7ff00000 	.word	0x7ff00000
 8007908:	7fefffff 	.word	0x7fefffff
 800790c:	3ff00000 	.word	0x3ff00000
 8007910:	7fe00000 	.word	0x7fe00000
 8007914:	7c9fffff 	.word	0x7c9fffff
 8007918:	3fe00000 	.word	0x3fe00000
 800791c:	bff00000 	.word	0xbff00000
 8007920:	9b05      	ldr	r3, [sp, #20]
 8007922:	b313      	cbz	r3, 800796a <_strtod_l+0xb62>
 8007924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007926:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800792a:	d81e      	bhi.n	800796a <_strtod_l+0xb62>
 800792c:	a326      	add	r3, pc, #152	; (adr r3, 80079c8 <_strtod_l+0xbc0>)
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	4620      	mov	r0, r4
 8007934:	4629      	mov	r1, r5
 8007936:	f7f9 f84b 	bl	80009d0 <__aeabi_dcmple>
 800793a:	b190      	cbz	r0, 8007962 <_strtod_l+0xb5a>
 800793c:	4629      	mov	r1, r5
 800793e:	4620      	mov	r0, r4
 8007940:	f7f9 f8a2 	bl	8000a88 <__aeabi_d2uiz>
 8007944:	2801      	cmp	r0, #1
 8007946:	bf38      	it	cc
 8007948:	2001      	movcc	r0, #1
 800794a:	f7f8 fd4b 	bl	80003e4 <__aeabi_ui2d>
 800794e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007950:	4604      	mov	r4, r0
 8007952:	460d      	mov	r5, r1
 8007954:	b9d3      	cbnz	r3, 800798c <_strtod_l+0xb84>
 8007956:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800795a:	9012      	str	r0, [sp, #72]	; 0x48
 800795c:	9313      	str	r3, [sp, #76]	; 0x4c
 800795e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007962:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007964:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007968:	1a9f      	subs	r7, r3, r2
 800796a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800796e:	f001 fe37 	bl	80095e0 <__ulp>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	4630      	mov	r0, r6
 8007978:	4639      	mov	r1, r7
 800797a:	f7f8 fdad 	bl	80004d8 <__aeabi_dmul>
 800797e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007982:	f7f8 fbf3 	bl	800016c <__adddf3>
 8007986:	4680      	mov	r8, r0
 8007988:	4689      	mov	r9, r1
 800798a:	e77e      	b.n	800788a <_strtod_l+0xa82>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007994:	e7e3      	b.n	800795e <_strtod_l+0xb56>
 8007996:	a30e      	add	r3, pc, #56	; (adr r3, 80079d0 <_strtod_l+0xbc8>)
 8007998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799c:	f7f9 f80e 	bl	80009bc <__aeabi_dcmplt>
 80079a0:	e7a1      	b.n	80078e6 <_strtod_l+0xade>
 80079a2:	2300      	movs	r3, #0
 80079a4:	930a      	str	r3, [sp, #40]	; 0x28
 80079a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80079aa:	6013      	str	r3, [r2, #0]
 80079ac:	f7ff ba71 	b.w	8006e92 <_strtod_l+0x8a>
 80079b0:	2a65      	cmp	r2, #101	; 0x65
 80079b2:	f43f ab63 	beq.w	800707c <_strtod_l+0x274>
 80079b6:	2a45      	cmp	r2, #69	; 0x45
 80079b8:	f43f ab60 	beq.w	800707c <_strtod_l+0x274>
 80079bc:	2301      	movs	r3, #1
 80079be:	f7ff bb95 	b.w	80070ec <_strtod_l+0x2e4>
 80079c2:	bf00      	nop
 80079c4:	f3af 8000 	nop.w
 80079c8:	ffc00000 	.word	0xffc00000
 80079cc:	41dfffff 	.word	0x41dfffff
 80079d0:	94a03595 	.word	0x94a03595
 80079d4:	3fcfffff 	.word	0x3fcfffff

080079d8 <_strtod_r>:
 80079d8:	4b01      	ldr	r3, [pc, #4]	; (80079e0 <_strtod_r+0x8>)
 80079da:	f7ff ba15 	b.w	8006e08 <_strtod_l>
 80079de:	bf00      	nop
 80079e0:	2000007c 	.word	0x2000007c

080079e4 <_strtol_l.constprop.0>:
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079ea:	4680      	mov	r8, r0
 80079ec:	d001      	beq.n	80079f2 <_strtol_l.constprop.0+0xe>
 80079ee:	2b24      	cmp	r3, #36	; 0x24
 80079f0:	d906      	bls.n	8007a00 <_strtol_l.constprop.0+0x1c>
 80079f2:	f7fe fa17 	bl	8005e24 <__errno>
 80079f6:	2316      	movs	r3, #22
 80079f8:	6003      	str	r3, [r0, #0]
 80079fa:	2000      	movs	r0, #0
 80079fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a00:	460d      	mov	r5, r1
 8007a02:	4f35      	ldr	r7, [pc, #212]	; (8007ad8 <_strtol_l.constprop.0+0xf4>)
 8007a04:	4628      	mov	r0, r5
 8007a06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a0a:	5de6      	ldrb	r6, [r4, r7]
 8007a0c:	f016 0608 	ands.w	r6, r6, #8
 8007a10:	d1f8      	bne.n	8007a04 <_strtol_l.constprop.0+0x20>
 8007a12:	2c2d      	cmp	r4, #45	; 0x2d
 8007a14:	d12f      	bne.n	8007a76 <_strtol_l.constprop.0+0x92>
 8007a16:	2601      	movs	r6, #1
 8007a18:	782c      	ldrb	r4, [r5, #0]
 8007a1a:	1c85      	adds	r5, r0, #2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d057      	beq.n	8007ad0 <_strtol_l.constprop.0+0xec>
 8007a20:	2b10      	cmp	r3, #16
 8007a22:	d109      	bne.n	8007a38 <_strtol_l.constprop.0+0x54>
 8007a24:	2c30      	cmp	r4, #48	; 0x30
 8007a26:	d107      	bne.n	8007a38 <_strtol_l.constprop.0+0x54>
 8007a28:	7828      	ldrb	r0, [r5, #0]
 8007a2a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007a2e:	2858      	cmp	r0, #88	; 0x58
 8007a30:	d149      	bne.n	8007ac6 <_strtol_l.constprop.0+0xe2>
 8007a32:	2310      	movs	r3, #16
 8007a34:	786c      	ldrb	r4, [r5, #1]
 8007a36:	3502      	adds	r5, #2
 8007a38:	2700      	movs	r7, #0
 8007a3a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007a3e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007a42:	fbbe f9f3 	udiv	r9, lr, r3
 8007a46:	4638      	mov	r0, r7
 8007a48:	fb03 ea19 	mls	sl, r3, r9, lr
 8007a4c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007a50:	f1bc 0f09 	cmp.w	ip, #9
 8007a54:	d814      	bhi.n	8007a80 <_strtol_l.constprop.0+0x9c>
 8007a56:	4664      	mov	r4, ip
 8007a58:	42a3      	cmp	r3, r4
 8007a5a:	dd22      	ble.n	8007aa2 <_strtol_l.constprop.0+0xbe>
 8007a5c:	2f00      	cmp	r7, #0
 8007a5e:	db1d      	blt.n	8007a9c <_strtol_l.constprop.0+0xb8>
 8007a60:	4581      	cmp	r9, r0
 8007a62:	d31b      	bcc.n	8007a9c <_strtol_l.constprop.0+0xb8>
 8007a64:	d101      	bne.n	8007a6a <_strtol_l.constprop.0+0x86>
 8007a66:	45a2      	cmp	sl, r4
 8007a68:	db18      	blt.n	8007a9c <_strtol_l.constprop.0+0xb8>
 8007a6a:	2701      	movs	r7, #1
 8007a6c:	fb00 4003 	mla	r0, r0, r3, r4
 8007a70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a74:	e7ea      	b.n	8007a4c <_strtol_l.constprop.0+0x68>
 8007a76:	2c2b      	cmp	r4, #43	; 0x2b
 8007a78:	bf04      	itt	eq
 8007a7a:	782c      	ldrbeq	r4, [r5, #0]
 8007a7c:	1c85      	addeq	r5, r0, #2
 8007a7e:	e7cd      	b.n	8007a1c <_strtol_l.constprop.0+0x38>
 8007a80:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007a84:	f1bc 0f19 	cmp.w	ip, #25
 8007a88:	d801      	bhi.n	8007a8e <_strtol_l.constprop.0+0xaa>
 8007a8a:	3c37      	subs	r4, #55	; 0x37
 8007a8c:	e7e4      	b.n	8007a58 <_strtol_l.constprop.0+0x74>
 8007a8e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007a92:	f1bc 0f19 	cmp.w	ip, #25
 8007a96:	d804      	bhi.n	8007aa2 <_strtol_l.constprop.0+0xbe>
 8007a98:	3c57      	subs	r4, #87	; 0x57
 8007a9a:	e7dd      	b.n	8007a58 <_strtol_l.constprop.0+0x74>
 8007a9c:	f04f 37ff 	mov.w	r7, #4294967295
 8007aa0:	e7e6      	b.n	8007a70 <_strtol_l.constprop.0+0x8c>
 8007aa2:	2f00      	cmp	r7, #0
 8007aa4:	da07      	bge.n	8007ab6 <_strtol_l.constprop.0+0xd2>
 8007aa6:	2322      	movs	r3, #34	; 0x22
 8007aa8:	4670      	mov	r0, lr
 8007aaa:	f8c8 3000 	str.w	r3, [r8]
 8007aae:	2a00      	cmp	r2, #0
 8007ab0:	d0a4      	beq.n	80079fc <_strtol_l.constprop.0+0x18>
 8007ab2:	1e69      	subs	r1, r5, #1
 8007ab4:	e005      	b.n	8007ac2 <_strtol_l.constprop.0+0xde>
 8007ab6:	b106      	cbz	r6, 8007aba <_strtol_l.constprop.0+0xd6>
 8007ab8:	4240      	negs	r0, r0
 8007aba:	2a00      	cmp	r2, #0
 8007abc:	d09e      	beq.n	80079fc <_strtol_l.constprop.0+0x18>
 8007abe:	2f00      	cmp	r7, #0
 8007ac0:	d1f7      	bne.n	8007ab2 <_strtol_l.constprop.0+0xce>
 8007ac2:	6011      	str	r1, [r2, #0]
 8007ac4:	e79a      	b.n	80079fc <_strtol_l.constprop.0+0x18>
 8007ac6:	2430      	movs	r4, #48	; 0x30
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1b5      	bne.n	8007a38 <_strtol_l.constprop.0+0x54>
 8007acc:	2308      	movs	r3, #8
 8007ace:	e7b3      	b.n	8007a38 <_strtol_l.constprop.0+0x54>
 8007ad0:	2c30      	cmp	r4, #48	; 0x30
 8007ad2:	d0a9      	beq.n	8007a28 <_strtol_l.constprop.0+0x44>
 8007ad4:	230a      	movs	r3, #10
 8007ad6:	e7af      	b.n	8007a38 <_strtol_l.constprop.0+0x54>
 8007ad8:	0800a9c9 	.word	0x0800a9c9

08007adc <_strtol_r>:
 8007adc:	f7ff bf82 	b.w	80079e4 <_strtol_l.constprop.0>

08007ae0 <quorem>:
 8007ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae4:	6903      	ldr	r3, [r0, #16]
 8007ae6:	690c      	ldr	r4, [r1, #16]
 8007ae8:	4607      	mov	r7, r0
 8007aea:	42a3      	cmp	r3, r4
 8007aec:	f2c0 8082 	blt.w	8007bf4 <quorem+0x114>
 8007af0:	3c01      	subs	r4, #1
 8007af2:	f100 0514 	add.w	r5, r0, #20
 8007af6:	f101 0814 	add.w	r8, r1, #20
 8007afa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007afe:	9301      	str	r3, [sp, #4]
 8007b00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007b14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b18:	d331      	bcc.n	8007b7e <quorem+0x9e>
 8007b1a:	f04f 0e00 	mov.w	lr, #0
 8007b1e:	4640      	mov	r0, r8
 8007b20:	46ac      	mov	ip, r5
 8007b22:	46f2      	mov	sl, lr
 8007b24:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b28:	b293      	uxth	r3, r2
 8007b2a:	fb06 e303 	mla	r3, r6, r3, lr
 8007b2e:	0c12      	lsrs	r2, r2, #16
 8007b30:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	fb06 e202 	mla	r2, r6, r2, lr
 8007b3a:	ebaa 0303 	sub.w	r3, sl, r3
 8007b3e:	f8dc a000 	ldr.w	sl, [ip]
 8007b42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b46:	fa1f fa8a 	uxth.w	sl, sl
 8007b4a:	4453      	add	r3, sl
 8007b4c:	f8dc a000 	ldr.w	sl, [ip]
 8007b50:	b292      	uxth	r2, r2
 8007b52:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007b56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b60:	4581      	cmp	r9, r0
 8007b62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b66:	f84c 3b04 	str.w	r3, [ip], #4
 8007b6a:	d2db      	bcs.n	8007b24 <quorem+0x44>
 8007b6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b70:	b92b      	cbnz	r3, 8007b7e <quorem+0x9e>
 8007b72:	9b01      	ldr	r3, [sp, #4]
 8007b74:	3b04      	subs	r3, #4
 8007b76:	429d      	cmp	r5, r3
 8007b78:	461a      	mov	r2, r3
 8007b7a:	d32f      	bcc.n	8007bdc <quorem+0xfc>
 8007b7c:	613c      	str	r4, [r7, #16]
 8007b7e:	4638      	mov	r0, r7
 8007b80:	f001 fc86 	bl	8009490 <__mcmp>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	db25      	blt.n	8007bd4 <quorem+0xf4>
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f04f 0c00 	mov.w	ip, #0
 8007b8e:	3601      	adds	r6, #1
 8007b90:	f858 1b04 	ldr.w	r1, [r8], #4
 8007b94:	f8d0 e000 	ldr.w	lr, [r0]
 8007b98:	b28b      	uxth	r3, r1
 8007b9a:	ebac 0303 	sub.w	r3, ip, r3
 8007b9e:	fa1f f28e 	uxth.w	r2, lr
 8007ba2:	4413      	add	r3, r2
 8007ba4:	0c0a      	lsrs	r2, r1, #16
 8007ba6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007baa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bb4:	45c1      	cmp	r9, r8
 8007bb6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007bba:	f840 3b04 	str.w	r3, [r0], #4
 8007bbe:	d2e7      	bcs.n	8007b90 <quorem+0xb0>
 8007bc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bc8:	b922      	cbnz	r2, 8007bd4 <quorem+0xf4>
 8007bca:	3b04      	subs	r3, #4
 8007bcc:	429d      	cmp	r5, r3
 8007bce:	461a      	mov	r2, r3
 8007bd0:	d30a      	bcc.n	8007be8 <quorem+0x108>
 8007bd2:	613c      	str	r4, [r7, #16]
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	b003      	add	sp, #12
 8007bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bdc:	6812      	ldr	r2, [r2, #0]
 8007bde:	3b04      	subs	r3, #4
 8007be0:	2a00      	cmp	r2, #0
 8007be2:	d1cb      	bne.n	8007b7c <quorem+0x9c>
 8007be4:	3c01      	subs	r4, #1
 8007be6:	e7c6      	b.n	8007b76 <quorem+0x96>
 8007be8:	6812      	ldr	r2, [r2, #0]
 8007bea:	3b04      	subs	r3, #4
 8007bec:	2a00      	cmp	r2, #0
 8007bee:	d1f0      	bne.n	8007bd2 <quorem+0xf2>
 8007bf0:	3c01      	subs	r4, #1
 8007bf2:	e7eb      	b.n	8007bcc <quorem+0xec>
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	e7ee      	b.n	8007bd6 <quorem+0xf6>

08007bf8 <_dtoa_r>:
 8007bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfc:	4616      	mov	r6, r2
 8007bfe:	461f      	mov	r7, r3
 8007c00:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c02:	b099      	sub	sp, #100	; 0x64
 8007c04:	4605      	mov	r5, r0
 8007c06:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007c0a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007c0e:	b974      	cbnz	r4, 8007c2e <_dtoa_r+0x36>
 8007c10:	2010      	movs	r0, #16
 8007c12:	f7fe f931 	bl	8005e78 <malloc>
 8007c16:	4602      	mov	r2, r0
 8007c18:	6268      	str	r0, [r5, #36]	; 0x24
 8007c1a:	b920      	cbnz	r0, 8007c26 <_dtoa_r+0x2e>
 8007c1c:	21ea      	movs	r1, #234	; 0xea
 8007c1e:	4ba8      	ldr	r3, [pc, #672]	; (8007ec0 <_dtoa_r+0x2c8>)
 8007c20:	48a8      	ldr	r0, [pc, #672]	; (8007ec4 <_dtoa_r+0x2cc>)
 8007c22:	f001 ffbd 	bl	8009ba0 <__assert_func>
 8007c26:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c2a:	6004      	str	r4, [r0, #0]
 8007c2c:	60c4      	str	r4, [r0, #12]
 8007c2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c30:	6819      	ldr	r1, [r3, #0]
 8007c32:	b151      	cbz	r1, 8007c4a <_dtoa_r+0x52>
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	2301      	movs	r3, #1
 8007c38:	4093      	lsls	r3, r2
 8007c3a:	604a      	str	r2, [r1, #4]
 8007c3c:	608b      	str	r3, [r1, #8]
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f001 f99e 	bl	8008f80 <_Bfree>
 8007c44:	2200      	movs	r2, #0
 8007c46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	1e3b      	subs	r3, r7, #0
 8007c4c:	bfaf      	iteee	ge
 8007c4e:	2300      	movge	r3, #0
 8007c50:	2201      	movlt	r2, #1
 8007c52:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007c56:	9305      	strlt	r3, [sp, #20]
 8007c58:	bfa8      	it	ge
 8007c5a:	f8c8 3000 	strge.w	r3, [r8]
 8007c5e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007c62:	4b99      	ldr	r3, [pc, #612]	; (8007ec8 <_dtoa_r+0x2d0>)
 8007c64:	bfb8      	it	lt
 8007c66:	f8c8 2000 	strlt.w	r2, [r8]
 8007c6a:	ea33 0309 	bics.w	r3, r3, r9
 8007c6e:	d119      	bne.n	8007ca4 <_dtoa_r+0xac>
 8007c70:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007c76:	6013      	str	r3, [r2, #0]
 8007c78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c7c:	4333      	orrs	r3, r6
 8007c7e:	f000 857f 	beq.w	8008780 <_dtoa_r+0xb88>
 8007c82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c84:	b953      	cbnz	r3, 8007c9c <_dtoa_r+0xa4>
 8007c86:	4b91      	ldr	r3, [pc, #580]	; (8007ecc <_dtoa_r+0x2d4>)
 8007c88:	e022      	b.n	8007cd0 <_dtoa_r+0xd8>
 8007c8a:	4b91      	ldr	r3, [pc, #580]	; (8007ed0 <_dtoa_r+0x2d8>)
 8007c8c:	9303      	str	r3, [sp, #12]
 8007c8e:	3308      	adds	r3, #8
 8007c90:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007c92:	6013      	str	r3, [r2, #0]
 8007c94:	9803      	ldr	r0, [sp, #12]
 8007c96:	b019      	add	sp, #100	; 0x64
 8007c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c9c:	4b8b      	ldr	r3, [pc, #556]	; (8007ecc <_dtoa_r+0x2d4>)
 8007c9e:	9303      	str	r3, [sp, #12]
 8007ca0:	3303      	adds	r3, #3
 8007ca2:	e7f5      	b.n	8007c90 <_dtoa_r+0x98>
 8007ca4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007ca8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007cac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f7f8 fe78 	bl	80009a8 <__aeabi_dcmpeq>
 8007cb8:	4680      	mov	r8, r0
 8007cba:	b158      	cbz	r0, 8007cd4 <_dtoa_r+0xdc>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007cc0:	6013      	str	r3, [r2, #0]
 8007cc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 8558 	beq.w	800877a <_dtoa_r+0xb82>
 8007cca:	4882      	ldr	r0, [pc, #520]	; (8007ed4 <_dtoa_r+0x2dc>)
 8007ccc:	6018      	str	r0, [r3, #0]
 8007cce:	1e43      	subs	r3, r0, #1
 8007cd0:	9303      	str	r3, [sp, #12]
 8007cd2:	e7df      	b.n	8007c94 <_dtoa_r+0x9c>
 8007cd4:	ab16      	add	r3, sp, #88	; 0x58
 8007cd6:	9301      	str	r3, [sp, #4]
 8007cd8:	ab17      	add	r3, sp, #92	; 0x5c
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	4628      	mov	r0, r5
 8007cde:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ce2:	f001 fcf7 	bl	80096d4 <__d2b>
 8007ce6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007cea:	4683      	mov	fp, r0
 8007cec:	2c00      	cmp	r4, #0
 8007cee:	d07f      	beq.n	8007df0 <_dtoa_r+0x1f8>
 8007cf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cf6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007cfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cfe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007d02:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007d06:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	4b72      	ldr	r3, [pc, #456]	; (8007ed8 <_dtoa_r+0x2e0>)
 8007d0e:	f7f8 fa2b 	bl	8000168 <__aeabi_dsub>
 8007d12:	a365      	add	r3, pc, #404	; (adr r3, 8007ea8 <_dtoa_r+0x2b0>)
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	f7f8 fbde 	bl	80004d8 <__aeabi_dmul>
 8007d1c:	a364      	add	r3, pc, #400	; (adr r3, 8007eb0 <_dtoa_r+0x2b8>)
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	f7f8 fa23 	bl	800016c <__adddf3>
 8007d26:	4606      	mov	r6, r0
 8007d28:	4620      	mov	r0, r4
 8007d2a:	460f      	mov	r7, r1
 8007d2c:	f7f8 fb6a 	bl	8000404 <__aeabi_i2d>
 8007d30:	a361      	add	r3, pc, #388	; (adr r3, 8007eb8 <_dtoa_r+0x2c0>)
 8007d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d36:	f7f8 fbcf 	bl	80004d8 <__aeabi_dmul>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	4630      	mov	r0, r6
 8007d40:	4639      	mov	r1, r7
 8007d42:	f7f8 fa13 	bl	800016c <__adddf3>
 8007d46:	4606      	mov	r6, r0
 8007d48:	460f      	mov	r7, r1
 8007d4a:	f7f8 fe75 	bl	8000a38 <__aeabi_d2iz>
 8007d4e:	2200      	movs	r2, #0
 8007d50:	4682      	mov	sl, r0
 8007d52:	2300      	movs	r3, #0
 8007d54:	4630      	mov	r0, r6
 8007d56:	4639      	mov	r1, r7
 8007d58:	f7f8 fe30 	bl	80009bc <__aeabi_dcmplt>
 8007d5c:	b148      	cbz	r0, 8007d72 <_dtoa_r+0x17a>
 8007d5e:	4650      	mov	r0, sl
 8007d60:	f7f8 fb50 	bl	8000404 <__aeabi_i2d>
 8007d64:	4632      	mov	r2, r6
 8007d66:	463b      	mov	r3, r7
 8007d68:	f7f8 fe1e 	bl	80009a8 <__aeabi_dcmpeq>
 8007d6c:	b908      	cbnz	r0, 8007d72 <_dtoa_r+0x17a>
 8007d6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d72:	f1ba 0f16 	cmp.w	sl, #22
 8007d76:	d858      	bhi.n	8007e2a <_dtoa_r+0x232>
 8007d78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d7c:	4b57      	ldr	r3, [pc, #348]	; (8007edc <_dtoa_r+0x2e4>)
 8007d7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	f7f8 fe19 	bl	80009bc <__aeabi_dcmplt>
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d04f      	beq.n	8007e2e <_dtoa_r+0x236>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d94:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d96:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007d98:	1b1c      	subs	r4, r3, r4
 8007d9a:	1e63      	subs	r3, r4, #1
 8007d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d9e:	bf49      	itett	mi
 8007da0:	f1c4 0301 	rsbmi	r3, r4, #1
 8007da4:	2300      	movpl	r3, #0
 8007da6:	9306      	strmi	r3, [sp, #24]
 8007da8:	2300      	movmi	r3, #0
 8007daa:	bf54      	ite	pl
 8007dac:	9306      	strpl	r3, [sp, #24]
 8007dae:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007db0:	f1ba 0f00 	cmp.w	sl, #0
 8007db4:	db3d      	blt.n	8007e32 <_dtoa_r+0x23a>
 8007db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007dbc:	4453      	add	r3, sl
 8007dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	930a      	str	r3, [sp, #40]	; 0x28
 8007dc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dc6:	2b09      	cmp	r3, #9
 8007dc8:	f200 808c 	bhi.w	8007ee4 <_dtoa_r+0x2ec>
 8007dcc:	2b05      	cmp	r3, #5
 8007dce:	bfc4      	itt	gt
 8007dd0:	3b04      	subgt	r3, #4
 8007dd2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007dd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dd6:	bfc8      	it	gt
 8007dd8:	2400      	movgt	r4, #0
 8007dda:	f1a3 0302 	sub.w	r3, r3, #2
 8007dde:	bfd8      	it	le
 8007de0:	2401      	movle	r4, #1
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	f200 808a 	bhi.w	8007efc <_dtoa_r+0x304>
 8007de8:	e8df f003 	tbb	[pc, r3]
 8007dec:	5b4d4f2d 	.word	0x5b4d4f2d
 8007df0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007df4:	441c      	add	r4, r3
 8007df6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007dfa:	2b20      	cmp	r3, #32
 8007dfc:	bfc3      	ittte	gt
 8007dfe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007e02:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007e06:	fa09 f303 	lslgt.w	r3, r9, r3
 8007e0a:	f1c3 0320 	rsble	r3, r3, #32
 8007e0e:	bfc6      	itte	gt
 8007e10:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007e14:	4318      	orrgt	r0, r3
 8007e16:	fa06 f003 	lslle.w	r0, r6, r3
 8007e1a:	f7f8 fae3 	bl	80003e4 <__aeabi_ui2d>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007e24:	3c01      	subs	r4, #1
 8007e26:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e28:	e76f      	b.n	8007d0a <_dtoa_r+0x112>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e7b2      	b.n	8007d94 <_dtoa_r+0x19c>
 8007e2e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007e30:	e7b1      	b.n	8007d96 <_dtoa_r+0x19e>
 8007e32:	9b06      	ldr	r3, [sp, #24]
 8007e34:	eba3 030a 	sub.w	r3, r3, sl
 8007e38:	9306      	str	r3, [sp, #24]
 8007e3a:	f1ca 0300 	rsb	r3, sl, #0
 8007e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e40:	2300      	movs	r3, #0
 8007e42:	930e      	str	r3, [sp, #56]	; 0x38
 8007e44:	e7be      	b.n	8007dc4 <_dtoa_r+0x1cc>
 8007e46:	2300      	movs	r3, #0
 8007e48:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	dc58      	bgt.n	8007f02 <_dtoa_r+0x30a>
 8007e50:	f04f 0901 	mov.w	r9, #1
 8007e54:	464b      	mov	r3, r9
 8007e56:	f8cd 9020 	str.w	r9, [sp, #32]
 8007e5a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007e5e:	2200      	movs	r2, #0
 8007e60:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007e62:	6042      	str	r2, [r0, #4]
 8007e64:	2204      	movs	r2, #4
 8007e66:	f102 0614 	add.w	r6, r2, #20
 8007e6a:	429e      	cmp	r6, r3
 8007e6c:	6841      	ldr	r1, [r0, #4]
 8007e6e:	d94e      	bls.n	8007f0e <_dtoa_r+0x316>
 8007e70:	4628      	mov	r0, r5
 8007e72:	f001 f845 	bl	8008f00 <_Balloc>
 8007e76:	9003      	str	r0, [sp, #12]
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	d14c      	bne.n	8007f16 <_dtoa_r+0x31e>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007e82:	4b17      	ldr	r3, [pc, #92]	; (8007ee0 <_dtoa_r+0x2e8>)
 8007e84:	e6cc      	b.n	8007c20 <_dtoa_r+0x28>
 8007e86:	2301      	movs	r3, #1
 8007e88:	e7de      	b.n	8007e48 <_dtoa_r+0x250>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e90:	eb0a 0903 	add.w	r9, sl, r3
 8007e94:	f109 0301 	add.w	r3, r9, #1
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	9308      	str	r3, [sp, #32]
 8007e9c:	bfb8      	it	lt
 8007e9e:	2301      	movlt	r3, #1
 8007ea0:	e7dd      	b.n	8007e5e <_dtoa_r+0x266>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e7f2      	b.n	8007e8c <_dtoa_r+0x294>
 8007ea6:	bf00      	nop
 8007ea8:	636f4361 	.word	0x636f4361
 8007eac:	3fd287a7 	.word	0x3fd287a7
 8007eb0:	8b60c8b3 	.word	0x8b60c8b3
 8007eb4:	3fc68a28 	.word	0x3fc68a28
 8007eb8:	509f79fb 	.word	0x509f79fb
 8007ebc:	3fd34413 	.word	0x3fd34413
 8007ec0:	0800aad6 	.word	0x0800aad6
 8007ec4:	0800aaed 	.word	0x0800aaed
 8007ec8:	7ff00000 	.word	0x7ff00000
 8007ecc:	0800aad2 	.word	0x0800aad2
 8007ed0:	0800aac9 	.word	0x0800aac9
 8007ed4:	0800a94d 	.word	0x0800a94d
 8007ed8:	3ff80000 	.word	0x3ff80000
 8007edc:	0800ac58 	.word	0x0800ac58
 8007ee0:	0800ab48 	.word	0x0800ab48
 8007ee4:	2401      	movs	r4, #1
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	940b      	str	r4, [sp, #44]	; 0x2c
 8007eea:	9322      	str	r3, [sp, #136]	; 0x88
 8007eec:	f04f 39ff 	mov.w	r9, #4294967295
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	2312      	movs	r3, #18
 8007ef4:	f8cd 9020 	str.w	r9, [sp, #32]
 8007ef8:	9223      	str	r2, [sp, #140]	; 0x8c
 8007efa:	e7b0      	b.n	8007e5e <_dtoa_r+0x266>
 8007efc:	2301      	movs	r3, #1
 8007efe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f00:	e7f4      	b.n	8007eec <_dtoa_r+0x2f4>
 8007f02:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007f06:	464b      	mov	r3, r9
 8007f08:	f8cd 9020 	str.w	r9, [sp, #32]
 8007f0c:	e7a7      	b.n	8007e5e <_dtoa_r+0x266>
 8007f0e:	3101      	adds	r1, #1
 8007f10:	6041      	str	r1, [r0, #4]
 8007f12:	0052      	lsls	r2, r2, #1
 8007f14:	e7a7      	b.n	8007e66 <_dtoa_r+0x26e>
 8007f16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f18:	9a03      	ldr	r2, [sp, #12]
 8007f1a:	601a      	str	r2, [r3, #0]
 8007f1c:	9b08      	ldr	r3, [sp, #32]
 8007f1e:	2b0e      	cmp	r3, #14
 8007f20:	f200 80a8 	bhi.w	8008074 <_dtoa_r+0x47c>
 8007f24:	2c00      	cmp	r4, #0
 8007f26:	f000 80a5 	beq.w	8008074 <_dtoa_r+0x47c>
 8007f2a:	f1ba 0f00 	cmp.w	sl, #0
 8007f2e:	dd34      	ble.n	8007f9a <_dtoa_r+0x3a2>
 8007f30:	4a9a      	ldr	r2, [pc, #616]	; (800819c <_dtoa_r+0x5a4>)
 8007f32:	f00a 030f 	and.w	r3, sl, #15
 8007f36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f3a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007f3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f42:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007f46:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007f4a:	d016      	beq.n	8007f7a <_dtoa_r+0x382>
 8007f4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f50:	4b93      	ldr	r3, [pc, #588]	; (80081a0 <_dtoa_r+0x5a8>)
 8007f52:	2703      	movs	r7, #3
 8007f54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f58:	f7f8 fbe8 	bl	800072c <__aeabi_ddiv>
 8007f5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f60:	f004 040f 	and.w	r4, r4, #15
 8007f64:	4e8e      	ldr	r6, [pc, #568]	; (80081a0 <_dtoa_r+0x5a8>)
 8007f66:	b954      	cbnz	r4, 8007f7e <_dtoa_r+0x386>
 8007f68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f70:	f7f8 fbdc 	bl	800072c <__aeabi_ddiv>
 8007f74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f78:	e029      	b.n	8007fce <_dtoa_r+0x3d6>
 8007f7a:	2702      	movs	r7, #2
 8007f7c:	e7f2      	b.n	8007f64 <_dtoa_r+0x36c>
 8007f7e:	07e1      	lsls	r1, r4, #31
 8007f80:	d508      	bpl.n	8007f94 <_dtoa_r+0x39c>
 8007f82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f86:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f8a:	f7f8 faa5 	bl	80004d8 <__aeabi_dmul>
 8007f8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f92:	3701      	adds	r7, #1
 8007f94:	1064      	asrs	r4, r4, #1
 8007f96:	3608      	adds	r6, #8
 8007f98:	e7e5      	b.n	8007f66 <_dtoa_r+0x36e>
 8007f9a:	f000 80a5 	beq.w	80080e8 <_dtoa_r+0x4f0>
 8007f9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fa2:	f1ca 0400 	rsb	r4, sl, #0
 8007fa6:	4b7d      	ldr	r3, [pc, #500]	; (800819c <_dtoa_r+0x5a4>)
 8007fa8:	f004 020f 	and.w	r2, r4, #15
 8007fac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	f7f8 fa90 	bl	80004d8 <__aeabi_dmul>
 8007fb8:	2702      	movs	r7, #2
 8007fba:	2300      	movs	r3, #0
 8007fbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fc0:	4e77      	ldr	r6, [pc, #476]	; (80081a0 <_dtoa_r+0x5a8>)
 8007fc2:	1124      	asrs	r4, r4, #4
 8007fc4:	2c00      	cmp	r4, #0
 8007fc6:	f040 8084 	bne.w	80080d2 <_dtoa_r+0x4da>
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1d2      	bne.n	8007f74 <_dtoa_r+0x37c>
 8007fce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 808b 	beq.w	80080ec <_dtoa_r+0x4f4>
 8007fd6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007fda:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007fde:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	4b6f      	ldr	r3, [pc, #444]	; (80081a4 <_dtoa_r+0x5ac>)
 8007fe6:	f7f8 fce9 	bl	80009bc <__aeabi_dcmplt>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	d07e      	beq.n	80080ec <_dtoa_r+0x4f4>
 8007fee:	9b08      	ldr	r3, [sp, #32]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d07b      	beq.n	80080ec <_dtoa_r+0x4f4>
 8007ff4:	f1b9 0f00 	cmp.w	r9, #0
 8007ff8:	dd38      	ble.n	800806c <_dtoa_r+0x474>
 8007ffa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ffe:	2200      	movs	r2, #0
 8008000:	4b69      	ldr	r3, [pc, #420]	; (80081a8 <_dtoa_r+0x5b0>)
 8008002:	f7f8 fa69 	bl	80004d8 <__aeabi_dmul>
 8008006:	464c      	mov	r4, r9
 8008008:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800800c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008010:	3701      	adds	r7, #1
 8008012:	4638      	mov	r0, r7
 8008014:	f7f8 f9f6 	bl	8000404 <__aeabi_i2d>
 8008018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800801c:	f7f8 fa5c 	bl	80004d8 <__aeabi_dmul>
 8008020:	2200      	movs	r2, #0
 8008022:	4b62      	ldr	r3, [pc, #392]	; (80081ac <_dtoa_r+0x5b4>)
 8008024:	f7f8 f8a2 	bl	800016c <__adddf3>
 8008028:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800802c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008030:	9611      	str	r6, [sp, #68]	; 0x44
 8008032:	2c00      	cmp	r4, #0
 8008034:	d15d      	bne.n	80080f2 <_dtoa_r+0x4fa>
 8008036:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800803a:	2200      	movs	r2, #0
 800803c:	4b5c      	ldr	r3, [pc, #368]	; (80081b0 <_dtoa_r+0x5b8>)
 800803e:	f7f8 f893 	bl	8000168 <__aeabi_dsub>
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800804a:	4633      	mov	r3, r6
 800804c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800804e:	f7f8 fcd3 	bl	80009f8 <__aeabi_dcmpgt>
 8008052:	2800      	cmp	r0, #0
 8008054:	f040 829c 	bne.w	8008590 <_dtoa_r+0x998>
 8008058:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800805c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800805e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008062:	f7f8 fcab 	bl	80009bc <__aeabi_dcmplt>
 8008066:	2800      	cmp	r0, #0
 8008068:	f040 8290 	bne.w	800858c <_dtoa_r+0x994>
 800806c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008070:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008074:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008076:	2b00      	cmp	r3, #0
 8008078:	f2c0 8152 	blt.w	8008320 <_dtoa_r+0x728>
 800807c:	f1ba 0f0e 	cmp.w	sl, #14
 8008080:	f300 814e 	bgt.w	8008320 <_dtoa_r+0x728>
 8008084:	4b45      	ldr	r3, [pc, #276]	; (800819c <_dtoa_r+0x5a4>)
 8008086:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800808a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800808e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008092:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008094:	2b00      	cmp	r3, #0
 8008096:	f280 80db 	bge.w	8008250 <_dtoa_r+0x658>
 800809a:	9b08      	ldr	r3, [sp, #32]
 800809c:	2b00      	cmp	r3, #0
 800809e:	f300 80d7 	bgt.w	8008250 <_dtoa_r+0x658>
 80080a2:	f040 8272 	bne.w	800858a <_dtoa_r+0x992>
 80080a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080aa:	2200      	movs	r2, #0
 80080ac:	4b40      	ldr	r3, [pc, #256]	; (80081b0 <_dtoa_r+0x5b8>)
 80080ae:	f7f8 fa13 	bl	80004d8 <__aeabi_dmul>
 80080b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080b6:	f7f8 fc95 	bl	80009e4 <__aeabi_dcmpge>
 80080ba:	9c08      	ldr	r4, [sp, #32]
 80080bc:	4626      	mov	r6, r4
 80080be:	2800      	cmp	r0, #0
 80080c0:	f040 8248 	bne.w	8008554 <_dtoa_r+0x95c>
 80080c4:	2331      	movs	r3, #49	; 0x31
 80080c6:	9f03      	ldr	r7, [sp, #12]
 80080c8:	f10a 0a01 	add.w	sl, sl, #1
 80080cc:	f807 3b01 	strb.w	r3, [r7], #1
 80080d0:	e244      	b.n	800855c <_dtoa_r+0x964>
 80080d2:	07e2      	lsls	r2, r4, #31
 80080d4:	d505      	bpl.n	80080e2 <_dtoa_r+0x4ea>
 80080d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080da:	f7f8 f9fd 	bl	80004d8 <__aeabi_dmul>
 80080de:	2301      	movs	r3, #1
 80080e0:	3701      	adds	r7, #1
 80080e2:	1064      	asrs	r4, r4, #1
 80080e4:	3608      	adds	r6, #8
 80080e6:	e76d      	b.n	8007fc4 <_dtoa_r+0x3cc>
 80080e8:	2702      	movs	r7, #2
 80080ea:	e770      	b.n	8007fce <_dtoa_r+0x3d6>
 80080ec:	46d0      	mov	r8, sl
 80080ee:	9c08      	ldr	r4, [sp, #32]
 80080f0:	e78f      	b.n	8008012 <_dtoa_r+0x41a>
 80080f2:	9903      	ldr	r1, [sp, #12]
 80080f4:	4b29      	ldr	r3, [pc, #164]	; (800819c <_dtoa_r+0x5a4>)
 80080f6:	4421      	add	r1, r4
 80080f8:	9112      	str	r1, [sp, #72]	; 0x48
 80080fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008100:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008104:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008108:	2900      	cmp	r1, #0
 800810a:	d055      	beq.n	80081b8 <_dtoa_r+0x5c0>
 800810c:	2000      	movs	r0, #0
 800810e:	4929      	ldr	r1, [pc, #164]	; (80081b4 <_dtoa_r+0x5bc>)
 8008110:	f7f8 fb0c 	bl	800072c <__aeabi_ddiv>
 8008114:	463b      	mov	r3, r7
 8008116:	4632      	mov	r2, r6
 8008118:	f7f8 f826 	bl	8000168 <__aeabi_dsub>
 800811c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008120:	9f03      	ldr	r7, [sp, #12]
 8008122:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008126:	f7f8 fc87 	bl	8000a38 <__aeabi_d2iz>
 800812a:	4604      	mov	r4, r0
 800812c:	f7f8 f96a 	bl	8000404 <__aeabi_i2d>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008138:	f7f8 f816 	bl	8000168 <__aeabi_dsub>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	3430      	adds	r4, #48	; 0x30
 8008142:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008146:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800814a:	f807 4b01 	strb.w	r4, [r7], #1
 800814e:	f7f8 fc35 	bl	80009bc <__aeabi_dcmplt>
 8008152:	2800      	cmp	r0, #0
 8008154:	d174      	bne.n	8008240 <_dtoa_r+0x648>
 8008156:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800815a:	2000      	movs	r0, #0
 800815c:	4911      	ldr	r1, [pc, #68]	; (80081a4 <_dtoa_r+0x5ac>)
 800815e:	f7f8 f803 	bl	8000168 <__aeabi_dsub>
 8008162:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008166:	f7f8 fc29 	bl	80009bc <__aeabi_dcmplt>
 800816a:	2800      	cmp	r0, #0
 800816c:	f040 80b7 	bne.w	80082de <_dtoa_r+0x6e6>
 8008170:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008172:	429f      	cmp	r7, r3
 8008174:	f43f af7a 	beq.w	800806c <_dtoa_r+0x474>
 8008178:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800817c:	2200      	movs	r2, #0
 800817e:	4b0a      	ldr	r3, [pc, #40]	; (80081a8 <_dtoa_r+0x5b0>)
 8008180:	f7f8 f9aa 	bl	80004d8 <__aeabi_dmul>
 8008184:	2200      	movs	r2, #0
 8008186:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800818a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800818e:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <_dtoa_r+0x5b0>)
 8008190:	f7f8 f9a2 	bl	80004d8 <__aeabi_dmul>
 8008194:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008198:	e7c3      	b.n	8008122 <_dtoa_r+0x52a>
 800819a:	bf00      	nop
 800819c:	0800ac58 	.word	0x0800ac58
 80081a0:	0800ac30 	.word	0x0800ac30
 80081a4:	3ff00000 	.word	0x3ff00000
 80081a8:	40240000 	.word	0x40240000
 80081ac:	401c0000 	.word	0x401c0000
 80081b0:	40140000 	.word	0x40140000
 80081b4:	3fe00000 	.word	0x3fe00000
 80081b8:	4630      	mov	r0, r6
 80081ba:	4639      	mov	r1, r7
 80081bc:	f7f8 f98c 	bl	80004d8 <__aeabi_dmul>
 80081c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80081c6:	9c03      	ldr	r4, [sp, #12]
 80081c8:	9314      	str	r3, [sp, #80]	; 0x50
 80081ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081ce:	f7f8 fc33 	bl	8000a38 <__aeabi_d2iz>
 80081d2:	9015      	str	r0, [sp, #84]	; 0x54
 80081d4:	f7f8 f916 	bl	8000404 <__aeabi_i2d>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081e0:	f7f7 ffc2 	bl	8000168 <__aeabi_dsub>
 80081e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081e6:	4606      	mov	r6, r0
 80081e8:	3330      	adds	r3, #48	; 0x30
 80081ea:	f804 3b01 	strb.w	r3, [r4], #1
 80081ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081f0:	460f      	mov	r7, r1
 80081f2:	429c      	cmp	r4, r3
 80081f4:	f04f 0200 	mov.w	r2, #0
 80081f8:	d124      	bne.n	8008244 <_dtoa_r+0x64c>
 80081fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081fe:	4bb0      	ldr	r3, [pc, #704]	; (80084c0 <_dtoa_r+0x8c8>)
 8008200:	f7f7 ffb4 	bl	800016c <__adddf3>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	4630      	mov	r0, r6
 800820a:	4639      	mov	r1, r7
 800820c:	f7f8 fbf4 	bl	80009f8 <__aeabi_dcmpgt>
 8008210:	2800      	cmp	r0, #0
 8008212:	d163      	bne.n	80082dc <_dtoa_r+0x6e4>
 8008214:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008218:	2000      	movs	r0, #0
 800821a:	49a9      	ldr	r1, [pc, #676]	; (80084c0 <_dtoa_r+0x8c8>)
 800821c:	f7f7 ffa4 	bl	8000168 <__aeabi_dsub>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	4630      	mov	r0, r6
 8008226:	4639      	mov	r1, r7
 8008228:	f7f8 fbc8 	bl	80009bc <__aeabi_dcmplt>
 800822c:	2800      	cmp	r0, #0
 800822e:	f43f af1d 	beq.w	800806c <_dtoa_r+0x474>
 8008232:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008234:	1e7b      	subs	r3, r7, #1
 8008236:	9314      	str	r3, [sp, #80]	; 0x50
 8008238:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800823c:	2b30      	cmp	r3, #48	; 0x30
 800823e:	d0f8      	beq.n	8008232 <_dtoa_r+0x63a>
 8008240:	46c2      	mov	sl, r8
 8008242:	e03b      	b.n	80082bc <_dtoa_r+0x6c4>
 8008244:	4b9f      	ldr	r3, [pc, #636]	; (80084c4 <_dtoa_r+0x8cc>)
 8008246:	f7f8 f947 	bl	80004d8 <__aeabi_dmul>
 800824a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800824e:	e7bc      	b.n	80081ca <_dtoa_r+0x5d2>
 8008250:	9f03      	ldr	r7, [sp, #12]
 8008252:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008256:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800825a:	4640      	mov	r0, r8
 800825c:	4649      	mov	r1, r9
 800825e:	f7f8 fa65 	bl	800072c <__aeabi_ddiv>
 8008262:	f7f8 fbe9 	bl	8000a38 <__aeabi_d2iz>
 8008266:	4604      	mov	r4, r0
 8008268:	f7f8 f8cc 	bl	8000404 <__aeabi_i2d>
 800826c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008270:	f7f8 f932 	bl	80004d8 <__aeabi_dmul>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4640      	mov	r0, r8
 800827a:	4649      	mov	r1, r9
 800827c:	f7f7 ff74 	bl	8000168 <__aeabi_dsub>
 8008280:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008284:	f807 6b01 	strb.w	r6, [r7], #1
 8008288:	9e03      	ldr	r6, [sp, #12]
 800828a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800828e:	1bbe      	subs	r6, r7, r6
 8008290:	45b4      	cmp	ip, r6
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	d136      	bne.n	8008306 <_dtoa_r+0x70e>
 8008298:	f7f7 ff68 	bl	800016c <__adddf3>
 800829c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082a0:	4680      	mov	r8, r0
 80082a2:	4689      	mov	r9, r1
 80082a4:	f7f8 fba8 	bl	80009f8 <__aeabi_dcmpgt>
 80082a8:	bb58      	cbnz	r0, 8008302 <_dtoa_r+0x70a>
 80082aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082ae:	4640      	mov	r0, r8
 80082b0:	4649      	mov	r1, r9
 80082b2:	f7f8 fb79 	bl	80009a8 <__aeabi_dcmpeq>
 80082b6:	b108      	cbz	r0, 80082bc <_dtoa_r+0x6c4>
 80082b8:	07e1      	lsls	r1, r4, #31
 80082ba:	d422      	bmi.n	8008302 <_dtoa_r+0x70a>
 80082bc:	4628      	mov	r0, r5
 80082be:	4659      	mov	r1, fp
 80082c0:	f000 fe5e 	bl	8008f80 <_Bfree>
 80082c4:	2300      	movs	r3, #0
 80082c6:	703b      	strb	r3, [r7, #0]
 80082c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80082ca:	f10a 0001 	add.w	r0, sl, #1
 80082ce:	6018      	str	r0, [r3, #0]
 80082d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f43f acde 	beq.w	8007c94 <_dtoa_r+0x9c>
 80082d8:	601f      	str	r7, [r3, #0]
 80082da:	e4db      	b.n	8007c94 <_dtoa_r+0x9c>
 80082dc:	4627      	mov	r7, r4
 80082de:	463b      	mov	r3, r7
 80082e0:	461f      	mov	r7, r3
 80082e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082e6:	2a39      	cmp	r2, #57	; 0x39
 80082e8:	d107      	bne.n	80082fa <_dtoa_r+0x702>
 80082ea:	9a03      	ldr	r2, [sp, #12]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d1f7      	bne.n	80082e0 <_dtoa_r+0x6e8>
 80082f0:	2230      	movs	r2, #48	; 0x30
 80082f2:	9903      	ldr	r1, [sp, #12]
 80082f4:	f108 0801 	add.w	r8, r8, #1
 80082f8:	700a      	strb	r2, [r1, #0]
 80082fa:	781a      	ldrb	r2, [r3, #0]
 80082fc:	3201      	adds	r2, #1
 80082fe:	701a      	strb	r2, [r3, #0]
 8008300:	e79e      	b.n	8008240 <_dtoa_r+0x648>
 8008302:	46d0      	mov	r8, sl
 8008304:	e7eb      	b.n	80082de <_dtoa_r+0x6e6>
 8008306:	2200      	movs	r2, #0
 8008308:	4b6e      	ldr	r3, [pc, #440]	; (80084c4 <_dtoa_r+0x8cc>)
 800830a:	f7f8 f8e5 	bl	80004d8 <__aeabi_dmul>
 800830e:	2200      	movs	r2, #0
 8008310:	2300      	movs	r3, #0
 8008312:	4680      	mov	r8, r0
 8008314:	4689      	mov	r9, r1
 8008316:	f7f8 fb47 	bl	80009a8 <__aeabi_dcmpeq>
 800831a:	2800      	cmp	r0, #0
 800831c:	d09b      	beq.n	8008256 <_dtoa_r+0x65e>
 800831e:	e7cd      	b.n	80082bc <_dtoa_r+0x6c4>
 8008320:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008322:	2a00      	cmp	r2, #0
 8008324:	f000 80d0 	beq.w	80084c8 <_dtoa_r+0x8d0>
 8008328:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800832a:	2a01      	cmp	r2, #1
 800832c:	f300 80ae 	bgt.w	800848c <_dtoa_r+0x894>
 8008330:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008332:	2a00      	cmp	r2, #0
 8008334:	f000 80a6 	beq.w	8008484 <_dtoa_r+0x88c>
 8008338:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800833c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800833e:	9f06      	ldr	r7, [sp, #24]
 8008340:	9a06      	ldr	r2, [sp, #24]
 8008342:	2101      	movs	r1, #1
 8008344:	441a      	add	r2, r3
 8008346:	9206      	str	r2, [sp, #24]
 8008348:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800834a:	4628      	mov	r0, r5
 800834c:	441a      	add	r2, r3
 800834e:	9209      	str	r2, [sp, #36]	; 0x24
 8008350:	f000 ff16 	bl	8009180 <__i2b>
 8008354:	4606      	mov	r6, r0
 8008356:	2f00      	cmp	r7, #0
 8008358:	dd0c      	ble.n	8008374 <_dtoa_r+0x77c>
 800835a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800835c:	2b00      	cmp	r3, #0
 800835e:	dd09      	ble.n	8008374 <_dtoa_r+0x77c>
 8008360:	42bb      	cmp	r3, r7
 8008362:	bfa8      	it	ge
 8008364:	463b      	movge	r3, r7
 8008366:	9a06      	ldr	r2, [sp, #24]
 8008368:	1aff      	subs	r7, r7, r3
 800836a:	1ad2      	subs	r2, r2, r3
 800836c:	9206      	str	r2, [sp, #24]
 800836e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	9309      	str	r3, [sp, #36]	; 0x24
 8008374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008376:	b1f3      	cbz	r3, 80083b6 <_dtoa_r+0x7be>
 8008378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800837a:	2b00      	cmp	r3, #0
 800837c:	f000 80a8 	beq.w	80084d0 <_dtoa_r+0x8d8>
 8008380:	2c00      	cmp	r4, #0
 8008382:	dd10      	ble.n	80083a6 <_dtoa_r+0x7ae>
 8008384:	4631      	mov	r1, r6
 8008386:	4622      	mov	r2, r4
 8008388:	4628      	mov	r0, r5
 800838a:	f000 ffb7 	bl	80092fc <__pow5mult>
 800838e:	465a      	mov	r2, fp
 8008390:	4601      	mov	r1, r0
 8008392:	4606      	mov	r6, r0
 8008394:	4628      	mov	r0, r5
 8008396:	f000 ff09 	bl	80091ac <__multiply>
 800839a:	4680      	mov	r8, r0
 800839c:	4659      	mov	r1, fp
 800839e:	4628      	mov	r0, r5
 80083a0:	f000 fdee 	bl	8008f80 <_Bfree>
 80083a4:	46c3      	mov	fp, r8
 80083a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a8:	1b1a      	subs	r2, r3, r4
 80083aa:	d004      	beq.n	80083b6 <_dtoa_r+0x7be>
 80083ac:	4659      	mov	r1, fp
 80083ae:	4628      	mov	r0, r5
 80083b0:	f000 ffa4 	bl	80092fc <__pow5mult>
 80083b4:	4683      	mov	fp, r0
 80083b6:	2101      	movs	r1, #1
 80083b8:	4628      	mov	r0, r5
 80083ba:	f000 fee1 	bl	8009180 <__i2b>
 80083be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083c0:	4604      	mov	r4, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f340 8086 	ble.w	80084d4 <_dtoa_r+0x8dc>
 80083c8:	461a      	mov	r2, r3
 80083ca:	4601      	mov	r1, r0
 80083cc:	4628      	mov	r0, r5
 80083ce:	f000 ff95 	bl	80092fc <__pow5mult>
 80083d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083d4:	4604      	mov	r4, r0
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	dd7f      	ble.n	80084da <_dtoa_r+0x8e2>
 80083da:	f04f 0800 	mov.w	r8, #0
 80083de:	6923      	ldr	r3, [r4, #16]
 80083e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083e4:	6918      	ldr	r0, [r3, #16]
 80083e6:	f000 fe7d 	bl	80090e4 <__hi0bits>
 80083ea:	f1c0 0020 	rsb	r0, r0, #32
 80083ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f0:	4418      	add	r0, r3
 80083f2:	f010 001f 	ands.w	r0, r0, #31
 80083f6:	f000 8092 	beq.w	800851e <_dtoa_r+0x926>
 80083fa:	f1c0 0320 	rsb	r3, r0, #32
 80083fe:	2b04      	cmp	r3, #4
 8008400:	f340 808a 	ble.w	8008518 <_dtoa_r+0x920>
 8008404:	f1c0 001c 	rsb	r0, r0, #28
 8008408:	9b06      	ldr	r3, [sp, #24]
 800840a:	4407      	add	r7, r0
 800840c:	4403      	add	r3, r0
 800840e:	9306      	str	r3, [sp, #24]
 8008410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008412:	4403      	add	r3, r0
 8008414:	9309      	str	r3, [sp, #36]	; 0x24
 8008416:	9b06      	ldr	r3, [sp, #24]
 8008418:	2b00      	cmp	r3, #0
 800841a:	dd05      	ble.n	8008428 <_dtoa_r+0x830>
 800841c:	4659      	mov	r1, fp
 800841e:	461a      	mov	r2, r3
 8008420:	4628      	mov	r0, r5
 8008422:	f000 ffc5 	bl	80093b0 <__lshift>
 8008426:	4683      	mov	fp, r0
 8008428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800842a:	2b00      	cmp	r3, #0
 800842c:	dd05      	ble.n	800843a <_dtoa_r+0x842>
 800842e:	4621      	mov	r1, r4
 8008430:	461a      	mov	r2, r3
 8008432:	4628      	mov	r0, r5
 8008434:	f000 ffbc 	bl	80093b0 <__lshift>
 8008438:	4604      	mov	r4, r0
 800843a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800843c:	2b00      	cmp	r3, #0
 800843e:	d070      	beq.n	8008522 <_dtoa_r+0x92a>
 8008440:	4621      	mov	r1, r4
 8008442:	4658      	mov	r0, fp
 8008444:	f001 f824 	bl	8009490 <__mcmp>
 8008448:	2800      	cmp	r0, #0
 800844a:	da6a      	bge.n	8008522 <_dtoa_r+0x92a>
 800844c:	2300      	movs	r3, #0
 800844e:	4659      	mov	r1, fp
 8008450:	220a      	movs	r2, #10
 8008452:	4628      	mov	r0, r5
 8008454:	f000 fdb6 	bl	8008fc4 <__multadd>
 8008458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800845a:	4683      	mov	fp, r0
 800845c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 8194 	beq.w	800878e <_dtoa_r+0xb96>
 8008466:	4631      	mov	r1, r6
 8008468:	2300      	movs	r3, #0
 800846a:	220a      	movs	r2, #10
 800846c:	4628      	mov	r0, r5
 800846e:	f000 fda9 	bl	8008fc4 <__multadd>
 8008472:	f1b9 0f00 	cmp.w	r9, #0
 8008476:	4606      	mov	r6, r0
 8008478:	f300 8093 	bgt.w	80085a2 <_dtoa_r+0x9aa>
 800847c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800847e:	2b02      	cmp	r3, #2
 8008480:	dc57      	bgt.n	8008532 <_dtoa_r+0x93a>
 8008482:	e08e      	b.n	80085a2 <_dtoa_r+0x9aa>
 8008484:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008486:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800848a:	e757      	b.n	800833c <_dtoa_r+0x744>
 800848c:	9b08      	ldr	r3, [sp, #32]
 800848e:	1e5c      	subs	r4, r3, #1
 8008490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008492:	42a3      	cmp	r3, r4
 8008494:	bfb7      	itett	lt
 8008496:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008498:	1b1c      	subge	r4, r3, r4
 800849a:	1ae2      	sublt	r2, r4, r3
 800849c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800849e:	bfbe      	ittt	lt
 80084a0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80084a2:	189b      	addlt	r3, r3, r2
 80084a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80084a6:	9b08      	ldr	r3, [sp, #32]
 80084a8:	bfb8      	it	lt
 80084aa:	2400      	movlt	r4, #0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	bfbb      	ittet	lt
 80084b0:	9b06      	ldrlt	r3, [sp, #24]
 80084b2:	9a08      	ldrlt	r2, [sp, #32]
 80084b4:	9f06      	ldrge	r7, [sp, #24]
 80084b6:	1a9f      	sublt	r7, r3, r2
 80084b8:	bfac      	ite	ge
 80084ba:	9b08      	ldrge	r3, [sp, #32]
 80084bc:	2300      	movlt	r3, #0
 80084be:	e73f      	b.n	8008340 <_dtoa_r+0x748>
 80084c0:	3fe00000 	.word	0x3fe00000
 80084c4:	40240000 	.word	0x40240000
 80084c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80084ca:	9f06      	ldr	r7, [sp, #24]
 80084cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80084ce:	e742      	b.n	8008356 <_dtoa_r+0x75e>
 80084d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084d2:	e76b      	b.n	80083ac <_dtoa_r+0x7b4>
 80084d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	dc19      	bgt.n	800850e <_dtoa_r+0x916>
 80084da:	9b04      	ldr	r3, [sp, #16]
 80084dc:	b9bb      	cbnz	r3, 800850e <_dtoa_r+0x916>
 80084de:	9b05      	ldr	r3, [sp, #20]
 80084e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084e4:	b99b      	cbnz	r3, 800850e <_dtoa_r+0x916>
 80084e6:	9b05      	ldr	r3, [sp, #20]
 80084e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084ec:	0d1b      	lsrs	r3, r3, #20
 80084ee:	051b      	lsls	r3, r3, #20
 80084f0:	b183      	cbz	r3, 8008514 <_dtoa_r+0x91c>
 80084f2:	f04f 0801 	mov.w	r8, #1
 80084f6:	9b06      	ldr	r3, [sp, #24]
 80084f8:	3301      	adds	r3, #1
 80084fa:	9306      	str	r3, [sp, #24]
 80084fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fe:	3301      	adds	r3, #1
 8008500:	9309      	str	r3, [sp, #36]	; 0x24
 8008502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008504:	2b00      	cmp	r3, #0
 8008506:	f47f af6a 	bne.w	80083de <_dtoa_r+0x7e6>
 800850a:	2001      	movs	r0, #1
 800850c:	e76f      	b.n	80083ee <_dtoa_r+0x7f6>
 800850e:	f04f 0800 	mov.w	r8, #0
 8008512:	e7f6      	b.n	8008502 <_dtoa_r+0x90a>
 8008514:	4698      	mov	r8, r3
 8008516:	e7f4      	b.n	8008502 <_dtoa_r+0x90a>
 8008518:	f43f af7d 	beq.w	8008416 <_dtoa_r+0x81e>
 800851c:	4618      	mov	r0, r3
 800851e:	301c      	adds	r0, #28
 8008520:	e772      	b.n	8008408 <_dtoa_r+0x810>
 8008522:	9b08      	ldr	r3, [sp, #32]
 8008524:	2b00      	cmp	r3, #0
 8008526:	dc36      	bgt.n	8008596 <_dtoa_r+0x99e>
 8008528:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800852a:	2b02      	cmp	r3, #2
 800852c:	dd33      	ble.n	8008596 <_dtoa_r+0x99e>
 800852e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008532:	f1b9 0f00 	cmp.w	r9, #0
 8008536:	d10d      	bne.n	8008554 <_dtoa_r+0x95c>
 8008538:	4621      	mov	r1, r4
 800853a:	464b      	mov	r3, r9
 800853c:	2205      	movs	r2, #5
 800853e:	4628      	mov	r0, r5
 8008540:	f000 fd40 	bl	8008fc4 <__multadd>
 8008544:	4601      	mov	r1, r0
 8008546:	4604      	mov	r4, r0
 8008548:	4658      	mov	r0, fp
 800854a:	f000 ffa1 	bl	8009490 <__mcmp>
 800854e:	2800      	cmp	r0, #0
 8008550:	f73f adb8 	bgt.w	80080c4 <_dtoa_r+0x4cc>
 8008554:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008556:	9f03      	ldr	r7, [sp, #12]
 8008558:	ea6f 0a03 	mvn.w	sl, r3
 800855c:	f04f 0800 	mov.w	r8, #0
 8008560:	4621      	mov	r1, r4
 8008562:	4628      	mov	r0, r5
 8008564:	f000 fd0c 	bl	8008f80 <_Bfree>
 8008568:	2e00      	cmp	r6, #0
 800856a:	f43f aea7 	beq.w	80082bc <_dtoa_r+0x6c4>
 800856e:	f1b8 0f00 	cmp.w	r8, #0
 8008572:	d005      	beq.n	8008580 <_dtoa_r+0x988>
 8008574:	45b0      	cmp	r8, r6
 8008576:	d003      	beq.n	8008580 <_dtoa_r+0x988>
 8008578:	4641      	mov	r1, r8
 800857a:	4628      	mov	r0, r5
 800857c:	f000 fd00 	bl	8008f80 <_Bfree>
 8008580:	4631      	mov	r1, r6
 8008582:	4628      	mov	r0, r5
 8008584:	f000 fcfc 	bl	8008f80 <_Bfree>
 8008588:	e698      	b.n	80082bc <_dtoa_r+0x6c4>
 800858a:	2400      	movs	r4, #0
 800858c:	4626      	mov	r6, r4
 800858e:	e7e1      	b.n	8008554 <_dtoa_r+0x95c>
 8008590:	46c2      	mov	sl, r8
 8008592:	4626      	mov	r6, r4
 8008594:	e596      	b.n	80080c4 <_dtoa_r+0x4cc>
 8008596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008598:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 80fd 	beq.w	800879c <_dtoa_r+0xba4>
 80085a2:	2f00      	cmp	r7, #0
 80085a4:	dd05      	ble.n	80085b2 <_dtoa_r+0x9ba>
 80085a6:	4631      	mov	r1, r6
 80085a8:	463a      	mov	r2, r7
 80085aa:	4628      	mov	r0, r5
 80085ac:	f000 ff00 	bl	80093b0 <__lshift>
 80085b0:	4606      	mov	r6, r0
 80085b2:	f1b8 0f00 	cmp.w	r8, #0
 80085b6:	d05c      	beq.n	8008672 <_dtoa_r+0xa7a>
 80085b8:	4628      	mov	r0, r5
 80085ba:	6871      	ldr	r1, [r6, #4]
 80085bc:	f000 fca0 	bl	8008f00 <_Balloc>
 80085c0:	4607      	mov	r7, r0
 80085c2:	b928      	cbnz	r0, 80085d0 <_dtoa_r+0x9d8>
 80085c4:	4602      	mov	r2, r0
 80085c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80085ca:	4b7f      	ldr	r3, [pc, #508]	; (80087c8 <_dtoa_r+0xbd0>)
 80085cc:	f7ff bb28 	b.w	8007c20 <_dtoa_r+0x28>
 80085d0:	6932      	ldr	r2, [r6, #16]
 80085d2:	f106 010c 	add.w	r1, r6, #12
 80085d6:	3202      	adds	r2, #2
 80085d8:	0092      	lsls	r2, r2, #2
 80085da:	300c      	adds	r0, #12
 80085dc:	f7fd fc5c 	bl	8005e98 <memcpy>
 80085e0:	2201      	movs	r2, #1
 80085e2:	4639      	mov	r1, r7
 80085e4:	4628      	mov	r0, r5
 80085e6:	f000 fee3 	bl	80093b0 <__lshift>
 80085ea:	46b0      	mov	r8, r6
 80085ec:	4606      	mov	r6, r0
 80085ee:	9b03      	ldr	r3, [sp, #12]
 80085f0:	3301      	adds	r3, #1
 80085f2:	9308      	str	r3, [sp, #32]
 80085f4:	9b03      	ldr	r3, [sp, #12]
 80085f6:	444b      	add	r3, r9
 80085f8:	930a      	str	r3, [sp, #40]	; 0x28
 80085fa:	9b04      	ldr	r3, [sp, #16]
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	9309      	str	r3, [sp, #36]	; 0x24
 8008602:	9b08      	ldr	r3, [sp, #32]
 8008604:	4621      	mov	r1, r4
 8008606:	3b01      	subs	r3, #1
 8008608:	4658      	mov	r0, fp
 800860a:	9304      	str	r3, [sp, #16]
 800860c:	f7ff fa68 	bl	8007ae0 <quorem>
 8008610:	4603      	mov	r3, r0
 8008612:	4641      	mov	r1, r8
 8008614:	3330      	adds	r3, #48	; 0x30
 8008616:	9006      	str	r0, [sp, #24]
 8008618:	4658      	mov	r0, fp
 800861a:	930b      	str	r3, [sp, #44]	; 0x2c
 800861c:	f000 ff38 	bl	8009490 <__mcmp>
 8008620:	4632      	mov	r2, r6
 8008622:	4681      	mov	r9, r0
 8008624:	4621      	mov	r1, r4
 8008626:	4628      	mov	r0, r5
 8008628:	f000 ff4e 	bl	80094c8 <__mdiff>
 800862c:	68c2      	ldr	r2, [r0, #12]
 800862e:	4607      	mov	r7, r0
 8008630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008632:	bb02      	cbnz	r2, 8008676 <_dtoa_r+0xa7e>
 8008634:	4601      	mov	r1, r0
 8008636:	4658      	mov	r0, fp
 8008638:	f000 ff2a 	bl	8009490 <__mcmp>
 800863c:	4602      	mov	r2, r0
 800863e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008640:	4639      	mov	r1, r7
 8008642:	4628      	mov	r0, r5
 8008644:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008648:	f000 fc9a 	bl	8008f80 <_Bfree>
 800864c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800864e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008650:	9f08      	ldr	r7, [sp, #32]
 8008652:	ea43 0102 	orr.w	r1, r3, r2
 8008656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008658:	430b      	orrs	r3, r1
 800865a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800865c:	d10d      	bne.n	800867a <_dtoa_r+0xa82>
 800865e:	2b39      	cmp	r3, #57	; 0x39
 8008660:	d029      	beq.n	80086b6 <_dtoa_r+0xabe>
 8008662:	f1b9 0f00 	cmp.w	r9, #0
 8008666:	dd01      	ble.n	800866c <_dtoa_r+0xa74>
 8008668:	9b06      	ldr	r3, [sp, #24]
 800866a:	3331      	adds	r3, #49	; 0x31
 800866c:	9a04      	ldr	r2, [sp, #16]
 800866e:	7013      	strb	r3, [r2, #0]
 8008670:	e776      	b.n	8008560 <_dtoa_r+0x968>
 8008672:	4630      	mov	r0, r6
 8008674:	e7b9      	b.n	80085ea <_dtoa_r+0x9f2>
 8008676:	2201      	movs	r2, #1
 8008678:	e7e2      	b.n	8008640 <_dtoa_r+0xa48>
 800867a:	f1b9 0f00 	cmp.w	r9, #0
 800867e:	db06      	blt.n	800868e <_dtoa_r+0xa96>
 8008680:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008682:	ea41 0909 	orr.w	r9, r1, r9
 8008686:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008688:	ea59 0101 	orrs.w	r1, r9, r1
 800868c:	d120      	bne.n	80086d0 <_dtoa_r+0xad8>
 800868e:	2a00      	cmp	r2, #0
 8008690:	ddec      	ble.n	800866c <_dtoa_r+0xa74>
 8008692:	4659      	mov	r1, fp
 8008694:	2201      	movs	r2, #1
 8008696:	4628      	mov	r0, r5
 8008698:	9308      	str	r3, [sp, #32]
 800869a:	f000 fe89 	bl	80093b0 <__lshift>
 800869e:	4621      	mov	r1, r4
 80086a0:	4683      	mov	fp, r0
 80086a2:	f000 fef5 	bl	8009490 <__mcmp>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	9b08      	ldr	r3, [sp, #32]
 80086aa:	dc02      	bgt.n	80086b2 <_dtoa_r+0xaba>
 80086ac:	d1de      	bne.n	800866c <_dtoa_r+0xa74>
 80086ae:	07da      	lsls	r2, r3, #31
 80086b0:	d5dc      	bpl.n	800866c <_dtoa_r+0xa74>
 80086b2:	2b39      	cmp	r3, #57	; 0x39
 80086b4:	d1d8      	bne.n	8008668 <_dtoa_r+0xa70>
 80086b6:	2339      	movs	r3, #57	; 0x39
 80086b8:	9a04      	ldr	r2, [sp, #16]
 80086ba:	7013      	strb	r3, [r2, #0]
 80086bc:	463b      	mov	r3, r7
 80086be:	461f      	mov	r7, r3
 80086c0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	2a39      	cmp	r2, #57	; 0x39
 80086c8:	d050      	beq.n	800876c <_dtoa_r+0xb74>
 80086ca:	3201      	adds	r2, #1
 80086cc:	701a      	strb	r2, [r3, #0]
 80086ce:	e747      	b.n	8008560 <_dtoa_r+0x968>
 80086d0:	2a00      	cmp	r2, #0
 80086d2:	dd03      	ble.n	80086dc <_dtoa_r+0xae4>
 80086d4:	2b39      	cmp	r3, #57	; 0x39
 80086d6:	d0ee      	beq.n	80086b6 <_dtoa_r+0xabe>
 80086d8:	3301      	adds	r3, #1
 80086da:	e7c7      	b.n	800866c <_dtoa_r+0xa74>
 80086dc:	9a08      	ldr	r2, [sp, #32]
 80086de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80086e0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80086e4:	428a      	cmp	r2, r1
 80086e6:	d02a      	beq.n	800873e <_dtoa_r+0xb46>
 80086e8:	4659      	mov	r1, fp
 80086ea:	2300      	movs	r3, #0
 80086ec:	220a      	movs	r2, #10
 80086ee:	4628      	mov	r0, r5
 80086f0:	f000 fc68 	bl	8008fc4 <__multadd>
 80086f4:	45b0      	cmp	r8, r6
 80086f6:	4683      	mov	fp, r0
 80086f8:	f04f 0300 	mov.w	r3, #0
 80086fc:	f04f 020a 	mov.w	r2, #10
 8008700:	4641      	mov	r1, r8
 8008702:	4628      	mov	r0, r5
 8008704:	d107      	bne.n	8008716 <_dtoa_r+0xb1e>
 8008706:	f000 fc5d 	bl	8008fc4 <__multadd>
 800870a:	4680      	mov	r8, r0
 800870c:	4606      	mov	r6, r0
 800870e:	9b08      	ldr	r3, [sp, #32]
 8008710:	3301      	adds	r3, #1
 8008712:	9308      	str	r3, [sp, #32]
 8008714:	e775      	b.n	8008602 <_dtoa_r+0xa0a>
 8008716:	f000 fc55 	bl	8008fc4 <__multadd>
 800871a:	4631      	mov	r1, r6
 800871c:	4680      	mov	r8, r0
 800871e:	2300      	movs	r3, #0
 8008720:	220a      	movs	r2, #10
 8008722:	4628      	mov	r0, r5
 8008724:	f000 fc4e 	bl	8008fc4 <__multadd>
 8008728:	4606      	mov	r6, r0
 800872a:	e7f0      	b.n	800870e <_dtoa_r+0xb16>
 800872c:	f1b9 0f00 	cmp.w	r9, #0
 8008730:	bfcc      	ite	gt
 8008732:	464f      	movgt	r7, r9
 8008734:	2701      	movle	r7, #1
 8008736:	f04f 0800 	mov.w	r8, #0
 800873a:	9a03      	ldr	r2, [sp, #12]
 800873c:	4417      	add	r7, r2
 800873e:	4659      	mov	r1, fp
 8008740:	2201      	movs	r2, #1
 8008742:	4628      	mov	r0, r5
 8008744:	9308      	str	r3, [sp, #32]
 8008746:	f000 fe33 	bl	80093b0 <__lshift>
 800874a:	4621      	mov	r1, r4
 800874c:	4683      	mov	fp, r0
 800874e:	f000 fe9f 	bl	8009490 <__mcmp>
 8008752:	2800      	cmp	r0, #0
 8008754:	dcb2      	bgt.n	80086bc <_dtoa_r+0xac4>
 8008756:	d102      	bne.n	800875e <_dtoa_r+0xb66>
 8008758:	9b08      	ldr	r3, [sp, #32]
 800875a:	07db      	lsls	r3, r3, #31
 800875c:	d4ae      	bmi.n	80086bc <_dtoa_r+0xac4>
 800875e:	463b      	mov	r3, r7
 8008760:	461f      	mov	r7, r3
 8008762:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008766:	2a30      	cmp	r2, #48	; 0x30
 8008768:	d0fa      	beq.n	8008760 <_dtoa_r+0xb68>
 800876a:	e6f9      	b.n	8008560 <_dtoa_r+0x968>
 800876c:	9a03      	ldr	r2, [sp, #12]
 800876e:	429a      	cmp	r2, r3
 8008770:	d1a5      	bne.n	80086be <_dtoa_r+0xac6>
 8008772:	2331      	movs	r3, #49	; 0x31
 8008774:	f10a 0a01 	add.w	sl, sl, #1
 8008778:	e779      	b.n	800866e <_dtoa_r+0xa76>
 800877a:	4b14      	ldr	r3, [pc, #80]	; (80087cc <_dtoa_r+0xbd4>)
 800877c:	f7ff baa8 	b.w	8007cd0 <_dtoa_r+0xd8>
 8008780:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008782:	2b00      	cmp	r3, #0
 8008784:	f47f aa81 	bne.w	8007c8a <_dtoa_r+0x92>
 8008788:	4b11      	ldr	r3, [pc, #68]	; (80087d0 <_dtoa_r+0xbd8>)
 800878a:	f7ff baa1 	b.w	8007cd0 <_dtoa_r+0xd8>
 800878e:	f1b9 0f00 	cmp.w	r9, #0
 8008792:	dc03      	bgt.n	800879c <_dtoa_r+0xba4>
 8008794:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008796:	2b02      	cmp	r3, #2
 8008798:	f73f aecb 	bgt.w	8008532 <_dtoa_r+0x93a>
 800879c:	9f03      	ldr	r7, [sp, #12]
 800879e:	4621      	mov	r1, r4
 80087a0:	4658      	mov	r0, fp
 80087a2:	f7ff f99d 	bl	8007ae0 <quorem>
 80087a6:	9a03      	ldr	r2, [sp, #12]
 80087a8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80087ac:	f807 3b01 	strb.w	r3, [r7], #1
 80087b0:	1aba      	subs	r2, r7, r2
 80087b2:	4591      	cmp	r9, r2
 80087b4:	ddba      	ble.n	800872c <_dtoa_r+0xb34>
 80087b6:	4659      	mov	r1, fp
 80087b8:	2300      	movs	r3, #0
 80087ba:	220a      	movs	r2, #10
 80087bc:	4628      	mov	r0, r5
 80087be:	f000 fc01 	bl	8008fc4 <__multadd>
 80087c2:	4683      	mov	fp, r0
 80087c4:	e7eb      	b.n	800879e <_dtoa_r+0xba6>
 80087c6:	bf00      	nop
 80087c8:	0800ab48 	.word	0x0800ab48
 80087cc:	0800a94c 	.word	0x0800a94c
 80087d0:	0800aac9 	.word	0x0800aac9

080087d4 <rshift>:
 80087d4:	6903      	ldr	r3, [r0, #16]
 80087d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80087de:	f100 0414 	add.w	r4, r0, #20
 80087e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80087e6:	dd46      	ble.n	8008876 <rshift+0xa2>
 80087e8:	f011 011f 	ands.w	r1, r1, #31
 80087ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80087f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80087f4:	d10c      	bne.n	8008810 <rshift+0x3c>
 80087f6:	4629      	mov	r1, r5
 80087f8:	f100 0710 	add.w	r7, r0, #16
 80087fc:	42b1      	cmp	r1, r6
 80087fe:	d335      	bcc.n	800886c <rshift+0x98>
 8008800:	1a9b      	subs	r3, r3, r2
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	1eea      	subs	r2, r5, #3
 8008806:	4296      	cmp	r6, r2
 8008808:	bf38      	it	cc
 800880a:	2300      	movcc	r3, #0
 800880c:	4423      	add	r3, r4
 800880e:	e015      	b.n	800883c <rshift+0x68>
 8008810:	46a1      	mov	r9, r4
 8008812:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008816:	f1c1 0820 	rsb	r8, r1, #32
 800881a:	40cf      	lsrs	r7, r1
 800881c:	f105 0e04 	add.w	lr, r5, #4
 8008820:	4576      	cmp	r6, lr
 8008822:	46f4      	mov	ip, lr
 8008824:	d816      	bhi.n	8008854 <rshift+0x80>
 8008826:	1a9a      	subs	r2, r3, r2
 8008828:	0092      	lsls	r2, r2, #2
 800882a:	3a04      	subs	r2, #4
 800882c:	3501      	adds	r5, #1
 800882e:	42ae      	cmp	r6, r5
 8008830:	bf38      	it	cc
 8008832:	2200      	movcc	r2, #0
 8008834:	18a3      	adds	r3, r4, r2
 8008836:	50a7      	str	r7, [r4, r2]
 8008838:	b107      	cbz	r7, 800883c <rshift+0x68>
 800883a:	3304      	adds	r3, #4
 800883c:	42a3      	cmp	r3, r4
 800883e:	eba3 0204 	sub.w	r2, r3, r4
 8008842:	bf08      	it	eq
 8008844:	2300      	moveq	r3, #0
 8008846:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800884a:	6102      	str	r2, [r0, #16]
 800884c:	bf08      	it	eq
 800884e:	6143      	streq	r3, [r0, #20]
 8008850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008854:	f8dc c000 	ldr.w	ip, [ip]
 8008858:	fa0c fc08 	lsl.w	ip, ip, r8
 800885c:	ea4c 0707 	orr.w	r7, ip, r7
 8008860:	f849 7b04 	str.w	r7, [r9], #4
 8008864:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008868:	40cf      	lsrs	r7, r1
 800886a:	e7d9      	b.n	8008820 <rshift+0x4c>
 800886c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008870:	f847 cf04 	str.w	ip, [r7, #4]!
 8008874:	e7c2      	b.n	80087fc <rshift+0x28>
 8008876:	4623      	mov	r3, r4
 8008878:	e7e0      	b.n	800883c <rshift+0x68>

0800887a <__hexdig_fun>:
 800887a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800887e:	2b09      	cmp	r3, #9
 8008880:	d802      	bhi.n	8008888 <__hexdig_fun+0xe>
 8008882:	3820      	subs	r0, #32
 8008884:	b2c0      	uxtb	r0, r0
 8008886:	4770      	bx	lr
 8008888:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800888c:	2b05      	cmp	r3, #5
 800888e:	d801      	bhi.n	8008894 <__hexdig_fun+0x1a>
 8008890:	3847      	subs	r0, #71	; 0x47
 8008892:	e7f7      	b.n	8008884 <__hexdig_fun+0xa>
 8008894:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008898:	2b05      	cmp	r3, #5
 800889a:	d801      	bhi.n	80088a0 <__hexdig_fun+0x26>
 800889c:	3827      	subs	r0, #39	; 0x27
 800889e:	e7f1      	b.n	8008884 <__hexdig_fun+0xa>
 80088a0:	2000      	movs	r0, #0
 80088a2:	4770      	bx	lr

080088a4 <__gethex>:
 80088a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a8:	b08b      	sub	sp, #44	; 0x2c
 80088aa:	9305      	str	r3, [sp, #20]
 80088ac:	4bb2      	ldr	r3, [pc, #712]	; (8008b78 <__gethex+0x2d4>)
 80088ae:	9002      	str	r0, [sp, #8]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	468b      	mov	fp, r1
 80088b4:	4618      	mov	r0, r3
 80088b6:	4690      	mov	r8, r2
 80088b8:	9303      	str	r3, [sp, #12]
 80088ba:	f7f7 fc49 	bl	8000150 <strlen>
 80088be:	4682      	mov	sl, r0
 80088c0:	9b03      	ldr	r3, [sp, #12]
 80088c2:	f8db 2000 	ldr.w	r2, [fp]
 80088c6:	4403      	add	r3, r0
 80088c8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80088cc:	9306      	str	r3, [sp, #24]
 80088ce:	1c93      	adds	r3, r2, #2
 80088d0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80088d4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80088d8:	32fe      	adds	r2, #254	; 0xfe
 80088da:	18d1      	adds	r1, r2, r3
 80088dc:	461f      	mov	r7, r3
 80088de:	f813 0b01 	ldrb.w	r0, [r3], #1
 80088e2:	9101      	str	r1, [sp, #4]
 80088e4:	2830      	cmp	r0, #48	; 0x30
 80088e6:	d0f8      	beq.n	80088da <__gethex+0x36>
 80088e8:	f7ff ffc7 	bl	800887a <__hexdig_fun>
 80088ec:	4604      	mov	r4, r0
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d13a      	bne.n	8008968 <__gethex+0xc4>
 80088f2:	4652      	mov	r2, sl
 80088f4:	4638      	mov	r0, r7
 80088f6:	9903      	ldr	r1, [sp, #12]
 80088f8:	f001 f930 	bl	8009b5c <strncmp>
 80088fc:	4605      	mov	r5, r0
 80088fe:	2800      	cmp	r0, #0
 8008900:	d166      	bne.n	80089d0 <__gethex+0x12c>
 8008902:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008906:	eb07 060a 	add.w	r6, r7, sl
 800890a:	f7ff ffb6 	bl	800887a <__hexdig_fun>
 800890e:	2800      	cmp	r0, #0
 8008910:	d060      	beq.n	80089d4 <__gethex+0x130>
 8008912:	4633      	mov	r3, r6
 8008914:	7818      	ldrb	r0, [r3, #0]
 8008916:	461f      	mov	r7, r3
 8008918:	2830      	cmp	r0, #48	; 0x30
 800891a:	f103 0301 	add.w	r3, r3, #1
 800891e:	d0f9      	beq.n	8008914 <__gethex+0x70>
 8008920:	f7ff ffab 	bl	800887a <__hexdig_fun>
 8008924:	2301      	movs	r3, #1
 8008926:	fab0 f480 	clz	r4, r0
 800892a:	4635      	mov	r5, r6
 800892c:	0964      	lsrs	r4, r4, #5
 800892e:	9301      	str	r3, [sp, #4]
 8008930:	463a      	mov	r2, r7
 8008932:	4616      	mov	r6, r2
 8008934:	7830      	ldrb	r0, [r6, #0]
 8008936:	3201      	adds	r2, #1
 8008938:	f7ff ff9f 	bl	800887a <__hexdig_fun>
 800893c:	2800      	cmp	r0, #0
 800893e:	d1f8      	bne.n	8008932 <__gethex+0x8e>
 8008940:	4652      	mov	r2, sl
 8008942:	4630      	mov	r0, r6
 8008944:	9903      	ldr	r1, [sp, #12]
 8008946:	f001 f909 	bl	8009b5c <strncmp>
 800894a:	b980      	cbnz	r0, 800896e <__gethex+0xca>
 800894c:	b94d      	cbnz	r5, 8008962 <__gethex+0xbe>
 800894e:	eb06 050a 	add.w	r5, r6, sl
 8008952:	462a      	mov	r2, r5
 8008954:	4616      	mov	r6, r2
 8008956:	7830      	ldrb	r0, [r6, #0]
 8008958:	3201      	adds	r2, #1
 800895a:	f7ff ff8e 	bl	800887a <__hexdig_fun>
 800895e:	2800      	cmp	r0, #0
 8008960:	d1f8      	bne.n	8008954 <__gethex+0xb0>
 8008962:	1bad      	subs	r5, r5, r6
 8008964:	00ad      	lsls	r5, r5, #2
 8008966:	e004      	b.n	8008972 <__gethex+0xce>
 8008968:	2400      	movs	r4, #0
 800896a:	4625      	mov	r5, r4
 800896c:	e7e0      	b.n	8008930 <__gethex+0x8c>
 800896e:	2d00      	cmp	r5, #0
 8008970:	d1f7      	bne.n	8008962 <__gethex+0xbe>
 8008972:	7833      	ldrb	r3, [r6, #0]
 8008974:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008978:	2b50      	cmp	r3, #80	; 0x50
 800897a:	d139      	bne.n	80089f0 <__gethex+0x14c>
 800897c:	7873      	ldrb	r3, [r6, #1]
 800897e:	2b2b      	cmp	r3, #43	; 0x2b
 8008980:	d02a      	beq.n	80089d8 <__gethex+0x134>
 8008982:	2b2d      	cmp	r3, #45	; 0x2d
 8008984:	d02c      	beq.n	80089e0 <__gethex+0x13c>
 8008986:	f04f 0900 	mov.w	r9, #0
 800898a:	1c71      	adds	r1, r6, #1
 800898c:	7808      	ldrb	r0, [r1, #0]
 800898e:	f7ff ff74 	bl	800887a <__hexdig_fun>
 8008992:	1e43      	subs	r3, r0, #1
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2b18      	cmp	r3, #24
 8008998:	d82a      	bhi.n	80089f0 <__gethex+0x14c>
 800899a:	f1a0 0210 	sub.w	r2, r0, #16
 800899e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80089a2:	f7ff ff6a 	bl	800887a <__hexdig_fun>
 80089a6:	1e43      	subs	r3, r0, #1
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b18      	cmp	r3, #24
 80089ac:	d91b      	bls.n	80089e6 <__gethex+0x142>
 80089ae:	f1b9 0f00 	cmp.w	r9, #0
 80089b2:	d000      	beq.n	80089b6 <__gethex+0x112>
 80089b4:	4252      	negs	r2, r2
 80089b6:	4415      	add	r5, r2
 80089b8:	f8cb 1000 	str.w	r1, [fp]
 80089bc:	b1d4      	cbz	r4, 80089f4 <__gethex+0x150>
 80089be:	9b01      	ldr	r3, [sp, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	bf14      	ite	ne
 80089c4:	2700      	movne	r7, #0
 80089c6:	2706      	moveq	r7, #6
 80089c8:	4638      	mov	r0, r7
 80089ca:	b00b      	add	sp, #44	; 0x2c
 80089cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d0:	463e      	mov	r6, r7
 80089d2:	4625      	mov	r5, r4
 80089d4:	2401      	movs	r4, #1
 80089d6:	e7cc      	b.n	8008972 <__gethex+0xce>
 80089d8:	f04f 0900 	mov.w	r9, #0
 80089dc:	1cb1      	adds	r1, r6, #2
 80089de:	e7d5      	b.n	800898c <__gethex+0xe8>
 80089e0:	f04f 0901 	mov.w	r9, #1
 80089e4:	e7fa      	b.n	80089dc <__gethex+0x138>
 80089e6:	230a      	movs	r3, #10
 80089e8:	fb03 0202 	mla	r2, r3, r2, r0
 80089ec:	3a10      	subs	r2, #16
 80089ee:	e7d6      	b.n	800899e <__gethex+0xfa>
 80089f0:	4631      	mov	r1, r6
 80089f2:	e7e1      	b.n	80089b8 <__gethex+0x114>
 80089f4:	4621      	mov	r1, r4
 80089f6:	1bf3      	subs	r3, r6, r7
 80089f8:	3b01      	subs	r3, #1
 80089fa:	2b07      	cmp	r3, #7
 80089fc:	dc0a      	bgt.n	8008a14 <__gethex+0x170>
 80089fe:	9802      	ldr	r0, [sp, #8]
 8008a00:	f000 fa7e 	bl	8008f00 <_Balloc>
 8008a04:	4604      	mov	r4, r0
 8008a06:	b940      	cbnz	r0, 8008a1a <__gethex+0x176>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	21de      	movs	r1, #222	; 0xde
 8008a0c:	4b5b      	ldr	r3, [pc, #364]	; (8008b7c <__gethex+0x2d8>)
 8008a0e:	485c      	ldr	r0, [pc, #368]	; (8008b80 <__gethex+0x2dc>)
 8008a10:	f001 f8c6 	bl	8009ba0 <__assert_func>
 8008a14:	3101      	adds	r1, #1
 8008a16:	105b      	asrs	r3, r3, #1
 8008a18:	e7ef      	b.n	80089fa <__gethex+0x156>
 8008a1a:	f04f 0b00 	mov.w	fp, #0
 8008a1e:	f100 0914 	add.w	r9, r0, #20
 8008a22:	f1ca 0301 	rsb	r3, sl, #1
 8008a26:	f8cd 9010 	str.w	r9, [sp, #16]
 8008a2a:	f8cd b004 	str.w	fp, [sp, #4]
 8008a2e:	9308      	str	r3, [sp, #32]
 8008a30:	42b7      	cmp	r7, r6
 8008a32:	d33f      	bcc.n	8008ab4 <__gethex+0x210>
 8008a34:	9f04      	ldr	r7, [sp, #16]
 8008a36:	9b01      	ldr	r3, [sp, #4]
 8008a38:	f847 3b04 	str.w	r3, [r7], #4
 8008a3c:	eba7 0709 	sub.w	r7, r7, r9
 8008a40:	10bf      	asrs	r7, r7, #2
 8008a42:	6127      	str	r7, [r4, #16]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 fb4d 	bl	80090e4 <__hi0bits>
 8008a4a:	017f      	lsls	r7, r7, #5
 8008a4c:	f8d8 6000 	ldr.w	r6, [r8]
 8008a50:	1a3f      	subs	r7, r7, r0
 8008a52:	42b7      	cmp	r7, r6
 8008a54:	dd62      	ble.n	8008b1c <__gethex+0x278>
 8008a56:	1bbf      	subs	r7, r7, r6
 8008a58:	4639      	mov	r1, r7
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 fee7 	bl	800982e <__any_on>
 8008a60:	4682      	mov	sl, r0
 8008a62:	b1a8      	cbz	r0, 8008a90 <__gethex+0x1ec>
 8008a64:	f04f 0a01 	mov.w	sl, #1
 8008a68:	1e7b      	subs	r3, r7, #1
 8008a6a:	1159      	asrs	r1, r3, #5
 8008a6c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008a70:	f003 021f 	and.w	r2, r3, #31
 8008a74:	fa0a f202 	lsl.w	r2, sl, r2
 8008a78:	420a      	tst	r2, r1
 8008a7a:	d009      	beq.n	8008a90 <__gethex+0x1ec>
 8008a7c:	4553      	cmp	r3, sl
 8008a7e:	dd05      	ble.n	8008a8c <__gethex+0x1e8>
 8008a80:	4620      	mov	r0, r4
 8008a82:	1eb9      	subs	r1, r7, #2
 8008a84:	f000 fed3 	bl	800982e <__any_on>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d144      	bne.n	8008b16 <__gethex+0x272>
 8008a8c:	f04f 0a02 	mov.w	sl, #2
 8008a90:	4639      	mov	r1, r7
 8008a92:	4620      	mov	r0, r4
 8008a94:	f7ff fe9e 	bl	80087d4 <rshift>
 8008a98:	443d      	add	r5, r7
 8008a9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a9e:	42ab      	cmp	r3, r5
 8008aa0:	da4a      	bge.n	8008b38 <__gethex+0x294>
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	9802      	ldr	r0, [sp, #8]
 8008aa6:	f000 fa6b 	bl	8008f80 <_Bfree>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008aae:	27a3      	movs	r7, #163	; 0xa3
 8008ab0:	6013      	str	r3, [r2, #0]
 8008ab2:	e789      	b.n	80089c8 <__gethex+0x124>
 8008ab4:	1e73      	subs	r3, r6, #1
 8008ab6:	9a06      	ldr	r2, [sp, #24]
 8008ab8:	9307      	str	r3, [sp, #28]
 8008aba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d019      	beq.n	8008af6 <__gethex+0x252>
 8008ac2:	f1bb 0f20 	cmp.w	fp, #32
 8008ac6:	d107      	bne.n	8008ad8 <__gethex+0x234>
 8008ac8:	9b04      	ldr	r3, [sp, #16]
 8008aca:	9a01      	ldr	r2, [sp, #4]
 8008acc:	f843 2b04 	str.w	r2, [r3], #4
 8008ad0:	9304      	str	r3, [sp, #16]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	469b      	mov	fp, r3
 8008ad6:	9301      	str	r3, [sp, #4]
 8008ad8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008adc:	f7ff fecd 	bl	800887a <__hexdig_fun>
 8008ae0:	9b01      	ldr	r3, [sp, #4]
 8008ae2:	f000 000f 	and.w	r0, r0, #15
 8008ae6:	fa00 f00b 	lsl.w	r0, r0, fp
 8008aea:	4303      	orrs	r3, r0
 8008aec:	9301      	str	r3, [sp, #4]
 8008aee:	f10b 0b04 	add.w	fp, fp, #4
 8008af2:	9b07      	ldr	r3, [sp, #28]
 8008af4:	e00d      	b.n	8008b12 <__gethex+0x26e>
 8008af6:	9a08      	ldr	r2, [sp, #32]
 8008af8:	1e73      	subs	r3, r6, #1
 8008afa:	4413      	add	r3, r2
 8008afc:	42bb      	cmp	r3, r7
 8008afe:	d3e0      	bcc.n	8008ac2 <__gethex+0x21e>
 8008b00:	4618      	mov	r0, r3
 8008b02:	4652      	mov	r2, sl
 8008b04:	9903      	ldr	r1, [sp, #12]
 8008b06:	9309      	str	r3, [sp, #36]	; 0x24
 8008b08:	f001 f828 	bl	8009b5c <strncmp>
 8008b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d1d7      	bne.n	8008ac2 <__gethex+0x21e>
 8008b12:	461e      	mov	r6, r3
 8008b14:	e78c      	b.n	8008a30 <__gethex+0x18c>
 8008b16:	f04f 0a03 	mov.w	sl, #3
 8008b1a:	e7b9      	b.n	8008a90 <__gethex+0x1ec>
 8008b1c:	da09      	bge.n	8008b32 <__gethex+0x28e>
 8008b1e:	1bf7      	subs	r7, r6, r7
 8008b20:	4621      	mov	r1, r4
 8008b22:	463a      	mov	r2, r7
 8008b24:	9802      	ldr	r0, [sp, #8]
 8008b26:	f000 fc43 	bl	80093b0 <__lshift>
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	1bed      	subs	r5, r5, r7
 8008b2e:	f100 0914 	add.w	r9, r0, #20
 8008b32:	f04f 0a00 	mov.w	sl, #0
 8008b36:	e7b0      	b.n	8008a9a <__gethex+0x1f6>
 8008b38:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008b3c:	42a8      	cmp	r0, r5
 8008b3e:	dd72      	ble.n	8008c26 <__gethex+0x382>
 8008b40:	1b45      	subs	r5, r0, r5
 8008b42:	42ae      	cmp	r6, r5
 8008b44:	dc35      	bgt.n	8008bb2 <__gethex+0x30e>
 8008b46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d029      	beq.n	8008ba2 <__gethex+0x2fe>
 8008b4e:	2b03      	cmp	r3, #3
 8008b50:	d02b      	beq.n	8008baa <__gethex+0x306>
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d11c      	bne.n	8008b90 <__gethex+0x2ec>
 8008b56:	42ae      	cmp	r6, r5
 8008b58:	d11a      	bne.n	8008b90 <__gethex+0x2ec>
 8008b5a:	2e01      	cmp	r6, #1
 8008b5c:	d112      	bne.n	8008b84 <__gethex+0x2e0>
 8008b5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b62:	9a05      	ldr	r2, [sp, #20]
 8008b64:	2762      	movs	r7, #98	; 0x62
 8008b66:	6013      	str	r3, [r2, #0]
 8008b68:	2301      	movs	r3, #1
 8008b6a:	6123      	str	r3, [r4, #16]
 8008b6c:	f8c9 3000 	str.w	r3, [r9]
 8008b70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b72:	601c      	str	r4, [r3, #0]
 8008b74:	e728      	b.n	80089c8 <__gethex+0x124>
 8008b76:	bf00      	nop
 8008b78:	0800abc0 	.word	0x0800abc0
 8008b7c:	0800ab48 	.word	0x0800ab48
 8008b80:	0800ab59 	.word	0x0800ab59
 8008b84:	4620      	mov	r0, r4
 8008b86:	1e71      	subs	r1, r6, #1
 8008b88:	f000 fe51 	bl	800982e <__any_on>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d1e6      	bne.n	8008b5e <__gethex+0x2ba>
 8008b90:	4621      	mov	r1, r4
 8008b92:	9802      	ldr	r0, [sp, #8]
 8008b94:	f000 f9f4 	bl	8008f80 <_Bfree>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b9c:	2750      	movs	r7, #80	; 0x50
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	e712      	b.n	80089c8 <__gethex+0x124>
 8008ba2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1f3      	bne.n	8008b90 <__gethex+0x2ec>
 8008ba8:	e7d9      	b.n	8008b5e <__gethex+0x2ba>
 8008baa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1d6      	bne.n	8008b5e <__gethex+0x2ba>
 8008bb0:	e7ee      	b.n	8008b90 <__gethex+0x2ec>
 8008bb2:	1e6f      	subs	r7, r5, #1
 8008bb4:	f1ba 0f00 	cmp.w	sl, #0
 8008bb8:	d132      	bne.n	8008c20 <__gethex+0x37c>
 8008bba:	b127      	cbz	r7, 8008bc6 <__gethex+0x322>
 8008bbc:	4639      	mov	r1, r7
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f000 fe35 	bl	800982e <__any_on>
 8008bc4:	4682      	mov	sl, r0
 8008bc6:	2101      	movs	r1, #1
 8008bc8:	117b      	asrs	r3, r7, #5
 8008bca:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008bce:	f007 071f 	and.w	r7, r7, #31
 8008bd2:	fa01 f707 	lsl.w	r7, r1, r7
 8008bd6:	421f      	tst	r7, r3
 8008bd8:	f04f 0702 	mov.w	r7, #2
 8008bdc:	4629      	mov	r1, r5
 8008bde:	4620      	mov	r0, r4
 8008be0:	bf18      	it	ne
 8008be2:	f04a 0a02 	orrne.w	sl, sl, #2
 8008be6:	1b76      	subs	r6, r6, r5
 8008be8:	f7ff fdf4 	bl	80087d4 <rshift>
 8008bec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008bf0:	f1ba 0f00 	cmp.w	sl, #0
 8008bf4:	d048      	beq.n	8008c88 <__gethex+0x3e4>
 8008bf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d015      	beq.n	8008c2a <__gethex+0x386>
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d017      	beq.n	8008c32 <__gethex+0x38e>
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d109      	bne.n	8008c1a <__gethex+0x376>
 8008c06:	f01a 0f02 	tst.w	sl, #2
 8008c0a:	d006      	beq.n	8008c1a <__gethex+0x376>
 8008c0c:	f8d9 0000 	ldr.w	r0, [r9]
 8008c10:	ea4a 0a00 	orr.w	sl, sl, r0
 8008c14:	f01a 0f01 	tst.w	sl, #1
 8008c18:	d10e      	bne.n	8008c38 <__gethex+0x394>
 8008c1a:	f047 0710 	orr.w	r7, r7, #16
 8008c1e:	e033      	b.n	8008c88 <__gethex+0x3e4>
 8008c20:	f04f 0a01 	mov.w	sl, #1
 8008c24:	e7cf      	b.n	8008bc6 <__gethex+0x322>
 8008c26:	2701      	movs	r7, #1
 8008c28:	e7e2      	b.n	8008bf0 <__gethex+0x34c>
 8008c2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c2c:	f1c3 0301 	rsb	r3, r3, #1
 8008c30:	9315      	str	r3, [sp, #84]	; 0x54
 8008c32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d0f0      	beq.n	8008c1a <__gethex+0x376>
 8008c38:	f04f 0c00 	mov.w	ip, #0
 8008c3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008c40:	f104 0314 	add.w	r3, r4, #20
 8008c44:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008c48:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c52:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008c56:	d01c      	beq.n	8008c92 <__gethex+0x3ee>
 8008c58:	3201      	adds	r2, #1
 8008c5a:	6002      	str	r2, [r0, #0]
 8008c5c:	2f02      	cmp	r7, #2
 8008c5e:	f104 0314 	add.w	r3, r4, #20
 8008c62:	d13d      	bne.n	8008ce0 <__gethex+0x43c>
 8008c64:	f8d8 2000 	ldr.w	r2, [r8]
 8008c68:	3a01      	subs	r2, #1
 8008c6a:	42b2      	cmp	r2, r6
 8008c6c:	d10a      	bne.n	8008c84 <__gethex+0x3e0>
 8008c6e:	2201      	movs	r2, #1
 8008c70:	1171      	asrs	r1, r6, #5
 8008c72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c76:	f006 061f 	and.w	r6, r6, #31
 8008c7a:	fa02 f606 	lsl.w	r6, r2, r6
 8008c7e:	421e      	tst	r6, r3
 8008c80:	bf18      	it	ne
 8008c82:	4617      	movne	r7, r2
 8008c84:	f047 0720 	orr.w	r7, r7, #32
 8008c88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c8a:	601c      	str	r4, [r3, #0]
 8008c8c:	9b05      	ldr	r3, [sp, #20]
 8008c8e:	601d      	str	r5, [r3, #0]
 8008c90:	e69a      	b.n	80089c8 <__gethex+0x124>
 8008c92:	4299      	cmp	r1, r3
 8008c94:	f843 cc04 	str.w	ip, [r3, #-4]
 8008c98:	d8d8      	bhi.n	8008c4c <__gethex+0x3a8>
 8008c9a:	68a3      	ldr	r3, [r4, #8]
 8008c9c:	459b      	cmp	fp, r3
 8008c9e:	db17      	blt.n	8008cd0 <__gethex+0x42c>
 8008ca0:	6861      	ldr	r1, [r4, #4]
 8008ca2:	9802      	ldr	r0, [sp, #8]
 8008ca4:	3101      	adds	r1, #1
 8008ca6:	f000 f92b 	bl	8008f00 <_Balloc>
 8008caa:	4681      	mov	r9, r0
 8008cac:	b918      	cbnz	r0, 8008cb6 <__gethex+0x412>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	2184      	movs	r1, #132	; 0x84
 8008cb2:	4b19      	ldr	r3, [pc, #100]	; (8008d18 <__gethex+0x474>)
 8008cb4:	e6ab      	b.n	8008a0e <__gethex+0x16a>
 8008cb6:	6922      	ldr	r2, [r4, #16]
 8008cb8:	f104 010c 	add.w	r1, r4, #12
 8008cbc:	3202      	adds	r2, #2
 8008cbe:	0092      	lsls	r2, r2, #2
 8008cc0:	300c      	adds	r0, #12
 8008cc2:	f7fd f8e9 	bl	8005e98 <memcpy>
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	9802      	ldr	r0, [sp, #8]
 8008cca:	f000 f959 	bl	8008f80 <_Bfree>
 8008cce:	464c      	mov	r4, r9
 8008cd0:	6923      	ldr	r3, [r4, #16]
 8008cd2:	1c5a      	adds	r2, r3, #1
 8008cd4:	6122      	str	r2, [r4, #16]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008cdc:	615a      	str	r2, [r3, #20]
 8008cde:	e7bd      	b.n	8008c5c <__gethex+0x3b8>
 8008ce0:	6922      	ldr	r2, [r4, #16]
 8008ce2:	455a      	cmp	r2, fp
 8008ce4:	dd0b      	ble.n	8008cfe <__gethex+0x45a>
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f7ff fd73 	bl	80087d4 <rshift>
 8008cee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008cf2:	3501      	adds	r5, #1
 8008cf4:	42ab      	cmp	r3, r5
 8008cf6:	f6ff aed4 	blt.w	8008aa2 <__gethex+0x1fe>
 8008cfa:	2701      	movs	r7, #1
 8008cfc:	e7c2      	b.n	8008c84 <__gethex+0x3e0>
 8008cfe:	f016 061f 	ands.w	r6, r6, #31
 8008d02:	d0fa      	beq.n	8008cfa <__gethex+0x456>
 8008d04:	4453      	add	r3, sl
 8008d06:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008d0a:	f000 f9eb 	bl	80090e4 <__hi0bits>
 8008d0e:	f1c6 0620 	rsb	r6, r6, #32
 8008d12:	42b0      	cmp	r0, r6
 8008d14:	dbe7      	blt.n	8008ce6 <__gethex+0x442>
 8008d16:	e7f0      	b.n	8008cfa <__gethex+0x456>
 8008d18:	0800ab48 	.word	0x0800ab48

08008d1c <L_shift>:
 8008d1c:	f1c2 0208 	rsb	r2, r2, #8
 8008d20:	0092      	lsls	r2, r2, #2
 8008d22:	b570      	push	{r4, r5, r6, lr}
 8008d24:	f1c2 0620 	rsb	r6, r2, #32
 8008d28:	6843      	ldr	r3, [r0, #4]
 8008d2a:	6804      	ldr	r4, [r0, #0]
 8008d2c:	fa03 f506 	lsl.w	r5, r3, r6
 8008d30:	432c      	orrs	r4, r5
 8008d32:	40d3      	lsrs	r3, r2
 8008d34:	6004      	str	r4, [r0, #0]
 8008d36:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d3a:	4288      	cmp	r0, r1
 8008d3c:	d3f4      	bcc.n	8008d28 <L_shift+0xc>
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}

08008d40 <__match>:
 8008d40:	b530      	push	{r4, r5, lr}
 8008d42:	6803      	ldr	r3, [r0, #0]
 8008d44:	3301      	adds	r3, #1
 8008d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d4a:	b914      	cbnz	r4, 8008d52 <__match+0x12>
 8008d4c:	6003      	str	r3, [r0, #0]
 8008d4e:	2001      	movs	r0, #1
 8008d50:	bd30      	pop	{r4, r5, pc}
 8008d52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d56:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008d5a:	2d19      	cmp	r5, #25
 8008d5c:	bf98      	it	ls
 8008d5e:	3220      	addls	r2, #32
 8008d60:	42a2      	cmp	r2, r4
 8008d62:	d0f0      	beq.n	8008d46 <__match+0x6>
 8008d64:	2000      	movs	r0, #0
 8008d66:	e7f3      	b.n	8008d50 <__match+0x10>

08008d68 <__hexnan>:
 8008d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	2500      	movs	r5, #0
 8008d6e:	680b      	ldr	r3, [r1, #0]
 8008d70:	4682      	mov	sl, r0
 8008d72:	115e      	asrs	r6, r3, #5
 8008d74:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008d78:	f013 031f 	ands.w	r3, r3, #31
 8008d7c:	bf18      	it	ne
 8008d7e:	3604      	addne	r6, #4
 8008d80:	1f37      	subs	r7, r6, #4
 8008d82:	46b9      	mov	r9, r7
 8008d84:	463c      	mov	r4, r7
 8008d86:	46ab      	mov	fp, r5
 8008d88:	b087      	sub	sp, #28
 8008d8a:	4690      	mov	r8, r2
 8008d8c:	6802      	ldr	r2, [r0, #0]
 8008d8e:	9301      	str	r3, [sp, #4]
 8008d90:	f846 5c04 	str.w	r5, [r6, #-4]
 8008d94:	9502      	str	r5, [sp, #8]
 8008d96:	7851      	ldrb	r1, [r2, #1]
 8008d98:	1c53      	adds	r3, r2, #1
 8008d9a:	9303      	str	r3, [sp, #12]
 8008d9c:	b341      	cbz	r1, 8008df0 <__hexnan+0x88>
 8008d9e:	4608      	mov	r0, r1
 8008da0:	9205      	str	r2, [sp, #20]
 8008da2:	9104      	str	r1, [sp, #16]
 8008da4:	f7ff fd69 	bl	800887a <__hexdig_fun>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d14f      	bne.n	8008e4c <__hexnan+0xe4>
 8008dac:	9904      	ldr	r1, [sp, #16]
 8008dae:	9a05      	ldr	r2, [sp, #20]
 8008db0:	2920      	cmp	r1, #32
 8008db2:	d818      	bhi.n	8008de6 <__hexnan+0x7e>
 8008db4:	9b02      	ldr	r3, [sp, #8]
 8008db6:	459b      	cmp	fp, r3
 8008db8:	dd13      	ble.n	8008de2 <__hexnan+0x7a>
 8008dba:	454c      	cmp	r4, r9
 8008dbc:	d206      	bcs.n	8008dcc <__hexnan+0x64>
 8008dbe:	2d07      	cmp	r5, #7
 8008dc0:	dc04      	bgt.n	8008dcc <__hexnan+0x64>
 8008dc2:	462a      	mov	r2, r5
 8008dc4:	4649      	mov	r1, r9
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f7ff ffa8 	bl	8008d1c <L_shift>
 8008dcc:	4544      	cmp	r4, r8
 8008dce:	d950      	bls.n	8008e72 <__hexnan+0x10a>
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f1a4 0904 	sub.w	r9, r4, #4
 8008dd6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008dda:	461d      	mov	r5, r3
 8008ddc:	464c      	mov	r4, r9
 8008dde:	f8cd b008 	str.w	fp, [sp, #8]
 8008de2:	9a03      	ldr	r2, [sp, #12]
 8008de4:	e7d7      	b.n	8008d96 <__hexnan+0x2e>
 8008de6:	2929      	cmp	r1, #41	; 0x29
 8008de8:	d156      	bne.n	8008e98 <__hexnan+0x130>
 8008dea:	3202      	adds	r2, #2
 8008dec:	f8ca 2000 	str.w	r2, [sl]
 8008df0:	f1bb 0f00 	cmp.w	fp, #0
 8008df4:	d050      	beq.n	8008e98 <__hexnan+0x130>
 8008df6:	454c      	cmp	r4, r9
 8008df8:	d206      	bcs.n	8008e08 <__hexnan+0xa0>
 8008dfa:	2d07      	cmp	r5, #7
 8008dfc:	dc04      	bgt.n	8008e08 <__hexnan+0xa0>
 8008dfe:	462a      	mov	r2, r5
 8008e00:	4649      	mov	r1, r9
 8008e02:	4620      	mov	r0, r4
 8008e04:	f7ff ff8a 	bl	8008d1c <L_shift>
 8008e08:	4544      	cmp	r4, r8
 8008e0a:	d934      	bls.n	8008e76 <__hexnan+0x10e>
 8008e0c:	4623      	mov	r3, r4
 8008e0e:	f1a8 0204 	sub.w	r2, r8, #4
 8008e12:	f853 1b04 	ldr.w	r1, [r3], #4
 8008e16:	429f      	cmp	r7, r3
 8008e18:	f842 1f04 	str.w	r1, [r2, #4]!
 8008e1c:	d2f9      	bcs.n	8008e12 <__hexnan+0xaa>
 8008e1e:	1b3b      	subs	r3, r7, r4
 8008e20:	f023 0303 	bic.w	r3, r3, #3
 8008e24:	3304      	adds	r3, #4
 8008e26:	3401      	adds	r4, #1
 8008e28:	3e03      	subs	r6, #3
 8008e2a:	42b4      	cmp	r4, r6
 8008e2c:	bf88      	it	hi
 8008e2e:	2304      	movhi	r3, #4
 8008e30:	2200      	movs	r2, #0
 8008e32:	4443      	add	r3, r8
 8008e34:	f843 2b04 	str.w	r2, [r3], #4
 8008e38:	429f      	cmp	r7, r3
 8008e3a:	d2fb      	bcs.n	8008e34 <__hexnan+0xcc>
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	b91b      	cbnz	r3, 8008e48 <__hexnan+0xe0>
 8008e40:	4547      	cmp	r7, r8
 8008e42:	d127      	bne.n	8008e94 <__hexnan+0x12c>
 8008e44:	2301      	movs	r3, #1
 8008e46:	603b      	str	r3, [r7, #0]
 8008e48:	2005      	movs	r0, #5
 8008e4a:	e026      	b.n	8008e9a <__hexnan+0x132>
 8008e4c:	3501      	adds	r5, #1
 8008e4e:	2d08      	cmp	r5, #8
 8008e50:	f10b 0b01 	add.w	fp, fp, #1
 8008e54:	dd06      	ble.n	8008e64 <__hexnan+0xfc>
 8008e56:	4544      	cmp	r4, r8
 8008e58:	d9c3      	bls.n	8008de2 <__hexnan+0x7a>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	2501      	movs	r5, #1
 8008e5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e62:	3c04      	subs	r4, #4
 8008e64:	6822      	ldr	r2, [r4, #0]
 8008e66:	f000 000f 	and.w	r0, r0, #15
 8008e6a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008e6e:	6022      	str	r2, [r4, #0]
 8008e70:	e7b7      	b.n	8008de2 <__hexnan+0x7a>
 8008e72:	2508      	movs	r5, #8
 8008e74:	e7b5      	b.n	8008de2 <__hexnan+0x7a>
 8008e76:	9b01      	ldr	r3, [sp, #4]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d0df      	beq.n	8008e3c <__hexnan+0xd4>
 8008e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e80:	f1c3 0320 	rsb	r3, r3, #32
 8008e84:	fa22 f303 	lsr.w	r3, r2, r3
 8008e88:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008e8c:	401a      	ands	r2, r3
 8008e8e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008e92:	e7d3      	b.n	8008e3c <__hexnan+0xd4>
 8008e94:	3f04      	subs	r7, #4
 8008e96:	e7d1      	b.n	8008e3c <__hexnan+0xd4>
 8008e98:	2004      	movs	r0, #4
 8008e9a:	b007      	add	sp, #28
 8008e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ea0 <_localeconv_r>:
 8008ea0:	4800      	ldr	r0, [pc, #0]	; (8008ea4 <_localeconv_r+0x4>)
 8008ea2:	4770      	bx	lr
 8008ea4:	2000016c 	.word	0x2000016c

08008ea8 <__ascii_mbtowc>:
 8008ea8:	b082      	sub	sp, #8
 8008eaa:	b901      	cbnz	r1, 8008eae <__ascii_mbtowc+0x6>
 8008eac:	a901      	add	r1, sp, #4
 8008eae:	b142      	cbz	r2, 8008ec2 <__ascii_mbtowc+0x1a>
 8008eb0:	b14b      	cbz	r3, 8008ec6 <__ascii_mbtowc+0x1e>
 8008eb2:	7813      	ldrb	r3, [r2, #0]
 8008eb4:	600b      	str	r3, [r1, #0]
 8008eb6:	7812      	ldrb	r2, [r2, #0]
 8008eb8:	1e10      	subs	r0, r2, #0
 8008eba:	bf18      	it	ne
 8008ebc:	2001      	movne	r0, #1
 8008ebe:	b002      	add	sp, #8
 8008ec0:	4770      	bx	lr
 8008ec2:	4610      	mov	r0, r2
 8008ec4:	e7fb      	b.n	8008ebe <__ascii_mbtowc+0x16>
 8008ec6:	f06f 0001 	mvn.w	r0, #1
 8008eca:	e7f8      	b.n	8008ebe <__ascii_mbtowc+0x16>

08008ecc <memchr>:
 8008ecc:	4603      	mov	r3, r0
 8008ece:	b510      	push	{r4, lr}
 8008ed0:	b2c9      	uxtb	r1, r1
 8008ed2:	4402      	add	r2, r0
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	d101      	bne.n	8008ede <memchr+0x12>
 8008eda:	2000      	movs	r0, #0
 8008edc:	e003      	b.n	8008ee6 <memchr+0x1a>
 8008ede:	7804      	ldrb	r4, [r0, #0]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	428c      	cmp	r4, r1
 8008ee4:	d1f6      	bne.n	8008ed4 <memchr+0x8>
 8008ee6:	bd10      	pop	{r4, pc}

08008ee8 <__malloc_lock>:
 8008ee8:	4801      	ldr	r0, [pc, #4]	; (8008ef0 <__malloc_lock+0x8>)
 8008eea:	f000 be8a 	b.w	8009c02 <__retarget_lock_acquire_recursive>
 8008eee:	bf00      	nop
 8008ef0:	200004fc 	.word	0x200004fc

08008ef4 <__malloc_unlock>:
 8008ef4:	4801      	ldr	r0, [pc, #4]	; (8008efc <__malloc_unlock+0x8>)
 8008ef6:	f000 be85 	b.w	8009c04 <__retarget_lock_release_recursive>
 8008efa:	bf00      	nop
 8008efc:	200004fc 	.word	0x200004fc

08008f00 <_Balloc>:
 8008f00:	b570      	push	{r4, r5, r6, lr}
 8008f02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f04:	4604      	mov	r4, r0
 8008f06:	460d      	mov	r5, r1
 8008f08:	b976      	cbnz	r6, 8008f28 <_Balloc+0x28>
 8008f0a:	2010      	movs	r0, #16
 8008f0c:	f7fc ffb4 	bl	8005e78 <malloc>
 8008f10:	4602      	mov	r2, r0
 8008f12:	6260      	str	r0, [r4, #36]	; 0x24
 8008f14:	b920      	cbnz	r0, 8008f20 <_Balloc+0x20>
 8008f16:	2166      	movs	r1, #102	; 0x66
 8008f18:	4b17      	ldr	r3, [pc, #92]	; (8008f78 <_Balloc+0x78>)
 8008f1a:	4818      	ldr	r0, [pc, #96]	; (8008f7c <_Balloc+0x7c>)
 8008f1c:	f000 fe40 	bl	8009ba0 <__assert_func>
 8008f20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f24:	6006      	str	r6, [r0, #0]
 8008f26:	60c6      	str	r6, [r0, #12]
 8008f28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f2a:	68f3      	ldr	r3, [r6, #12]
 8008f2c:	b183      	cbz	r3, 8008f50 <_Balloc+0x50>
 8008f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f36:	b9b8      	cbnz	r0, 8008f68 <_Balloc+0x68>
 8008f38:	2101      	movs	r1, #1
 8008f3a:	fa01 f605 	lsl.w	r6, r1, r5
 8008f3e:	1d72      	adds	r2, r6, #5
 8008f40:	4620      	mov	r0, r4
 8008f42:	0092      	lsls	r2, r2, #2
 8008f44:	f000 fc94 	bl	8009870 <_calloc_r>
 8008f48:	b160      	cbz	r0, 8008f64 <_Balloc+0x64>
 8008f4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f4e:	e00e      	b.n	8008f6e <_Balloc+0x6e>
 8008f50:	2221      	movs	r2, #33	; 0x21
 8008f52:	2104      	movs	r1, #4
 8008f54:	4620      	mov	r0, r4
 8008f56:	f000 fc8b 	bl	8009870 <_calloc_r>
 8008f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f5c:	60f0      	str	r0, [r6, #12]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1e4      	bne.n	8008f2e <_Balloc+0x2e>
 8008f64:	2000      	movs	r0, #0
 8008f66:	bd70      	pop	{r4, r5, r6, pc}
 8008f68:	6802      	ldr	r2, [r0, #0]
 8008f6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f74:	e7f7      	b.n	8008f66 <_Balloc+0x66>
 8008f76:	bf00      	nop
 8008f78:	0800aad6 	.word	0x0800aad6
 8008f7c:	0800abd4 	.word	0x0800abd4

08008f80 <_Bfree>:
 8008f80:	b570      	push	{r4, r5, r6, lr}
 8008f82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f84:	4605      	mov	r5, r0
 8008f86:	460c      	mov	r4, r1
 8008f88:	b976      	cbnz	r6, 8008fa8 <_Bfree+0x28>
 8008f8a:	2010      	movs	r0, #16
 8008f8c:	f7fc ff74 	bl	8005e78 <malloc>
 8008f90:	4602      	mov	r2, r0
 8008f92:	6268      	str	r0, [r5, #36]	; 0x24
 8008f94:	b920      	cbnz	r0, 8008fa0 <_Bfree+0x20>
 8008f96:	218a      	movs	r1, #138	; 0x8a
 8008f98:	4b08      	ldr	r3, [pc, #32]	; (8008fbc <_Bfree+0x3c>)
 8008f9a:	4809      	ldr	r0, [pc, #36]	; (8008fc0 <_Bfree+0x40>)
 8008f9c:	f000 fe00 	bl	8009ba0 <__assert_func>
 8008fa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fa4:	6006      	str	r6, [r0, #0]
 8008fa6:	60c6      	str	r6, [r0, #12]
 8008fa8:	b13c      	cbz	r4, 8008fba <_Bfree+0x3a>
 8008faa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008fac:	6862      	ldr	r2, [r4, #4]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fb4:	6021      	str	r1, [r4, #0]
 8008fb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fba:	bd70      	pop	{r4, r5, r6, pc}
 8008fbc:	0800aad6 	.word	0x0800aad6
 8008fc0:	0800abd4 	.word	0x0800abd4

08008fc4 <__multadd>:
 8008fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc8:	4607      	mov	r7, r0
 8008fca:	460c      	mov	r4, r1
 8008fcc:	461e      	mov	r6, r3
 8008fce:	2000      	movs	r0, #0
 8008fd0:	690d      	ldr	r5, [r1, #16]
 8008fd2:	f101 0c14 	add.w	ip, r1, #20
 8008fd6:	f8dc 3000 	ldr.w	r3, [ip]
 8008fda:	3001      	adds	r0, #1
 8008fdc:	b299      	uxth	r1, r3
 8008fde:	fb02 6101 	mla	r1, r2, r1, r6
 8008fe2:	0c1e      	lsrs	r6, r3, #16
 8008fe4:	0c0b      	lsrs	r3, r1, #16
 8008fe6:	fb02 3306 	mla	r3, r2, r6, r3
 8008fea:	b289      	uxth	r1, r1
 8008fec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ff0:	4285      	cmp	r5, r0
 8008ff2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ff6:	f84c 1b04 	str.w	r1, [ip], #4
 8008ffa:	dcec      	bgt.n	8008fd6 <__multadd+0x12>
 8008ffc:	b30e      	cbz	r6, 8009042 <__multadd+0x7e>
 8008ffe:	68a3      	ldr	r3, [r4, #8]
 8009000:	42ab      	cmp	r3, r5
 8009002:	dc19      	bgt.n	8009038 <__multadd+0x74>
 8009004:	6861      	ldr	r1, [r4, #4]
 8009006:	4638      	mov	r0, r7
 8009008:	3101      	adds	r1, #1
 800900a:	f7ff ff79 	bl	8008f00 <_Balloc>
 800900e:	4680      	mov	r8, r0
 8009010:	b928      	cbnz	r0, 800901e <__multadd+0x5a>
 8009012:	4602      	mov	r2, r0
 8009014:	21b5      	movs	r1, #181	; 0xb5
 8009016:	4b0c      	ldr	r3, [pc, #48]	; (8009048 <__multadd+0x84>)
 8009018:	480c      	ldr	r0, [pc, #48]	; (800904c <__multadd+0x88>)
 800901a:	f000 fdc1 	bl	8009ba0 <__assert_func>
 800901e:	6922      	ldr	r2, [r4, #16]
 8009020:	f104 010c 	add.w	r1, r4, #12
 8009024:	3202      	adds	r2, #2
 8009026:	0092      	lsls	r2, r2, #2
 8009028:	300c      	adds	r0, #12
 800902a:	f7fc ff35 	bl	8005e98 <memcpy>
 800902e:	4621      	mov	r1, r4
 8009030:	4638      	mov	r0, r7
 8009032:	f7ff ffa5 	bl	8008f80 <_Bfree>
 8009036:	4644      	mov	r4, r8
 8009038:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800903c:	3501      	adds	r5, #1
 800903e:	615e      	str	r6, [r3, #20]
 8009040:	6125      	str	r5, [r4, #16]
 8009042:	4620      	mov	r0, r4
 8009044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009048:	0800ab48 	.word	0x0800ab48
 800904c:	0800abd4 	.word	0x0800abd4

08009050 <__s2b>:
 8009050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009054:	4615      	mov	r5, r2
 8009056:	2209      	movs	r2, #9
 8009058:	461f      	mov	r7, r3
 800905a:	3308      	adds	r3, #8
 800905c:	460c      	mov	r4, r1
 800905e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009062:	4606      	mov	r6, r0
 8009064:	2201      	movs	r2, #1
 8009066:	2100      	movs	r1, #0
 8009068:	429a      	cmp	r2, r3
 800906a:	db09      	blt.n	8009080 <__s2b+0x30>
 800906c:	4630      	mov	r0, r6
 800906e:	f7ff ff47 	bl	8008f00 <_Balloc>
 8009072:	b940      	cbnz	r0, 8009086 <__s2b+0x36>
 8009074:	4602      	mov	r2, r0
 8009076:	21ce      	movs	r1, #206	; 0xce
 8009078:	4b18      	ldr	r3, [pc, #96]	; (80090dc <__s2b+0x8c>)
 800907a:	4819      	ldr	r0, [pc, #100]	; (80090e0 <__s2b+0x90>)
 800907c:	f000 fd90 	bl	8009ba0 <__assert_func>
 8009080:	0052      	lsls	r2, r2, #1
 8009082:	3101      	adds	r1, #1
 8009084:	e7f0      	b.n	8009068 <__s2b+0x18>
 8009086:	9b08      	ldr	r3, [sp, #32]
 8009088:	2d09      	cmp	r5, #9
 800908a:	6143      	str	r3, [r0, #20]
 800908c:	f04f 0301 	mov.w	r3, #1
 8009090:	6103      	str	r3, [r0, #16]
 8009092:	dd16      	ble.n	80090c2 <__s2b+0x72>
 8009094:	f104 0909 	add.w	r9, r4, #9
 8009098:	46c8      	mov	r8, r9
 800909a:	442c      	add	r4, r5
 800909c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80090a0:	4601      	mov	r1, r0
 80090a2:	220a      	movs	r2, #10
 80090a4:	4630      	mov	r0, r6
 80090a6:	3b30      	subs	r3, #48	; 0x30
 80090a8:	f7ff ff8c 	bl	8008fc4 <__multadd>
 80090ac:	45a0      	cmp	r8, r4
 80090ae:	d1f5      	bne.n	800909c <__s2b+0x4c>
 80090b0:	f1a5 0408 	sub.w	r4, r5, #8
 80090b4:	444c      	add	r4, r9
 80090b6:	1b2d      	subs	r5, r5, r4
 80090b8:	1963      	adds	r3, r4, r5
 80090ba:	42bb      	cmp	r3, r7
 80090bc:	db04      	blt.n	80090c8 <__s2b+0x78>
 80090be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090c2:	2509      	movs	r5, #9
 80090c4:	340a      	adds	r4, #10
 80090c6:	e7f6      	b.n	80090b6 <__s2b+0x66>
 80090c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80090cc:	4601      	mov	r1, r0
 80090ce:	220a      	movs	r2, #10
 80090d0:	4630      	mov	r0, r6
 80090d2:	3b30      	subs	r3, #48	; 0x30
 80090d4:	f7ff ff76 	bl	8008fc4 <__multadd>
 80090d8:	e7ee      	b.n	80090b8 <__s2b+0x68>
 80090da:	bf00      	nop
 80090dc:	0800ab48 	.word	0x0800ab48
 80090e0:	0800abd4 	.word	0x0800abd4

080090e4 <__hi0bits>:
 80090e4:	0c02      	lsrs	r2, r0, #16
 80090e6:	0412      	lsls	r2, r2, #16
 80090e8:	4603      	mov	r3, r0
 80090ea:	b9ca      	cbnz	r2, 8009120 <__hi0bits+0x3c>
 80090ec:	0403      	lsls	r3, r0, #16
 80090ee:	2010      	movs	r0, #16
 80090f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80090f4:	bf04      	itt	eq
 80090f6:	021b      	lsleq	r3, r3, #8
 80090f8:	3008      	addeq	r0, #8
 80090fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80090fe:	bf04      	itt	eq
 8009100:	011b      	lsleq	r3, r3, #4
 8009102:	3004      	addeq	r0, #4
 8009104:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009108:	bf04      	itt	eq
 800910a:	009b      	lsleq	r3, r3, #2
 800910c:	3002      	addeq	r0, #2
 800910e:	2b00      	cmp	r3, #0
 8009110:	db05      	blt.n	800911e <__hi0bits+0x3a>
 8009112:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009116:	f100 0001 	add.w	r0, r0, #1
 800911a:	bf08      	it	eq
 800911c:	2020      	moveq	r0, #32
 800911e:	4770      	bx	lr
 8009120:	2000      	movs	r0, #0
 8009122:	e7e5      	b.n	80090f0 <__hi0bits+0xc>

08009124 <__lo0bits>:
 8009124:	6803      	ldr	r3, [r0, #0]
 8009126:	4602      	mov	r2, r0
 8009128:	f013 0007 	ands.w	r0, r3, #7
 800912c:	d00b      	beq.n	8009146 <__lo0bits+0x22>
 800912e:	07d9      	lsls	r1, r3, #31
 8009130:	d421      	bmi.n	8009176 <__lo0bits+0x52>
 8009132:	0798      	lsls	r0, r3, #30
 8009134:	bf49      	itett	mi
 8009136:	085b      	lsrmi	r3, r3, #1
 8009138:	089b      	lsrpl	r3, r3, #2
 800913a:	2001      	movmi	r0, #1
 800913c:	6013      	strmi	r3, [r2, #0]
 800913e:	bf5c      	itt	pl
 8009140:	2002      	movpl	r0, #2
 8009142:	6013      	strpl	r3, [r2, #0]
 8009144:	4770      	bx	lr
 8009146:	b299      	uxth	r1, r3
 8009148:	b909      	cbnz	r1, 800914e <__lo0bits+0x2a>
 800914a:	2010      	movs	r0, #16
 800914c:	0c1b      	lsrs	r3, r3, #16
 800914e:	b2d9      	uxtb	r1, r3
 8009150:	b909      	cbnz	r1, 8009156 <__lo0bits+0x32>
 8009152:	3008      	adds	r0, #8
 8009154:	0a1b      	lsrs	r3, r3, #8
 8009156:	0719      	lsls	r1, r3, #28
 8009158:	bf04      	itt	eq
 800915a:	091b      	lsreq	r3, r3, #4
 800915c:	3004      	addeq	r0, #4
 800915e:	0799      	lsls	r1, r3, #30
 8009160:	bf04      	itt	eq
 8009162:	089b      	lsreq	r3, r3, #2
 8009164:	3002      	addeq	r0, #2
 8009166:	07d9      	lsls	r1, r3, #31
 8009168:	d403      	bmi.n	8009172 <__lo0bits+0x4e>
 800916a:	085b      	lsrs	r3, r3, #1
 800916c:	f100 0001 	add.w	r0, r0, #1
 8009170:	d003      	beq.n	800917a <__lo0bits+0x56>
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	4770      	bx	lr
 8009176:	2000      	movs	r0, #0
 8009178:	4770      	bx	lr
 800917a:	2020      	movs	r0, #32
 800917c:	4770      	bx	lr
	...

08009180 <__i2b>:
 8009180:	b510      	push	{r4, lr}
 8009182:	460c      	mov	r4, r1
 8009184:	2101      	movs	r1, #1
 8009186:	f7ff febb 	bl	8008f00 <_Balloc>
 800918a:	4602      	mov	r2, r0
 800918c:	b928      	cbnz	r0, 800919a <__i2b+0x1a>
 800918e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009192:	4b04      	ldr	r3, [pc, #16]	; (80091a4 <__i2b+0x24>)
 8009194:	4804      	ldr	r0, [pc, #16]	; (80091a8 <__i2b+0x28>)
 8009196:	f000 fd03 	bl	8009ba0 <__assert_func>
 800919a:	2301      	movs	r3, #1
 800919c:	6144      	str	r4, [r0, #20]
 800919e:	6103      	str	r3, [r0, #16]
 80091a0:	bd10      	pop	{r4, pc}
 80091a2:	bf00      	nop
 80091a4:	0800ab48 	.word	0x0800ab48
 80091a8:	0800abd4 	.word	0x0800abd4

080091ac <__multiply>:
 80091ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b0:	4691      	mov	r9, r2
 80091b2:	690a      	ldr	r2, [r1, #16]
 80091b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80091b8:	460c      	mov	r4, r1
 80091ba:	429a      	cmp	r2, r3
 80091bc:	bfbe      	ittt	lt
 80091be:	460b      	movlt	r3, r1
 80091c0:	464c      	movlt	r4, r9
 80091c2:	4699      	movlt	r9, r3
 80091c4:	6927      	ldr	r7, [r4, #16]
 80091c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80091ca:	68a3      	ldr	r3, [r4, #8]
 80091cc:	6861      	ldr	r1, [r4, #4]
 80091ce:	eb07 060a 	add.w	r6, r7, sl
 80091d2:	42b3      	cmp	r3, r6
 80091d4:	b085      	sub	sp, #20
 80091d6:	bfb8      	it	lt
 80091d8:	3101      	addlt	r1, #1
 80091da:	f7ff fe91 	bl	8008f00 <_Balloc>
 80091de:	b930      	cbnz	r0, 80091ee <__multiply+0x42>
 80091e0:	4602      	mov	r2, r0
 80091e2:	f240 115d 	movw	r1, #349	; 0x15d
 80091e6:	4b43      	ldr	r3, [pc, #268]	; (80092f4 <__multiply+0x148>)
 80091e8:	4843      	ldr	r0, [pc, #268]	; (80092f8 <__multiply+0x14c>)
 80091ea:	f000 fcd9 	bl	8009ba0 <__assert_func>
 80091ee:	f100 0514 	add.w	r5, r0, #20
 80091f2:	462b      	mov	r3, r5
 80091f4:	2200      	movs	r2, #0
 80091f6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80091fa:	4543      	cmp	r3, r8
 80091fc:	d321      	bcc.n	8009242 <__multiply+0x96>
 80091fe:	f104 0314 	add.w	r3, r4, #20
 8009202:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009206:	f109 0314 	add.w	r3, r9, #20
 800920a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800920e:	9202      	str	r2, [sp, #8]
 8009210:	1b3a      	subs	r2, r7, r4
 8009212:	3a15      	subs	r2, #21
 8009214:	f022 0203 	bic.w	r2, r2, #3
 8009218:	3204      	adds	r2, #4
 800921a:	f104 0115 	add.w	r1, r4, #21
 800921e:	428f      	cmp	r7, r1
 8009220:	bf38      	it	cc
 8009222:	2204      	movcc	r2, #4
 8009224:	9201      	str	r2, [sp, #4]
 8009226:	9a02      	ldr	r2, [sp, #8]
 8009228:	9303      	str	r3, [sp, #12]
 800922a:	429a      	cmp	r2, r3
 800922c:	d80c      	bhi.n	8009248 <__multiply+0x9c>
 800922e:	2e00      	cmp	r6, #0
 8009230:	dd03      	ble.n	800923a <__multiply+0x8e>
 8009232:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009236:	2b00      	cmp	r3, #0
 8009238:	d059      	beq.n	80092ee <__multiply+0x142>
 800923a:	6106      	str	r6, [r0, #16]
 800923c:	b005      	add	sp, #20
 800923e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009242:	f843 2b04 	str.w	r2, [r3], #4
 8009246:	e7d8      	b.n	80091fa <__multiply+0x4e>
 8009248:	f8b3 a000 	ldrh.w	sl, [r3]
 800924c:	f1ba 0f00 	cmp.w	sl, #0
 8009250:	d023      	beq.n	800929a <__multiply+0xee>
 8009252:	46a9      	mov	r9, r5
 8009254:	f04f 0c00 	mov.w	ip, #0
 8009258:	f104 0e14 	add.w	lr, r4, #20
 800925c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009260:	f8d9 1000 	ldr.w	r1, [r9]
 8009264:	fa1f fb82 	uxth.w	fp, r2
 8009268:	b289      	uxth	r1, r1
 800926a:	fb0a 110b 	mla	r1, sl, fp, r1
 800926e:	4461      	add	r1, ip
 8009270:	f8d9 c000 	ldr.w	ip, [r9]
 8009274:	0c12      	lsrs	r2, r2, #16
 8009276:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800927a:	fb0a c202 	mla	r2, sl, r2, ip
 800927e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009282:	b289      	uxth	r1, r1
 8009284:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009288:	4577      	cmp	r7, lr
 800928a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800928e:	f849 1b04 	str.w	r1, [r9], #4
 8009292:	d8e3      	bhi.n	800925c <__multiply+0xb0>
 8009294:	9a01      	ldr	r2, [sp, #4]
 8009296:	f845 c002 	str.w	ip, [r5, r2]
 800929a:	9a03      	ldr	r2, [sp, #12]
 800929c:	3304      	adds	r3, #4
 800929e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092a2:	f1b9 0f00 	cmp.w	r9, #0
 80092a6:	d020      	beq.n	80092ea <__multiply+0x13e>
 80092a8:	46ae      	mov	lr, r5
 80092aa:	f04f 0a00 	mov.w	sl, #0
 80092ae:	6829      	ldr	r1, [r5, #0]
 80092b0:	f104 0c14 	add.w	ip, r4, #20
 80092b4:	f8bc b000 	ldrh.w	fp, [ip]
 80092b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80092bc:	b289      	uxth	r1, r1
 80092be:	fb09 220b 	mla	r2, r9, fp, r2
 80092c2:	4492      	add	sl, r2
 80092c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80092c8:	f84e 1b04 	str.w	r1, [lr], #4
 80092cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80092d0:	f8be 1000 	ldrh.w	r1, [lr]
 80092d4:	0c12      	lsrs	r2, r2, #16
 80092d6:	fb09 1102 	mla	r1, r9, r2, r1
 80092da:	4567      	cmp	r7, ip
 80092dc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80092e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80092e4:	d8e6      	bhi.n	80092b4 <__multiply+0x108>
 80092e6:	9a01      	ldr	r2, [sp, #4]
 80092e8:	50a9      	str	r1, [r5, r2]
 80092ea:	3504      	adds	r5, #4
 80092ec:	e79b      	b.n	8009226 <__multiply+0x7a>
 80092ee:	3e01      	subs	r6, #1
 80092f0:	e79d      	b.n	800922e <__multiply+0x82>
 80092f2:	bf00      	nop
 80092f4:	0800ab48 	.word	0x0800ab48
 80092f8:	0800abd4 	.word	0x0800abd4

080092fc <__pow5mult>:
 80092fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009300:	4615      	mov	r5, r2
 8009302:	f012 0203 	ands.w	r2, r2, #3
 8009306:	4606      	mov	r6, r0
 8009308:	460f      	mov	r7, r1
 800930a:	d007      	beq.n	800931c <__pow5mult+0x20>
 800930c:	4c25      	ldr	r4, [pc, #148]	; (80093a4 <__pow5mult+0xa8>)
 800930e:	3a01      	subs	r2, #1
 8009310:	2300      	movs	r3, #0
 8009312:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009316:	f7ff fe55 	bl	8008fc4 <__multadd>
 800931a:	4607      	mov	r7, r0
 800931c:	10ad      	asrs	r5, r5, #2
 800931e:	d03d      	beq.n	800939c <__pow5mult+0xa0>
 8009320:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009322:	b97c      	cbnz	r4, 8009344 <__pow5mult+0x48>
 8009324:	2010      	movs	r0, #16
 8009326:	f7fc fda7 	bl	8005e78 <malloc>
 800932a:	4602      	mov	r2, r0
 800932c:	6270      	str	r0, [r6, #36]	; 0x24
 800932e:	b928      	cbnz	r0, 800933c <__pow5mult+0x40>
 8009330:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009334:	4b1c      	ldr	r3, [pc, #112]	; (80093a8 <__pow5mult+0xac>)
 8009336:	481d      	ldr	r0, [pc, #116]	; (80093ac <__pow5mult+0xb0>)
 8009338:	f000 fc32 	bl	8009ba0 <__assert_func>
 800933c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009340:	6004      	str	r4, [r0, #0]
 8009342:	60c4      	str	r4, [r0, #12]
 8009344:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009348:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800934c:	b94c      	cbnz	r4, 8009362 <__pow5mult+0x66>
 800934e:	f240 2171 	movw	r1, #625	; 0x271
 8009352:	4630      	mov	r0, r6
 8009354:	f7ff ff14 	bl	8009180 <__i2b>
 8009358:	2300      	movs	r3, #0
 800935a:	4604      	mov	r4, r0
 800935c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009360:	6003      	str	r3, [r0, #0]
 8009362:	f04f 0900 	mov.w	r9, #0
 8009366:	07eb      	lsls	r3, r5, #31
 8009368:	d50a      	bpl.n	8009380 <__pow5mult+0x84>
 800936a:	4639      	mov	r1, r7
 800936c:	4622      	mov	r2, r4
 800936e:	4630      	mov	r0, r6
 8009370:	f7ff ff1c 	bl	80091ac <__multiply>
 8009374:	4680      	mov	r8, r0
 8009376:	4639      	mov	r1, r7
 8009378:	4630      	mov	r0, r6
 800937a:	f7ff fe01 	bl	8008f80 <_Bfree>
 800937e:	4647      	mov	r7, r8
 8009380:	106d      	asrs	r5, r5, #1
 8009382:	d00b      	beq.n	800939c <__pow5mult+0xa0>
 8009384:	6820      	ldr	r0, [r4, #0]
 8009386:	b938      	cbnz	r0, 8009398 <__pow5mult+0x9c>
 8009388:	4622      	mov	r2, r4
 800938a:	4621      	mov	r1, r4
 800938c:	4630      	mov	r0, r6
 800938e:	f7ff ff0d 	bl	80091ac <__multiply>
 8009392:	6020      	str	r0, [r4, #0]
 8009394:	f8c0 9000 	str.w	r9, [r0]
 8009398:	4604      	mov	r4, r0
 800939a:	e7e4      	b.n	8009366 <__pow5mult+0x6a>
 800939c:	4638      	mov	r0, r7
 800939e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093a2:	bf00      	nop
 80093a4:	0800ad20 	.word	0x0800ad20
 80093a8:	0800aad6 	.word	0x0800aad6
 80093ac:	0800abd4 	.word	0x0800abd4

080093b0 <__lshift>:
 80093b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093b4:	460c      	mov	r4, r1
 80093b6:	4607      	mov	r7, r0
 80093b8:	4691      	mov	r9, r2
 80093ba:	6923      	ldr	r3, [r4, #16]
 80093bc:	6849      	ldr	r1, [r1, #4]
 80093be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093c2:	68a3      	ldr	r3, [r4, #8]
 80093c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093c8:	f108 0601 	add.w	r6, r8, #1
 80093cc:	42b3      	cmp	r3, r6
 80093ce:	db0b      	blt.n	80093e8 <__lshift+0x38>
 80093d0:	4638      	mov	r0, r7
 80093d2:	f7ff fd95 	bl	8008f00 <_Balloc>
 80093d6:	4605      	mov	r5, r0
 80093d8:	b948      	cbnz	r0, 80093ee <__lshift+0x3e>
 80093da:	4602      	mov	r2, r0
 80093dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80093e0:	4b29      	ldr	r3, [pc, #164]	; (8009488 <__lshift+0xd8>)
 80093e2:	482a      	ldr	r0, [pc, #168]	; (800948c <__lshift+0xdc>)
 80093e4:	f000 fbdc 	bl	8009ba0 <__assert_func>
 80093e8:	3101      	adds	r1, #1
 80093ea:	005b      	lsls	r3, r3, #1
 80093ec:	e7ee      	b.n	80093cc <__lshift+0x1c>
 80093ee:	2300      	movs	r3, #0
 80093f0:	f100 0114 	add.w	r1, r0, #20
 80093f4:	f100 0210 	add.w	r2, r0, #16
 80093f8:	4618      	mov	r0, r3
 80093fa:	4553      	cmp	r3, sl
 80093fc:	db37      	blt.n	800946e <__lshift+0xbe>
 80093fe:	6920      	ldr	r0, [r4, #16]
 8009400:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009404:	f104 0314 	add.w	r3, r4, #20
 8009408:	f019 091f 	ands.w	r9, r9, #31
 800940c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009410:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009414:	d02f      	beq.n	8009476 <__lshift+0xc6>
 8009416:	468a      	mov	sl, r1
 8009418:	f04f 0c00 	mov.w	ip, #0
 800941c:	f1c9 0e20 	rsb	lr, r9, #32
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	fa02 f209 	lsl.w	r2, r2, r9
 8009426:	ea42 020c 	orr.w	r2, r2, ip
 800942a:	f84a 2b04 	str.w	r2, [sl], #4
 800942e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009432:	4298      	cmp	r0, r3
 8009434:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009438:	d8f2      	bhi.n	8009420 <__lshift+0x70>
 800943a:	1b03      	subs	r3, r0, r4
 800943c:	3b15      	subs	r3, #21
 800943e:	f023 0303 	bic.w	r3, r3, #3
 8009442:	3304      	adds	r3, #4
 8009444:	f104 0215 	add.w	r2, r4, #21
 8009448:	4290      	cmp	r0, r2
 800944a:	bf38      	it	cc
 800944c:	2304      	movcc	r3, #4
 800944e:	f841 c003 	str.w	ip, [r1, r3]
 8009452:	f1bc 0f00 	cmp.w	ip, #0
 8009456:	d001      	beq.n	800945c <__lshift+0xac>
 8009458:	f108 0602 	add.w	r6, r8, #2
 800945c:	3e01      	subs	r6, #1
 800945e:	4638      	mov	r0, r7
 8009460:	4621      	mov	r1, r4
 8009462:	612e      	str	r6, [r5, #16]
 8009464:	f7ff fd8c 	bl	8008f80 <_Bfree>
 8009468:	4628      	mov	r0, r5
 800946a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800946e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009472:	3301      	adds	r3, #1
 8009474:	e7c1      	b.n	80093fa <__lshift+0x4a>
 8009476:	3904      	subs	r1, #4
 8009478:	f853 2b04 	ldr.w	r2, [r3], #4
 800947c:	4298      	cmp	r0, r3
 800947e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009482:	d8f9      	bhi.n	8009478 <__lshift+0xc8>
 8009484:	e7ea      	b.n	800945c <__lshift+0xac>
 8009486:	bf00      	nop
 8009488:	0800ab48 	.word	0x0800ab48
 800948c:	0800abd4 	.word	0x0800abd4

08009490 <__mcmp>:
 8009490:	4603      	mov	r3, r0
 8009492:	690a      	ldr	r2, [r1, #16]
 8009494:	6900      	ldr	r0, [r0, #16]
 8009496:	b530      	push	{r4, r5, lr}
 8009498:	1a80      	subs	r0, r0, r2
 800949a:	d10d      	bne.n	80094b8 <__mcmp+0x28>
 800949c:	3314      	adds	r3, #20
 800949e:	3114      	adds	r1, #20
 80094a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80094a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80094a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80094ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80094b0:	4295      	cmp	r5, r2
 80094b2:	d002      	beq.n	80094ba <__mcmp+0x2a>
 80094b4:	d304      	bcc.n	80094c0 <__mcmp+0x30>
 80094b6:	2001      	movs	r0, #1
 80094b8:	bd30      	pop	{r4, r5, pc}
 80094ba:	42a3      	cmp	r3, r4
 80094bc:	d3f4      	bcc.n	80094a8 <__mcmp+0x18>
 80094be:	e7fb      	b.n	80094b8 <__mcmp+0x28>
 80094c0:	f04f 30ff 	mov.w	r0, #4294967295
 80094c4:	e7f8      	b.n	80094b8 <__mcmp+0x28>
	...

080094c8 <__mdiff>:
 80094c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094cc:	460d      	mov	r5, r1
 80094ce:	4607      	mov	r7, r0
 80094d0:	4611      	mov	r1, r2
 80094d2:	4628      	mov	r0, r5
 80094d4:	4614      	mov	r4, r2
 80094d6:	f7ff ffdb 	bl	8009490 <__mcmp>
 80094da:	1e06      	subs	r6, r0, #0
 80094dc:	d111      	bne.n	8009502 <__mdiff+0x3a>
 80094de:	4631      	mov	r1, r6
 80094e0:	4638      	mov	r0, r7
 80094e2:	f7ff fd0d 	bl	8008f00 <_Balloc>
 80094e6:	4602      	mov	r2, r0
 80094e8:	b928      	cbnz	r0, 80094f6 <__mdiff+0x2e>
 80094ea:	f240 2132 	movw	r1, #562	; 0x232
 80094ee:	4b3a      	ldr	r3, [pc, #232]	; (80095d8 <__mdiff+0x110>)
 80094f0:	483a      	ldr	r0, [pc, #232]	; (80095dc <__mdiff+0x114>)
 80094f2:	f000 fb55 	bl	8009ba0 <__assert_func>
 80094f6:	2301      	movs	r3, #1
 80094f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80094fc:	4610      	mov	r0, r2
 80094fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009502:	bfa4      	itt	ge
 8009504:	4623      	movge	r3, r4
 8009506:	462c      	movge	r4, r5
 8009508:	4638      	mov	r0, r7
 800950a:	6861      	ldr	r1, [r4, #4]
 800950c:	bfa6      	itte	ge
 800950e:	461d      	movge	r5, r3
 8009510:	2600      	movge	r6, #0
 8009512:	2601      	movlt	r6, #1
 8009514:	f7ff fcf4 	bl	8008f00 <_Balloc>
 8009518:	4602      	mov	r2, r0
 800951a:	b918      	cbnz	r0, 8009524 <__mdiff+0x5c>
 800951c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009520:	4b2d      	ldr	r3, [pc, #180]	; (80095d8 <__mdiff+0x110>)
 8009522:	e7e5      	b.n	80094f0 <__mdiff+0x28>
 8009524:	f102 0814 	add.w	r8, r2, #20
 8009528:	46c2      	mov	sl, r8
 800952a:	f04f 0c00 	mov.w	ip, #0
 800952e:	6927      	ldr	r7, [r4, #16]
 8009530:	60c6      	str	r6, [r0, #12]
 8009532:	692e      	ldr	r6, [r5, #16]
 8009534:	f104 0014 	add.w	r0, r4, #20
 8009538:	f105 0914 	add.w	r9, r5, #20
 800953c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009540:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009544:	3410      	adds	r4, #16
 8009546:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800954a:	f859 3b04 	ldr.w	r3, [r9], #4
 800954e:	fa1f f18b 	uxth.w	r1, fp
 8009552:	448c      	add	ip, r1
 8009554:	b299      	uxth	r1, r3
 8009556:	0c1b      	lsrs	r3, r3, #16
 8009558:	ebac 0101 	sub.w	r1, ip, r1
 800955c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009560:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009564:	b289      	uxth	r1, r1
 8009566:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800956a:	454e      	cmp	r6, r9
 800956c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009570:	f84a 3b04 	str.w	r3, [sl], #4
 8009574:	d8e7      	bhi.n	8009546 <__mdiff+0x7e>
 8009576:	1b73      	subs	r3, r6, r5
 8009578:	3b15      	subs	r3, #21
 800957a:	f023 0303 	bic.w	r3, r3, #3
 800957e:	3515      	adds	r5, #21
 8009580:	3304      	adds	r3, #4
 8009582:	42ae      	cmp	r6, r5
 8009584:	bf38      	it	cc
 8009586:	2304      	movcc	r3, #4
 8009588:	4418      	add	r0, r3
 800958a:	4443      	add	r3, r8
 800958c:	461e      	mov	r6, r3
 800958e:	4605      	mov	r5, r0
 8009590:	4575      	cmp	r5, lr
 8009592:	d30e      	bcc.n	80095b2 <__mdiff+0xea>
 8009594:	f10e 0103 	add.w	r1, lr, #3
 8009598:	1a09      	subs	r1, r1, r0
 800959a:	f021 0103 	bic.w	r1, r1, #3
 800959e:	3803      	subs	r0, #3
 80095a0:	4586      	cmp	lr, r0
 80095a2:	bf38      	it	cc
 80095a4:	2100      	movcc	r1, #0
 80095a6:	4419      	add	r1, r3
 80095a8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80095ac:	b18b      	cbz	r3, 80095d2 <__mdiff+0x10a>
 80095ae:	6117      	str	r7, [r2, #16]
 80095b0:	e7a4      	b.n	80094fc <__mdiff+0x34>
 80095b2:	f855 8b04 	ldr.w	r8, [r5], #4
 80095b6:	fa1f f188 	uxth.w	r1, r8
 80095ba:	4461      	add	r1, ip
 80095bc:	140c      	asrs	r4, r1, #16
 80095be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80095c2:	b289      	uxth	r1, r1
 80095c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80095c8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80095cc:	f846 1b04 	str.w	r1, [r6], #4
 80095d0:	e7de      	b.n	8009590 <__mdiff+0xc8>
 80095d2:	3f01      	subs	r7, #1
 80095d4:	e7e8      	b.n	80095a8 <__mdiff+0xe0>
 80095d6:	bf00      	nop
 80095d8:	0800ab48 	.word	0x0800ab48
 80095dc:	0800abd4 	.word	0x0800abd4

080095e0 <__ulp>:
 80095e0:	4b11      	ldr	r3, [pc, #68]	; (8009628 <__ulp+0x48>)
 80095e2:	400b      	ands	r3, r1
 80095e4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	dd02      	ble.n	80095f2 <__ulp+0x12>
 80095ec:	2000      	movs	r0, #0
 80095ee:	4619      	mov	r1, r3
 80095f0:	4770      	bx	lr
 80095f2:	425b      	negs	r3, r3
 80095f4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80095f8:	f04f 0000 	mov.w	r0, #0
 80095fc:	f04f 0100 	mov.w	r1, #0
 8009600:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009604:	da04      	bge.n	8009610 <__ulp+0x30>
 8009606:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800960a:	fa43 f102 	asr.w	r1, r3, r2
 800960e:	4770      	bx	lr
 8009610:	f1a2 0314 	sub.w	r3, r2, #20
 8009614:	2b1e      	cmp	r3, #30
 8009616:	bfd6      	itet	le
 8009618:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800961c:	2301      	movgt	r3, #1
 800961e:	fa22 f303 	lsrle.w	r3, r2, r3
 8009622:	4618      	mov	r0, r3
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	7ff00000 	.word	0x7ff00000

0800962c <__b2d>:
 800962c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009630:	6907      	ldr	r7, [r0, #16]
 8009632:	f100 0914 	add.w	r9, r0, #20
 8009636:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800963a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800963e:	f1a7 0804 	sub.w	r8, r7, #4
 8009642:	4630      	mov	r0, r6
 8009644:	f7ff fd4e 	bl	80090e4 <__hi0bits>
 8009648:	f1c0 0320 	rsb	r3, r0, #32
 800964c:	280a      	cmp	r0, #10
 800964e:	600b      	str	r3, [r1, #0]
 8009650:	491f      	ldr	r1, [pc, #124]	; (80096d0 <__b2d+0xa4>)
 8009652:	dc17      	bgt.n	8009684 <__b2d+0x58>
 8009654:	45c1      	cmp	r9, r8
 8009656:	bf28      	it	cs
 8009658:	2200      	movcs	r2, #0
 800965a:	f1c0 0c0b 	rsb	ip, r0, #11
 800965e:	fa26 f30c 	lsr.w	r3, r6, ip
 8009662:	bf38      	it	cc
 8009664:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009668:	ea43 0501 	orr.w	r5, r3, r1
 800966c:	f100 0315 	add.w	r3, r0, #21
 8009670:	fa06 f303 	lsl.w	r3, r6, r3
 8009674:	fa22 f20c 	lsr.w	r2, r2, ip
 8009678:	ea43 0402 	orr.w	r4, r3, r2
 800967c:	4620      	mov	r0, r4
 800967e:	4629      	mov	r1, r5
 8009680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009684:	45c1      	cmp	r9, r8
 8009686:	bf2e      	itee	cs
 8009688:	2200      	movcs	r2, #0
 800968a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800968e:	f1a7 0808 	subcc.w	r8, r7, #8
 8009692:	f1b0 030b 	subs.w	r3, r0, #11
 8009696:	d016      	beq.n	80096c6 <__b2d+0x9a>
 8009698:	f1c3 0720 	rsb	r7, r3, #32
 800969c:	fa22 f107 	lsr.w	r1, r2, r7
 80096a0:	45c8      	cmp	r8, r9
 80096a2:	fa06 f603 	lsl.w	r6, r6, r3
 80096a6:	ea46 0601 	orr.w	r6, r6, r1
 80096aa:	bf94      	ite	ls
 80096ac:	2100      	movls	r1, #0
 80096ae:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80096b2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80096b6:	fa02 f003 	lsl.w	r0, r2, r3
 80096ba:	40f9      	lsrs	r1, r7
 80096bc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80096c0:	ea40 0401 	orr.w	r4, r0, r1
 80096c4:	e7da      	b.n	800967c <__b2d+0x50>
 80096c6:	4614      	mov	r4, r2
 80096c8:	ea46 0501 	orr.w	r5, r6, r1
 80096cc:	e7d6      	b.n	800967c <__b2d+0x50>
 80096ce:	bf00      	nop
 80096d0:	3ff00000 	.word	0x3ff00000

080096d4 <__d2b>:
 80096d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80096d8:	2101      	movs	r1, #1
 80096da:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80096de:	4690      	mov	r8, r2
 80096e0:	461d      	mov	r5, r3
 80096e2:	f7ff fc0d 	bl	8008f00 <_Balloc>
 80096e6:	4604      	mov	r4, r0
 80096e8:	b930      	cbnz	r0, 80096f8 <__d2b+0x24>
 80096ea:	4602      	mov	r2, r0
 80096ec:	f240 310a 	movw	r1, #778	; 0x30a
 80096f0:	4b24      	ldr	r3, [pc, #144]	; (8009784 <__d2b+0xb0>)
 80096f2:	4825      	ldr	r0, [pc, #148]	; (8009788 <__d2b+0xb4>)
 80096f4:	f000 fa54 	bl	8009ba0 <__assert_func>
 80096f8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80096fc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009700:	bb2d      	cbnz	r5, 800974e <__d2b+0x7a>
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	f1b8 0300 	subs.w	r3, r8, #0
 8009708:	d026      	beq.n	8009758 <__d2b+0x84>
 800970a:	4668      	mov	r0, sp
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	f7ff fd09 	bl	8009124 <__lo0bits>
 8009712:	9900      	ldr	r1, [sp, #0]
 8009714:	b1f0      	cbz	r0, 8009754 <__d2b+0x80>
 8009716:	9a01      	ldr	r2, [sp, #4]
 8009718:	f1c0 0320 	rsb	r3, r0, #32
 800971c:	fa02 f303 	lsl.w	r3, r2, r3
 8009720:	430b      	orrs	r3, r1
 8009722:	40c2      	lsrs	r2, r0
 8009724:	6163      	str	r3, [r4, #20]
 8009726:	9201      	str	r2, [sp, #4]
 8009728:	9b01      	ldr	r3, [sp, #4]
 800972a:	2b00      	cmp	r3, #0
 800972c:	bf14      	ite	ne
 800972e:	2102      	movne	r1, #2
 8009730:	2101      	moveq	r1, #1
 8009732:	61a3      	str	r3, [r4, #24]
 8009734:	6121      	str	r1, [r4, #16]
 8009736:	b1c5      	cbz	r5, 800976a <__d2b+0x96>
 8009738:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800973c:	4405      	add	r5, r0
 800973e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009742:	603d      	str	r5, [r7, #0]
 8009744:	6030      	str	r0, [r6, #0]
 8009746:	4620      	mov	r0, r4
 8009748:	b002      	add	sp, #8
 800974a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800974e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009752:	e7d6      	b.n	8009702 <__d2b+0x2e>
 8009754:	6161      	str	r1, [r4, #20]
 8009756:	e7e7      	b.n	8009728 <__d2b+0x54>
 8009758:	a801      	add	r0, sp, #4
 800975a:	f7ff fce3 	bl	8009124 <__lo0bits>
 800975e:	2101      	movs	r1, #1
 8009760:	9b01      	ldr	r3, [sp, #4]
 8009762:	6121      	str	r1, [r4, #16]
 8009764:	6163      	str	r3, [r4, #20]
 8009766:	3020      	adds	r0, #32
 8009768:	e7e5      	b.n	8009736 <__d2b+0x62>
 800976a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800976e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009772:	6038      	str	r0, [r7, #0]
 8009774:	6918      	ldr	r0, [r3, #16]
 8009776:	f7ff fcb5 	bl	80090e4 <__hi0bits>
 800977a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800977e:	6031      	str	r1, [r6, #0]
 8009780:	e7e1      	b.n	8009746 <__d2b+0x72>
 8009782:	bf00      	nop
 8009784:	0800ab48 	.word	0x0800ab48
 8009788:	0800abd4 	.word	0x0800abd4

0800978c <__ratio>:
 800978c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009790:	4688      	mov	r8, r1
 8009792:	4669      	mov	r1, sp
 8009794:	4681      	mov	r9, r0
 8009796:	f7ff ff49 	bl	800962c <__b2d>
 800979a:	460f      	mov	r7, r1
 800979c:	4604      	mov	r4, r0
 800979e:	460d      	mov	r5, r1
 80097a0:	4640      	mov	r0, r8
 80097a2:	a901      	add	r1, sp, #4
 80097a4:	f7ff ff42 	bl	800962c <__b2d>
 80097a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80097b0:	468b      	mov	fp, r1
 80097b2:	eba3 0c02 	sub.w	ip, r3, r2
 80097b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80097ba:	1a9b      	subs	r3, r3, r2
 80097bc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	bfd5      	itete	le
 80097c4:	460a      	movle	r2, r1
 80097c6:	462a      	movgt	r2, r5
 80097c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80097cc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80097d0:	bfd8      	it	le
 80097d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80097d6:	465b      	mov	r3, fp
 80097d8:	4602      	mov	r2, r0
 80097da:	4639      	mov	r1, r7
 80097dc:	4620      	mov	r0, r4
 80097de:	f7f6 ffa5 	bl	800072c <__aeabi_ddiv>
 80097e2:	b003      	add	sp, #12
 80097e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080097e8 <__copybits>:
 80097e8:	3901      	subs	r1, #1
 80097ea:	b570      	push	{r4, r5, r6, lr}
 80097ec:	1149      	asrs	r1, r1, #5
 80097ee:	6914      	ldr	r4, [r2, #16]
 80097f0:	3101      	adds	r1, #1
 80097f2:	f102 0314 	add.w	r3, r2, #20
 80097f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80097fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80097fe:	1f05      	subs	r5, r0, #4
 8009800:	42a3      	cmp	r3, r4
 8009802:	d30c      	bcc.n	800981e <__copybits+0x36>
 8009804:	1aa3      	subs	r3, r4, r2
 8009806:	3b11      	subs	r3, #17
 8009808:	f023 0303 	bic.w	r3, r3, #3
 800980c:	3211      	adds	r2, #17
 800980e:	42a2      	cmp	r2, r4
 8009810:	bf88      	it	hi
 8009812:	2300      	movhi	r3, #0
 8009814:	4418      	add	r0, r3
 8009816:	2300      	movs	r3, #0
 8009818:	4288      	cmp	r0, r1
 800981a:	d305      	bcc.n	8009828 <__copybits+0x40>
 800981c:	bd70      	pop	{r4, r5, r6, pc}
 800981e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009822:	f845 6f04 	str.w	r6, [r5, #4]!
 8009826:	e7eb      	b.n	8009800 <__copybits+0x18>
 8009828:	f840 3b04 	str.w	r3, [r0], #4
 800982c:	e7f4      	b.n	8009818 <__copybits+0x30>

0800982e <__any_on>:
 800982e:	f100 0214 	add.w	r2, r0, #20
 8009832:	6900      	ldr	r0, [r0, #16]
 8009834:	114b      	asrs	r3, r1, #5
 8009836:	4298      	cmp	r0, r3
 8009838:	b510      	push	{r4, lr}
 800983a:	db11      	blt.n	8009860 <__any_on+0x32>
 800983c:	dd0a      	ble.n	8009854 <__any_on+0x26>
 800983e:	f011 011f 	ands.w	r1, r1, #31
 8009842:	d007      	beq.n	8009854 <__any_on+0x26>
 8009844:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009848:	fa24 f001 	lsr.w	r0, r4, r1
 800984c:	fa00 f101 	lsl.w	r1, r0, r1
 8009850:	428c      	cmp	r4, r1
 8009852:	d10b      	bne.n	800986c <__any_on+0x3e>
 8009854:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009858:	4293      	cmp	r3, r2
 800985a:	d803      	bhi.n	8009864 <__any_on+0x36>
 800985c:	2000      	movs	r0, #0
 800985e:	bd10      	pop	{r4, pc}
 8009860:	4603      	mov	r3, r0
 8009862:	e7f7      	b.n	8009854 <__any_on+0x26>
 8009864:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009868:	2900      	cmp	r1, #0
 800986a:	d0f5      	beq.n	8009858 <__any_on+0x2a>
 800986c:	2001      	movs	r0, #1
 800986e:	e7f6      	b.n	800985e <__any_on+0x30>

08009870 <_calloc_r>:
 8009870:	b570      	push	{r4, r5, r6, lr}
 8009872:	fba1 5402 	umull	r5, r4, r1, r2
 8009876:	b934      	cbnz	r4, 8009886 <_calloc_r+0x16>
 8009878:	4629      	mov	r1, r5
 800987a:	f7fc fb8b 	bl	8005f94 <_malloc_r>
 800987e:	4606      	mov	r6, r0
 8009880:	b928      	cbnz	r0, 800988e <_calloc_r+0x1e>
 8009882:	4630      	mov	r0, r6
 8009884:	bd70      	pop	{r4, r5, r6, pc}
 8009886:	220c      	movs	r2, #12
 8009888:	2600      	movs	r6, #0
 800988a:	6002      	str	r2, [r0, #0]
 800988c:	e7f9      	b.n	8009882 <_calloc_r+0x12>
 800988e:	462a      	mov	r2, r5
 8009890:	4621      	mov	r1, r4
 8009892:	f7fc fb0f 	bl	8005eb4 <memset>
 8009896:	e7f4      	b.n	8009882 <_calloc_r+0x12>

08009898 <__ssputs_r>:
 8009898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800989c:	688e      	ldr	r6, [r1, #8]
 800989e:	4682      	mov	sl, r0
 80098a0:	429e      	cmp	r6, r3
 80098a2:	460c      	mov	r4, r1
 80098a4:	4690      	mov	r8, r2
 80098a6:	461f      	mov	r7, r3
 80098a8:	d838      	bhi.n	800991c <__ssputs_r+0x84>
 80098aa:	898a      	ldrh	r2, [r1, #12]
 80098ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098b0:	d032      	beq.n	8009918 <__ssputs_r+0x80>
 80098b2:	6825      	ldr	r5, [r4, #0]
 80098b4:	6909      	ldr	r1, [r1, #16]
 80098b6:	3301      	adds	r3, #1
 80098b8:	eba5 0901 	sub.w	r9, r5, r1
 80098bc:	6965      	ldr	r5, [r4, #20]
 80098be:	444b      	add	r3, r9
 80098c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098c8:	106d      	asrs	r5, r5, #1
 80098ca:	429d      	cmp	r5, r3
 80098cc:	bf38      	it	cc
 80098ce:	461d      	movcc	r5, r3
 80098d0:	0553      	lsls	r3, r2, #21
 80098d2:	d531      	bpl.n	8009938 <__ssputs_r+0xa0>
 80098d4:	4629      	mov	r1, r5
 80098d6:	f7fc fb5d 	bl	8005f94 <_malloc_r>
 80098da:	4606      	mov	r6, r0
 80098dc:	b950      	cbnz	r0, 80098f4 <__ssputs_r+0x5c>
 80098de:	230c      	movs	r3, #12
 80098e0:	f04f 30ff 	mov.w	r0, #4294967295
 80098e4:	f8ca 3000 	str.w	r3, [sl]
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ee:	81a3      	strh	r3, [r4, #12]
 80098f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f4:	464a      	mov	r2, r9
 80098f6:	6921      	ldr	r1, [r4, #16]
 80098f8:	f7fc face 	bl	8005e98 <memcpy>
 80098fc:	89a3      	ldrh	r3, [r4, #12]
 80098fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009906:	81a3      	strh	r3, [r4, #12]
 8009908:	6126      	str	r6, [r4, #16]
 800990a:	444e      	add	r6, r9
 800990c:	6026      	str	r6, [r4, #0]
 800990e:	463e      	mov	r6, r7
 8009910:	6165      	str	r5, [r4, #20]
 8009912:	eba5 0509 	sub.w	r5, r5, r9
 8009916:	60a5      	str	r5, [r4, #8]
 8009918:	42be      	cmp	r6, r7
 800991a:	d900      	bls.n	800991e <__ssputs_r+0x86>
 800991c:	463e      	mov	r6, r7
 800991e:	4632      	mov	r2, r6
 8009920:	4641      	mov	r1, r8
 8009922:	6820      	ldr	r0, [r4, #0]
 8009924:	f000 f96f 	bl	8009c06 <memmove>
 8009928:	68a3      	ldr	r3, [r4, #8]
 800992a:	2000      	movs	r0, #0
 800992c:	1b9b      	subs	r3, r3, r6
 800992e:	60a3      	str	r3, [r4, #8]
 8009930:	6823      	ldr	r3, [r4, #0]
 8009932:	4433      	add	r3, r6
 8009934:	6023      	str	r3, [r4, #0]
 8009936:	e7db      	b.n	80098f0 <__ssputs_r+0x58>
 8009938:	462a      	mov	r2, r5
 800993a:	f000 f97e 	bl	8009c3a <_realloc_r>
 800993e:	4606      	mov	r6, r0
 8009940:	2800      	cmp	r0, #0
 8009942:	d1e1      	bne.n	8009908 <__ssputs_r+0x70>
 8009944:	4650      	mov	r0, sl
 8009946:	6921      	ldr	r1, [r4, #16]
 8009948:	f7fc fabc 	bl	8005ec4 <_free_r>
 800994c:	e7c7      	b.n	80098de <__ssputs_r+0x46>
	...

08009950 <_svfiprintf_r>:
 8009950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	4698      	mov	r8, r3
 8009956:	898b      	ldrh	r3, [r1, #12]
 8009958:	4607      	mov	r7, r0
 800995a:	061b      	lsls	r3, r3, #24
 800995c:	460d      	mov	r5, r1
 800995e:	4614      	mov	r4, r2
 8009960:	b09d      	sub	sp, #116	; 0x74
 8009962:	d50e      	bpl.n	8009982 <_svfiprintf_r+0x32>
 8009964:	690b      	ldr	r3, [r1, #16]
 8009966:	b963      	cbnz	r3, 8009982 <_svfiprintf_r+0x32>
 8009968:	2140      	movs	r1, #64	; 0x40
 800996a:	f7fc fb13 	bl	8005f94 <_malloc_r>
 800996e:	6028      	str	r0, [r5, #0]
 8009970:	6128      	str	r0, [r5, #16]
 8009972:	b920      	cbnz	r0, 800997e <_svfiprintf_r+0x2e>
 8009974:	230c      	movs	r3, #12
 8009976:	603b      	str	r3, [r7, #0]
 8009978:	f04f 30ff 	mov.w	r0, #4294967295
 800997c:	e0d1      	b.n	8009b22 <_svfiprintf_r+0x1d2>
 800997e:	2340      	movs	r3, #64	; 0x40
 8009980:	616b      	str	r3, [r5, #20]
 8009982:	2300      	movs	r3, #0
 8009984:	9309      	str	r3, [sp, #36]	; 0x24
 8009986:	2320      	movs	r3, #32
 8009988:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800998c:	2330      	movs	r3, #48	; 0x30
 800998e:	f04f 0901 	mov.w	r9, #1
 8009992:	f8cd 800c 	str.w	r8, [sp, #12]
 8009996:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009b3c <_svfiprintf_r+0x1ec>
 800999a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800999e:	4623      	mov	r3, r4
 80099a0:	469a      	mov	sl, r3
 80099a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099a6:	b10a      	cbz	r2, 80099ac <_svfiprintf_r+0x5c>
 80099a8:	2a25      	cmp	r2, #37	; 0x25
 80099aa:	d1f9      	bne.n	80099a0 <_svfiprintf_r+0x50>
 80099ac:	ebba 0b04 	subs.w	fp, sl, r4
 80099b0:	d00b      	beq.n	80099ca <_svfiprintf_r+0x7a>
 80099b2:	465b      	mov	r3, fp
 80099b4:	4622      	mov	r2, r4
 80099b6:	4629      	mov	r1, r5
 80099b8:	4638      	mov	r0, r7
 80099ba:	f7ff ff6d 	bl	8009898 <__ssputs_r>
 80099be:	3001      	adds	r0, #1
 80099c0:	f000 80aa 	beq.w	8009b18 <_svfiprintf_r+0x1c8>
 80099c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099c6:	445a      	add	r2, fp
 80099c8:	9209      	str	r2, [sp, #36]	; 0x24
 80099ca:	f89a 3000 	ldrb.w	r3, [sl]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f000 80a2 	beq.w	8009b18 <_svfiprintf_r+0x1c8>
 80099d4:	2300      	movs	r3, #0
 80099d6:	f04f 32ff 	mov.w	r2, #4294967295
 80099da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099de:	f10a 0a01 	add.w	sl, sl, #1
 80099e2:	9304      	str	r3, [sp, #16]
 80099e4:	9307      	str	r3, [sp, #28]
 80099e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099ea:	931a      	str	r3, [sp, #104]	; 0x68
 80099ec:	4654      	mov	r4, sl
 80099ee:	2205      	movs	r2, #5
 80099f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f4:	4851      	ldr	r0, [pc, #324]	; (8009b3c <_svfiprintf_r+0x1ec>)
 80099f6:	f7ff fa69 	bl	8008ecc <memchr>
 80099fa:	9a04      	ldr	r2, [sp, #16]
 80099fc:	b9d8      	cbnz	r0, 8009a36 <_svfiprintf_r+0xe6>
 80099fe:	06d0      	lsls	r0, r2, #27
 8009a00:	bf44      	itt	mi
 8009a02:	2320      	movmi	r3, #32
 8009a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a08:	0711      	lsls	r1, r2, #28
 8009a0a:	bf44      	itt	mi
 8009a0c:	232b      	movmi	r3, #43	; 0x2b
 8009a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a12:	f89a 3000 	ldrb.w	r3, [sl]
 8009a16:	2b2a      	cmp	r3, #42	; 0x2a
 8009a18:	d015      	beq.n	8009a46 <_svfiprintf_r+0xf6>
 8009a1a:	4654      	mov	r4, sl
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	f04f 0c0a 	mov.w	ip, #10
 8009a22:	9a07      	ldr	r2, [sp, #28]
 8009a24:	4621      	mov	r1, r4
 8009a26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a2a:	3b30      	subs	r3, #48	; 0x30
 8009a2c:	2b09      	cmp	r3, #9
 8009a2e:	d94e      	bls.n	8009ace <_svfiprintf_r+0x17e>
 8009a30:	b1b0      	cbz	r0, 8009a60 <_svfiprintf_r+0x110>
 8009a32:	9207      	str	r2, [sp, #28]
 8009a34:	e014      	b.n	8009a60 <_svfiprintf_r+0x110>
 8009a36:	eba0 0308 	sub.w	r3, r0, r8
 8009a3a:	fa09 f303 	lsl.w	r3, r9, r3
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	46a2      	mov	sl, r4
 8009a42:	9304      	str	r3, [sp, #16]
 8009a44:	e7d2      	b.n	80099ec <_svfiprintf_r+0x9c>
 8009a46:	9b03      	ldr	r3, [sp, #12]
 8009a48:	1d19      	adds	r1, r3, #4
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	9103      	str	r1, [sp, #12]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	bfbb      	ittet	lt
 8009a52:	425b      	neglt	r3, r3
 8009a54:	f042 0202 	orrlt.w	r2, r2, #2
 8009a58:	9307      	strge	r3, [sp, #28]
 8009a5a:	9307      	strlt	r3, [sp, #28]
 8009a5c:	bfb8      	it	lt
 8009a5e:	9204      	strlt	r2, [sp, #16]
 8009a60:	7823      	ldrb	r3, [r4, #0]
 8009a62:	2b2e      	cmp	r3, #46	; 0x2e
 8009a64:	d10c      	bne.n	8009a80 <_svfiprintf_r+0x130>
 8009a66:	7863      	ldrb	r3, [r4, #1]
 8009a68:	2b2a      	cmp	r3, #42	; 0x2a
 8009a6a:	d135      	bne.n	8009ad8 <_svfiprintf_r+0x188>
 8009a6c:	9b03      	ldr	r3, [sp, #12]
 8009a6e:	3402      	adds	r4, #2
 8009a70:	1d1a      	adds	r2, r3, #4
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	9203      	str	r2, [sp, #12]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	bfb8      	it	lt
 8009a7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a7e:	9305      	str	r3, [sp, #20]
 8009a80:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009b40 <_svfiprintf_r+0x1f0>
 8009a84:	2203      	movs	r2, #3
 8009a86:	4650      	mov	r0, sl
 8009a88:	7821      	ldrb	r1, [r4, #0]
 8009a8a:	f7ff fa1f 	bl	8008ecc <memchr>
 8009a8e:	b140      	cbz	r0, 8009aa2 <_svfiprintf_r+0x152>
 8009a90:	2340      	movs	r3, #64	; 0x40
 8009a92:	eba0 000a 	sub.w	r0, r0, sl
 8009a96:	fa03 f000 	lsl.w	r0, r3, r0
 8009a9a:	9b04      	ldr	r3, [sp, #16]
 8009a9c:	3401      	adds	r4, #1
 8009a9e:	4303      	orrs	r3, r0
 8009aa0:	9304      	str	r3, [sp, #16]
 8009aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa6:	2206      	movs	r2, #6
 8009aa8:	4826      	ldr	r0, [pc, #152]	; (8009b44 <_svfiprintf_r+0x1f4>)
 8009aaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009aae:	f7ff fa0d 	bl	8008ecc <memchr>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d038      	beq.n	8009b28 <_svfiprintf_r+0x1d8>
 8009ab6:	4b24      	ldr	r3, [pc, #144]	; (8009b48 <_svfiprintf_r+0x1f8>)
 8009ab8:	bb1b      	cbnz	r3, 8009b02 <_svfiprintf_r+0x1b2>
 8009aba:	9b03      	ldr	r3, [sp, #12]
 8009abc:	3307      	adds	r3, #7
 8009abe:	f023 0307 	bic.w	r3, r3, #7
 8009ac2:	3308      	adds	r3, #8
 8009ac4:	9303      	str	r3, [sp, #12]
 8009ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac8:	4433      	add	r3, r6
 8009aca:	9309      	str	r3, [sp, #36]	; 0x24
 8009acc:	e767      	b.n	800999e <_svfiprintf_r+0x4e>
 8009ace:	460c      	mov	r4, r1
 8009ad0:	2001      	movs	r0, #1
 8009ad2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ad6:	e7a5      	b.n	8009a24 <_svfiprintf_r+0xd4>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	f04f 0c0a 	mov.w	ip, #10
 8009ade:	4619      	mov	r1, r3
 8009ae0:	3401      	adds	r4, #1
 8009ae2:	9305      	str	r3, [sp, #20]
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009aea:	3a30      	subs	r2, #48	; 0x30
 8009aec:	2a09      	cmp	r2, #9
 8009aee:	d903      	bls.n	8009af8 <_svfiprintf_r+0x1a8>
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d0c5      	beq.n	8009a80 <_svfiprintf_r+0x130>
 8009af4:	9105      	str	r1, [sp, #20]
 8009af6:	e7c3      	b.n	8009a80 <_svfiprintf_r+0x130>
 8009af8:	4604      	mov	r4, r0
 8009afa:	2301      	movs	r3, #1
 8009afc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b00:	e7f0      	b.n	8009ae4 <_svfiprintf_r+0x194>
 8009b02:	ab03      	add	r3, sp, #12
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	462a      	mov	r2, r5
 8009b08:	4638      	mov	r0, r7
 8009b0a:	4b10      	ldr	r3, [pc, #64]	; (8009b4c <_svfiprintf_r+0x1fc>)
 8009b0c:	a904      	add	r1, sp, #16
 8009b0e:	f7fc fb53 	bl	80061b8 <_printf_float>
 8009b12:	1c42      	adds	r2, r0, #1
 8009b14:	4606      	mov	r6, r0
 8009b16:	d1d6      	bne.n	8009ac6 <_svfiprintf_r+0x176>
 8009b18:	89ab      	ldrh	r3, [r5, #12]
 8009b1a:	065b      	lsls	r3, r3, #25
 8009b1c:	f53f af2c 	bmi.w	8009978 <_svfiprintf_r+0x28>
 8009b20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b22:	b01d      	add	sp, #116	; 0x74
 8009b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b28:	ab03      	add	r3, sp, #12
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	462a      	mov	r2, r5
 8009b2e:	4638      	mov	r0, r7
 8009b30:	4b06      	ldr	r3, [pc, #24]	; (8009b4c <_svfiprintf_r+0x1fc>)
 8009b32:	a904      	add	r1, sp, #16
 8009b34:	f7fc fddc 	bl	80066f0 <_printf_i>
 8009b38:	e7eb      	b.n	8009b12 <_svfiprintf_r+0x1c2>
 8009b3a:	bf00      	nop
 8009b3c:	0800ad2c 	.word	0x0800ad2c
 8009b40:	0800ad32 	.word	0x0800ad32
 8009b44:	0800ad36 	.word	0x0800ad36
 8009b48:	080061b9 	.word	0x080061b9
 8009b4c:	08009899 	.word	0x08009899

08009b50 <nan>:
 8009b50:	2000      	movs	r0, #0
 8009b52:	4901      	ldr	r1, [pc, #4]	; (8009b58 <nan+0x8>)
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	7ff80000 	.word	0x7ff80000

08009b5c <strncmp>:
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	b510      	push	{r4, lr}
 8009b60:	b172      	cbz	r2, 8009b80 <strncmp+0x24>
 8009b62:	3901      	subs	r1, #1
 8009b64:	1884      	adds	r4, r0, r2
 8009b66:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b6a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009b6e:	4290      	cmp	r0, r2
 8009b70:	d101      	bne.n	8009b76 <strncmp+0x1a>
 8009b72:	42a3      	cmp	r3, r4
 8009b74:	d101      	bne.n	8009b7a <strncmp+0x1e>
 8009b76:	1a80      	subs	r0, r0, r2
 8009b78:	bd10      	pop	{r4, pc}
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d1f3      	bne.n	8009b66 <strncmp+0xa>
 8009b7e:	e7fa      	b.n	8009b76 <strncmp+0x1a>
 8009b80:	4610      	mov	r0, r2
 8009b82:	e7f9      	b.n	8009b78 <strncmp+0x1c>

08009b84 <__ascii_wctomb>:
 8009b84:	4603      	mov	r3, r0
 8009b86:	4608      	mov	r0, r1
 8009b88:	b141      	cbz	r1, 8009b9c <__ascii_wctomb+0x18>
 8009b8a:	2aff      	cmp	r2, #255	; 0xff
 8009b8c:	d904      	bls.n	8009b98 <__ascii_wctomb+0x14>
 8009b8e:	228a      	movs	r2, #138	; 0x8a
 8009b90:	f04f 30ff 	mov.w	r0, #4294967295
 8009b94:	601a      	str	r2, [r3, #0]
 8009b96:	4770      	bx	lr
 8009b98:	2001      	movs	r0, #1
 8009b9a:	700a      	strb	r2, [r1, #0]
 8009b9c:	4770      	bx	lr
	...

08009ba0 <__assert_func>:
 8009ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ba2:	4614      	mov	r4, r2
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	4b09      	ldr	r3, [pc, #36]	; (8009bcc <__assert_func+0x2c>)
 8009ba8:	4605      	mov	r5, r0
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68d8      	ldr	r0, [r3, #12]
 8009bae:	b14c      	cbz	r4, 8009bc4 <__assert_func+0x24>
 8009bb0:	4b07      	ldr	r3, [pc, #28]	; (8009bd0 <__assert_func+0x30>)
 8009bb2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009bb6:	9100      	str	r1, [sp, #0]
 8009bb8:	462b      	mov	r3, r5
 8009bba:	4906      	ldr	r1, [pc, #24]	; (8009bd4 <__assert_func+0x34>)
 8009bbc:	f000 f80e 	bl	8009bdc <fiprintf>
 8009bc0:	f000 fa82 	bl	800a0c8 <abort>
 8009bc4:	4b04      	ldr	r3, [pc, #16]	; (8009bd8 <__assert_func+0x38>)
 8009bc6:	461c      	mov	r4, r3
 8009bc8:	e7f3      	b.n	8009bb2 <__assert_func+0x12>
 8009bca:	bf00      	nop
 8009bcc:	20000014 	.word	0x20000014
 8009bd0:	0800ad3d 	.word	0x0800ad3d
 8009bd4:	0800ad4a 	.word	0x0800ad4a
 8009bd8:	0800ad78 	.word	0x0800ad78

08009bdc <fiprintf>:
 8009bdc:	b40e      	push	{r1, r2, r3}
 8009bde:	b503      	push	{r0, r1, lr}
 8009be0:	4601      	mov	r1, r0
 8009be2:	ab03      	add	r3, sp, #12
 8009be4:	4805      	ldr	r0, [pc, #20]	; (8009bfc <fiprintf+0x20>)
 8009be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bea:	6800      	ldr	r0, [r0, #0]
 8009bec:	9301      	str	r3, [sp, #4]
 8009bee:	f000 f87b 	bl	8009ce8 <_vfiprintf_r>
 8009bf2:	b002      	add	sp, #8
 8009bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bf8:	b003      	add	sp, #12
 8009bfa:	4770      	bx	lr
 8009bfc:	20000014 	.word	0x20000014

08009c00 <__retarget_lock_init_recursive>:
 8009c00:	4770      	bx	lr

08009c02 <__retarget_lock_acquire_recursive>:
 8009c02:	4770      	bx	lr

08009c04 <__retarget_lock_release_recursive>:
 8009c04:	4770      	bx	lr

08009c06 <memmove>:
 8009c06:	4288      	cmp	r0, r1
 8009c08:	b510      	push	{r4, lr}
 8009c0a:	eb01 0402 	add.w	r4, r1, r2
 8009c0e:	d902      	bls.n	8009c16 <memmove+0x10>
 8009c10:	4284      	cmp	r4, r0
 8009c12:	4623      	mov	r3, r4
 8009c14:	d807      	bhi.n	8009c26 <memmove+0x20>
 8009c16:	1e43      	subs	r3, r0, #1
 8009c18:	42a1      	cmp	r1, r4
 8009c1a:	d008      	beq.n	8009c2e <memmove+0x28>
 8009c1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c20:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c24:	e7f8      	b.n	8009c18 <memmove+0x12>
 8009c26:	4601      	mov	r1, r0
 8009c28:	4402      	add	r2, r0
 8009c2a:	428a      	cmp	r2, r1
 8009c2c:	d100      	bne.n	8009c30 <memmove+0x2a>
 8009c2e:	bd10      	pop	{r4, pc}
 8009c30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c38:	e7f7      	b.n	8009c2a <memmove+0x24>

08009c3a <_realloc_r>:
 8009c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c3e:	4680      	mov	r8, r0
 8009c40:	4614      	mov	r4, r2
 8009c42:	460e      	mov	r6, r1
 8009c44:	b921      	cbnz	r1, 8009c50 <_realloc_r+0x16>
 8009c46:	4611      	mov	r1, r2
 8009c48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c4c:	f7fc b9a2 	b.w	8005f94 <_malloc_r>
 8009c50:	b92a      	cbnz	r2, 8009c5e <_realloc_r+0x24>
 8009c52:	f7fc f937 	bl	8005ec4 <_free_r>
 8009c56:	4625      	mov	r5, r4
 8009c58:	4628      	mov	r0, r5
 8009c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c5e:	f000 fc53 	bl	800a508 <_malloc_usable_size_r>
 8009c62:	4284      	cmp	r4, r0
 8009c64:	4607      	mov	r7, r0
 8009c66:	d802      	bhi.n	8009c6e <_realloc_r+0x34>
 8009c68:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c6c:	d812      	bhi.n	8009c94 <_realloc_r+0x5a>
 8009c6e:	4621      	mov	r1, r4
 8009c70:	4640      	mov	r0, r8
 8009c72:	f7fc f98f 	bl	8005f94 <_malloc_r>
 8009c76:	4605      	mov	r5, r0
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	d0ed      	beq.n	8009c58 <_realloc_r+0x1e>
 8009c7c:	42bc      	cmp	r4, r7
 8009c7e:	4622      	mov	r2, r4
 8009c80:	4631      	mov	r1, r6
 8009c82:	bf28      	it	cs
 8009c84:	463a      	movcs	r2, r7
 8009c86:	f7fc f907 	bl	8005e98 <memcpy>
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	4640      	mov	r0, r8
 8009c8e:	f7fc f919 	bl	8005ec4 <_free_r>
 8009c92:	e7e1      	b.n	8009c58 <_realloc_r+0x1e>
 8009c94:	4635      	mov	r5, r6
 8009c96:	e7df      	b.n	8009c58 <_realloc_r+0x1e>

08009c98 <__sfputc_r>:
 8009c98:	6893      	ldr	r3, [r2, #8]
 8009c9a:	b410      	push	{r4}
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	6093      	str	r3, [r2, #8]
 8009ca2:	da07      	bge.n	8009cb4 <__sfputc_r+0x1c>
 8009ca4:	6994      	ldr	r4, [r2, #24]
 8009ca6:	42a3      	cmp	r3, r4
 8009ca8:	db01      	blt.n	8009cae <__sfputc_r+0x16>
 8009caa:	290a      	cmp	r1, #10
 8009cac:	d102      	bne.n	8009cb4 <__sfputc_r+0x1c>
 8009cae:	bc10      	pop	{r4}
 8009cb0:	f000 b94a 	b.w	8009f48 <__swbuf_r>
 8009cb4:	6813      	ldr	r3, [r2, #0]
 8009cb6:	1c58      	adds	r0, r3, #1
 8009cb8:	6010      	str	r0, [r2, #0]
 8009cba:	7019      	strb	r1, [r3, #0]
 8009cbc:	4608      	mov	r0, r1
 8009cbe:	bc10      	pop	{r4}
 8009cc0:	4770      	bx	lr

08009cc2 <__sfputs_r>:
 8009cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc4:	4606      	mov	r6, r0
 8009cc6:	460f      	mov	r7, r1
 8009cc8:	4614      	mov	r4, r2
 8009cca:	18d5      	adds	r5, r2, r3
 8009ccc:	42ac      	cmp	r4, r5
 8009cce:	d101      	bne.n	8009cd4 <__sfputs_r+0x12>
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	e007      	b.n	8009ce4 <__sfputs_r+0x22>
 8009cd4:	463a      	mov	r2, r7
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cdc:	f7ff ffdc 	bl	8009c98 <__sfputc_r>
 8009ce0:	1c43      	adds	r3, r0, #1
 8009ce2:	d1f3      	bne.n	8009ccc <__sfputs_r+0xa>
 8009ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ce8 <_vfiprintf_r>:
 8009ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cec:	460d      	mov	r5, r1
 8009cee:	4614      	mov	r4, r2
 8009cf0:	4698      	mov	r8, r3
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	b09d      	sub	sp, #116	; 0x74
 8009cf6:	b118      	cbz	r0, 8009d00 <_vfiprintf_r+0x18>
 8009cf8:	6983      	ldr	r3, [r0, #24]
 8009cfa:	b90b      	cbnz	r3, 8009d00 <_vfiprintf_r+0x18>
 8009cfc:	f000 fb02 	bl	800a304 <__sinit>
 8009d00:	4b89      	ldr	r3, [pc, #548]	; (8009f28 <_vfiprintf_r+0x240>)
 8009d02:	429d      	cmp	r5, r3
 8009d04:	d11b      	bne.n	8009d3e <_vfiprintf_r+0x56>
 8009d06:	6875      	ldr	r5, [r6, #4]
 8009d08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d0a:	07d9      	lsls	r1, r3, #31
 8009d0c:	d405      	bmi.n	8009d1a <_vfiprintf_r+0x32>
 8009d0e:	89ab      	ldrh	r3, [r5, #12]
 8009d10:	059a      	lsls	r2, r3, #22
 8009d12:	d402      	bmi.n	8009d1a <_vfiprintf_r+0x32>
 8009d14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d16:	f7ff ff74 	bl	8009c02 <__retarget_lock_acquire_recursive>
 8009d1a:	89ab      	ldrh	r3, [r5, #12]
 8009d1c:	071b      	lsls	r3, r3, #28
 8009d1e:	d501      	bpl.n	8009d24 <_vfiprintf_r+0x3c>
 8009d20:	692b      	ldr	r3, [r5, #16]
 8009d22:	b9eb      	cbnz	r3, 8009d60 <_vfiprintf_r+0x78>
 8009d24:	4629      	mov	r1, r5
 8009d26:	4630      	mov	r0, r6
 8009d28:	f000 f960 	bl	8009fec <__swsetup_r>
 8009d2c:	b1c0      	cbz	r0, 8009d60 <_vfiprintf_r+0x78>
 8009d2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d30:	07dc      	lsls	r4, r3, #31
 8009d32:	d50e      	bpl.n	8009d52 <_vfiprintf_r+0x6a>
 8009d34:	f04f 30ff 	mov.w	r0, #4294967295
 8009d38:	b01d      	add	sp, #116	; 0x74
 8009d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d3e:	4b7b      	ldr	r3, [pc, #492]	; (8009f2c <_vfiprintf_r+0x244>)
 8009d40:	429d      	cmp	r5, r3
 8009d42:	d101      	bne.n	8009d48 <_vfiprintf_r+0x60>
 8009d44:	68b5      	ldr	r5, [r6, #8]
 8009d46:	e7df      	b.n	8009d08 <_vfiprintf_r+0x20>
 8009d48:	4b79      	ldr	r3, [pc, #484]	; (8009f30 <_vfiprintf_r+0x248>)
 8009d4a:	429d      	cmp	r5, r3
 8009d4c:	bf08      	it	eq
 8009d4e:	68f5      	ldreq	r5, [r6, #12]
 8009d50:	e7da      	b.n	8009d08 <_vfiprintf_r+0x20>
 8009d52:	89ab      	ldrh	r3, [r5, #12]
 8009d54:	0598      	lsls	r0, r3, #22
 8009d56:	d4ed      	bmi.n	8009d34 <_vfiprintf_r+0x4c>
 8009d58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d5a:	f7ff ff53 	bl	8009c04 <__retarget_lock_release_recursive>
 8009d5e:	e7e9      	b.n	8009d34 <_vfiprintf_r+0x4c>
 8009d60:	2300      	movs	r3, #0
 8009d62:	9309      	str	r3, [sp, #36]	; 0x24
 8009d64:	2320      	movs	r3, #32
 8009d66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d6a:	2330      	movs	r3, #48	; 0x30
 8009d6c:	f04f 0901 	mov.w	r9, #1
 8009d70:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d74:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009f34 <_vfiprintf_r+0x24c>
 8009d78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d7c:	4623      	mov	r3, r4
 8009d7e:	469a      	mov	sl, r3
 8009d80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d84:	b10a      	cbz	r2, 8009d8a <_vfiprintf_r+0xa2>
 8009d86:	2a25      	cmp	r2, #37	; 0x25
 8009d88:	d1f9      	bne.n	8009d7e <_vfiprintf_r+0x96>
 8009d8a:	ebba 0b04 	subs.w	fp, sl, r4
 8009d8e:	d00b      	beq.n	8009da8 <_vfiprintf_r+0xc0>
 8009d90:	465b      	mov	r3, fp
 8009d92:	4622      	mov	r2, r4
 8009d94:	4629      	mov	r1, r5
 8009d96:	4630      	mov	r0, r6
 8009d98:	f7ff ff93 	bl	8009cc2 <__sfputs_r>
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	f000 80aa 	beq.w	8009ef6 <_vfiprintf_r+0x20e>
 8009da2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009da4:	445a      	add	r2, fp
 8009da6:	9209      	str	r2, [sp, #36]	; 0x24
 8009da8:	f89a 3000 	ldrb.w	r3, [sl]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f000 80a2 	beq.w	8009ef6 <_vfiprintf_r+0x20e>
 8009db2:	2300      	movs	r3, #0
 8009db4:	f04f 32ff 	mov.w	r2, #4294967295
 8009db8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dbc:	f10a 0a01 	add.w	sl, sl, #1
 8009dc0:	9304      	str	r3, [sp, #16]
 8009dc2:	9307      	str	r3, [sp, #28]
 8009dc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dc8:	931a      	str	r3, [sp, #104]	; 0x68
 8009dca:	4654      	mov	r4, sl
 8009dcc:	2205      	movs	r2, #5
 8009dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd2:	4858      	ldr	r0, [pc, #352]	; (8009f34 <_vfiprintf_r+0x24c>)
 8009dd4:	f7ff f87a 	bl	8008ecc <memchr>
 8009dd8:	9a04      	ldr	r2, [sp, #16]
 8009dda:	b9d8      	cbnz	r0, 8009e14 <_vfiprintf_r+0x12c>
 8009ddc:	06d1      	lsls	r1, r2, #27
 8009dde:	bf44      	itt	mi
 8009de0:	2320      	movmi	r3, #32
 8009de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009de6:	0713      	lsls	r3, r2, #28
 8009de8:	bf44      	itt	mi
 8009dea:	232b      	movmi	r3, #43	; 0x2b
 8009dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009df0:	f89a 3000 	ldrb.w	r3, [sl]
 8009df4:	2b2a      	cmp	r3, #42	; 0x2a
 8009df6:	d015      	beq.n	8009e24 <_vfiprintf_r+0x13c>
 8009df8:	4654      	mov	r4, sl
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	f04f 0c0a 	mov.w	ip, #10
 8009e00:	9a07      	ldr	r2, [sp, #28]
 8009e02:	4621      	mov	r1, r4
 8009e04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e08:	3b30      	subs	r3, #48	; 0x30
 8009e0a:	2b09      	cmp	r3, #9
 8009e0c:	d94e      	bls.n	8009eac <_vfiprintf_r+0x1c4>
 8009e0e:	b1b0      	cbz	r0, 8009e3e <_vfiprintf_r+0x156>
 8009e10:	9207      	str	r2, [sp, #28]
 8009e12:	e014      	b.n	8009e3e <_vfiprintf_r+0x156>
 8009e14:	eba0 0308 	sub.w	r3, r0, r8
 8009e18:	fa09 f303 	lsl.w	r3, r9, r3
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	46a2      	mov	sl, r4
 8009e20:	9304      	str	r3, [sp, #16]
 8009e22:	e7d2      	b.n	8009dca <_vfiprintf_r+0xe2>
 8009e24:	9b03      	ldr	r3, [sp, #12]
 8009e26:	1d19      	adds	r1, r3, #4
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	9103      	str	r1, [sp, #12]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	bfbb      	ittet	lt
 8009e30:	425b      	neglt	r3, r3
 8009e32:	f042 0202 	orrlt.w	r2, r2, #2
 8009e36:	9307      	strge	r3, [sp, #28]
 8009e38:	9307      	strlt	r3, [sp, #28]
 8009e3a:	bfb8      	it	lt
 8009e3c:	9204      	strlt	r2, [sp, #16]
 8009e3e:	7823      	ldrb	r3, [r4, #0]
 8009e40:	2b2e      	cmp	r3, #46	; 0x2e
 8009e42:	d10c      	bne.n	8009e5e <_vfiprintf_r+0x176>
 8009e44:	7863      	ldrb	r3, [r4, #1]
 8009e46:	2b2a      	cmp	r3, #42	; 0x2a
 8009e48:	d135      	bne.n	8009eb6 <_vfiprintf_r+0x1ce>
 8009e4a:	9b03      	ldr	r3, [sp, #12]
 8009e4c:	3402      	adds	r4, #2
 8009e4e:	1d1a      	adds	r2, r3, #4
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	9203      	str	r2, [sp, #12]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	bfb8      	it	lt
 8009e58:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e5c:	9305      	str	r3, [sp, #20]
 8009e5e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009f38 <_vfiprintf_r+0x250>
 8009e62:	2203      	movs	r2, #3
 8009e64:	4650      	mov	r0, sl
 8009e66:	7821      	ldrb	r1, [r4, #0]
 8009e68:	f7ff f830 	bl	8008ecc <memchr>
 8009e6c:	b140      	cbz	r0, 8009e80 <_vfiprintf_r+0x198>
 8009e6e:	2340      	movs	r3, #64	; 0x40
 8009e70:	eba0 000a 	sub.w	r0, r0, sl
 8009e74:	fa03 f000 	lsl.w	r0, r3, r0
 8009e78:	9b04      	ldr	r3, [sp, #16]
 8009e7a:	3401      	adds	r4, #1
 8009e7c:	4303      	orrs	r3, r0
 8009e7e:	9304      	str	r3, [sp, #16]
 8009e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e84:	2206      	movs	r2, #6
 8009e86:	482d      	ldr	r0, [pc, #180]	; (8009f3c <_vfiprintf_r+0x254>)
 8009e88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e8c:	f7ff f81e 	bl	8008ecc <memchr>
 8009e90:	2800      	cmp	r0, #0
 8009e92:	d03f      	beq.n	8009f14 <_vfiprintf_r+0x22c>
 8009e94:	4b2a      	ldr	r3, [pc, #168]	; (8009f40 <_vfiprintf_r+0x258>)
 8009e96:	bb1b      	cbnz	r3, 8009ee0 <_vfiprintf_r+0x1f8>
 8009e98:	9b03      	ldr	r3, [sp, #12]
 8009e9a:	3307      	adds	r3, #7
 8009e9c:	f023 0307 	bic.w	r3, r3, #7
 8009ea0:	3308      	adds	r3, #8
 8009ea2:	9303      	str	r3, [sp, #12]
 8009ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea6:	443b      	add	r3, r7
 8009ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8009eaa:	e767      	b.n	8009d7c <_vfiprintf_r+0x94>
 8009eac:	460c      	mov	r4, r1
 8009eae:	2001      	movs	r0, #1
 8009eb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eb4:	e7a5      	b.n	8009e02 <_vfiprintf_r+0x11a>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	f04f 0c0a 	mov.w	ip, #10
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	3401      	adds	r4, #1
 8009ec0:	9305      	str	r3, [sp, #20]
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ec8:	3a30      	subs	r2, #48	; 0x30
 8009eca:	2a09      	cmp	r2, #9
 8009ecc:	d903      	bls.n	8009ed6 <_vfiprintf_r+0x1ee>
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d0c5      	beq.n	8009e5e <_vfiprintf_r+0x176>
 8009ed2:	9105      	str	r1, [sp, #20]
 8009ed4:	e7c3      	b.n	8009e5e <_vfiprintf_r+0x176>
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	2301      	movs	r3, #1
 8009eda:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ede:	e7f0      	b.n	8009ec2 <_vfiprintf_r+0x1da>
 8009ee0:	ab03      	add	r3, sp, #12
 8009ee2:	9300      	str	r3, [sp, #0]
 8009ee4:	462a      	mov	r2, r5
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	4b16      	ldr	r3, [pc, #88]	; (8009f44 <_vfiprintf_r+0x25c>)
 8009eea:	a904      	add	r1, sp, #16
 8009eec:	f7fc f964 	bl	80061b8 <_printf_float>
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	1c78      	adds	r0, r7, #1
 8009ef4:	d1d6      	bne.n	8009ea4 <_vfiprintf_r+0x1bc>
 8009ef6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ef8:	07d9      	lsls	r1, r3, #31
 8009efa:	d405      	bmi.n	8009f08 <_vfiprintf_r+0x220>
 8009efc:	89ab      	ldrh	r3, [r5, #12]
 8009efe:	059a      	lsls	r2, r3, #22
 8009f00:	d402      	bmi.n	8009f08 <_vfiprintf_r+0x220>
 8009f02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f04:	f7ff fe7e 	bl	8009c04 <__retarget_lock_release_recursive>
 8009f08:	89ab      	ldrh	r3, [r5, #12]
 8009f0a:	065b      	lsls	r3, r3, #25
 8009f0c:	f53f af12 	bmi.w	8009d34 <_vfiprintf_r+0x4c>
 8009f10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f12:	e711      	b.n	8009d38 <_vfiprintf_r+0x50>
 8009f14:	ab03      	add	r3, sp, #12
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	462a      	mov	r2, r5
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	4b09      	ldr	r3, [pc, #36]	; (8009f44 <_vfiprintf_r+0x25c>)
 8009f1e:	a904      	add	r1, sp, #16
 8009f20:	f7fc fbe6 	bl	80066f0 <_printf_i>
 8009f24:	e7e4      	b.n	8009ef0 <_vfiprintf_r+0x208>
 8009f26:	bf00      	nop
 8009f28:	0800ad9c 	.word	0x0800ad9c
 8009f2c:	0800adbc 	.word	0x0800adbc
 8009f30:	0800ad7c 	.word	0x0800ad7c
 8009f34:	0800ad2c 	.word	0x0800ad2c
 8009f38:	0800ad32 	.word	0x0800ad32
 8009f3c:	0800ad36 	.word	0x0800ad36
 8009f40:	080061b9 	.word	0x080061b9
 8009f44:	08009cc3 	.word	0x08009cc3

08009f48 <__swbuf_r>:
 8009f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4a:	460e      	mov	r6, r1
 8009f4c:	4614      	mov	r4, r2
 8009f4e:	4605      	mov	r5, r0
 8009f50:	b118      	cbz	r0, 8009f5a <__swbuf_r+0x12>
 8009f52:	6983      	ldr	r3, [r0, #24]
 8009f54:	b90b      	cbnz	r3, 8009f5a <__swbuf_r+0x12>
 8009f56:	f000 f9d5 	bl	800a304 <__sinit>
 8009f5a:	4b21      	ldr	r3, [pc, #132]	; (8009fe0 <__swbuf_r+0x98>)
 8009f5c:	429c      	cmp	r4, r3
 8009f5e:	d12b      	bne.n	8009fb8 <__swbuf_r+0x70>
 8009f60:	686c      	ldr	r4, [r5, #4]
 8009f62:	69a3      	ldr	r3, [r4, #24]
 8009f64:	60a3      	str	r3, [r4, #8]
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	071a      	lsls	r2, r3, #28
 8009f6a:	d52f      	bpl.n	8009fcc <__swbuf_r+0x84>
 8009f6c:	6923      	ldr	r3, [r4, #16]
 8009f6e:	b36b      	cbz	r3, 8009fcc <__swbuf_r+0x84>
 8009f70:	6923      	ldr	r3, [r4, #16]
 8009f72:	6820      	ldr	r0, [r4, #0]
 8009f74:	b2f6      	uxtb	r6, r6
 8009f76:	1ac0      	subs	r0, r0, r3
 8009f78:	6963      	ldr	r3, [r4, #20]
 8009f7a:	4637      	mov	r7, r6
 8009f7c:	4283      	cmp	r3, r0
 8009f7e:	dc04      	bgt.n	8009f8a <__swbuf_r+0x42>
 8009f80:	4621      	mov	r1, r4
 8009f82:	4628      	mov	r0, r5
 8009f84:	f000 f92a 	bl	800a1dc <_fflush_r>
 8009f88:	bb30      	cbnz	r0, 8009fd8 <__swbuf_r+0x90>
 8009f8a:	68a3      	ldr	r3, [r4, #8]
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	60a3      	str	r3, [r4, #8]
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	1c5a      	adds	r2, r3, #1
 8009f96:	6022      	str	r2, [r4, #0]
 8009f98:	701e      	strb	r6, [r3, #0]
 8009f9a:	6963      	ldr	r3, [r4, #20]
 8009f9c:	4283      	cmp	r3, r0
 8009f9e:	d004      	beq.n	8009faa <__swbuf_r+0x62>
 8009fa0:	89a3      	ldrh	r3, [r4, #12]
 8009fa2:	07db      	lsls	r3, r3, #31
 8009fa4:	d506      	bpl.n	8009fb4 <__swbuf_r+0x6c>
 8009fa6:	2e0a      	cmp	r6, #10
 8009fa8:	d104      	bne.n	8009fb4 <__swbuf_r+0x6c>
 8009faa:	4621      	mov	r1, r4
 8009fac:	4628      	mov	r0, r5
 8009fae:	f000 f915 	bl	800a1dc <_fflush_r>
 8009fb2:	b988      	cbnz	r0, 8009fd8 <__swbuf_r+0x90>
 8009fb4:	4638      	mov	r0, r7
 8009fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fb8:	4b0a      	ldr	r3, [pc, #40]	; (8009fe4 <__swbuf_r+0x9c>)
 8009fba:	429c      	cmp	r4, r3
 8009fbc:	d101      	bne.n	8009fc2 <__swbuf_r+0x7a>
 8009fbe:	68ac      	ldr	r4, [r5, #8]
 8009fc0:	e7cf      	b.n	8009f62 <__swbuf_r+0x1a>
 8009fc2:	4b09      	ldr	r3, [pc, #36]	; (8009fe8 <__swbuf_r+0xa0>)
 8009fc4:	429c      	cmp	r4, r3
 8009fc6:	bf08      	it	eq
 8009fc8:	68ec      	ldreq	r4, [r5, #12]
 8009fca:	e7ca      	b.n	8009f62 <__swbuf_r+0x1a>
 8009fcc:	4621      	mov	r1, r4
 8009fce:	4628      	mov	r0, r5
 8009fd0:	f000 f80c 	bl	8009fec <__swsetup_r>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d0cb      	beq.n	8009f70 <__swbuf_r+0x28>
 8009fd8:	f04f 37ff 	mov.w	r7, #4294967295
 8009fdc:	e7ea      	b.n	8009fb4 <__swbuf_r+0x6c>
 8009fde:	bf00      	nop
 8009fe0:	0800ad9c 	.word	0x0800ad9c
 8009fe4:	0800adbc 	.word	0x0800adbc
 8009fe8:	0800ad7c 	.word	0x0800ad7c

08009fec <__swsetup_r>:
 8009fec:	4b32      	ldr	r3, [pc, #200]	; (800a0b8 <__swsetup_r+0xcc>)
 8009fee:	b570      	push	{r4, r5, r6, lr}
 8009ff0:	681d      	ldr	r5, [r3, #0]
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	460c      	mov	r4, r1
 8009ff6:	b125      	cbz	r5, 800a002 <__swsetup_r+0x16>
 8009ff8:	69ab      	ldr	r3, [r5, #24]
 8009ffa:	b913      	cbnz	r3, 800a002 <__swsetup_r+0x16>
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	f000 f981 	bl	800a304 <__sinit>
 800a002:	4b2e      	ldr	r3, [pc, #184]	; (800a0bc <__swsetup_r+0xd0>)
 800a004:	429c      	cmp	r4, r3
 800a006:	d10f      	bne.n	800a028 <__swsetup_r+0x3c>
 800a008:	686c      	ldr	r4, [r5, #4]
 800a00a:	89a3      	ldrh	r3, [r4, #12]
 800a00c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a010:	0719      	lsls	r1, r3, #28
 800a012:	d42c      	bmi.n	800a06e <__swsetup_r+0x82>
 800a014:	06dd      	lsls	r5, r3, #27
 800a016:	d411      	bmi.n	800a03c <__swsetup_r+0x50>
 800a018:	2309      	movs	r3, #9
 800a01a:	6033      	str	r3, [r6, #0]
 800a01c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a020:	f04f 30ff 	mov.w	r0, #4294967295
 800a024:	81a3      	strh	r3, [r4, #12]
 800a026:	e03e      	b.n	800a0a6 <__swsetup_r+0xba>
 800a028:	4b25      	ldr	r3, [pc, #148]	; (800a0c0 <__swsetup_r+0xd4>)
 800a02a:	429c      	cmp	r4, r3
 800a02c:	d101      	bne.n	800a032 <__swsetup_r+0x46>
 800a02e:	68ac      	ldr	r4, [r5, #8]
 800a030:	e7eb      	b.n	800a00a <__swsetup_r+0x1e>
 800a032:	4b24      	ldr	r3, [pc, #144]	; (800a0c4 <__swsetup_r+0xd8>)
 800a034:	429c      	cmp	r4, r3
 800a036:	bf08      	it	eq
 800a038:	68ec      	ldreq	r4, [r5, #12]
 800a03a:	e7e6      	b.n	800a00a <__swsetup_r+0x1e>
 800a03c:	0758      	lsls	r0, r3, #29
 800a03e:	d512      	bpl.n	800a066 <__swsetup_r+0x7a>
 800a040:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a042:	b141      	cbz	r1, 800a056 <__swsetup_r+0x6a>
 800a044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a048:	4299      	cmp	r1, r3
 800a04a:	d002      	beq.n	800a052 <__swsetup_r+0x66>
 800a04c:	4630      	mov	r0, r6
 800a04e:	f7fb ff39 	bl	8005ec4 <_free_r>
 800a052:	2300      	movs	r3, #0
 800a054:	6363      	str	r3, [r4, #52]	; 0x34
 800a056:	89a3      	ldrh	r3, [r4, #12]
 800a058:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a05c:	81a3      	strh	r3, [r4, #12]
 800a05e:	2300      	movs	r3, #0
 800a060:	6063      	str	r3, [r4, #4]
 800a062:	6923      	ldr	r3, [r4, #16]
 800a064:	6023      	str	r3, [r4, #0]
 800a066:	89a3      	ldrh	r3, [r4, #12]
 800a068:	f043 0308 	orr.w	r3, r3, #8
 800a06c:	81a3      	strh	r3, [r4, #12]
 800a06e:	6923      	ldr	r3, [r4, #16]
 800a070:	b94b      	cbnz	r3, 800a086 <__swsetup_r+0x9a>
 800a072:	89a3      	ldrh	r3, [r4, #12]
 800a074:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a07c:	d003      	beq.n	800a086 <__swsetup_r+0x9a>
 800a07e:	4621      	mov	r1, r4
 800a080:	4630      	mov	r0, r6
 800a082:	f000 fa01 	bl	800a488 <__smakebuf_r>
 800a086:	89a0      	ldrh	r0, [r4, #12]
 800a088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a08c:	f010 0301 	ands.w	r3, r0, #1
 800a090:	d00a      	beq.n	800a0a8 <__swsetup_r+0xbc>
 800a092:	2300      	movs	r3, #0
 800a094:	60a3      	str	r3, [r4, #8]
 800a096:	6963      	ldr	r3, [r4, #20]
 800a098:	425b      	negs	r3, r3
 800a09a:	61a3      	str	r3, [r4, #24]
 800a09c:	6923      	ldr	r3, [r4, #16]
 800a09e:	b943      	cbnz	r3, 800a0b2 <__swsetup_r+0xc6>
 800a0a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0a4:	d1ba      	bne.n	800a01c <__swsetup_r+0x30>
 800a0a6:	bd70      	pop	{r4, r5, r6, pc}
 800a0a8:	0781      	lsls	r1, r0, #30
 800a0aa:	bf58      	it	pl
 800a0ac:	6963      	ldrpl	r3, [r4, #20]
 800a0ae:	60a3      	str	r3, [r4, #8]
 800a0b0:	e7f4      	b.n	800a09c <__swsetup_r+0xb0>
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	e7f7      	b.n	800a0a6 <__swsetup_r+0xba>
 800a0b6:	bf00      	nop
 800a0b8:	20000014 	.word	0x20000014
 800a0bc:	0800ad9c 	.word	0x0800ad9c
 800a0c0:	0800adbc 	.word	0x0800adbc
 800a0c4:	0800ad7c 	.word	0x0800ad7c

0800a0c8 <abort>:
 800a0c8:	2006      	movs	r0, #6
 800a0ca:	b508      	push	{r3, lr}
 800a0cc:	f000 fa4c 	bl	800a568 <raise>
 800a0d0:	2001      	movs	r0, #1
 800a0d2:	f7f8 fb56 	bl	8002782 <_exit>
	...

0800a0d8 <__sflush_r>:
 800a0d8:	898a      	ldrh	r2, [r1, #12]
 800a0da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0dc:	4605      	mov	r5, r0
 800a0de:	0710      	lsls	r0, r2, #28
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	d457      	bmi.n	800a194 <__sflush_r+0xbc>
 800a0e4:	684b      	ldr	r3, [r1, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	dc04      	bgt.n	800a0f4 <__sflush_r+0x1c>
 800a0ea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	dc01      	bgt.n	800a0f4 <__sflush_r+0x1c>
 800a0f0:	2000      	movs	r0, #0
 800a0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0f6:	2e00      	cmp	r6, #0
 800a0f8:	d0fa      	beq.n	800a0f0 <__sflush_r+0x18>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a100:	682f      	ldr	r7, [r5, #0]
 800a102:	602b      	str	r3, [r5, #0]
 800a104:	d032      	beq.n	800a16c <__sflush_r+0x94>
 800a106:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a108:	89a3      	ldrh	r3, [r4, #12]
 800a10a:	075a      	lsls	r2, r3, #29
 800a10c:	d505      	bpl.n	800a11a <__sflush_r+0x42>
 800a10e:	6863      	ldr	r3, [r4, #4]
 800a110:	1ac0      	subs	r0, r0, r3
 800a112:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a114:	b10b      	cbz	r3, 800a11a <__sflush_r+0x42>
 800a116:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a118:	1ac0      	subs	r0, r0, r3
 800a11a:	2300      	movs	r3, #0
 800a11c:	4602      	mov	r2, r0
 800a11e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a120:	4628      	mov	r0, r5
 800a122:	6a21      	ldr	r1, [r4, #32]
 800a124:	47b0      	blx	r6
 800a126:	1c43      	adds	r3, r0, #1
 800a128:	89a3      	ldrh	r3, [r4, #12]
 800a12a:	d106      	bne.n	800a13a <__sflush_r+0x62>
 800a12c:	6829      	ldr	r1, [r5, #0]
 800a12e:	291d      	cmp	r1, #29
 800a130:	d82c      	bhi.n	800a18c <__sflush_r+0xb4>
 800a132:	4a29      	ldr	r2, [pc, #164]	; (800a1d8 <__sflush_r+0x100>)
 800a134:	40ca      	lsrs	r2, r1
 800a136:	07d6      	lsls	r6, r2, #31
 800a138:	d528      	bpl.n	800a18c <__sflush_r+0xb4>
 800a13a:	2200      	movs	r2, #0
 800a13c:	6062      	str	r2, [r4, #4]
 800a13e:	6922      	ldr	r2, [r4, #16]
 800a140:	04d9      	lsls	r1, r3, #19
 800a142:	6022      	str	r2, [r4, #0]
 800a144:	d504      	bpl.n	800a150 <__sflush_r+0x78>
 800a146:	1c42      	adds	r2, r0, #1
 800a148:	d101      	bne.n	800a14e <__sflush_r+0x76>
 800a14a:	682b      	ldr	r3, [r5, #0]
 800a14c:	b903      	cbnz	r3, 800a150 <__sflush_r+0x78>
 800a14e:	6560      	str	r0, [r4, #84]	; 0x54
 800a150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a152:	602f      	str	r7, [r5, #0]
 800a154:	2900      	cmp	r1, #0
 800a156:	d0cb      	beq.n	800a0f0 <__sflush_r+0x18>
 800a158:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a15c:	4299      	cmp	r1, r3
 800a15e:	d002      	beq.n	800a166 <__sflush_r+0x8e>
 800a160:	4628      	mov	r0, r5
 800a162:	f7fb feaf 	bl	8005ec4 <_free_r>
 800a166:	2000      	movs	r0, #0
 800a168:	6360      	str	r0, [r4, #52]	; 0x34
 800a16a:	e7c2      	b.n	800a0f2 <__sflush_r+0x1a>
 800a16c:	6a21      	ldr	r1, [r4, #32]
 800a16e:	2301      	movs	r3, #1
 800a170:	4628      	mov	r0, r5
 800a172:	47b0      	blx	r6
 800a174:	1c41      	adds	r1, r0, #1
 800a176:	d1c7      	bne.n	800a108 <__sflush_r+0x30>
 800a178:	682b      	ldr	r3, [r5, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d0c4      	beq.n	800a108 <__sflush_r+0x30>
 800a17e:	2b1d      	cmp	r3, #29
 800a180:	d001      	beq.n	800a186 <__sflush_r+0xae>
 800a182:	2b16      	cmp	r3, #22
 800a184:	d101      	bne.n	800a18a <__sflush_r+0xb2>
 800a186:	602f      	str	r7, [r5, #0]
 800a188:	e7b2      	b.n	800a0f0 <__sflush_r+0x18>
 800a18a:	89a3      	ldrh	r3, [r4, #12]
 800a18c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a190:	81a3      	strh	r3, [r4, #12]
 800a192:	e7ae      	b.n	800a0f2 <__sflush_r+0x1a>
 800a194:	690f      	ldr	r7, [r1, #16]
 800a196:	2f00      	cmp	r7, #0
 800a198:	d0aa      	beq.n	800a0f0 <__sflush_r+0x18>
 800a19a:	0793      	lsls	r3, r2, #30
 800a19c:	bf18      	it	ne
 800a19e:	2300      	movne	r3, #0
 800a1a0:	680e      	ldr	r6, [r1, #0]
 800a1a2:	bf08      	it	eq
 800a1a4:	694b      	ldreq	r3, [r1, #20]
 800a1a6:	1bf6      	subs	r6, r6, r7
 800a1a8:	600f      	str	r7, [r1, #0]
 800a1aa:	608b      	str	r3, [r1, #8]
 800a1ac:	2e00      	cmp	r6, #0
 800a1ae:	dd9f      	ble.n	800a0f0 <__sflush_r+0x18>
 800a1b0:	4633      	mov	r3, r6
 800a1b2:	463a      	mov	r2, r7
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	6a21      	ldr	r1, [r4, #32]
 800a1b8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a1bc:	47e0      	blx	ip
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	dc06      	bgt.n	800a1d0 <__sflush_r+0xf8>
 800a1c2:	89a3      	ldrh	r3, [r4, #12]
 800a1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1cc:	81a3      	strh	r3, [r4, #12]
 800a1ce:	e790      	b.n	800a0f2 <__sflush_r+0x1a>
 800a1d0:	4407      	add	r7, r0
 800a1d2:	1a36      	subs	r6, r6, r0
 800a1d4:	e7ea      	b.n	800a1ac <__sflush_r+0xd4>
 800a1d6:	bf00      	nop
 800a1d8:	20400001 	.word	0x20400001

0800a1dc <_fflush_r>:
 800a1dc:	b538      	push	{r3, r4, r5, lr}
 800a1de:	690b      	ldr	r3, [r1, #16]
 800a1e0:	4605      	mov	r5, r0
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	b913      	cbnz	r3, 800a1ec <_fflush_r+0x10>
 800a1e6:	2500      	movs	r5, #0
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	bd38      	pop	{r3, r4, r5, pc}
 800a1ec:	b118      	cbz	r0, 800a1f6 <_fflush_r+0x1a>
 800a1ee:	6983      	ldr	r3, [r0, #24]
 800a1f0:	b90b      	cbnz	r3, 800a1f6 <_fflush_r+0x1a>
 800a1f2:	f000 f887 	bl	800a304 <__sinit>
 800a1f6:	4b14      	ldr	r3, [pc, #80]	; (800a248 <_fflush_r+0x6c>)
 800a1f8:	429c      	cmp	r4, r3
 800a1fa:	d11b      	bne.n	800a234 <_fflush_r+0x58>
 800a1fc:	686c      	ldr	r4, [r5, #4]
 800a1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d0ef      	beq.n	800a1e6 <_fflush_r+0xa>
 800a206:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a208:	07d0      	lsls	r0, r2, #31
 800a20a:	d404      	bmi.n	800a216 <_fflush_r+0x3a>
 800a20c:	0599      	lsls	r1, r3, #22
 800a20e:	d402      	bmi.n	800a216 <_fflush_r+0x3a>
 800a210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a212:	f7ff fcf6 	bl	8009c02 <__retarget_lock_acquire_recursive>
 800a216:	4628      	mov	r0, r5
 800a218:	4621      	mov	r1, r4
 800a21a:	f7ff ff5d 	bl	800a0d8 <__sflush_r>
 800a21e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a220:	4605      	mov	r5, r0
 800a222:	07da      	lsls	r2, r3, #31
 800a224:	d4e0      	bmi.n	800a1e8 <_fflush_r+0xc>
 800a226:	89a3      	ldrh	r3, [r4, #12]
 800a228:	059b      	lsls	r3, r3, #22
 800a22a:	d4dd      	bmi.n	800a1e8 <_fflush_r+0xc>
 800a22c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a22e:	f7ff fce9 	bl	8009c04 <__retarget_lock_release_recursive>
 800a232:	e7d9      	b.n	800a1e8 <_fflush_r+0xc>
 800a234:	4b05      	ldr	r3, [pc, #20]	; (800a24c <_fflush_r+0x70>)
 800a236:	429c      	cmp	r4, r3
 800a238:	d101      	bne.n	800a23e <_fflush_r+0x62>
 800a23a:	68ac      	ldr	r4, [r5, #8]
 800a23c:	e7df      	b.n	800a1fe <_fflush_r+0x22>
 800a23e:	4b04      	ldr	r3, [pc, #16]	; (800a250 <_fflush_r+0x74>)
 800a240:	429c      	cmp	r4, r3
 800a242:	bf08      	it	eq
 800a244:	68ec      	ldreq	r4, [r5, #12]
 800a246:	e7da      	b.n	800a1fe <_fflush_r+0x22>
 800a248:	0800ad9c 	.word	0x0800ad9c
 800a24c:	0800adbc 	.word	0x0800adbc
 800a250:	0800ad7c 	.word	0x0800ad7c

0800a254 <std>:
 800a254:	2300      	movs	r3, #0
 800a256:	b510      	push	{r4, lr}
 800a258:	4604      	mov	r4, r0
 800a25a:	e9c0 3300 	strd	r3, r3, [r0]
 800a25e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a262:	6083      	str	r3, [r0, #8]
 800a264:	8181      	strh	r1, [r0, #12]
 800a266:	6643      	str	r3, [r0, #100]	; 0x64
 800a268:	81c2      	strh	r2, [r0, #14]
 800a26a:	6183      	str	r3, [r0, #24]
 800a26c:	4619      	mov	r1, r3
 800a26e:	2208      	movs	r2, #8
 800a270:	305c      	adds	r0, #92	; 0x5c
 800a272:	f7fb fe1f 	bl	8005eb4 <memset>
 800a276:	4b05      	ldr	r3, [pc, #20]	; (800a28c <std+0x38>)
 800a278:	6224      	str	r4, [r4, #32]
 800a27a:	6263      	str	r3, [r4, #36]	; 0x24
 800a27c:	4b04      	ldr	r3, [pc, #16]	; (800a290 <std+0x3c>)
 800a27e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a280:	4b04      	ldr	r3, [pc, #16]	; (800a294 <std+0x40>)
 800a282:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a284:	4b04      	ldr	r3, [pc, #16]	; (800a298 <std+0x44>)
 800a286:	6323      	str	r3, [r4, #48]	; 0x30
 800a288:	bd10      	pop	{r4, pc}
 800a28a:	bf00      	nop
 800a28c:	0800a5a1 	.word	0x0800a5a1
 800a290:	0800a5c3 	.word	0x0800a5c3
 800a294:	0800a5fb 	.word	0x0800a5fb
 800a298:	0800a61f 	.word	0x0800a61f

0800a29c <_cleanup_r>:
 800a29c:	4901      	ldr	r1, [pc, #4]	; (800a2a4 <_cleanup_r+0x8>)
 800a29e:	f000 b8af 	b.w	800a400 <_fwalk_reent>
 800a2a2:	bf00      	nop
 800a2a4:	0800a1dd 	.word	0x0800a1dd

0800a2a8 <__sfmoreglue>:
 800a2a8:	2268      	movs	r2, #104	; 0x68
 800a2aa:	b570      	push	{r4, r5, r6, lr}
 800a2ac:	1e4d      	subs	r5, r1, #1
 800a2ae:	4355      	muls	r5, r2
 800a2b0:	460e      	mov	r6, r1
 800a2b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a2b6:	f7fb fe6d 	bl	8005f94 <_malloc_r>
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	b140      	cbz	r0, 800a2d0 <__sfmoreglue+0x28>
 800a2be:	2100      	movs	r1, #0
 800a2c0:	e9c0 1600 	strd	r1, r6, [r0]
 800a2c4:	300c      	adds	r0, #12
 800a2c6:	60a0      	str	r0, [r4, #8]
 800a2c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a2cc:	f7fb fdf2 	bl	8005eb4 <memset>
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	bd70      	pop	{r4, r5, r6, pc}

0800a2d4 <__sfp_lock_acquire>:
 800a2d4:	4801      	ldr	r0, [pc, #4]	; (800a2dc <__sfp_lock_acquire+0x8>)
 800a2d6:	f7ff bc94 	b.w	8009c02 <__retarget_lock_acquire_recursive>
 800a2da:	bf00      	nop
 800a2dc:	200004fd 	.word	0x200004fd

0800a2e0 <__sfp_lock_release>:
 800a2e0:	4801      	ldr	r0, [pc, #4]	; (800a2e8 <__sfp_lock_release+0x8>)
 800a2e2:	f7ff bc8f 	b.w	8009c04 <__retarget_lock_release_recursive>
 800a2e6:	bf00      	nop
 800a2e8:	200004fd 	.word	0x200004fd

0800a2ec <__sinit_lock_acquire>:
 800a2ec:	4801      	ldr	r0, [pc, #4]	; (800a2f4 <__sinit_lock_acquire+0x8>)
 800a2ee:	f7ff bc88 	b.w	8009c02 <__retarget_lock_acquire_recursive>
 800a2f2:	bf00      	nop
 800a2f4:	200004fe 	.word	0x200004fe

0800a2f8 <__sinit_lock_release>:
 800a2f8:	4801      	ldr	r0, [pc, #4]	; (800a300 <__sinit_lock_release+0x8>)
 800a2fa:	f7ff bc83 	b.w	8009c04 <__retarget_lock_release_recursive>
 800a2fe:	bf00      	nop
 800a300:	200004fe 	.word	0x200004fe

0800a304 <__sinit>:
 800a304:	b510      	push	{r4, lr}
 800a306:	4604      	mov	r4, r0
 800a308:	f7ff fff0 	bl	800a2ec <__sinit_lock_acquire>
 800a30c:	69a3      	ldr	r3, [r4, #24]
 800a30e:	b11b      	cbz	r3, 800a318 <__sinit+0x14>
 800a310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a314:	f7ff bff0 	b.w	800a2f8 <__sinit_lock_release>
 800a318:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a31c:	6523      	str	r3, [r4, #80]	; 0x50
 800a31e:	4b13      	ldr	r3, [pc, #76]	; (800a36c <__sinit+0x68>)
 800a320:	4a13      	ldr	r2, [pc, #76]	; (800a370 <__sinit+0x6c>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	62a2      	str	r2, [r4, #40]	; 0x28
 800a326:	42a3      	cmp	r3, r4
 800a328:	bf08      	it	eq
 800a32a:	2301      	moveq	r3, #1
 800a32c:	4620      	mov	r0, r4
 800a32e:	bf08      	it	eq
 800a330:	61a3      	streq	r3, [r4, #24]
 800a332:	f000 f81f 	bl	800a374 <__sfp>
 800a336:	6060      	str	r0, [r4, #4]
 800a338:	4620      	mov	r0, r4
 800a33a:	f000 f81b 	bl	800a374 <__sfp>
 800a33e:	60a0      	str	r0, [r4, #8]
 800a340:	4620      	mov	r0, r4
 800a342:	f000 f817 	bl	800a374 <__sfp>
 800a346:	2200      	movs	r2, #0
 800a348:	2104      	movs	r1, #4
 800a34a:	60e0      	str	r0, [r4, #12]
 800a34c:	6860      	ldr	r0, [r4, #4]
 800a34e:	f7ff ff81 	bl	800a254 <std>
 800a352:	2201      	movs	r2, #1
 800a354:	2109      	movs	r1, #9
 800a356:	68a0      	ldr	r0, [r4, #8]
 800a358:	f7ff ff7c 	bl	800a254 <std>
 800a35c:	2202      	movs	r2, #2
 800a35e:	2112      	movs	r1, #18
 800a360:	68e0      	ldr	r0, [r4, #12]
 800a362:	f7ff ff77 	bl	800a254 <std>
 800a366:	2301      	movs	r3, #1
 800a368:	61a3      	str	r3, [r4, #24]
 800a36a:	e7d1      	b.n	800a310 <__sinit+0xc>
 800a36c:	0800a938 	.word	0x0800a938
 800a370:	0800a29d 	.word	0x0800a29d

0800a374 <__sfp>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	4607      	mov	r7, r0
 800a378:	f7ff ffac 	bl	800a2d4 <__sfp_lock_acquire>
 800a37c:	4b1e      	ldr	r3, [pc, #120]	; (800a3f8 <__sfp+0x84>)
 800a37e:	681e      	ldr	r6, [r3, #0]
 800a380:	69b3      	ldr	r3, [r6, #24]
 800a382:	b913      	cbnz	r3, 800a38a <__sfp+0x16>
 800a384:	4630      	mov	r0, r6
 800a386:	f7ff ffbd 	bl	800a304 <__sinit>
 800a38a:	3648      	adds	r6, #72	; 0x48
 800a38c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a390:	3b01      	subs	r3, #1
 800a392:	d503      	bpl.n	800a39c <__sfp+0x28>
 800a394:	6833      	ldr	r3, [r6, #0]
 800a396:	b30b      	cbz	r3, 800a3dc <__sfp+0x68>
 800a398:	6836      	ldr	r6, [r6, #0]
 800a39a:	e7f7      	b.n	800a38c <__sfp+0x18>
 800a39c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a3a0:	b9d5      	cbnz	r5, 800a3d8 <__sfp+0x64>
 800a3a2:	4b16      	ldr	r3, [pc, #88]	; (800a3fc <__sfp+0x88>)
 800a3a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a3a8:	60e3      	str	r3, [r4, #12]
 800a3aa:	6665      	str	r5, [r4, #100]	; 0x64
 800a3ac:	f7ff fc28 	bl	8009c00 <__retarget_lock_init_recursive>
 800a3b0:	f7ff ff96 	bl	800a2e0 <__sfp_lock_release>
 800a3b4:	2208      	movs	r2, #8
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a3bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a3c0:	6025      	str	r5, [r4, #0]
 800a3c2:	61a5      	str	r5, [r4, #24]
 800a3c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a3c8:	f7fb fd74 	bl	8005eb4 <memset>
 800a3cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a3d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3d8:	3468      	adds	r4, #104	; 0x68
 800a3da:	e7d9      	b.n	800a390 <__sfp+0x1c>
 800a3dc:	2104      	movs	r1, #4
 800a3de:	4638      	mov	r0, r7
 800a3e0:	f7ff ff62 	bl	800a2a8 <__sfmoreglue>
 800a3e4:	4604      	mov	r4, r0
 800a3e6:	6030      	str	r0, [r6, #0]
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	d1d5      	bne.n	800a398 <__sfp+0x24>
 800a3ec:	f7ff ff78 	bl	800a2e0 <__sfp_lock_release>
 800a3f0:	230c      	movs	r3, #12
 800a3f2:	603b      	str	r3, [r7, #0]
 800a3f4:	e7ee      	b.n	800a3d4 <__sfp+0x60>
 800a3f6:	bf00      	nop
 800a3f8:	0800a938 	.word	0x0800a938
 800a3fc:	ffff0001 	.word	0xffff0001

0800a400 <_fwalk_reent>:
 800a400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a404:	4606      	mov	r6, r0
 800a406:	4688      	mov	r8, r1
 800a408:	2700      	movs	r7, #0
 800a40a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a40e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a412:	f1b9 0901 	subs.w	r9, r9, #1
 800a416:	d505      	bpl.n	800a424 <_fwalk_reent+0x24>
 800a418:	6824      	ldr	r4, [r4, #0]
 800a41a:	2c00      	cmp	r4, #0
 800a41c:	d1f7      	bne.n	800a40e <_fwalk_reent+0xe>
 800a41e:	4638      	mov	r0, r7
 800a420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a424:	89ab      	ldrh	r3, [r5, #12]
 800a426:	2b01      	cmp	r3, #1
 800a428:	d907      	bls.n	800a43a <_fwalk_reent+0x3a>
 800a42a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a42e:	3301      	adds	r3, #1
 800a430:	d003      	beq.n	800a43a <_fwalk_reent+0x3a>
 800a432:	4629      	mov	r1, r5
 800a434:	4630      	mov	r0, r6
 800a436:	47c0      	blx	r8
 800a438:	4307      	orrs	r7, r0
 800a43a:	3568      	adds	r5, #104	; 0x68
 800a43c:	e7e9      	b.n	800a412 <_fwalk_reent+0x12>

0800a43e <__swhatbuf_r>:
 800a43e:	b570      	push	{r4, r5, r6, lr}
 800a440:	460e      	mov	r6, r1
 800a442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a446:	4614      	mov	r4, r2
 800a448:	2900      	cmp	r1, #0
 800a44a:	461d      	mov	r5, r3
 800a44c:	b096      	sub	sp, #88	; 0x58
 800a44e:	da08      	bge.n	800a462 <__swhatbuf_r+0x24>
 800a450:	2200      	movs	r2, #0
 800a452:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a456:	602a      	str	r2, [r5, #0]
 800a458:	061a      	lsls	r2, r3, #24
 800a45a:	d410      	bmi.n	800a47e <__swhatbuf_r+0x40>
 800a45c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a460:	e00e      	b.n	800a480 <__swhatbuf_r+0x42>
 800a462:	466a      	mov	r2, sp
 800a464:	f000 f902 	bl	800a66c <_fstat_r>
 800a468:	2800      	cmp	r0, #0
 800a46a:	dbf1      	blt.n	800a450 <__swhatbuf_r+0x12>
 800a46c:	9a01      	ldr	r2, [sp, #4]
 800a46e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a472:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a476:	425a      	negs	r2, r3
 800a478:	415a      	adcs	r2, r3
 800a47a:	602a      	str	r2, [r5, #0]
 800a47c:	e7ee      	b.n	800a45c <__swhatbuf_r+0x1e>
 800a47e:	2340      	movs	r3, #64	; 0x40
 800a480:	2000      	movs	r0, #0
 800a482:	6023      	str	r3, [r4, #0]
 800a484:	b016      	add	sp, #88	; 0x58
 800a486:	bd70      	pop	{r4, r5, r6, pc}

0800a488 <__smakebuf_r>:
 800a488:	898b      	ldrh	r3, [r1, #12]
 800a48a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a48c:	079d      	lsls	r5, r3, #30
 800a48e:	4606      	mov	r6, r0
 800a490:	460c      	mov	r4, r1
 800a492:	d507      	bpl.n	800a4a4 <__smakebuf_r+0x1c>
 800a494:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a498:	6023      	str	r3, [r4, #0]
 800a49a:	6123      	str	r3, [r4, #16]
 800a49c:	2301      	movs	r3, #1
 800a49e:	6163      	str	r3, [r4, #20]
 800a4a0:	b002      	add	sp, #8
 800a4a2:	bd70      	pop	{r4, r5, r6, pc}
 800a4a4:	466a      	mov	r2, sp
 800a4a6:	ab01      	add	r3, sp, #4
 800a4a8:	f7ff ffc9 	bl	800a43e <__swhatbuf_r>
 800a4ac:	9900      	ldr	r1, [sp, #0]
 800a4ae:	4605      	mov	r5, r0
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	f7fb fd6f 	bl	8005f94 <_malloc_r>
 800a4b6:	b948      	cbnz	r0, 800a4cc <__smakebuf_r+0x44>
 800a4b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4bc:	059a      	lsls	r2, r3, #22
 800a4be:	d4ef      	bmi.n	800a4a0 <__smakebuf_r+0x18>
 800a4c0:	f023 0303 	bic.w	r3, r3, #3
 800a4c4:	f043 0302 	orr.w	r3, r3, #2
 800a4c8:	81a3      	strh	r3, [r4, #12]
 800a4ca:	e7e3      	b.n	800a494 <__smakebuf_r+0xc>
 800a4cc:	4b0d      	ldr	r3, [pc, #52]	; (800a504 <__smakebuf_r+0x7c>)
 800a4ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800a4d0:	89a3      	ldrh	r3, [r4, #12]
 800a4d2:	6020      	str	r0, [r4, #0]
 800a4d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4d8:	81a3      	strh	r3, [r4, #12]
 800a4da:	9b00      	ldr	r3, [sp, #0]
 800a4dc:	6120      	str	r0, [r4, #16]
 800a4de:	6163      	str	r3, [r4, #20]
 800a4e0:	9b01      	ldr	r3, [sp, #4]
 800a4e2:	b15b      	cbz	r3, 800a4fc <__smakebuf_r+0x74>
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4ea:	f000 f8d1 	bl	800a690 <_isatty_r>
 800a4ee:	b128      	cbz	r0, 800a4fc <__smakebuf_r+0x74>
 800a4f0:	89a3      	ldrh	r3, [r4, #12]
 800a4f2:	f023 0303 	bic.w	r3, r3, #3
 800a4f6:	f043 0301 	orr.w	r3, r3, #1
 800a4fa:	81a3      	strh	r3, [r4, #12]
 800a4fc:	89a0      	ldrh	r0, [r4, #12]
 800a4fe:	4305      	orrs	r5, r0
 800a500:	81a5      	strh	r5, [r4, #12]
 800a502:	e7cd      	b.n	800a4a0 <__smakebuf_r+0x18>
 800a504:	0800a29d 	.word	0x0800a29d

0800a508 <_malloc_usable_size_r>:
 800a508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a50c:	1f18      	subs	r0, r3, #4
 800a50e:	2b00      	cmp	r3, #0
 800a510:	bfbc      	itt	lt
 800a512:	580b      	ldrlt	r3, [r1, r0]
 800a514:	18c0      	addlt	r0, r0, r3
 800a516:	4770      	bx	lr

0800a518 <_raise_r>:
 800a518:	291f      	cmp	r1, #31
 800a51a:	b538      	push	{r3, r4, r5, lr}
 800a51c:	4604      	mov	r4, r0
 800a51e:	460d      	mov	r5, r1
 800a520:	d904      	bls.n	800a52c <_raise_r+0x14>
 800a522:	2316      	movs	r3, #22
 800a524:	6003      	str	r3, [r0, #0]
 800a526:	f04f 30ff 	mov.w	r0, #4294967295
 800a52a:	bd38      	pop	{r3, r4, r5, pc}
 800a52c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a52e:	b112      	cbz	r2, 800a536 <_raise_r+0x1e>
 800a530:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a534:	b94b      	cbnz	r3, 800a54a <_raise_r+0x32>
 800a536:	4620      	mov	r0, r4
 800a538:	f000 f830 	bl	800a59c <_getpid_r>
 800a53c:	462a      	mov	r2, r5
 800a53e:	4601      	mov	r1, r0
 800a540:	4620      	mov	r0, r4
 800a542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a546:	f000 b817 	b.w	800a578 <_kill_r>
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d00a      	beq.n	800a564 <_raise_r+0x4c>
 800a54e:	1c59      	adds	r1, r3, #1
 800a550:	d103      	bne.n	800a55a <_raise_r+0x42>
 800a552:	2316      	movs	r3, #22
 800a554:	6003      	str	r3, [r0, #0]
 800a556:	2001      	movs	r0, #1
 800a558:	e7e7      	b.n	800a52a <_raise_r+0x12>
 800a55a:	2400      	movs	r4, #0
 800a55c:	4628      	mov	r0, r5
 800a55e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a562:	4798      	blx	r3
 800a564:	2000      	movs	r0, #0
 800a566:	e7e0      	b.n	800a52a <_raise_r+0x12>

0800a568 <raise>:
 800a568:	4b02      	ldr	r3, [pc, #8]	; (800a574 <raise+0xc>)
 800a56a:	4601      	mov	r1, r0
 800a56c:	6818      	ldr	r0, [r3, #0]
 800a56e:	f7ff bfd3 	b.w	800a518 <_raise_r>
 800a572:	bf00      	nop
 800a574:	20000014 	.word	0x20000014

0800a578 <_kill_r>:
 800a578:	b538      	push	{r3, r4, r5, lr}
 800a57a:	2300      	movs	r3, #0
 800a57c:	4d06      	ldr	r5, [pc, #24]	; (800a598 <_kill_r+0x20>)
 800a57e:	4604      	mov	r4, r0
 800a580:	4608      	mov	r0, r1
 800a582:	4611      	mov	r1, r2
 800a584:	602b      	str	r3, [r5, #0]
 800a586:	f7f8 f8ec 	bl	8002762 <_kill>
 800a58a:	1c43      	adds	r3, r0, #1
 800a58c:	d102      	bne.n	800a594 <_kill_r+0x1c>
 800a58e:	682b      	ldr	r3, [r5, #0]
 800a590:	b103      	cbz	r3, 800a594 <_kill_r+0x1c>
 800a592:	6023      	str	r3, [r4, #0]
 800a594:	bd38      	pop	{r3, r4, r5, pc}
 800a596:	bf00      	nop
 800a598:	200004f8 	.word	0x200004f8

0800a59c <_getpid_r>:
 800a59c:	f7f8 b8da 	b.w	8002754 <_getpid>

0800a5a0 <__sread>:
 800a5a0:	b510      	push	{r4, lr}
 800a5a2:	460c      	mov	r4, r1
 800a5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a8:	f000 f894 	bl	800a6d4 <_read_r>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	bfab      	itete	ge
 800a5b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5b2:	89a3      	ldrhlt	r3, [r4, #12]
 800a5b4:	181b      	addge	r3, r3, r0
 800a5b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5ba:	bfac      	ite	ge
 800a5bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5be:	81a3      	strhlt	r3, [r4, #12]
 800a5c0:	bd10      	pop	{r4, pc}

0800a5c2 <__swrite>:
 800a5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c6:	461f      	mov	r7, r3
 800a5c8:	898b      	ldrh	r3, [r1, #12]
 800a5ca:	4605      	mov	r5, r0
 800a5cc:	05db      	lsls	r3, r3, #23
 800a5ce:	460c      	mov	r4, r1
 800a5d0:	4616      	mov	r6, r2
 800a5d2:	d505      	bpl.n	800a5e0 <__swrite+0x1e>
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5dc:	f000 f868 	bl	800a6b0 <_lseek_r>
 800a5e0:	89a3      	ldrh	r3, [r4, #12]
 800a5e2:	4632      	mov	r2, r6
 800a5e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5e8:	81a3      	strh	r3, [r4, #12]
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	463b      	mov	r3, r7
 800a5ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5f6:	f000 b817 	b.w	800a628 <_write_r>

0800a5fa <__sseek>:
 800a5fa:	b510      	push	{r4, lr}
 800a5fc:	460c      	mov	r4, r1
 800a5fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a602:	f000 f855 	bl	800a6b0 <_lseek_r>
 800a606:	1c43      	adds	r3, r0, #1
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	bf15      	itete	ne
 800a60c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a60e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a616:	81a3      	strheq	r3, [r4, #12]
 800a618:	bf18      	it	ne
 800a61a:	81a3      	strhne	r3, [r4, #12]
 800a61c:	bd10      	pop	{r4, pc}

0800a61e <__sclose>:
 800a61e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a622:	f000 b813 	b.w	800a64c <_close_r>
	...

0800a628 <_write_r>:
 800a628:	b538      	push	{r3, r4, r5, lr}
 800a62a:	4604      	mov	r4, r0
 800a62c:	4608      	mov	r0, r1
 800a62e:	4611      	mov	r1, r2
 800a630:	2200      	movs	r2, #0
 800a632:	4d05      	ldr	r5, [pc, #20]	; (800a648 <_write_r+0x20>)
 800a634:	602a      	str	r2, [r5, #0]
 800a636:	461a      	mov	r2, r3
 800a638:	f7f8 f8ca 	bl	80027d0 <_write>
 800a63c:	1c43      	adds	r3, r0, #1
 800a63e:	d102      	bne.n	800a646 <_write_r+0x1e>
 800a640:	682b      	ldr	r3, [r5, #0]
 800a642:	b103      	cbz	r3, 800a646 <_write_r+0x1e>
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	bd38      	pop	{r3, r4, r5, pc}
 800a648:	200004f8 	.word	0x200004f8

0800a64c <_close_r>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	2300      	movs	r3, #0
 800a650:	4d05      	ldr	r5, [pc, #20]	; (800a668 <_close_r+0x1c>)
 800a652:	4604      	mov	r4, r0
 800a654:	4608      	mov	r0, r1
 800a656:	602b      	str	r3, [r5, #0]
 800a658:	f7f8 f8d6 	bl	8002808 <_close>
 800a65c:	1c43      	adds	r3, r0, #1
 800a65e:	d102      	bne.n	800a666 <_close_r+0x1a>
 800a660:	682b      	ldr	r3, [r5, #0]
 800a662:	b103      	cbz	r3, 800a666 <_close_r+0x1a>
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	bd38      	pop	{r3, r4, r5, pc}
 800a668:	200004f8 	.word	0x200004f8

0800a66c <_fstat_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	2300      	movs	r3, #0
 800a670:	4d06      	ldr	r5, [pc, #24]	; (800a68c <_fstat_r+0x20>)
 800a672:	4604      	mov	r4, r0
 800a674:	4608      	mov	r0, r1
 800a676:	4611      	mov	r1, r2
 800a678:	602b      	str	r3, [r5, #0]
 800a67a:	f7f8 f8d0 	bl	800281e <_fstat>
 800a67e:	1c43      	adds	r3, r0, #1
 800a680:	d102      	bne.n	800a688 <_fstat_r+0x1c>
 800a682:	682b      	ldr	r3, [r5, #0]
 800a684:	b103      	cbz	r3, 800a688 <_fstat_r+0x1c>
 800a686:	6023      	str	r3, [r4, #0]
 800a688:	bd38      	pop	{r3, r4, r5, pc}
 800a68a:	bf00      	nop
 800a68c:	200004f8 	.word	0x200004f8

0800a690 <_isatty_r>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	2300      	movs	r3, #0
 800a694:	4d05      	ldr	r5, [pc, #20]	; (800a6ac <_isatty_r+0x1c>)
 800a696:	4604      	mov	r4, r0
 800a698:	4608      	mov	r0, r1
 800a69a:	602b      	str	r3, [r5, #0]
 800a69c:	f7f8 f8ce 	bl	800283c <_isatty>
 800a6a0:	1c43      	adds	r3, r0, #1
 800a6a2:	d102      	bne.n	800a6aa <_isatty_r+0x1a>
 800a6a4:	682b      	ldr	r3, [r5, #0]
 800a6a6:	b103      	cbz	r3, 800a6aa <_isatty_r+0x1a>
 800a6a8:	6023      	str	r3, [r4, #0]
 800a6aa:	bd38      	pop	{r3, r4, r5, pc}
 800a6ac:	200004f8 	.word	0x200004f8

0800a6b0 <_lseek_r>:
 800a6b0:	b538      	push	{r3, r4, r5, lr}
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	4608      	mov	r0, r1
 800a6b6:	4611      	mov	r1, r2
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	4d05      	ldr	r5, [pc, #20]	; (800a6d0 <_lseek_r+0x20>)
 800a6bc:	602a      	str	r2, [r5, #0]
 800a6be:	461a      	mov	r2, r3
 800a6c0:	f7f8 f8c6 	bl	8002850 <_lseek>
 800a6c4:	1c43      	adds	r3, r0, #1
 800a6c6:	d102      	bne.n	800a6ce <_lseek_r+0x1e>
 800a6c8:	682b      	ldr	r3, [r5, #0]
 800a6ca:	b103      	cbz	r3, 800a6ce <_lseek_r+0x1e>
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	bd38      	pop	{r3, r4, r5, pc}
 800a6d0:	200004f8 	.word	0x200004f8

0800a6d4 <_read_r>:
 800a6d4:	b538      	push	{r3, r4, r5, lr}
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	4608      	mov	r0, r1
 800a6da:	4611      	mov	r1, r2
 800a6dc:	2200      	movs	r2, #0
 800a6de:	4d05      	ldr	r5, [pc, #20]	; (800a6f4 <_read_r+0x20>)
 800a6e0:	602a      	str	r2, [r5, #0]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f7f8 f857 	bl	8002796 <_read>
 800a6e8:	1c43      	adds	r3, r0, #1
 800a6ea:	d102      	bne.n	800a6f2 <_read_r+0x1e>
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	b103      	cbz	r3, 800a6f2 <_read_r+0x1e>
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	bd38      	pop	{r3, r4, r5, pc}
 800a6f4:	200004f8 	.word	0x200004f8

0800a6f8 <_init>:
 800a6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fa:	bf00      	nop
 800a6fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6fe:	bc08      	pop	{r3}
 800a700:	469e      	mov	lr, r3
 800a702:	4770      	bx	lr

0800a704 <_fini>:
 800a704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a706:	bf00      	nop
 800a708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a70a:	bc08      	pop	{r3}
 800a70c:	469e      	mov	lr, r3
 800a70e:	4770      	bx	lr
