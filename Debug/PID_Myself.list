
PID_Myself.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  0800a6d8  0800a6d8  0001a6d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ada4  0800ada4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ada4  0800ada4  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ada4  0800ada4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ada4  0800ada4  0001ada4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ada8  0800ada8  0001ada8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800adac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  200001e8  0800af94  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  0800af94  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee75  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ed  00000000  00000000  0002f086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00031278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  000322c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000dc63  00000000  00000000  00033230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00004951  00000000  00000000  00040e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000457e4  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005b5c  00000000  00000000  00045834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a6c0 	.word	0x0800a6c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800a6c0 	.word	0x0800a6c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <__aeabi_d2lz>:
 800119c:	b538      	push	{r3, r4, r5, lr}
 800119e:	4605      	mov	r5, r0
 80011a0:	460c      	mov	r4, r1
 80011a2:	2200      	movs	r2, #0
 80011a4:	2300      	movs	r3, #0
 80011a6:	4628      	mov	r0, r5
 80011a8:	4621      	mov	r1, r4
 80011aa:	f7ff fc07 	bl	80009bc <__aeabi_dcmplt>
 80011ae:	b928      	cbnz	r0, 80011bc <__aeabi_d2lz+0x20>
 80011b0:	4628      	mov	r0, r5
 80011b2:	4621      	mov	r1, r4
 80011b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011b8:	f000 b80a 	b.w	80011d0 <__aeabi_d2ulz>
 80011bc:	4628      	mov	r0, r5
 80011be:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011c2:	f000 f805 	bl	80011d0 <__aeabi_d2ulz>
 80011c6:	4240      	negs	r0, r0
 80011c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011cc:	bd38      	pop	{r3, r4, r5, pc}
 80011ce:	bf00      	nop

080011d0 <__aeabi_d2ulz>:
 80011d0:	b5d0      	push	{r4, r6, r7, lr}
 80011d2:	2200      	movs	r2, #0
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <__aeabi_d2ulz+0x34>)
 80011d6:	4606      	mov	r6, r0
 80011d8:	460f      	mov	r7, r1
 80011da:	f7ff f97d 	bl	80004d8 <__aeabi_dmul>
 80011de:	f7ff fc53 	bl	8000a88 <__aeabi_d2uiz>
 80011e2:	4604      	mov	r4, r0
 80011e4:	f7ff f8fe 	bl	80003e4 <__aeabi_ui2d>
 80011e8:	2200      	movs	r2, #0
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <__aeabi_d2ulz+0x38>)
 80011ec:	f7ff f974 	bl	80004d8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4630      	mov	r0, r6
 80011f6:	4639      	mov	r1, r7
 80011f8:	f7fe ffb6 	bl	8000168 <__aeabi_dsub>
 80011fc:	f7ff fc44 	bl	8000a88 <__aeabi_d2uiz>
 8001200:	4621      	mov	r1, r4
 8001202:	bdd0      	pop	{r4, r6, r7, pc}
 8001204:	3df00000 	.word	0x3df00000
 8001208:	41f00000 	.word	0x41f00000

0800120c <PWM_control_position>:
//			HAL_GPIO_WritePin(IN1_GPIO_Port,IN1_Pin,GPIO_PIN_RESET);
//			htim1.Instance->CCR3 = 0;
//		}
//}
void PWM_control_position(TIM_HandleTypeDef *htim, float duty)
{
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  //	if(duty>90.0)
  //	{
  //		duty = 90.0;
  //	}
  if (duty > 0)
 8001216:	f04f 0100 	mov.w	r1, #0
 800121a:	6838      	ldr	r0, [r7, #0]
 800121c:	f7ff ff6e 	bl	80010fc <__aeabi_fcmpgt>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d025      	beq.n	8001272 <PWM_control_position+0x66>
  {
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001226:	2201      	movs	r2, #1
 8001228:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800122c:	4831      	ldr	r0, [pc, #196]	; (80012f4 <PWM_control_position+0xe8>)
 800122e:	f002 f8d3 	bl	80033d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET); // chieu thuan cung chieu kim dong ho
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001238:	482e      	ldr	r0, [pc, #184]	; (80012f4 <PWM_control_position+0xe8>)
 800123a:	f002 f8cd 	bl	80033d8 <HAL_GPIO_WritePin>
    htim1.Instance->CCR3 = duty * (htim1.Instance->ARR) / 100;
 800123e:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <PWM_control_position+0xec>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fd45 	bl	8000cd4 <__aeabi_ui2f>
 800124a:	4603      	mov	r3, r0
 800124c:	6839      	ldr	r1, [r7, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fd98 	bl	8000d84 <__aeabi_fmul>
 8001254:	4603      	mov	r3, r0
 8001256:	4929      	ldr	r1, [pc, #164]	; (80012fc <PWM_control_position+0xf0>)
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fe47 	bl	8000eec <__aeabi_fdiv>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <PWM_control_position+0xec>)
 8001264:	681c      	ldr	r4, [r3, #0]
 8001266:	4610      	mov	r0, r2
 8001268:	f7ff ff78 	bl	800115c <__aeabi_f2uiz>
 800126c:	4603      	mov	r3, r0
 800126e:	63e3      	str	r3, [r4, #60]	; 0x3c
  else
  {
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
  }
}
 8001270:	e03c      	b.n	80012ec <PWM_control_position+0xe0>
  else if (duty < 0)
 8001272:	f04f 0100 	mov.w	r1, #0
 8001276:	6838      	ldr	r0, [r7, #0]
 8001278:	f7ff ff22 	bl	80010c0 <__aeabi_fcmplt>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d028      	beq.n	80012d4 <PWM_control_position+0xc8>
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001288:	481a      	ldr	r0, [pc, #104]	; (80012f4 <PWM_control_position+0xe8>)
 800128a:	f002 f8a5 	bl	80033d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001294:	4817      	ldr	r0, [pc, #92]	; (80012f4 <PWM_control_position+0xe8>)
 8001296:	f002 f89f 	bl	80033d8 <HAL_GPIO_WritePin>
    htim1.Instance->CCR3 = (-duty) * (htim1.Instance->ARR) / 100; // nguoc chieu kim dong ho
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80012a0:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <PWM_control_position+0xec>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fd14 	bl	8000cd4 <__aeabi_ui2f>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4619      	mov	r1, r3
 80012b0:	4620      	mov	r0, r4
 80012b2:	f7ff fd67 	bl	8000d84 <__aeabi_fmul>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4910      	ldr	r1, [pc, #64]	; (80012fc <PWM_control_position+0xf0>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fe16 	bl	8000eec <__aeabi_fdiv>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <PWM_control_position+0xec>)
 80012c6:	681c      	ldr	r4, [r3, #0]
 80012c8:	4610      	mov	r0, r2
 80012ca:	f7ff ff47 	bl	800115c <__aeabi_f2uiz>
 80012ce:	4603      	mov	r3, r0
 80012d0:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 80012d2:	e00b      	b.n	80012ec <PWM_control_position+0xe0>
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012da:	4806      	ldr	r0, [pc, #24]	; (80012f4 <PWM_control_position+0xe8>)
 80012dc:	f002 f87c 	bl	80033d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80012e0:	2201      	movs	r2, #1
 80012e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e6:	4803      	ldr	r0, [pc, #12]	; (80012f4 <PWM_control_position+0xe8>)
 80012e8:	f002 f876 	bl	80033d8 <HAL_GPIO_WritePin>
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd90      	pop	{r4, r7, pc}
 80012f4:	40010c00 	.word	0x40010c00
 80012f8:	20000258 	.word	0x20000258
 80012fc:	42c80000 	.word	0x42c80000

08001300 <PWM_control_velocity>:
void PWM_control_velocity(TIM_HandleTypeDef *htim, float duty)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  if (duty > 0)
 800130a:	f04f 0100 	mov.w	r1, #0
 800130e:	6838      	ldr	r0, [r7, #0]
 8001310:	f7ff fef4 	bl	80010fc <__aeabi_fcmpgt>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d025      	beq.n	8001366 <PWM_control_velocity+0x66>
  {
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 800131a:	2201      	movs	r2, #1
 800131c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001320:	4831      	ldr	r0, [pc, #196]	; (80013e8 <PWM_control_velocity+0xe8>)
 8001322:	f002 f859 	bl	80033d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET); // chieu thuan cung chieu kim dong ho
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132c:	482e      	ldr	r0, [pc, #184]	; (80013e8 <PWM_control_velocity+0xe8>)
 800132e:	f002 f853 	bl	80033d8 <HAL_GPIO_WritePin>
    htim1.Instance->CCR3 = duty * (htim1.Instance->ARR) / 100;
 8001332:	4b2e      	ldr	r3, [pc, #184]	; (80013ec <PWM_control_velocity+0xec>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fccb 	bl	8000cd4 <__aeabi_ui2f>
 800133e:	4603      	mov	r3, r0
 8001340:	6839      	ldr	r1, [r7, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fd1e 	bl	8000d84 <__aeabi_fmul>
 8001348:	4603      	mov	r3, r0
 800134a:	4929      	ldr	r1, [pc, #164]	; (80013f0 <PWM_control_velocity+0xf0>)
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fdcd 	bl	8000eec <__aeabi_fdiv>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b25      	ldr	r3, [pc, #148]	; (80013ec <PWM_control_velocity+0xec>)
 8001358:	681c      	ldr	r4, [r3, #0]
 800135a:	4610      	mov	r0, r2
 800135c:	f7ff fefe 	bl	800115c <__aeabi_f2uiz>
 8001360:	4603      	mov	r3, r0
 8001362:	63e3      	str	r3, [r4, #60]	; 0x3c
  else
  {
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
  }
}
 8001364:	e03c      	b.n	80013e0 <PWM_control_velocity+0xe0>
  else if (duty < 0)
 8001366:	f04f 0100 	mov.w	r1, #0
 800136a:	6838      	ldr	r0, [r7, #0]
 800136c:	f7ff fea8 	bl	80010c0 <__aeabi_fcmplt>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d028      	beq.n	80013c8 <PWM_control_velocity+0xc8>
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800137c:	481a      	ldr	r0, [pc, #104]	; (80013e8 <PWM_control_velocity+0xe8>)
 800137e:	f002 f82b 	bl	80033d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001388:	4817      	ldr	r0, [pc, #92]	; (80013e8 <PWM_control_velocity+0xe8>)
 800138a:	f002 f825 	bl	80033d8 <HAL_GPIO_WritePin>
    htim1.Instance->CCR3 = (-duty) * (htim1.Instance->ARR) / 100; // nguoc chieu kim dong ho
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <PWM_control_velocity+0xec>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fc9a 	bl	8000cd4 <__aeabi_ui2f>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4619      	mov	r1, r3
 80013a4:	4620      	mov	r0, r4
 80013a6:	f7ff fced 	bl	8000d84 <__aeabi_fmul>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4910      	ldr	r1, [pc, #64]	; (80013f0 <PWM_control_velocity+0xf0>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fd9c 	bl	8000eec <__aeabi_fdiv>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <PWM_control_velocity+0xec>)
 80013ba:	681c      	ldr	r4, [r3, #0]
 80013bc:	4610      	mov	r0, r2
 80013be:	f7ff fecd 	bl	800115c <__aeabi_f2uiz>
 80013c2:	4603      	mov	r3, r0
 80013c4:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 80013c6:	e00b      	b.n	80013e0 <PWM_control_velocity+0xe0>
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <PWM_control_velocity+0xe8>)
 80013d0:	f002 f802 	bl	80033d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013da:	4803      	ldr	r0, [pc, #12]	; (80013e8 <PWM_control_velocity+0xe8>)
 80013dc:	f001 fffc 	bl	80033d8 <HAL_GPIO_WritePin>
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd90      	pop	{r4, r7, pc}
 80013e8:	40010c00 	.word	0x40010c00
 80013ec:	20000258 	.word	0x20000258
 80013f0:	42c80000 	.word	0x42c80000

080013f4 <encoder>:
//
//		encoder_value -> pre_counter = now_counter;
//}  // velocity:   // vong/phut

void encoder()
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  if (data_after_cut[0] == 0x44)
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <encoder+0x60>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b44      	cmp	r3, #68	; 0x44
 80013fe:	d10a      	bne.n	8001416 <encoder+0x22>
  {
    htim2.Instance->CNT = 0;
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <encoder+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2200      	movs	r2, #0
 8001406:	625a      	str	r2, [r3, #36]	; 0x24
    instance_enc.speed_by_encoder = 0;
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <encoder+0x68>)
 800140a:	2200      	movs	r2, #0
 800140c:	809a      	strh	r2, [r3, #4]
    instance_enc.pre_speed_by_encoder = 0;
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <encoder+0x68>)
 8001410:	2200      	movs	r2, #0
 8001412:	80da      	strh	r2, [r3, #6]
    instance_enc.pre_speed_by_encoder = htim2.Instance->CNT;
    //	instance_enc.speed_by_encoder = htim2.Instance->CNT;
    instance_enc.position += instance_enc.speed_by_encoder;
  }
  //	htim2.Instance->CNT = 0;
}
 8001414:	e01a      	b.n	800144c <encoder+0x58>
    instance_enc.speed_by_encoder = htim2.Instance->CNT - instance_enc.pre_speed_by_encoder;
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <encoder+0x64>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	b29a      	uxth	r2, r3
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <encoder+0x68>)
 8001420:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001424:	b29b      	uxth	r3, r3
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	b29b      	uxth	r3, r3
 800142a:	b21a      	sxth	r2, r3
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <encoder+0x68>)
 800142e:	809a      	strh	r2, [r3, #4]
    instance_enc.pre_speed_by_encoder = htim2.Instance->CNT;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <encoder+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	b21a      	sxth	r2, r3
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <encoder+0x68>)
 800143a:	80da      	strh	r2, [r3, #6]
    instance_enc.position += instance_enc.speed_by_encoder;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <encoder+0x68>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a06      	ldr	r2, [pc, #24]	; (800145c <encoder+0x68>)
 8001442:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001446:	4413      	add	r3, r2
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <encoder+0x68>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	20000434 	.word	0x20000434
 8001458:	200002a0 	.word	0x200002a0
 800145c:	20000450 	.word	0x20000450

08001460 <send_data_to_Qt>:
/**
 *
 */

void send_data_to_Qt()
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
  if (checkModeFromQt == 1 && flagAccept == 1)
 8001466:	4b42      	ldr	r3, [pc, #264]	; (8001570 <send_data_to_Qt+0x110>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d148      	bne.n	8001500 <send_data_to_Qt+0xa0>
 800146e:	4b41      	ldr	r3, [pc, #260]	; (8001574 <send_data_to_Qt+0x114>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d144      	bne.n	8001500 <send_data_to_Qt+0xa0>
  {
//    sprintf(sendDataToSTM, "%f ", now_position);
//    HAL_UART_Transmit(&huart1, (uint8_t *)sendDataToSTM, strlen(sendDataToSTM), 200);
	  char float_to_char[sizeof(float)];
	  char mode = 0x66;
 8001476:	2366      	movs	r3, #102	; 0x66
 8001478:	72fb      	strb	r3, [r7, #11]
	  now_position = 15.23;   // ms sua de
 800147a:	4b3f      	ldr	r3, [pc, #252]	; (8001578 <send_data_to_Qt+0x118>)
 800147c:	4a3f      	ldr	r2, [pc, #252]	; (800157c <send_data_to_Qt+0x11c>)
 800147e:	601a      	str	r2, [r3, #0]
	  count_test++;
 8001480:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <send_data_to_Qt+0x120>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <send_data_to_Qt+0x120>)
 800148a:	701a      	strb	r2, [r3, #0]
	  if(count_test == 200)
 800148c:	4b3c      	ldr	r3, [pc, #240]	; (8001580 <send_data_to_Qt+0x120>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2bc8      	cmp	r3, #200	; 0xc8
 8001492:	d10c      	bne.n	80014ae <send_data_to_Qt+0x4e>
	  {
		  now_position1 += 5;
 8001494:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <send_data_to_Qt+0x124>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	493b      	ldr	r1, [pc, #236]	; (8001588 <send_data_to_Qt+0x128>)
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fb6a 	bl	8000b74 <__addsf3>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b37      	ldr	r3, [pc, #220]	; (8001584 <send_data_to_Qt+0x124>)
 80014a6:	601a      	str	r2, [r3, #0]
		  count_test = 0;
 80014a8:	4b35      	ldr	r3, [pc, #212]	; (8001580 <send_data_to_Qt+0x120>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
 80014ae:	4b35      	ldr	r3, [pc, #212]	; (8001584 <send_data_to_Qt+0x124>)
 80014b0:	681b      	ldr	r3, [r3, #0]
	  }
	  memcpy(float_to_char, &now_position1, sizeof(float));  // real thi bo so 1 ra
 80014b2:	60fb      	str	r3, [r7, #12]
	  uint8_t *array_data;
	  array_data = (uint8_t *)malloc(5);
 80014b4:	2005      	movs	r0, #5
 80014b6:	f004 fcc3 	bl	8005e40 <malloc>
 80014ba:	4603      	mov	r3, r0
 80014bc:	61fb      	str	r3, [r7, #28]
	  uint8_t index = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	76fb      	strb	r3, [r7, #27]
	  memcpy(array_data + index, &mode, 1); // Mode la 0x66 , neu Qt nhan 0x66 la vi tri
 80014c2:	7efb      	ldrb	r3, [r7, #27]
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	4413      	add	r3, r2
 80014c8:	7afa      	ldrb	r2, [r7, #11]
 80014ca:	701a      	strb	r2, [r3, #0]
	  index += 1;
 80014cc:	7efb      	ldrb	r3, [r7, #27]
 80014ce:	3301      	adds	r3, #1
 80014d0:	76fb      	strb	r3, [r7, #27]
	  memcpy(array_data + index, float_to_char, 4);
 80014d2:	7efb      	ldrb	r3, [r7, #27]
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	4413      	add	r3, r2
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	601a      	str	r2, [r3, #0]
//	  char mang[] = {0x53, 0x53, 0x22, 0x02, 0x65};
	  UART_frame_data(array_data, PROTO_DATA_SIZE_TX, uart_here.au8TxBuffer, &frame_tx_lenght);
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <send_data_to_Qt+0x12c>)
 80014de:	4a2c      	ldr	r2, [pc, #176]	; (8001590 <send_data_to_Qt+0x130>)
 80014e0:	2105      	movs	r1, #5
 80014e2:	69f8      	ldr	r0, [r7, #28]
 80014e4:	f004 fbff 	bl	8005ce6 <UART_frame_data>
//	  UART_frame_data((uint8_t *)mang, PROTO_DATA_SIZE_TX, uart_here.au8TxBuffer, &frame_tx_lenght);
//	  UART_get_data(&uart_here, uart_here.au8TxBuffer, &get_data_lenght);
	  HAL_UART_Transmit_DMA(&huart1, uart_here.au8TxBuffer, frame_tx_lenght);
 80014e8:	4b28      	ldr	r3, [pc, #160]	; (800158c <send_data_to_Qt+0x12c>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4928      	ldr	r1, [pc, #160]	; (8001590 <send_data_to_Qt+0x130>)
 80014f0:	4828      	ldr	r0, [pc, #160]	; (8001594 <send_data_to_Qt+0x134>)
 80014f2:	f003 fe3b 	bl	800516c <HAL_UART_Transmit_DMA>
	  free(array_data);
 80014f6:	69f8      	ldr	r0, [r7, #28]
 80014f8:	f004 fcaa 	bl	8005e50 <free>
  {
 80014fc:	bf00      	nop
	  memcpy(array_data + index, float_to_char, 4);
	  UART_frame_data(array_data, PROTO_DATA_SIZE_TX, uart_here.au8TxBuffer, &frame_tx_lenght);
	  HAL_UART_Transmit_DMA(&huart1, uart_here.au8TxBuffer, frame_tx_lenght);
	  free(array_data);
  }
}
 80014fe:	e033      	b.n	8001568 <send_data_to_Qt+0x108>
  else if (checkModeFromQt == 2 && flagAccept == 1)
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <send_data_to_Qt+0x110>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d12f      	bne.n	8001568 <send_data_to_Qt+0x108>
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <send_data_to_Qt+0x114>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d12b      	bne.n	8001568 <send_data_to_Qt+0x108>
	  char mode = 0x77;
 8001510:	2377      	movs	r3, #119	; 0x77
 8001512:	70fb      	strb	r3, [r7, #3]
	  velocity_real = 20.23;
 8001514:	4b20      	ldr	r3, [pc, #128]	; (8001598 <send_data_to_Qt+0x138>)
 8001516:	4a21      	ldr	r2, [pc, #132]	; (800159c <send_data_to_Qt+0x13c>)
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <send_data_to_Qt+0x138>)
 800151c:	681b      	ldr	r3, [r3, #0]
	  memcpy(float_to_char, &velocity_real, sizeof(float));
 800151e:	607b      	str	r3, [r7, #4]
	  array_data = (uint8_t *)malloc(5);
 8001520:	2005      	movs	r0, #5
 8001522:	f004 fc8d 	bl	8005e40 <malloc>
 8001526:	4603      	mov	r3, r0
 8001528:	617b      	str	r3, [r7, #20]
	  uint8_t index = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	74fb      	strb	r3, [r7, #19]
	  memcpy(array_data + index, &mode, 1); // Mode la 0x77 , neu Qt nhan 0x77 la velocity
 800152e:	7cfb      	ldrb	r3, [r7, #19]
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	4413      	add	r3, r2
 8001534:	78fa      	ldrb	r2, [r7, #3]
 8001536:	701a      	strb	r2, [r3, #0]
	  index += 1;
 8001538:	7cfb      	ldrb	r3, [r7, #19]
 800153a:	3301      	adds	r3, #1
 800153c:	74fb      	strb	r3, [r7, #19]
	  memcpy(array_data + index, float_to_char, 4);
 800153e:	7cfb      	ldrb	r3, [r7, #19]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	4413      	add	r3, r2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	601a      	str	r2, [r3, #0]
	  UART_frame_data(array_data, PROTO_DATA_SIZE_TX, uart_here.au8TxBuffer, &frame_tx_lenght);
 8001548:	4b10      	ldr	r3, [pc, #64]	; (800158c <send_data_to_Qt+0x12c>)
 800154a:	4a11      	ldr	r2, [pc, #68]	; (8001590 <send_data_to_Qt+0x130>)
 800154c:	2105      	movs	r1, #5
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f004 fbc9 	bl	8005ce6 <UART_frame_data>
	  HAL_UART_Transmit_DMA(&huart1, uart_here.au8TxBuffer, frame_tx_lenght);
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <send_data_to_Qt+0x12c>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	490d      	ldr	r1, [pc, #52]	; (8001590 <send_data_to_Qt+0x130>)
 800155c:	480d      	ldr	r0, [pc, #52]	; (8001594 <send_data_to_Qt+0x134>)
 800155e:	f003 fe05 	bl	800516c <HAL_UART_Transmit_DMA>
	  free(array_data);
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f004 fc74 	bl	8005e50 <free>
}
 8001568:	bf00      	nop
 800156a:	3720      	adds	r7, #32
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000431 	.word	0x20000431
 8001574:	20000430 	.word	0x20000430
 8001578:	20000418 	.word	0x20000418
 800157c:	4173ae14 	.word	0x4173ae14
 8001580:	20000494 	.word	0x20000494
 8001584:	20000004 	.word	0x20000004
 8001588:	40a00000 	.word	0x40a00000
 800158c:	20000492 	.word	0x20000492
 8001590:	20000464 	.word	0x20000464
 8001594:	20000330 	.word	0x20000330
 8001598:	20000420 	.word	0x20000420
 800159c:	41a1d70a 	.word	0x41a1d70a

080015a0 <control_PID_Position>:
void control_PID_Position(PID_control *pid_tune, float setpoint_posi_rotation, float Kp, float Ki, float Kd)
{
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	603b      	str	r3, [r7, #0]
  //	instance_enc.velocity_not = instance_enc.velocity;
  //	if(instance_enc.velocity_not < 0)
  //	{
  //		instance_enc.velocity_not = -instance_enc.velocity_not;   // am thi doi thanh duong cho de dung PID =))))
  //	}
  now_position = (float)instance_enc.position * 360 / 1980; // now_position = độ
 80015ae:	4b58      	ldr	r3, [pc, #352]	; (8001710 <control_PID_Position+0x170>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fb92 	bl	8000cdc <__aeabi_i2f>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4956      	ldr	r1, [pc, #344]	; (8001714 <control_PID_Position+0x174>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fbe1 	bl	8000d84 <__aeabi_fmul>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4954      	ldr	r1, [pc, #336]	; (8001718 <control_PID_Position+0x178>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fc90 	bl	8000eec <__aeabi_fdiv>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b52      	ldr	r3, [pc, #328]	; (800171c <control_PID_Position+0x17c>)
 80015d2:	601a      	str	r2, [r3, #0]
  number_rotation = now_position / 360;
 80015d4:	4b51      	ldr	r3, [pc, #324]	; (800171c <control_PID_Position+0x17c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	494e      	ldr	r1, [pc, #312]	; (8001714 <control_PID_Position+0x174>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fc86 	bl	8000eec <__aeabi_fdiv>
 80015e0:	4603      	mov	r3, r0
 80015e2:	461a      	mov	r2, r3
 80015e4:	4b4e      	ldr	r3, [pc, #312]	; (8001720 <control_PID_Position+0x180>)
 80015e6:	601a      	str	r2, [r3, #0]
  //	setpoint_posi_degrees = setpoint_posi_rotation*360;   // setpoint_posi_rotation la set số vòng cho dễ set
  //	now_position1 = 0.85*now_position1 + 0.15*now_position;
  error_posi = setpoint_posi_rotation - (now_position);
 80015e8:	4b4c      	ldr	r3, [pc, #304]	; (800171c <control_PID_Position+0x17c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	68b8      	ldr	r0, [r7, #8]
 80015f0:	f7ff fabe 	bl	8000b70 <__aeabi_fsub>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b4a      	ldr	r3, [pc, #296]	; (8001724 <control_PID_Position+0x184>)
 80015fa:	601a      	str	r2, [r3, #0]
  pid_tune->P_part = error_posi;
 80015fc:	4b49      	ldr	r3, [pc, #292]	; (8001724 <control_PID_Position+0x184>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	601a      	str	r2, [r3, #0]
  pid_tune->I_part += error_posi * Ts;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff0d 	bl	8000428 <__aeabi_f2d>
 800160e:	4604      	mov	r4, r0
 8001610:	460d      	mov	r5, r1
 8001612:	4b44      	ldr	r3, [pc, #272]	; (8001724 <control_PID_Position+0x184>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ff06 	bl	8000428 <__aeabi_f2d>
 800161c:	a33a      	add	r3, pc, #232	; (adr r3, 8001708 <control_PID_Position+0x168>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	f7fe ff59 	bl	80004d8 <__aeabi_dmul>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4620      	mov	r0, r4
 800162c:	4629      	mov	r1, r5
 800162e:	f7fe fd9d 	bl	800016c <__adddf3>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff fa45 	bl	8000ac8 <__aeabi_d2f>
 800163e:	4602      	mov	r2, r0
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	605a      	str	r2, [r3, #4]
  //	if(error < 0.03*setpoint)
  //	{
  //		pid_tune->I_part = 0;
  //	}
  pid_tune->D_part = (error_posi - pre_error_posi) / Ts;
 8001644:	4b37      	ldr	r3, [pc, #220]	; (8001724 <control_PID_Position+0x184>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a37      	ldr	r2, [pc, #220]	; (8001728 <control_PID_Position+0x188>)
 800164a:	6812      	ldr	r2, [r2, #0]
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fa8e 	bl	8000b70 <__aeabi_fsub>
 8001654:	4603      	mov	r3, r0
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fee6 	bl	8000428 <__aeabi_f2d>
 800165c:	a32a      	add	r3, pc, #168	; (adr r3, 8001708 <control_PID_Position+0x168>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	f7ff f863 	bl	800072c <__aeabi_ddiv>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff fa2b 	bl	8000ac8 <__aeabi_d2f>
 8001672:	4602      	mov	r2, r0
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	609a      	str	r2, [r3, #8]
  output_pid_posi = Kp * (pid_tune->P_part) + Ki * (pid_tune->I_part) + Kd * (pid_tune->D_part);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fb80 	bl	8000d84 <__aeabi_fmul>
 8001684:	4603      	mov	r3, r0
 8001686:	461c      	mov	r4, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	6839      	ldr	r1, [r7, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fb78 	bl	8000d84 <__aeabi_fmul>
 8001694:	4603      	mov	r3, r0
 8001696:	4619      	mov	r1, r3
 8001698:	4620      	mov	r0, r4
 800169a:	f7ff fa6b 	bl	8000b74 <__addsf3>
 800169e:	4603      	mov	r3, r0
 80016a0:	461c      	mov	r4, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	6a39      	ldr	r1, [r7, #32]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fb6b 	bl	8000d84 <__aeabi_fmul>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4619      	mov	r1, r3
 80016b2:	4620      	mov	r0, r4
 80016b4:	f7ff fa5e 	bl	8000b74 <__addsf3>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <control_PID_Position+0x18c>)
 80016be:	601a      	str	r2, [r3, #0]
  if (output_pid_posi > 100.0)
 80016c0:	4b1a      	ldr	r3, [pc, #104]	; (800172c <control_PID_Position+0x18c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	491a      	ldr	r1, [pc, #104]	; (8001730 <control_PID_Position+0x190>)
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fd18 	bl	80010fc <__aeabi_fcmpgt>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <control_PID_Position+0x13a>
  {
    output_pid_posi = 100.0;
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <control_PID_Position+0x18c>)
 80016d4:	4a16      	ldr	r2, [pc, #88]	; (8001730 <control_PID_Position+0x190>)
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	e00b      	b.n	80016f2 <control_PID_Position+0x152>
  }
  else if (output_pid_posi < -100)
 80016da:	4b14      	ldr	r3, [pc, #80]	; (800172c <control_PID_Position+0x18c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4915      	ldr	r1, [pc, #84]	; (8001734 <control_PID_Position+0x194>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fced 	bl	80010c0 <__aeabi_fcmplt>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <control_PID_Position+0x152>
  {
    output_pid_posi = -100.0;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <control_PID_Position+0x18c>)
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <control_PID_Position+0x194>)
 80016f0:	601a      	str	r2, [r3, #0]
  }
  //	else if(output_pid < 0)
  //	{
  //		output_pid = 0;
  //	}
  pre_error_posi = error_posi;
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <control_PID_Position+0x184>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a0c      	ldr	r2, [pc, #48]	; (8001728 <control_PID_Position+0x188>)
 80016f8:	6013      	str	r3, [r2, #0]
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bdb0      	pop	{r4, r5, r7, pc}
 8001702:	bf00      	nop
 8001704:	f3af 8000 	nop.w
 8001708:	47ae147b 	.word	0x47ae147b
 800170c:	3f847ae1 	.word	0x3f847ae1
 8001710:	20000450 	.word	0x20000450
 8001714:	43b40000 	.word	0x43b40000
 8001718:	44f78000 	.word	0x44f78000
 800171c:	20000418 	.word	0x20000418
 8001720:	2000041c 	.word	0x2000041c
 8001724:	20000408 	.word	0x20000408
 8001728:	2000040c 	.word	0x2000040c
 800172c:	20000404 	.word	0x20000404
 8001730:	42c80000 	.word	0x42c80000
 8001734:	c2c80000 	.word	0xc2c80000

08001738 <control_PID_Velocity>:
void control_PID_Velocity(PID_control *pid_tune, float setpoint_velo, float Kp, float Ki, float Kd)
{ // velocity vong/phut
 8001738:	b5b0      	push	{r4, r5, r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
  velocity_real = (float)instance_enc.speed_by_encoder * 60.0f / (Ts * Pulseee);
 8001746:	4b5e      	ldr	r3, [pc, #376]	; (80018c0 <control_PID_Velocity+0x188>)
 8001748:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fac5 	bl	8000cdc <__aeabi_i2f>
 8001752:	4603      	mov	r3, r0
 8001754:	495b      	ldr	r1, [pc, #364]	; (80018c4 <control_PID_Velocity+0x18c>)
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fb14 	bl	8000d84 <__aeabi_fmul>
 800175c:	4603      	mov	r3, r0
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fe62 	bl	8000428 <__aeabi_f2d>
 8001764:	a352      	add	r3, pc, #328	; (adr r3, 80018b0 <control_PID_Velocity+0x178>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	f7fe ffdf 	bl	800072c <__aeabi_ddiv>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	f7ff f9a7 	bl	8000ac8 <__aeabi_d2f>
 800177a:	4603      	mov	r3, r0
 800177c:	4a52      	ldr	r2, [pc, #328]	; (80018c8 <control_PID_Velocity+0x190>)
 800177e:	6013      	str	r3, [r2, #0]
  error_velo = setpoint_velo - (velocity_real);
 8001780:	4b51      	ldr	r3, [pc, #324]	; (80018c8 <control_PID_Velocity+0x190>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	68b8      	ldr	r0, [r7, #8]
 8001788:	f7ff f9f2 	bl	8000b70 <__aeabi_fsub>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	4b4e      	ldr	r3, [pc, #312]	; (80018cc <control_PID_Velocity+0x194>)
 8001792:	601a      	str	r2, [r3, #0]
  instance_enc.velocity = velocity_real;
 8001794:	4b4c      	ldr	r3, [pc, #304]	; (80018c8 <control_PID_Velocity+0x190>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fcb9 	bl	8001110 <__aeabi_f2iz>
 800179e:	4603      	mov	r3, r0
 80017a0:	4a47      	ldr	r2, [pc, #284]	; (80018c0 <control_PID_Velocity+0x188>)
 80017a2:	60d3      	str	r3, [r2, #12]
  pid_tune->P_part = error_velo;
 80017a4:	4b49      	ldr	r3, [pc, #292]	; (80018cc <control_PID_Velocity+0x194>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	601a      	str	r2, [r3, #0]
  pid_tune->I_part += error_velo * Ts;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fe39 	bl	8000428 <__aeabi_f2d>
 80017b6:	4604      	mov	r4, r0
 80017b8:	460d      	mov	r5, r1
 80017ba:	4b44      	ldr	r3, [pc, #272]	; (80018cc <control_PID_Velocity+0x194>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fe32 	bl	8000428 <__aeabi_f2d>
 80017c4:	a33c      	add	r3, pc, #240	; (adr r3, 80018b8 <control_PID_Velocity+0x180>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	f7fe fe85 	bl	80004d8 <__aeabi_dmul>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4620      	mov	r0, r4
 80017d4:	4629      	mov	r1, r5
 80017d6:	f7fe fcc9 	bl	800016c <__adddf3>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff f971 	bl	8000ac8 <__aeabi_d2f>
 80017e6:	4602      	mov	r2, r0
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	605a      	str	r2, [r3, #4]
  pid_tune->D_part = (error_velo - pre_error_velo) / Ts;
 80017ec:	4b37      	ldr	r3, [pc, #220]	; (80018cc <control_PID_Velocity+0x194>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a37      	ldr	r2, [pc, #220]	; (80018d0 <control_PID_Velocity+0x198>)
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff f9ba 	bl	8000b70 <__aeabi_fsub>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe12 	bl	8000428 <__aeabi_f2d>
 8001804:	a32c      	add	r3, pc, #176	; (adr r3, 80018b8 <control_PID_Velocity+0x180>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	f7fe ff8f 	bl	800072c <__aeabi_ddiv>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	f7ff f957 	bl	8000ac8 <__aeabi_d2f>
 800181a:	4602      	mov	r2, r0
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	609a      	str	r2, [r3, #8]
  output_pid_velo = Kp * (pid_tune->P_part) + Ki * (pid_tune->I_part) + Kd * (pid_tune->D_part);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff faac 	bl	8000d84 <__aeabi_fmul>
 800182c:	4603      	mov	r3, r0
 800182e:	461c      	mov	r4, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	6839      	ldr	r1, [r7, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff faa4 	bl	8000d84 <__aeabi_fmul>
 800183c:	4603      	mov	r3, r0
 800183e:	4619      	mov	r1, r3
 8001840:	4620      	mov	r0, r4
 8001842:	f7ff f997 	bl	8000b74 <__addsf3>
 8001846:	4603      	mov	r3, r0
 8001848:	461c      	mov	r4, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	6a39      	ldr	r1, [r7, #32]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fa97 	bl	8000d84 <__aeabi_fmul>
 8001856:	4603      	mov	r3, r0
 8001858:	4619      	mov	r1, r3
 800185a:	4620      	mov	r0, r4
 800185c:	f7ff f98a 	bl	8000b74 <__addsf3>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <control_PID_Velocity+0x19c>)
 8001866:	601a      	str	r2, [r3, #0]
  if (output_pid_velo > 100.0)
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <control_PID_Velocity+0x19c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	491a      	ldr	r1, [pc, #104]	; (80018d8 <control_PID_Velocity+0x1a0>)
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fc44 	bl	80010fc <__aeabi_fcmpgt>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <control_PID_Velocity+0x14a>
  {
    output_pid_velo = 100.0;
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <control_PID_Velocity+0x19c>)
 800187c:	4a16      	ldr	r2, [pc, #88]	; (80018d8 <control_PID_Velocity+0x1a0>)
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e00b      	b.n	800189a <control_PID_Velocity+0x162>
  }
  else if (output_pid_velo < -100)
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <control_PID_Velocity+0x19c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4915      	ldr	r1, [pc, #84]	; (80018dc <control_PID_Velocity+0x1a4>)
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fc19 	bl	80010c0 <__aeabi_fcmplt>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <control_PID_Velocity+0x162>
  {
    output_pid_velo = -100.0;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <control_PID_Velocity+0x19c>)
 8001896:	4a11      	ldr	r2, [pc, #68]	; (80018dc <control_PID_Velocity+0x1a4>)
 8001898:	601a      	str	r2, [r3, #0]
  }
  pre_error_velo = error_velo;
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <control_PID_Velocity+0x194>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a0c      	ldr	r2, [pc, #48]	; (80018d0 <control_PID_Velocity+0x198>)
 80018a0:	6013      	str	r3, [r2, #0]
}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bdb0      	pop	{r4, r5, r7, pc}
 80018aa:	bf00      	nop
 80018ac:	f3af 8000 	nop.w
 80018b0:	cccccccd 	.word	0xcccccccd
 80018b4:	4033cccc 	.word	0x4033cccc
 80018b8:	47ae147b 	.word	0x47ae147b
 80018bc:	3f847ae1 	.word	0x3f847ae1
 80018c0:	20000450 	.word	0x20000450
 80018c4:	42700000 	.word	0x42700000
 80018c8:	20000420 	.word	0x20000420
 80018cc:	20000410 	.word	0x20000410
 80018d0:	20000414 	.word	0x20000414
 80018d4:	20000400 	.word	0x20000400
 80018d8:	42c80000 	.word	0x42c80000
 80018dc:	c2c80000 	.word	0xc2c80000

080018e0 <tune_PID_after>:

void tune_PID_after(Select_Tune select)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
  switch (select)
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 8099 	beq.w	8001a24 <tune_PID_after+0x144>
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	f040 80ae 	bne.w	8001a54 <tune_PID_after+0x174>
  {
  case Select_Posi:
    if (count_PID_position_first_time == true)
 80018f8:	4b59      	ldr	r3, [pc, #356]	; (8001a60 <tune_PID_after+0x180>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d027      	beq.n	8001950 <tune_PID_after+0x70>
    {
      control_PID_Position(&PID_contr, setpointQt, Kp_true, Ki_true, Kd_true);      // theo độ, tinh o lan dau vua moi chay dong co 1 lan duy nhat
 8001900:	4b58      	ldr	r3, [pc, #352]	; (8001a64 <tune_PID_after+0x184>)
 8001902:	6819      	ldr	r1, [r3, #0]
 8001904:	4b58      	ldr	r3, [pc, #352]	; (8001a68 <tune_PID_after+0x188>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b58      	ldr	r3, [pc, #352]	; (8001a6c <tune_PID_after+0x18c>)
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	4b58      	ldr	r3, [pc, #352]	; (8001a70 <tune_PID_after+0x190>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	4603      	mov	r3, r0
 8001914:	4857      	ldr	r0, [pc, #348]	; (8001a74 <tune_PID_after+0x194>)
 8001916:	f7ff fe43 	bl	80015a0 <control_PID_Position>
      control_PID_Velocity(&PID_contr, output_pid_posi, Kp_true, Ki_true, Kd_true); // setpoint cua speed bang voi output cua position
 800191a:	4b57      	ldr	r3, [pc, #348]	; (8001a78 <tune_PID_after+0x198>)
 800191c:	6819      	ldr	r1, [r3, #0]
 800191e:	4b52      	ldr	r3, [pc, #328]	; (8001a68 <tune_PID_after+0x188>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4b52      	ldr	r3, [pc, #328]	; (8001a6c <tune_PID_after+0x18c>)
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	4b52      	ldr	r3, [pc, #328]	; (8001a70 <tune_PID_after+0x190>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	4603      	mov	r3, r0
 800192e:	4851      	ldr	r0, [pc, #324]	; (8001a74 <tune_PID_after+0x194>)
 8001930:	f7ff ff02 	bl	8001738 <control_PID_Velocity>
      output_pid = output_pid_velo;
 8001934:	4b51      	ldr	r3, [pc, #324]	; (8001a7c <tune_PID_after+0x19c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a51      	ldr	r2, [pc, #324]	; (8001a80 <tune_PID_after+0x1a0>)
 800193a:	6013      	str	r3, [r2, #0]
      PWM_control_position(&htim1, output_pid);
 800193c:	4b50      	ldr	r3, [pc, #320]	; (8001a80 <tune_PID_after+0x1a0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4619      	mov	r1, r3
 8001942:	4850      	ldr	r0, [pc, #320]	; (8001a84 <tune_PID_after+0x1a4>)
 8001944:	f7ff fc62 	bl	800120c <PWM_control_position>
      count_PID_position_first_time = false;
 8001948:	4b45      	ldr	r3, [pc, #276]	; (8001a60 <tune_PID_after+0x180>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
      break;
 800194e:	e082      	b.n	8001a56 <tune_PID_after+0x176>
    }
    if (count_PID == 3) // 5 lan tinh PID toc do moi tinh 1 lan PID vi tri
 8001950:	4b4d      	ldr	r3, [pc, #308]	; (8001a88 <tune_PID_after+0x1a8>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d138      	bne.n	80019ca <tune_PID_after+0xea>
    {
      if (countUpdate == 250)
 8001958:	4b4c      	ldr	r3, [pc, #304]	; (8001a8c <tune_PID_after+0x1ac>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2bfa      	cmp	r3, #250	; 0xfa
 800195e:	d10c      	bne.n	800197a <tune_PID_after+0x9a>
      {
        setpointQt += 10;
 8001960:	4b40      	ldr	r3, [pc, #256]	; (8001a64 <tune_PID_after+0x184>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	494a      	ldr	r1, [pc, #296]	; (8001a90 <tune_PID_after+0x1b0>)
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff f904 	bl	8000b74 <__addsf3>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	4b3c      	ldr	r3, [pc, #240]	; (8001a64 <tune_PID_after+0x184>)
 8001972:	601a      	str	r2, [r3, #0]
        countUpdate = 0;
 8001974:	4b45      	ldr	r3, [pc, #276]	; (8001a8c <tune_PID_after+0x1ac>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
      }
      control_PID_Position(&PID_contr, setpointQt, Kp_true, Ki_true, Kd_true);      // tinh lai output_pid_posi moi
 800197a:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <tune_PID_after+0x184>)
 800197c:	6819      	ldr	r1, [r3, #0]
 800197e:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <tune_PID_after+0x188>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <tune_PID_after+0x18c>)
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	4b3a      	ldr	r3, [pc, #232]	; (8001a70 <tune_PID_after+0x190>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	4603      	mov	r3, r0
 800198e:	4839      	ldr	r0, [pc, #228]	; (8001a74 <tune_PID_after+0x194>)
 8001990:	f7ff fe06 	bl	80015a0 <control_PID_Position>
      control_PID_Velocity(&PID_contr, output_pid_posi, Kp_true, Ki_true, Kd_true); // setpoint cua speed bang voi output cua position
 8001994:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <tune_PID_after+0x198>)
 8001996:	6819      	ldr	r1, [r3, #0]
 8001998:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <tune_PID_after+0x188>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <tune_PID_after+0x18c>)
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	4b33      	ldr	r3, [pc, #204]	; (8001a70 <tune_PID_after+0x190>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	4603      	mov	r3, r0
 80019a8:	4832      	ldr	r0, [pc, #200]	; (8001a74 <tune_PID_after+0x194>)
 80019aa:	f7ff fec5 	bl	8001738 <control_PID_Velocity>
      output_pid = output_pid_velo;
 80019ae:	4b33      	ldr	r3, [pc, #204]	; (8001a7c <tune_PID_after+0x19c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a33      	ldr	r2, [pc, #204]	; (8001a80 <tune_PID_after+0x1a0>)
 80019b4:	6013      	str	r3, [r2, #0]
      PWM_control_position(&htim1, output_pid);
 80019b6:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <tune_PID_after+0x1a0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4619      	mov	r1, r3
 80019bc:	4831      	ldr	r0, [pc, #196]	; (8001a84 <tune_PID_after+0x1a4>)
 80019be:	f7ff fc25 	bl	800120c <PWM_control_position>
      count_PID = 0;
 80019c2:	4b31      	ldr	r3, [pc, #196]	; (8001a88 <tune_PID_after+0x1a8>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
      break;
 80019c8:	e045      	b.n	8001a56 <tune_PID_after+0x176>
    }
    else if (count_PID != 3)
 80019ca:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <tune_PID_after+0x1a8>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d028      	beq.n	8001a24 <tune_PID_after+0x144>
    {
      if (countUpdate == 250)
 80019d2:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <tune_PID_after+0x1ac>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2bfa      	cmp	r3, #250	; 0xfa
 80019d8:	d10c      	bne.n	80019f4 <tune_PID_after+0x114>
      {
        setpointQt += 10;
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <tune_PID_after+0x184>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	492c      	ldr	r1, [pc, #176]	; (8001a90 <tune_PID_after+0x1b0>)
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff f8c7 	bl	8000b74 <__addsf3>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <tune_PID_after+0x184>)
 80019ec:	601a      	str	r2, [r3, #0]
        countUpdate = 0;
 80019ee:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <tune_PID_after+0x1ac>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
      }
      control_PID_Velocity(&PID_contr, output_pid_posi, Kp_true, Ki_true, Kd_true); // setpoint cua speed bang voi output cua position
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <tune_PID_after+0x198>)
 80019f6:	6819      	ldr	r1, [r3, #0]
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <tune_PID_after+0x188>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <tune_PID_after+0x18c>)
 80019fe:	6818      	ldr	r0, [r3, #0]
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <tune_PID_after+0x190>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	4603      	mov	r3, r0
 8001a08:	481a      	ldr	r0, [pc, #104]	; (8001a74 <tune_PID_after+0x194>)
 8001a0a:	f7ff fe95 	bl	8001738 <control_PID_Velocity>
      output_pid = output_pid_velo;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <tune_PID_after+0x19c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1b      	ldr	r2, [pc, #108]	; (8001a80 <tune_PID_after+0x1a0>)
 8001a14:	6013      	str	r3, [r2, #0]
      PWM_control_position(&htim1, output_pid);
 8001a16:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <tune_PID_after+0x1a0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4819      	ldr	r0, [pc, #100]	; (8001a84 <tune_PID_after+0x1a4>)
 8001a1e:	f7ff fbf5 	bl	800120c <PWM_control_position>
      break;
 8001a22:	e018      	b.n	8001a56 <tune_PID_after+0x176>
//    if (countUpdate == 250)
//    {
//      setpointQt += 10;
//      countUpdate = 0;
//    }
    control_PID_Velocity(&PID_contr, setpointQt, Kp_true, Ki_true, Kd_true);
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <tune_PID_after+0x184>)
 8001a26:	6819      	ldr	r1, [r3, #0]
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <tune_PID_after+0x188>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <tune_PID_after+0x18c>)
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <tune_PID_after+0x190>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	4603      	mov	r3, r0
 8001a38:	480e      	ldr	r0, [pc, #56]	; (8001a74 <tune_PID_after+0x194>)
 8001a3a:	f7ff fe7d 	bl	8001738 <control_PID_Velocity>
    output_pid = output_pid_velo; // dong nhat het ve output_pid cho de kiem soat @_@
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <tune_PID_after+0x19c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a0f      	ldr	r2, [pc, #60]	; (8001a80 <tune_PID_after+0x1a0>)
 8001a44:	6013      	str	r3, [r2, #0]
    PWM_control_velocity(&htim1, output_pid);
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <tune_PID_after+0x1a0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480d      	ldr	r0, [pc, #52]	; (8001a84 <tune_PID_after+0x1a4>)
 8001a4e:	f7ff fc57 	bl	8001300 <PWM_control_velocity>
    break;
 8001a52:	e000      	b.n	8001a56 <tune_PID_after+0x176>
  default:
    break;
 8001a54:	bf00      	nop
  }
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000000 	.word	0x20000000
 8001a64:	200004d8 	.word	0x200004d8
 8001a68:	20000424 	.word	0x20000424
 8001a6c:	20000428 	.word	0x20000428
 8001a70:	2000042c 	.word	0x2000042c
 8001a74:	20000444 	.word	0x20000444
 8001a78:	20000404 	.word	0x20000404
 8001a7c:	20000400 	.word	0x20000400
 8001a80:	200003fc 	.word	0x200003fc
 8001a84:	20000258 	.word	0x20000258
 8001a88:	20000432 	.word	0x20000432
 8001a8c:	20000433 	.word	0x20000433
 8001a90:	41200000 	.word	0x41200000

08001a94 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a16      	ldr	r2, [pc, #88]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d101      	bne.n	8001aaa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    //		encoder(&htim2,&instance_enc);
    encoder();
 8001aa6:	f7ff fca5 	bl	80013f4 <encoder>
  }

  if (checkModeFromQt == 1 && flagAccept == 1)
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d113      	bne.n	8001ada <HAL_TIM_PeriodElapsedCallback+0x46>
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d10f      	bne.n	8001ada <HAL_TIM_PeriodElapsedCallback+0x46>
  {
    count_PID++;
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001ac4:	701a      	strb	r2, [r3, #0]
    countUpdate++;
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	3301      	adds	r3, #1
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001ad0:	701a      	strb	r2, [r3, #0]
    tune_PID_after(Select_Posi);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f7ff ff04 	bl	80018e0 <tune_PID_after>
 8001ad8:	e00a      	b.n	8001af0 <HAL_TIM_PeriodElapsedCallback+0x5c>
  }
  else if (checkModeFromQt == 2 && flagAccept == 1)
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d106      	bne.n	8001af0 <HAL_TIM_PeriodElapsedCallback+0x5c>
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d102      	bne.n	8001af0 <HAL_TIM_PeriodElapsedCallback+0x5c>
  {
    // control_PID_Velocity(&PID_contr, setpointQt, Kp_true, Ki_true, Kd_true);
    //	  control_PID_Velocity(&PID_contr, 30, 0.7, 1.9, 0.04);
//	countUpdate++;
    tune_PID_after(Select_Velo);
 8001aea:	2000      	movs	r0, #0
 8001aec:	f7ff fef8 	bl	80018e0 <tune_PID_after>
  }
  send_data_to_Qt();
 8001af0:	f7ff fcb6 	bl	8001460 <send_data_to_Qt>
  //  	control_PID_Velocity(&PID_contr, 40, Kp_true, Kd_true, Ki_true); // toc do 30vong/phut
  //  	select_mode(Select_Velo);
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40000400 	.word	0x40000400
 8001b00:	20000431 	.word	0x20000431
 8001b04:	20000430 	.word	0x20000430
 8001b08:	20000432 	.word	0x20000432
 8001b0c:	20000433 	.word	0x20000433

08001b10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <HAL_UART_RxCpltCallback+0x64>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d124      	bne.n	8001b6c <HAL_UART_RxCpltCallback+0x5c>
  {
    if (data_rx == PROTO_END_BYTE)
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_UART_RxCpltCallback+0x68>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d10e      	bne.n	8001b48 <HAL_UART_RxCpltCallback+0x38>
    {
      //     data_uart[uart_count++] = '\0';
      data_uart[uart_count++] = data_rx;
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <HAL_UART_RxCpltCallback+0x6c>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	b2d1      	uxtb	r1, r2
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <HAL_UART_RxCpltCallback+0x6c>)
 8001b34:	7011      	strb	r1, [r2, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <HAL_UART_RxCpltCallback+0x68>)
 8001b3a:	7819      	ldrb	r1, [r3, #0]
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_UART_RxCpltCallback+0x70>)
 8001b3e:	5499      	strb	r1, [r3, r2]

      uart_flag = 1; // co ky tu  la chuoi da duoc truyen xong
 8001b40:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <HAL_UART_RxCpltCallback+0x74>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]
 8001b46:	e00c      	b.n	8001b62 <HAL_UART_RxCpltCallback+0x52>
    }
    else
    {
      data_uart[uart_count] = data_rx;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_UART_RxCpltCallback+0x6c>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_UART_RxCpltCallback+0x68>)
 8001b50:	7819      	ldrb	r1, [r3, #0]
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_UART_RxCpltCallback+0x70>)
 8001b54:	5499      	strb	r1, [r3, r2]
      uart_count++;
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_UART_RxCpltCallback+0x6c>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <HAL_UART_RxCpltCallback+0x6c>)
 8001b60:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&data_rx, 1);
 8001b62:	2201      	movs	r2, #1
 8001b64:	4904      	ldr	r1, [pc, #16]	; (8001b78 <HAL_UART_RxCpltCallback+0x68>)
 8001b66:	4808      	ldr	r0, [pc, #32]	; (8001b88 <HAL_UART_RxCpltCallback+0x78>)
 8001b68:	f003 fad0 	bl	800510c <HAL_UART_Receive_IT>
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40013800 	.word	0x40013800
 8001b78:	200004d2 	.word	0x200004d2
 8001b7c:	200004d3 	.word	0x200004d3
 8001b80:	200004a0 	.word	0x200004a0
 8001b84:	200004d4 	.word	0x200004d4
 8001b88:	20000330 	.word	0x20000330

08001b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b92:	f000 fe8f 	bl	80028b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b96:	f000 f92b 	bl	8001df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b9a:	f000 fb1b 	bl	80021d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b9e:	f000 faf3 	bl	8002188 <MX_DMA_Init>
  MX_I2C1_Init();
 8001ba2:	f000 f967 	bl	8001e74 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001ba6:	f000 f993 	bl	8001ed0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001baa:	f000 fa21 	bl	8001ff0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bae:	f000 fa73 	bl	8002098 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001bb2:	f000 fabf 	bl	8002134 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001bb6:	213c      	movs	r1, #60	; 0x3c
 8001bb8:	4876      	ldr	r0, [pc, #472]	; (8001d94 <main+0x208>)
 8001bba:	f002 fbb9 	bl	8004330 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001bbe:	4876      	ldr	r0, [pc, #472]	; (8001d98 <main+0x20c>)
 8001bc0:	f002 f9d0 	bl	8003f64 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001bc4:	2108      	movs	r1, #8
 8001bc6:	4875      	ldr	r0, [pc, #468]	; (8001d9c <main+0x210>)
 8001bc8:	f002 fa6e 	bl	80040a8 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&data_rx, 1);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4974      	ldr	r1, [pc, #464]	; (8001da0 <main+0x214>)
 8001bd0:	4874      	ldr	r0, [pc, #464]	; (8001da4 <main+0x218>)
 8001bd2:	f003 fa9b 	bl	800510c <HAL_UART_Receive_IT>
  while (1)
  {
    //	  a = __HAL_TIM_GET_COUNTER(&htim2);
    //	  HAL_GPIO_WritePin(IN1_GPIO_Port,IN1_Pin,GPIO_PIN_SET);
    //	  HAL_GPIO_WritePin(IN2_GPIO_Port,IN2_Pin,GPIO_PIN_RESET); chieu thuan cung chieu kim dong ho day!!!
    real_data = 1;
 8001bd6:	4b74      	ldr	r3, [pc, #464]	; (8001da8 <main+0x21c>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
//    checkModeFromQt = 1;
//    flagAccept = 1;
//    send_data_to_Qt();
    if (uart_flag == 1)
 8001bdc:	4b73      	ldr	r3, [pc, #460]	; (8001dac <main+0x220>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d1f8      	bne.n	8001bd6 <main+0x4a>
    {
      memset(data_after_cut, 0, uart_count);
 8001be4:	4b72      	ldr	r3, [pc, #456]	; (8001db0 <main+0x224>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	2100      	movs	r1, #0
 8001bec:	4871      	ldr	r0, [pc, #452]	; (8001db4 <main+0x228>)
 8001bee:	f004 f945 	bl	8005e7c <memset>
      //    memset(uart_here.au8RxBuffer, 0, PROTO_DATA_SIZE_RX+4);
      memcpy(uart_here.au8RxBuffer, (uint8_t *)data_uart, uart_count);
 8001bf2:	4b6f      	ldr	r3, [pc, #444]	; (8001db0 <main+0x224>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	496f      	ldr	r1, [pc, #444]	; (8001db8 <main+0x22c>)
 8001bfa:	4870      	ldr	r0, [pc, #448]	; (8001dbc <main+0x230>)
 8001bfc:	f004 f930 	bl	8005e60 <memcpy>
      check_true_false = UART_get_data(uart_here.au8RxBuffer, uart_count, data_after_cut, &get_data_lenght); // sau ham nay data_after_cut se chua cac data byte cua Kp Ki Kd
 8001c00:	4b6b      	ldr	r3, [pc, #428]	; (8001db0 <main+0x224>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	b299      	uxth	r1, r3
 8001c06:	4b6e      	ldr	r3, [pc, #440]	; (8001dc0 <main+0x234>)
 8001c08:	4a6a      	ldr	r2, [pc, #424]	; (8001db4 <main+0x228>)
 8001c0a:	486c      	ldr	r0, [pc, #432]	; (8001dbc <main+0x230>)
 8001c0c:	f003 ffb8 	bl	8005b80 <UART_get_data>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461a      	mov	r2, r3
 8001c14:	4b6b      	ldr	r3, [pc, #428]	; (8001dc4 <main+0x238>)
 8001c16:	701a      	strb	r2, [r3, #0]
 //     char message[] = {0};
      if (check_true_false == -1)
 8001c18:	4b6a      	ldr	r3, [pc, #424]	; (8001dc4 <main+0x238>)
 8001c1a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c22:	d103      	bne.n	8001c2c <main+0xa0>
      {
        real_data = 0;
 8001c24:	4b60      	ldr	r3, [pc, #384]	; (8001da8 <main+0x21c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
 8001c2a:	e012      	b.n	8001c52 <main+0xc6>
        // hien thi thong bao No valid message found tren Qt
//        sprintf(message, "No valid message because %d", check_true_false);
//        HAL_UART_Transmit_DMA(&huart1, (uint8_t *)message, strlen(message));
      }
      else if (check_true_false == -2)
 8001c2c:	4b65      	ldr	r3, [pc, #404]	; (8001dc4 <main+0x238>)
 8001c2e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c32:	f113 0f02 	cmn.w	r3, #2
 8001c36:	d103      	bne.n	8001c40 <main+0xb4>
      {
        real_data = 0;
 8001c38:	4b5b      	ldr	r3, [pc, #364]	; (8001da8 <main+0x21c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
 8001c3e:	e008      	b.n	8001c52 <main+0xc6>
//        sprintf(message, "Invalid CRC because %d", check_true_false);
//        HAL_UART_Transmit_DMA(&huart1, (uint8_t *)message, strlen(message));
        // hien thi Invalid CRC tren Qt
      }
      else if (check_true_false == -3)
 8001c40:	4b60      	ldr	r3, [pc, #384]	; (8001dc4 <main+0x238>)
 8001c42:	f993 3000 	ldrsb.w	r3, [r3]
 8001c46:	f113 0f03 	cmn.w	r3, #3
 8001c4a:	d102      	bne.n	8001c52 <main+0xc6>
      {
        real_data = 0;
 8001c4c:	4b56      	ldr	r3, [pc, #344]	; (8001da8 <main+0x21c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
//        sprintf(message, "Destination buffer too small because %d", check_true_false);
//        HAL_UART_Transmit_DMA(&huart1, (uint8_t *)message, strlen(message));
        // hien thi Destination buffer too small tren Qt
      }
      if (real_data == 1)
 8001c52:	4b55      	ldr	r3, [pc, #340]	; (8001da8 <main+0x21c>)
 8001c54:	f993 3000 	ldrsb.w	r3, [r3]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	f040 808d 	bne.w	8001d78 <main+0x1ec>
      {
        while (1) // neu toi duoc day thi đã nhận đúng data rồi
        {
          //   strcpy(data_after_cut, data_uart);
          if (data_after_cut[0] == 0x22) // 'S' la set a' :))
 8001c5e:	4b55      	ldr	r3, [pc, #340]	; (8001db4 <main+0x228>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b22      	cmp	r3, #34	; 0x22
 8001c64:	d108      	bne.n	8001c78 <main+0xec>
          {
            //  checkModeFromQt = string_cut_checkMode(data_after_cut);
            setpointQt = *((float *)(data_after_cut + 1));
 8001c66:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <main+0x228>)
 8001c68:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001c6c:	4a56      	ldr	r2, [pc, #344]	; (8001dc8 <main+0x23c>)
 8001c6e:	6013      	str	r3, [r2, #0]
            checkModeFromQt = 1;
 8001c70:	4b56      	ldr	r3, [pc, #344]	; (8001dcc <main+0x240>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]
            break;
 8001c76:	e07f      	b.n	8001d78 <main+0x1ec>
          }
          else if (data_after_cut[0] == 0x33) // 'S' la set a' :))
 8001c78:	4b4e      	ldr	r3, [pc, #312]	; (8001db4 <main+0x228>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b33      	cmp	r3, #51	; 0x33
 8001c7e:	d108      	bne.n	8001c92 <main+0x106>
          {

            setpointQt = *((float *)(data_after_cut + 1));
 8001c80:	4b4c      	ldr	r3, [pc, #304]	; (8001db4 <main+0x228>)
 8001c82:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001c86:	4a50      	ldr	r2, [pc, #320]	; (8001dc8 <main+0x23c>)
 8001c88:	6013      	str	r3, [r2, #0]
            checkModeFromQt = 2;
 8001c8a:	4b50      	ldr	r3, [pc, #320]	; (8001dcc <main+0x240>)
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	701a      	strb	r2, [r3, #0]
            break;
 8001c90:	e072      	b.n	8001d78 <main+0x1ec>
          }
          else if (data_after_cut[0] == 0x55) // G la GOOOO!!! a' :)), nhap nut RUN trong GUI thi gửi chữ 'G'
 8001c92:	4b48      	ldr	r3, [pc, #288]	; (8001db4 <main+0x228>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b55      	cmp	r3, #85	; 0x55
 8001c98:	d103      	bne.n	8001ca2 <main+0x116>
          {
            flagAccept = 1;
 8001c9a:	4b4d      	ldr	r3, [pc, #308]	; (8001dd0 <main+0x244>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	701a      	strb	r2, [r3, #0]
            break;
 8001ca0:	e06a      	b.n	8001d78 <main+0x1ec>
          }
          //      else if (data_after_cut[0] == 'K')
          else if (data_after_cut[0] == 0x11)
 8001ca2:	4b44      	ldr	r3, [pc, #272]	; (8001db4 <main+0x228>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b11      	cmp	r3, #17
 8001ca8:	d10f      	bne.n	8001cca <main+0x13e>
          {
            //        Kp_true = string_cut(data_after_cut, "Kp");
            //        Ki_true = string_cut(data_after_cut, "Ki");
            //        Kd_true = string_cut(data_after_cut, "Kd");
            Kp_true = *((float *)(data_after_cut + 1));
 8001caa:	4b42      	ldr	r3, [pc, #264]	; (8001db4 <main+0x228>)
 8001cac:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001cb0:	4a48      	ldr	r2, [pc, #288]	; (8001dd4 <main+0x248>)
 8001cb2:	6013      	str	r3, [r2, #0]
            Ki_true = *((float *)(data_after_cut + 5));
 8001cb4:	4b3f      	ldr	r3, [pc, #252]	; (8001db4 <main+0x228>)
 8001cb6:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8001cba:	4a47      	ldr	r2, [pc, #284]	; (8001dd8 <main+0x24c>)
 8001cbc:	6013      	str	r3, [r2, #0]
            Kd_true = *((float *)(data_after_cut + 9));
 8001cbe:	4b3d      	ldr	r3, [pc, #244]	; (8001db4 <main+0x228>)
 8001cc0:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8001cc4:	4a45      	ldr	r2, [pc, #276]	; (8001ddc <main+0x250>)
 8001cc6:	6013      	str	r3, [r2, #0]
            break;
 8001cc8:	e056      	b.n	8001d78 <main+0x1ec>
          }
          else if (data_after_cut[0] == 0x44)
 8001cca:	4b3a      	ldr	r3, [pc, #232]	; (8001db4 <main+0x228>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b44      	cmp	r3, #68	; 0x44
 8001cd0:	d1c5      	bne.n	8001c5e <main+0xd2>
          {
            Kp_true = Ki_true = Kd_true = 0; // nhan nut Reset
 8001cd2:	4b42      	ldr	r3, [pc, #264]	; (8001ddc <main+0x250>)
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	4b40      	ldr	r3, [pc, #256]	; (8001ddc <main+0x250>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a3e      	ldr	r2, [pc, #248]	; (8001dd8 <main+0x24c>)
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b3d      	ldr	r3, [pc, #244]	; (8001dd8 <main+0x24c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a3b      	ldr	r2, [pc, #236]	; (8001dd4 <main+0x248>)
 8001ce8:	6013      	str	r3, [r2, #0]
            htim2.Instance->CNT = 0;
 8001cea:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <main+0x208>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24
            instance_enc.position = 0;
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <main+0x254>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
            instance_enc.speed_by_encoder = 0;
 8001cf8:	4b39      	ldr	r3, [pc, #228]	; (8001de0 <main+0x254>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	809a      	strh	r2, [r3, #4]
            setpointQt = 0;
 8001cfe:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <main+0x23c>)
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
            if (checkModeFromQt == 1)
 8001d06:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <main+0x240>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d10d      	bne.n	8001d2a <main+0x19e>
            {
              control_PID_Position(&PID_contr, setpointQt, Kp_true, Ki_true, Kd_true);
 8001d0e:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <main+0x23c>)
 8001d10:	6819      	ldr	r1, [r3, #0]
 8001d12:	4b30      	ldr	r3, [pc, #192]	; (8001dd4 <main+0x248>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <main+0x24c>)
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	4b30      	ldr	r3, [pc, #192]	; (8001ddc <main+0x250>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	4603      	mov	r3, r0
 8001d22:	4830      	ldr	r0, [pc, #192]	; (8001de4 <main+0x258>)
 8001d24:	f7ff fc3c 	bl	80015a0 <control_PID_Position>
 8001d28:	e010      	b.n	8001d4c <main+0x1c0>
            }
            else if (checkModeFromQt == 2)
 8001d2a:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <main+0x240>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d10c      	bne.n	8001d4c <main+0x1c0>
            {
              control_PID_Velocity(&PID_contr, setpointQt, Kp_true, Ki_true, Kd_true);
 8001d32:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <main+0x23c>)
 8001d34:	6819      	ldr	r1, [r3, #0]
 8001d36:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <main+0x248>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <main+0x24c>)
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <main+0x250>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	4603      	mov	r3, r0
 8001d46:	4827      	ldr	r0, [pc, #156]	; (8001de4 <main+0x258>)
 8001d48:	f7ff fcf6 	bl	8001738 <control_PID_Velocity>
            }
            output_pid = 0;
 8001d4c:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <main+0x25c>)
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET); // ko co cai nay dong co no chi dung lai thui chu ko co het keu :)))
 8001d54:	2201      	movs	r2, #1
 8001d56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d5a:	4824      	ldr	r0, [pc, #144]	; (8001dec <main+0x260>)
 8001d5c:	f001 fb3c 	bl	80033d8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001d60:	2201      	movs	r2, #1
 8001d62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d66:	4821      	ldr	r0, [pc, #132]	; (8001dec <main+0x260>)
 8001d68:	f001 fb36 	bl	80033d8 <HAL_GPIO_WritePin>
            checkModeFromQt = 0; // do co ham nay = 0, nen phai set output_pid ve 0 luon do no ko nhay vo ham tinh output_pid tu Kp Ki Kd
 8001d6c:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <main+0x240>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
            flagAccept = 0;
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <main+0x244>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
            break;
          }
        }
      }
      memset(data_uart, 0, uart_count);
 8001d78:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <main+0x224>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2100      	movs	r1, #0
 8001d80:	480d      	ldr	r0, [pc, #52]	; (8001db8 <main+0x22c>)
 8001d82:	f004 f87b 	bl	8005e7c <memset>
      uart_flag = 0;
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <main+0x220>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
      uart_count = 0;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <main+0x224>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
    real_data = 1;
 8001d92:	e720      	b.n	8001bd6 <main+0x4a>
 8001d94:	200002a0 	.word	0x200002a0
 8001d98:	200002e8 	.word	0x200002e8
 8001d9c:	20000258 	.word	0x20000258
 8001da0:	200004d2 	.word	0x200004d2
 8001da4:	20000330 	.word	0x20000330
 8001da8:	20000001 	.word	0x20000001
 8001dac:	200004d4 	.word	0x200004d4
 8001db0:	200004d3 	.word	0x200004d3
 8001db4:	20000434 	.word	0x20000434
 8001db8:	200004a0 	.word	0x200004a0
 8001dbc:	20000472 	.word	0x20000472
 8001dc0:	20000460 	.word	0x20000460
 8001dc4:	20000490 	.word	0x20000490
 8001dc8:	200004d8 	.word	0x200004d8
 8001dcc:	20000431 	.word	0x20000431
 8001dd0:	20000430 	.word	0x20000430
 8001dd4:	20000424 	.word	0x20000424
 8001dd8:	20000428 	.word	0x20000428
 8001ddc:	2000042c 	.word	0x2000042c
 8001de0:	20000450 	.word	0x20000450
 8001de4:	20000444 	.word	0x20000444
 8001de8:	200003fc 	.word	0x200003fc
 8001dec:	40010c00 	.word	0x40010c00

08001df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b090      	sub	sp, #64	; 0x40
 8001df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df6:	f107 0318 	add.w	r3, r7, #24
 8001dfa:	2228      	movs	r2, #40	; 0x28
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 f83c 	bl	8005e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
 8001e10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e12:	2302      	movs	r3, #2
 8001e14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e16:	2301      	movs	r3, #1
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e1a:	2310      	movs	r3, #16
 8001e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001e22:	2300      	movs	r3, #0
 8001e24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001e26:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e2c:	f107 0318 	add.w	r3, r7, #24
 8001e30:	4618      	mov	r0, r3
 8001e32:	f001 fc2d 	bl	8003690 <HAL_RCC_OscConfig>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001e3c:	f000 fa0a 	bl	8002254 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e40:	230f      	movs	r3, #15
 8001e42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e44:	2302      	movs	r3, #2
 8001e46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	2102      	movs	r1, #2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f001 fe9a 	bl	8003b94 <HAL_RCC_ClockConfig>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001e66:	f000 f9f5 	bl	8002254 <Error_Handler>
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	3740      	adds	r7, #64	; 0x40
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001e7a:	4a13      	ldr	r2, [pc, #76]	; (8001ec8 <MX_I2C1_Init+0x54>)
 8001e7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001e80:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <MX_I2C1_Init+0x58>)
 8001e82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001e92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e98:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001eb0:	4804      	ldr	r0, [pc, #16]	; (8001ec4 <MX_I2C1_Init+0x50>)
 8001eb2:	f001 faa9 	bl	8003408 <HAL_I2C_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ebc:	f000 f9ca 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000204 	.word	0x20000204
 8001ec8:	40005400 	.word	0x40005400
 8001ecc:	000186a0 	.word	0x000186a0

08001ed0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b092      	sub	sp, #72	; 0x48
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
 8001ef0:	615a      	str	r2, [r3, #20]
 8001ef2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 ffbe 	bl	8005e7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f00:	4b39      	ldr	r3, [pc, #228]	; (8001fe8 <MX_TIM1_Init+0x118>)
 8001f02:	4a3a      	ldr	r2, [pc, #232]	; (8001fec <MX_TIM1_Init+0x11c>)
 8001f04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8001f06:	4b38      	ldr	r3, [pc, #224]	; (8001fe8 <MX_TIM1_Init+0x118>)
 8001f08:	223f      	movs	r2, #63	; 0x3f
 8001f0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f0c:	4b36      	ldr	r3, [pc, #216]	; (8001fe8 <MX_TIM1_Init+0x118>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001f12:	4b35      	ldr	r3, [pc, #212]	; (8001fe8 <MX_TIM1_Init+0x118>)
 8001f14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f1a:	4b33      	ldr	r3, [pc, #204]	; (8001fe8 <MX_TIM1_Init+0x118>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f20:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <MX_TIM1_Init+0x118>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f26:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <MX_TIM1_Init+0x118>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f2c:	482e      	ldr	r0, [pc, #184]	; (8001fe8 <MX_TIM1_Init+0x118>)
 8001f2e:	f002 f86b 	bl	8004008 <HAL_TIM_PWM_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001f38:	f000 f98c 	bl	8002254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4827      	ldr	r0, [pc, #156]	; (8001fe8 <MX_TIM1_Init+0x118>)
 8001f4c:	f002 ffd0 	bl	8004ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001f56:	f000 f97d 	bl	8002254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f5a:	2360      	movs	r3, #96	; 0x60
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f62:	2300      	movs	r3, #0
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f66:	2300      	movs	r3, #0
 8001f68:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	481a      	ldr	r0, [pc, #104]	; (8001fe8 <MX_TIM1_Init+0x118>)
 8001f80:	f002 fb6c 	bl	800465c <HAL_TIM_PWM_ConfigChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001f8a:	f000 f963 	bl	8002254 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f92:	2208      	movs	r2, #8
 8001f94:	4619      	mov	r1, r3
 8001f96:	4814      	ldr	r0, [pc, #80]	; (8001fe8 <MX_TIM1_Init+0x118>)
 8001f98:	f002 fb60 	bl	800465c <HAL_TIM_PWM_ConfigChannel>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001fa2:	f000 f957 	bl	8002254 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fbe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4807      	ldr	r0, [pc, #28]	; (8001fe8 <MX_TIM1_Init+0x118>)
 8001fca:	f002 ffef 	bl	8004fac <HAL_TIMEx_ConfigBreakDeadTime>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001fd4:	f000 f93e 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fd8:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <MX_TIM1_Init+0x118>)
 8001fda:	f000 fa43 	bl	8002464 <HAL_TIM_MspPostInit>

}
 8001fde:	bf00      	nop
 8001fe0:	3748      	adds	r7, #72	; 0x48
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000258 	.word	0x20000258
 8001fec:	40012c00 	.word	0x40012c00

08001ff0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08c      	sub	sp, #48	; 0x30
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ff6:	f107 030c 	add.w	r3, r7, #12
 8001ffa:	2224      	movs	r2, #36	; 0x24
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 ff3c 	bl	8005e7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800200c:	4b21      	ldr	r3, [pc, #132]	; (8002094 <MX_TIM2_Init+0xa4>)
 800200e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002012:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002014:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <MX_TIM2_Init+0xa4>)
 8002016:	2200      	movs	r2, #0
 8002018:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <MX_TIM2_Init+0xa4>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002020:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <MX_TIM2_Init+0xa4>)
 8002022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002026:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002028:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <MX_TIM2_Init+0xa4>)
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800202e:	4b19      	ldr	r3, [pc, #100]	; (8002094 <MX_TIM2_Init+0xa4>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002034:	2303      	movs	r3, #3
 8002036:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800203c:	2301      	movs	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002040:	2300      	movs	r3, #0
 8002042:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002048:	2300      	movs	r3, #0
 800204a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800204c:	2301      	movs	r3, #1
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002050:	2300      	movs	r3, #0
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002058:	f107 030c 	add.w	r3, r7, #12
 800205c:	4619      	mov	r1, r3
 800205e:	480d      	ldr	r0, [pc, #52]	; (8002094 <MX_TIM2_Init+0xa4>)
 8002060:	f002 f8c4 	bl	80041ec <HAL_TIM_Encoder_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800206a:	f000 f8f3 	bl	8002254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	4619      	mov	r1, r3
 800207a:	4806      	ldr	r0, [pc, #24]	; (8002094 <MX_TIM2_Init+0xa4>)
 800207c:	f002 ff38 	bl	8004ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002086:	f000 f8e5 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800208a:	bf00      	nop
 800208c:	3730      	adds	r7, #48	; 0x30
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200002a0 	.word	0x200002a0

08002098 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800209e:	f107 0308 	add.w	r3, r7, #8
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ac:	463b      	mov	r3, r7
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <MX_TIM3_Init+0x94>)
 80020b6:	4a1e      	ldr	r2, [pc, #120]	; (8002130 <MX_TIM3_Init+0x98>)
 80020b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 80020ba:	4b1c      	ldr	r3, [pc, #112]	; (800212c <MX_TIM3_Init+0x94>)
 80020bc:	f240 227f 	movw	r2, #639	; 0x27f
 80020c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	; (800212c <MX_TIM3_Init+0x94>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <MX_TIM3_Init+0x94>)
 80020ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d0:	4b16      	ldr	r3, [pc, #88]	; (800212c <MX_TIM3_Init+0x94>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <MX_TIM3_Init+0x94>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020dc:	4813      	ldr	r0, [pc, #76]	; (800212c <MX_TIM3_Init+0x94>)
 80020de:	f001 fef1 	bl	8003ec4 <HAL_TIM_Base_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80020e8:	f000 f8b4 	bl	8002254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020f2:	f107 0308 	add.w	r3, r7, #8
 80020f6:	4619      	mov	r1, r3
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <MX_TIM3_Init+0x94>)
 80020fa:	f002 fb6d 	bl	80047d8 <HAL_TIM_ConfigClockSource>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002104:	f000 f8a6 	bl	8002254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002110:	463b      	mov	r3, r7
 8002112:	4619      	mov	r1, r3
 8002114:	4805      	ldr	r0, [pc, #20]	; (800212c <MX_TIM3_Init+0x94>)
 8002116:	f002 feeb 	bl	8004ef0 <HAL_TIMEx_MasterConfigSynchronization>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002120:	f000 f898 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002124:	bf00      	nop
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	200002e8 	.word	0x200002e8
 8002130:	40000400 	.word	0x40000400

08002134 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <MX_USART1_UART_Init+0x4c>)
 800213a:	4a12      	ldr	r2, [pc, #72]	; (8002184 <MX_USART1_UART_Init+0x50>)
 800213c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <MX_USART1_UART_Init+0x4c>)
 8002140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002144:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <MX_USART1_UART_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <MX_USART1_UART_Init+0x4c>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <MX_USART1_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <MX_USART1_UART_Init+0x4c>)
 800215a:	220c      	movs	r2, #12
 800215c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <MX_USART1_UART_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <MX_USART1_UART_Init+0x4c>)
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800216a:	4805      	ldr	r0, [pc, #20]	; (8002180 <MX_USART1_UART_Init+0x4c>)
 800216c:	f002 ff81 	bl	8005072 <HAL_UART_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002176:	f000 f86d 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000330 	.word	0x20000330
 8002184:	40013800 	.word	0x40013800

08002188 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <MX_DMA_Init+0x48>)
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <MX_DMA_Init+0x48>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6153      	str	r3, [r2, #20]
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <MX_DMA_Init+0x48>)
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2100      	movs	r1, #0
 80021aa:	200e      	movs	r0, #14
 80021ac:	f000 fcbb 	bl	8002b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80021b0:	200e      	movs	r0, #14
 80021b2:	f000 fcd4 	bl	8002b5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	200f      	movs	r0, #15
 80021bc:	f000 fcb3 	bl	8002b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80021c0:	200f      	movs	r0, #15
 80021c2:	f000 fccc 	bl	8002b5e <HAL_NVIC_EnableIRQ>

}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000

080021d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021da:	f107 0308 	add.w	r3, r7, #8
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e8:	4b18      	ldr	r3, [pc, #96]	; (800224c <MX_GPIO_Init+0x78>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	4a17      	ldr	r2, [pc, #92]	; (800224c <MX_GPIO_Init+0x78>)
 80021ee:	f043 0304 	orr.w	r3, r3, #4
 80021f2:	6193      	str	r3, [r2, #24]
 80021f4:	4b15      	ldr	r3, [pc, #84]	; (800224c <MX_GPIO_Init+0x78>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <MX_GPIO_Init+0x78>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	4a11      	ldr	r2, [pc, #68]	; (800224c <MX_GPIO_Init+0x78>)
 8002206:	f043 0308 	orr.w	r3, r3, #8
 800220a:	6193      	str	r3, [r2, #24]
 800220c:	4b0f      	ldr	r3, [pc, #60]	; (800224c <MX_GPIO_Init+0x78>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8002218:	2200      	movs	r2, #0
 800221a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800221e:	480c      	ldr	r0, [pc, #48]	; (8002250 <MX_GPIO_Init+0x7c>)
 8002220:	f001 f8da 	bl	80033d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8002224:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002228:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222a:	2301      	movs	r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002232:	2302      	movs	r3, #2
 8002234:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002236:	f107 0308 	add.w	r3, r7, #8
 800223a:	4619      	mov	r1, r3
 800223c:	4804      	ldr	r0, [pc, #16]	; (8002250 <MX_GPIO_Init+0x7c>)
 800223e:	f000 ff47 	bl	80030d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002242:	bf00      	nop
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40021000 	.word	0x40021000
 8002250:	40010c00 	.word	0x40010c00

08002254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002258:	b672      	cpsid	i
}
 800225a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800225c:	e7fe      	b.n	800225c <Error_Handler+0x8>
	...

08002260 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_MspInit+0x5c>)
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	4a14      	ldr	r2, [pc, #80]	; (80022bc <HAL_MspInit+0x5c>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6193      	str	r3, [r2, #24]
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_MspInit+0x5c>)
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <HAL_MspInit+0x5c>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <HAL_MspInit+0x5c>)
 8002284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002288:	61d3      	str	r3, [r2, #28]
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <HAL_MspInit+0x5c>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_MspInit+0x60>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <HAL_MspInit+0x60>)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40010000 	.word	0x40010000

080022c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	; 0x28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a1d      	ldr	r2, [pc, #116]	; (8002354 <HAL_I2C_MspInit+0x90>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d132      	bne.n	800234a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e4:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <HAL_I2C_MspInit+0x94>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a1b      	ldr	r2, [pc, #108]	; (8002358 <HAL_I2C_MspInit+0x94>)
 80022ea:	f043 0308 	orr.w	r3, r3, #8
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_I2C_MspInit+0x94>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002302:	2312      	movs	r3, #18
 8002304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002306:	2303      	movs	r3, #3
 8002308:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4619      	mov	r1, r3
 8002310:	4812      	ldr	r0, [pc, #72]	; (800235c <HAL_I2C_MspInit+0x98>)
 8002312:	f000 fedd 	bl	80030d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_I2C_MspInit+0x9c>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	f043 0302 	orr.w	r3, r3, #2
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
 800232c:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <HAL_I2C_MspInit+0x9c>)
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_I2C_MspInit+0x94>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	4a08      	ldr	r2, [pc, #32]	; (8002358 <HAL_I2C_MspInit+0x94>)
 8002338:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800233c:	61d3      	str	r3, [r2, #28]
 800233e:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_I2C_MspInit+0x94>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800234a:	bf00      	nop
 800234c:	3728      	adds	r7, #40	; 0x28
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40005400 	.word	0x40005400
 8002358:	40021000 	.word	0x40021000
 800235c:	40010c00 	.word	0x40010c00
 8002360:	40010000 	.word	0x40010000

08002364 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a09      	ldr	r2, [pc, #36]	; (8002398 <HAL_TIM_PWM_MspInit+0x34>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10b      	bne.n	800238e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_TIM_PWM_MspInit+0x38>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	4a08      	ldr	r2, [pc, #32]	; (800239c <HAL_TIM_PWM_MspInit+0x38>)
 800237c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002380:	6193      	str	r3, [r2, #24]
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_TIM_PWM_MspInit+0x38>)
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	40012c00 	.word	0x40012c00
 800239c:	40021000 	.word	0x40021000

080023a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0310 	add.w	r3, r7, #16
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023be:	d123      	bne.n	8002408 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023c0:	4b13      	ldr	r3, [pc, #76]	; (8002410 <HAL_TIM_Encoder_MspInit+0x70>)
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	4a12      	ldr	r2, [pc, #72]	; (8002410 <HAL_TIM_Encoder_MspInit+0x70>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	61d3      	str	r3, [r2, #28]
 80023cc:	4b10      	ldr	r3, [pc, #64]	; (8002410 <HAL_TIM_Encoder_MspInit+0x70>)
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d8:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <HAL_TIM_Encoder_MspInit+0x70>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	4a0c      	ldr	r2, [pc, #48]	; (8002410 <HAL_TIM_Encoder_MspInit+0x70>)
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	6193      	str	r3, [r2, #24]
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_TIM_Encoder_MspInit+0x70>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM2_ENCODER1_Pin|TIM2_ENCODER2_Pin;
 80023f0:	2303      	movs	r3, #3
 80023f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fc:	f107 0310 	add.w	r3, r7, #16
 8002400:	4619      	mov	r1, r3
 8002402:	4804      	ldr	r0, [pc, #16]	; (8002414 <HAL_TIM_Encoder_MspInit+0x74>)
 8002404:	f000 fe64 	bl	80030d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002408:	bf00      	nop
 800240a:	3720      	adds	r7, #32
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	40010800 	.word	0x40010800

08002418 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0d      	ldr	r2, [pc, #52]	; (800245c <HAL_TIM_Base_MspInit+0x44>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d113      	bne.n	8002452 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800242a:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <HAL_TIM_Base_MspInit+0x48>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4a0c      	ldr	r2, [pc, #48]	; (8002460 <HAL_TIM_Base_MspInit+0x48>)
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	61d3      	str	r3, [r2, #28]
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_TIM_Base_MspInit+0x48>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002442:	2200      	movs	r2, #0
 8002444:	2100      	movs	r1, #0
 8002446:	201d      	movs	r0, #29
 8002448:	f000 fb6d 	bl	8002b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800244c:	201d      	movs	r0, #29
 800244e:	f000 fb86 	bl	8002b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40000400 	.word	0x40000400
 8002460:	40021000 	.word	0x40021000

08002464 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0310 	add.w	r3, r7, #16
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a10      	ldr	r2, [pc, #64]	; (80024c0 <HAL_TIM_MspPostInit+0x5c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d118      	bne.n	80024b6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <HAL_TIM_MspPostInit+0x60>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	4a0e      	ldr	r2, [pc, #56]	; (80024c4 <HAL_TIM_MspPostInit+0x60>)
 800248a:	f043 0304 	orr.w	r3, r3, #4
 800248e:	6193      	str	r3, [r2, #24]
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <HAL_TIM_MspPostInit+0x60>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_CH2_Pin|PWM_CH3_Pin;
 800249c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a2:	2302      	movs	r3, #2
 80024a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2302      	movs	r3, #2
 80024a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024aa:	f107 0310 	add.w	r3, r7, #16
 80024ae:	4619      	mov	r1, r3
 80024b0:	4805      	ldr	r0, [pc, #20]	; (80024c8 <HAL_TIM_MspPostInit+0x64>)
 80024b2:	f000 fe0d 	bl	80030d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024b6:	bf00      	nop
 80024b8:	3720      	adds	r7, #32
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40012c00 	.word	0x40012c00
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40010800 	.word	0x40010800

080024cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a4d      	ldr	r2, [pc, #308]	; (800261c <HAL_UART_MspInit+0x150>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	f040 8092 	bne.w	8002612 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ee:	4b4c      	ldr	r3, [pc, #304]	; (8002620 <HAL_UART_MspInit+0x154>)
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	4a4b      	ldr	r2, [pc, #300]	; (8002620 <HAL_UART_MspInit+0x154>)
 80024f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f8:	6193      	str	r3, [r2, #24]
 80024fa:	4b49      	ldr	r3, [pc, #292]	; (8002620 <HAL_UART_MspInit+0x154>)
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002506:	4b46      	ldr	r3, [pc, #280]	; (8002620 <HAL_UART_MspInit+0x154>)
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	4a45      	ldr	r2, [pc, #276]	; (8002620 <HAL_UART_MspInit+0x154>)
 800250c:	f043 0308 	orr.w	r3, r3, #8
 8002510:	6193      	str	r3, [r2, #24]
 8002512:	4b43      	ldr	r3, [pc, #268]	; (8002620 <HAL_UART_MspInit+0x154>)
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800251e:	2340      	movs	r3, #64	; 0x40
 8002520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002526:	2303      	movs	r3, #3
 8002528:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	4619      	mov	r1, r3
 8002530:	483c      	ldr	r0, [pc, #240]	; (8002624 <HAL_UART_MspInit+0x158>)
 8002532:	f000 fdcd 	bl	80030d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800253e:	2301      	movs	r3, #1
 8002540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	4836      	ldr	r0, [pc, #216]	; (8002624 <HAL_UART_MspInit+0x158>)
 800254a:	f000 fdc1 	bl	80030d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800254e:	4b36      	ldr	r3, [pc, #216]	; (8002628 <HAL_UART_MspInit+0x15c>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	f043 0304 	orr.w	r3, r3, #4
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
 8002564:	4a30      	ldr	r2, [pc, #192]	; (8002628 <HAL_UART_MspInit+0x15c>)
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800256a:	4b30      	ldr	r3, [pc, #192]	; (800262c <HAL_UART_MspInit+0x160>)
 800256c:	4a30      	ldr	r2, [pc, #192]	; (8002630 <HAL_UART_MspInit+0x164>)
 800256e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002570:	4b2e      	ldr	r3, [pc, #184]	; (800262c <HAL_UART_MspInit+0x160>)
 8002572:	2200      	movs	r2, #0
 8002574:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002576:	4b2d      	ldr	r3, [pc, #180]	; (800262c <HAL_UART_MspInit+0x160>)
 8002578:	2200      	movs	r2, #0
 800257a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800257c:	4b2b      	ldr	r3, [pc, #172]	; (800262c <HAL_UART_MspInit+0x160>)
 800257e:	2280      	movs	r2, #128	; 0x80
 8002580:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002582:	4b2a      	ldr	r3, [pc, #168]	; (800262c <HAL_UART_MspInit+0x160>)
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002588:	4b28      	ldr	r3, [pc, #160]	; (800262c <HAL_UART_MspInit+0x160>)
 800258a:	2200      	movs	r2, #0
 800258c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800258e:	4b27      	ldr	r3, [pc, #156]	; (800262c <HAL_UART_MspInit+0x160>)
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002594:	4b25      	ldr	r3, [pc, #148]	; (800262c <HAL_UART_MspInit+0x160>)
 8002596:	2200      	movs	r2, #0
 8002598:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800259a:	4824      	ldr	r0, [pc, #144]	; (800262c <HAL_UART_MspInit+0x160>)
 800259c:	f000 fafa 	bl	8002b94 <HAL_DMA_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 80025a6:	f7ff fe55 	bl	8002254 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a1f      	ldr	r2, [pc, #124]	; (800262c <HAL_UART_MspInit+0x160>)
 80025ae:	639a      	str	r2, [r3, #56]	; 0x38
 80025b0:	4a1e      	ldr	r2, [pc, #120]	; (800262c <HAL_UART_MspInit+0x160>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80025b6:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <HAL_UART_MspInit+0x168>)
 80025b8:	4a1f      	ldr	r2, [pc, #124]	; (8002638 <HAL_UART_MspInit+0x16c>)
 80025ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025bc:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <HAL_UART_MspInit+0x168>)
 80025be:	2210      	movs	r2, #16
 80025c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025c2:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <HAL_UART_MspInit+0x168>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025c8:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <HAL_UART_MspInit+0x168>)
 80025ca:	2280      	movs	r2, #128	; 0x80
 80025cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025ce:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_UART_MspInit+0x168>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025d4:	4b17      	ldr	r3, [pc, #92]	; (8002634 <HAL_UART_MspInit+0x168>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80025da:	4b16      	ldr	r3, [pc, #88]	; (8002634 <HAL_UART_MspInit+0x168>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <HAL_UART_MspInit+0x168>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80025e6:	4813      	ldr	r0, [pc, #76]	; (8002634 <HAL_UART_MspInit+0x168>)
 80025e8:	f000 fad4 	bl	8002b94 <HAL_DMA_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80025f2:	f7ff fe2f 	bl	8002254 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a0e      	ldr	r2, [pc, #56]	; (8002634 <HAL_UART_MspInit+0x168>)
 80025fa:	635a      	str	r2, [r3, #52]	; 0x34
 80025fc:	4a0d      	ldr	r2, [pc, #52]	; (8002634 <HAL_UART_MspInit+0x168>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	2025      	movs	r0, #37	; 0x25
 8002608:	f000 fa8d 	bl	8002b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800260c:	2025      	movs	r0, #37	; 0x25
 800260e:	f000 faa6 	bl	8002b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002612:	bf00      	nop
 8002614:	3728      	adds	r7, #40	; 0x28
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40013800 	.word	0x40013800
 8002620:	40021000 	.word	0x40021000
 8002624:	40010c00 	.word	0x40010c00
 8002628:	40010000 	.word	0x40010000
 800262c:	20000374 	.word	0x20000374
 8002630:	40020058 	.word	0x40020058
 8002634:	200003b8 	.word	0x200003b8
 8002638:	40020044 	.word	0x40020044

0800263c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <NMI_Handler+0x4>

08002642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002646:	e7fe      	b.n	8002646 <HardFault_Handler+0x4>

08002648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800264c:	e7fe      	b.n	800264c <MemManage_Handler+0x4>

0800264e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002652:	e7fe      	b.n	8002652 <BusFault_Handler+0x4>

08002654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <UsageFault_Handler+0x4>

0800265a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002682:	f000 f95d 	bl	8002940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <DMA1_Channel4_IRQHandler+0x10>)
 8002692:	f000 fbe9 	bl	8002e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	200003b8 	.word	0x200003b8

080026a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80026a4:	4802      	ldr	r0, [pc, #8]	; (80026b0 <DMA1_Channel5_IRQHandler+0x10>)
 80026a6:	f000 fbdf 	bl	8002e68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000374 	.word	0x20000374

080026b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026b8:	4802      	ldr	r0, [pc, #8]	; (80026c4 <TIM3_IRQHandler+0x10>)
 80026ba:	f001 fec7 	bl	800444c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200002e8 	.word	0x200002e8

080026c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026cc:	4802      	ldr	r0, [pc, #8]	; (80026d8 <USART1_IRQHandler+0x10>)
 80026ce:	f002 fdb9 	bl	8005244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000330 	.word	0x20000330

080026dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return 1;
 80026e0:	2301      	movs	r3, #1
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <_kill>:

int _kill(int pid, int sig)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026f4:	f003 fb7a 	bl	8005dec <__errno>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2216      	movs	r2, #22
 80026fc:	601a      	str	r2, [r3, #0]
  return -1;
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <_exit>:

void _exit (int status)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002712:	f04f 31ff 	mov.w	r1, #4294967295
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ffe7 	bl	80026ea <_kill>
  while (1) {}    /* Make sure we hang here */
 800271c:	e7fe      	b.n	800271c <_exit+0x12>

0800271e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b086      	sub	sp, #24
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	e00a      	b.n	8002746 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002730:	f3af 8000 	nop.w
 8002734:	4601      	mov	r1, r0
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	60ba      	str	r2, [r7, #8]
 800273c:	b2ca      	uxtb	r2, r1
 800273e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3301      	adds	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	dbf0      	blt.n	8002730 <_read+0x12>
  }

  return len;
 800274e:	687b      	ldr	r3, [r7, #4]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	e009      	b.n	800277e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	60ba      	str	r2, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	3301      	adds	r3, #1
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	429a      	cmp	r2, r3
 8002784:	dbf1      	blt.n	800276a <_write+0x12>
  }
  return len;
 8002786:	687b      	ldr	r3, [r7, #4]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <_close>:

int _close(int file)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002798:	f04f 33ff 	mov.w	r3, #4294967295
}
 800279c:	4618      	mov	r0, r3
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027b6:	605a      	str	r2, [r3, #4]
  return 0;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <_isatty>:

int _isatty(int file)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027cc:	2301      	movs	r3, #1
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end;             /* Symbol defined in the linker script */
  extern uint8_t _estack;          /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027f8:	4a14      	ldr	r2, [pc, #80]	; (800284c <_sbrk+0x5c>)
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <_sbrk+0x60>)
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002804:	4b13      	ldr	r3, [pc, #76]	; (8002854 <_sbrk+0x64>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d102      	bne.n	8002812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <_sbrk+0x64>)
 800280e:	4a12      	ldr	r2, [pc, #72]	; (8002858 <_sbrk+0x68>)
 8002810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <_sbrk+0x64>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	429a      	cmp	r2, r3
 800281e:	d207      	bcs.n	8002830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002820:	f003 fae4 	bl	8005dec <__errno>
 8002824:	4603      	mov	r3, r0
 8002826:	220c      	movs	r2, #12
 8002828:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
 800282e:	e009      	b.n	8002844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <_sbrk+0x64>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002836:	4b07      	ldr	r3, [pc, #28]	; (8002854 <_sbrk+0x64>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	4a05      	ldr	r2, [pc, #20]	; (8002854 <_sbrk+0x64>)
 8002840:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002842:	68fb      	ldr	r3, [r7, #12]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20005000 	.word	0x20005000
 8002850:	00000400 	.word	0x00000400
 8002854:	20000498 	.word	0x20000498
 8002858:	200004f0 	.word	0x200004f0

0800285c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002868:	480c      	ldr	r0, [pc, #48]	; (800289c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800286a:	490d      	ldr	r1, [pc, #52]	; (80028a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800286c:	4a0d      	ldr	r2, [pc, #52]	; (80028a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800286e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002870:	e002      	b.n	8002878 <LoopCopyDataInit>

08002872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002876:	3304      	adds	r3, #4

08002878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800287a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800287c:	d3f9      	bcc.n	8002872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800287e:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002880:	4c0a      	ldr	r4, [pc, #40]	; (80028ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002884:	e001      	b.n	800288a <LoopFillZerobss>

08002886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002888:	3204      	adds	r2, #4

0800288a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800288a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800288c:	d3fb      	bcc.n	8002886 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800288e:	f7ff ffe5 	bl	800285c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002892:	f003 fab1 	bl	8005df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002896:	f7ff f979 	bl	8001b8c <main>
  bx lr
 800289a:	4770      	bx	lr
  ldr r0, =_sdata
 800289c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028a0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80028a4:	0800adac 	.word	0x0800adac
  ldr r2, =_sbss
 80028a8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80028ac:	200004ec 	.word	0x200004ec

080028b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028b0:	e7fe      	b.n	80028b0 <ADC1_2_IRQHandler>
	...

080028b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028b8:	4b08      	ldr	r3, [pc, #32]	; (80028dc <HAL_Init+0x28>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a07      	ldr	r2, [pc, #28]	; (80028dc <HAL_Init+0x28>)
 80028be:	f043 0310 	orr.w	r3, r3, #16
 80028c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c4:	2003      	movs	r0, #3
 80028c6:	f000 f923 	bl	8002b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ca:	200f      	movs	r0, #15
 80028cc:	f000 f808 	bl	80028e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028d0:	f7ff fcc6 	bl	8002260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40022000 	.word	0x40022000

080028e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_InitTick+0x54>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_InitTick+0x58>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	4619      	mov	r1, r3
 80028f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f93b 	bl	8002b7a <HAL_SYSTICK_Config>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e00e      	b.n	800292c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b0f      	cmp	r3, #15
 8002912:	d80a      	bhi.n	800292a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002914:	2200      	movs	r2, #0
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	f04f 30ff 	mov.w	r0, #4294967295
 800291c:	f000 f903 	bl	8002b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002920:	4a06      	ldr	r2, [pc, #24]	; (800293c <HAL_InitTick+0x5c>)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	e000      	b.n	800292c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20000008 	.word	0x20000008
 8002938:	20000010 	.word	0x20000010
 800293c:	2000000c 	.word	0x2000000c

08002940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_IncTick+0x1c>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_IncTick+0x20>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4413      	add	r3, r2
 8002950:	4a03      	ldr	r2, [pc, #12]	; (8002960 <HAL_IncTick+0x20>)
 8002952:	6013      	str	r3, [r2, #0]
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	20000010 	.word	0x20000010
 8002960:	2000049c 	.word	0x2000049c

08002964 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return uwTick;
 8002968:	4b02      	ldr	r3, [pc, #8]	; (8002974 <HAL_GetTick+0x10>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	2000049c 	.word	0x2000049c

08002978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002994:	4013      	ands	r3, r2
 8002996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029aa:	4a04      	ldr	r2, [pc, #16]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	60d3      	str	r3, [r2, #12]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <__NVIC_GetPriorityGrouping+0x18>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	f003 0307 	and.w	r3, r3, #7
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	db0b      	blt.n	8002a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	4906      	ldr	r1, [pc, #24]	; (8002a10 <__NVIC_EnableIRQ+0x34>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	2001      	movs	r0, #1
 80029fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	e000e100 	.word	0xe000e100

08002a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	6039      	str	r1, [r7, #0]
 8002a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	db0a      	blt.n	8002a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	490c      	ldr	r1, [pc, #48]	; (8002a60 <__NVIC_SetPriority+0x4c>)
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	0112      	lsls	r2, r2, #4
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	440b      	add	r3, r1
 8002a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a3c:	e00a      	b.n	8002a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	4908      	ldr	r1, [pc, #32]	; (8002a64 <__NVIC_SetPriority+0x50>)
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	3b04      	subs	r3, #4
 8002a4c:	0112      	lsls	r2, r2, #4
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	440b      	add	r3, r1
 8002a52:	761a      	strb	r2, [r3, #24]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	e000e100 	.word	0xe000e100
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b089      	sub	sp, #36	; 0x24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f1c3 0307 	rsb	r3, r3, #7
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	bf28      	it	cs
 8002a86:	2304      	movcs	r3, #4
 8002a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	2b06      	cmp	r3, #6
 8002a90:	d902      	bls.n	8002a98 <NVIC_EncodePriority+0x30>
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	3b03      	subs	r3, #3
 8002a96:	e000      	b.n	8002a9a <NVIC_EncodePriority+0x32>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	401a      	ands	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	43d9      	mvns	r1, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac0:	4313      	orrs	r3, r2
         );
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3724      	adds	r7, #36	; 0x24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002adc:	d301      	bcc.n	8002ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e00f      	b.n	8002b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <SysTick_Config+0x40>)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aea:	210f      	movs	r1, #15
 8002aec:	f04f 30ff 	mov.w	r0, #4294967295
 8002af0:	f7ff ff90 	bl	8002a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002af4:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <SysTick_Config+0x40>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002afa:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <SysTick_Config+0x40>)
 8002afc:	2207      	movs	r2, #7
 8002afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	e000e010 	.word	0xe000e010

08002b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ff2d 	bl	8002978 <__NVIC_SetPriorityGrouping>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b086      	sub	sp, #24
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b38:	f7ff ff42 	bl	80029c0 <__NVIC_GetPriorityGrouping>
 8002b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	6978      	ldr	r0, [r7, #20]
 8002b44:	f7ff ff90 	bl	8002a68 <NVIC_EncodePriority>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff5f 	bl	8002a14 <__NVIC_SetPriority>
}
 8002b56:	bf00      	nop
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	4603      	mov	r3, r0
 8002b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff35 	bl	80029dc <__NVIC_EnableIRQ>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff ffa2 	bl	8002acc <SysTick_Config>
 8002b88:	4603      	mov	r3, r0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e043      	b.n	8002c32 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <HAL_DMA_Init+0xa8>)
 8002bb2:	4413      	add	r3, r2
 8002bb4:	4a22      	ldr	r2, [pc, #136]	; (8002c40 <HAL_DMA_Init+0xac>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	009a      	lsls	r2, r3, #2
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a1f      	ldr	r2, [pc, #124]	; (8002c44 <HAL_DMA_Init+0xb0>)
 8002bc6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002bde:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002be2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	bffdfff8 	.word	0xbffdfff8
 8002c40:	cccccccd 	.word	0xcccccccd
 8002c44:	40020000 	.word	0x40020000

08002c48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_DMA_Start_IT+0x20>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e04a      	b.n	8002cfe <HAL_DMA_Start_IT+0xb6>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d13a      	bne.n	8002cf0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68b9      	ldr	r1, [r7, #8]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f9e8 	bl	8003074 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 020e 	orr.w	r2, r2, #14
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e00f      	b.n	8002cde <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0204 	bic.w	r2, r2, #4
 8002ccc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 020a 	orr.w	r2, r2, #10
 8002cdc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f042 0201 	orr.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	e005      	b.n	8002cfc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b085      	sub	sp, #20
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d008      	beq.n	8002d2e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2204      	movs	r2, #4
 8002d20:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e020      	b.n	8002d70 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 020e 	bic.w	r2, r2, #14
 8002d3c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0201 	bic.w	r2, r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d56:	2101      	movs	r1, #1
 8002d58:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr
	...

08002d7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d005      	beq.n	8002d9e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2204      	movs	r2, #4
 8002d96:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
 8002d9c:	e051      	b.n	8002e42 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 020e 	bic.w	r2, r2, #14
 8002dac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0201 	bic.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a22      	ldr	r2, [pc, #136]	; (8002e4c <HAL_DMA_Abort_IT+0xd0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d029      	beq.n	8002e1c <HAL_DMA_Abort_IT+0xa0>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a20      	ldr	r2, [pc, #128]	; (8002e50 <HAL_DMA_Abort_IT+0xd4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d022      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x9c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1f      	ldr	r2, [pc, #124]	; (8002e54 <HAL_DMA_Abort_IT+0xd8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d01a      	beq.n	8002e12 <HAL_DMA_Abort_IT+0x96>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <HAL_DMA_Abort_IT+0xdc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d012      	beq.n	8002e0c <HAL_DMA_Abort_IT+0x90>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1c      	ldr	r2, [pc, #112]	; (8002e5c <HAL_DMA_Abort_IT+0xe0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00a      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x8a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1a      	ldr	r2, [pc, #104]	; (8002e60 <HAL_DMA_Abort_IT+0xe4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d102      	bne.n	8002e00 <HAL_DMA_Abort_IT+0x84>
 8002dfa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002dfe:	e00e      	b.n	8002e1e <HAL_DMA_Abort_IT+0xa2>
 8002e00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e04:	e00b      	b.n	8002e1e <HAL_DMA_Abort_IT+0xa2>
 8002e06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e0a:	e008      	b.n	8002e1e <HAL_DMA_Abort_IT+0xa2>
 8002e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e10:	e005      	b.n	8002e1e <HAL_DMA_Abort_IT+0xa2>
 8002e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e16:	e002      	b.n	8002e1e <HAL_DMA_Abort_IT+0xa2>
 8002e18:	2310      	movs	r3, #16
 8002e1a:	e000      	b.n	8002e1e <HAL_DMA_Abort_IT+0xa2>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	4a11      	ldr	r2, [pc, #68]	; (8002e64 <HAL_DMA_Abort_IT+0xe8>)
 8002e20:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	4798      	blx	r3
    } 
  }
  return status;
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40020008 	.word	0x40020008
 8002e50:	4002001c 	.word	0x4002001c
 8002e54:	40020030 	.word	0x40020030
 8002e58:	40020044 	.word	0x40020044
 8002e5c:	40020058 	.word	0x40020058
 8002e60:	4002006c 	.word	0x4002006c
 8002e64:	40020000 	.word	0x40020000

08002e68 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	2204      	movs	r2, #4
 8002e86:	409a      	lsls	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d04f      	beq.n	8002f30 <HAL_DMA_IRQHandler+0xc8>
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d04a      	beq.n	8002f30 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d107      	bne.n	8002eb8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0204 	bic.w	r2, r2, #4
 8002eb6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a66      	ldr	r2, [pc, #408]	; (8003058 <HAL_DMA_IRQHandler+0x1f0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d029      	beq.n	8002f16 <HAL_DMA_IRQHandler+0xae>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a65      	ldr	r2, [pc, #404]	; (800305c <HAL_DMA_IRQHandler+0x1f4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d022      	beq.n	8002f12 <HAL_DMA_IRQHandler+0xaa>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a63      	ldr	r2, [pc, #396]	; (8003060 <HAL_DMA_IRQHandler+0x1f8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d01a      	beq.n	8002f0c <HAL_DMA_IRQHandler+0xa4>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a62      	ldr	r2, [pc, #392]	; (8003064 <HAL_DMA_IRQHandler+0x1fc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d012      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x9e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a60      	ldr	r2, [pc, #384]	; (8003068 <HAL_DMA_IRQHandler+0x200>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00a      	beq.n	8002f00 <HAL_DMA_IRQHandler+0x98>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a5f      	ldr	r2, [pc, #380]	; (800306c <HAL_DMA_IRQHandler+0x204>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d102      	bne.n	8002efa <HAL_DMA_IRQHandler+0x92>
 8002ef4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ef8:	e00e      	b.n	8002f18 <HAL_DMA_IRQHandler+0xb0>
 8002efa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002efe:	e00b      	b.n	8002f18 <HAL_DMA_IRQHandler+0xb0>
 8002f00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f04:	e008      	b.n	8002f18 <HAL_DMA_IRQHandler+0xb0>
 8002f06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f0a:	e005      	b.n	8002f18 <HAL_DMA_IRQHandler+0xb0>
 8002f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f10:	e002      	b.n	8002f18 <HAL_DMA_IRQHandler+0xb0>
 8002f12:	2340      	movs	r3, #64	; 0x40
 8002f14:	e000      	b.n	8002f18 <HAL_DMA_IRQHandler+0xb0>
 8002f16:	2304      	movs	r3, #4
 8002f18:	4a55      	ldr	r2, [pc, #340]	; (8003070 <HAL_DMA_IRQHandler+0x208>)
 8002f1a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 8094 	beq.w	800304e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002f2e:	e08e      	b.n	800304e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	2202      	movs	r2, #2
 8002f36:	409a      	lsls	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d056      	beq.n	8002fee <HAL_DMA_IRQHandler+0x186>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d051      	beq.n	8002fee <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10b      	bne.n	8002f70 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 020a 	bic.w	r2, r2, #10
 8002f66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a38      	ldr	r2, [pc, #224]	; (8003058 <HAL_DMA_IRQHandler+0x1f0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d029      	beq.n	8002fce <HAL_DMA_IRQHandler+0x166>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a37      	ldr	r2, [pc, #220]	; (800305c <HAL_DMA_IRQHandler+0x1f4>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d022      	beq.n	8002fca <HAL_DMA_IRQHandler+0x162>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a35      	ldr	r2, [pc, #212]	; (8003060 <HAL_DMA_IRQHandler+0x1f8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d01a      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x15c>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a34      	ldr	r2, [pc, #208]	; (8003064 <HAL_DMA_IRQHandler+0x1fc>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d012      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x156>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a32      	ldr	r2, [pc, #200]	; (8003068 <HAL_DMA_IRQHandler+0x200>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x150>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a31      	ldr	r2, [pc, #196]	; (800306c <HAL_DMA_IRQHandler+0x204>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d102      	bne.n	8002fb2 <HAL_DMA_IRQHandler+0x14a>
 8002fac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fb0:	e00e      	b.n	8002fd0 <HAL_DMA_IRQHandler+0x168>
 8002fb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fb6:	e00b      	b.n	8002fd0 <HAL_DMA_IRQHandler+0x168>
 8002fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fbc:	e008      	b.n	8002fd0 <HAL_DMA_IRQHandler+0x168>
 8002fbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fc2:	e005      	b.n	8002fd0 <HAL_DMA_IRQHandler+0x168>
 8002fc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fc8:	e002      	b.n	8002fd0 <HAL_DMA_IRQHandler+0x168>
 8002fca:	2320      	movs	r3, #32
 8002fcc:	e000      	b.n	8002fd0 <HAL_DMA_IRQHandler+0x168>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	4a27      	ldr	r2, [pc, #156]	; (8003070 <HAL_DMA_IRQHandler+0x208>)
 8002fd2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d034      	beq.n	800304e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002fec:	e02f      	b.n	800304e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	2208      	movs	r2, #8
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d028      	beq.n	8003050 <HAL_DMA_IRQHandler+0x1e8>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d023      	beq.n	8003050 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 020e 	bic.w	r2, r2, #14
 8003016:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	2101      	movs	r1, #1
 8003022:	fa01 f202 	lsl.w	r2, r1, r2
 8003026:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	2b00      	cmp	r3, #0
 8003044:	d004      	beq.n	8003050 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4798      	blx	r3
    }
  }
  return;
 800304e:	bf00      	nop
 8003050:	bf00      	nop
}
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40020008 	.word	0x40020008
 800305c:	4002001c 	.word	0x4002001c
 8003060:	40020030 	.word	0x40020030
 8003064:	40020044 	.word	0x40020044
 8003068:	40020058 	.word	0x40020058
 800306c:	4002006c 	.word	0x4002006c
 8003070:	40020000 	.word	0x40020000

08003074 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308a:	2101      	movs	r1, #1
 800308c:	fa01 f202 	lsl.w	r2, r1, r2
 8003090:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b10      	cmp	r3, #16
 80030a0:	d108      	bne.n	80030b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030b2:	e007      	b.n	80030c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	60da      	str	r2, [r3, #12]
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b08b      	sub	sp, #44	; 0x2c
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030da:	2300      	movs	r3, #0
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030de:	2300      	movs	r3, #0
 80030e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e2:	e169      	b.n	80033b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030e4:	2201      	movs	r2, #1
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	f040 8158 	bne.w	80033b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	4a9a      	ldr	r2, [pc, #616]	; (8003370 <HAL_GPIO_Init+0x2a0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d05e      	beq.n	80031ca <HAL_GPIO_Init+0xfa>
 800310c:	4a98      	ldr	r2, [pc, #608]	; (8003370 <HAL_GPIO_Init+0x2a0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d875      	bhi.n	80031fe <HAL_GPIO_Init+0x12e>
 8003112:	4a98      	ldr	r2, [pc, #608]	; (8003374 <HAL_GPIO_Init+0x2a4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d058      	beq.n	80031ca <HAL_GPIO_Init+0xfa>
 8003118:	4a96      	ldr	r2, [pc, #600]	; (8003374 <HAL_GPIO_Init+0x2a4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d86f      	bhi.n	80031fe <HAL_GPIO_Init+0x12e>
 800311e:	4a96      	ldr	r2, [pc, #600]	; (8003378 <HAL_GPIO_Init+0x2a8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d052      	beq.n	80031ca <HAL_GPIO_Init+0xfa>
 8003124:	4a94      	ldr	r2, [pc, #592]	; (8003378 <HAL_GPIO_Init+0x2a8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d869      	bhi.n	80031fe <HAL_GPIO_Init+0x12e>
 800312a:	4a94      	ldr	r2, [pc, #592]	; (800337c <HAL_GPIO_Init+0x2ac>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d04c      	beq.n	80031ca <HAL_GPIO_Init+0xfa>
 8003130:	4a92      	ldr	r2, [pc, #584]	; (800337c <HAL_GPIO_Init+0x2ac>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d863      	bhi.n	80031fe <HAL_GPIO_Init+0x12e>
 8003136:	4a92      	ldr	r2, [pc, #584]	; (8003380 <HAL_GPIO_Init+0x2b0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d046      	beq.n	80031ca <HAL_GPIO_Init+0xfa>
 800313c:	4a90      	ldr	r2, [pc, #576]	; (8003380 <HAL_GPIO_Init+0x2b0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d85d      	bhi.n	80031fe <HAL_GPIO_Init+0x12e>
 8003142:	2b12      	cmp	r3, #18
 8003144:	d82a      	bhi.n	800319c <HAL_GPIO_Init+0xcc>
 8003146:	2b12      	cmp	r3, #18
 8003148:	d859      	bhi.n	80031fe <HAL_GPIO_Init+0x12e>
 800314a:	a201      	add	r2, pc, #4	; (adr r2, 8003150 <HAL_GPIO_Init+0x80>)
 800314c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003150:	080031cb 	.word	0x080031cb
 8003154:	080031a5 	.word	0x080031a5
 8003158:	080031b7 	.word	0x080031b7
 800315c:	080031f9 	.word	0x080031f9
 8003160:	080031ff 	.word	0x080031ff
 8003164:	080031ff 	.word	0x080031ff
 8003168:	080031ff 	.word	0x080031ff
 800316c:	080031ff 	.word	0x080031ff
 8003170:	080031ff 	.word	0x080031ff
 8003174:	080031ff 	.word	0x080031ff
 8003178:	080031ff 	.word	0x080031ff
 800317c:	080031ff 	.word	0x080031ff
 8003180:	080031ff 	.word	0x080031ff
 8003184:	080031ff 	.word	0x080031ff
 8003188:	080031ff 	.word	0x080031ff
 800318c:	080031ff 	.word	0x080031ff
 8003190:	080031ff 	.word	0x080031ff
 8003194:	080031ad 	.word	0x080031ad
 8003198:	080031c1 	.word	0x080031c1
 800319c:	4a79      	ldr	r2, [pc, #484]	; (8003384 <HAL_GPIO_Init+0x2b4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d013      	beq.n	80031ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031a2:	e02c      	b.n	80031fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	623b      	str	r3, [r7, #32]
          break;
 80031aa:	e029      	b.n	8003200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	3304      	adds	r3, #4
 80031b2:	623b      	str	r3, [r7, #32]
          break;
 80031b4:	e024      	b.n	8003200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	3308      	adds	r3, #8
 80031bc:	623b      	str	r3, [r7, #32]
          break;
 80031be:	e01f      	b.n	8003200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	330c      	adds	r3, #12
 80031c6:	623b      	str	r3, [r7, #32]
          break;
 80031c8:	e01a      	b.n	8003200 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d102      	bne.n	80031d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031d2:	2304      	movs	r3, #4
 80031d4:	623b      	str	r3, [r7, #32]
          break;
 80031d6:	e013      	b.n	8003200 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d105      	bne.n	80031ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031e0:	2308      	movs	r3, #8
 80031e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	611a      	str	r2, [r3, #16]
          break;
 80031ea:	e009      	b.n	8003200 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031ec:	2308      	movs	r3, #8
 80031ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69fa      	ldr	r2, [r7, #28]
 80031f4:	615a      	str	r2, [r3, #20]
          break;
 80031f6:	e003      	b.n	8003200 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031f8:	2300      	movs	r3, #0
 80031fa:	623b      	str	r3, [r7, #32]
          break;
 80031fc:	e000      	b.n	8003200 <HAL_GPIO_Init+0x130>
          break;
 80031fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2bff      	cmp	r3, #255	; 0xff
 8003204:	d801      	bhi.n	800320a <HAL_GPIO_Init+0x13a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	e001      	b.n	800320e <HAL_GPIO_Init+0x13e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3304      	adds	r3, #4
 800320e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	2bff      	cmp	r3, #255	; 0xff
 8003214:	d802      	bhi.n	800321c <HAL_GPIO_Init+0x14c>
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	e002      	b.n	8003222 <HAL_GPIO_Init+0x152>
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	3b08      	subs	r3, #8
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	210f      	movs	r1, #15
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	fa01 f303 	lsl.w	r3, r1, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	401a      	ands	r2, r3
 8003234:	6a39      	ldr	r1, [r7, #32]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	fa01 f303 	lsl.w	r3, r1, r3
 800323c:	431a      	orrs	r2, r3
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80b1 	beq.w	80033b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003250:	4b4d      	ldr	r3, [pc, #308]	; (8003388 <HAL_GPIO_Init+0x2b8>)
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	4a4c      	ldr	r2, [pc, #304]	; (8003388 <HAL_GPIO_Init+0x2b8>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	6193      	str	r3, [r2, #24]
 800325c:	4b4a      	ldr	r3, [pc, #296]	; (8003388 <HAL_GPIO_Init+0x2b8>)
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003268:	4a48      	ldr	r2, [pc, #288]	; (800338c <HAL_GPIO_Init+0x2bc>)
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	089b      	lsrs	r3, r3, #2
 800326e:	3302      	adds	r3, #2
 8003270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003274:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	220f      	movs	r2, #15
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4013      	ands	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a40      	ldr	r2, [pc, #256]	; (8003390 <HAL_GPIO_Init+0x2c0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d013      	beq.n	80032bc <HAL_GPIO_Init+0x1ec>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a3f      	ldr	r2, [pc, #252]	; (8003394 <HAL_GPIO_Init+0x2c4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00d      	beq.n	80032b8 <HAL_GPIO_Init+0x1e8>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a3e      	ldr	r2, [pc, #248]	; (8003398 <HAL_GPIO_Init+0x2c8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d007      	beq.n	80032b4 <HAL_GPIO_Init+0x1e4>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a3d      	ldr	r2, [pc, #244]	; (800339c <HAL_GPIO_Init+0x2cc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d101      	bne.n	80032b0 <HAL_GPIO_Init+0x1e0>
 80032ac:	2303      	movs	r3, #3
 80032ae:	e006      	b.n	80032be <HAL_GPIO_Init+0x1ee>
 80032b0:	2304      	movs	r3, #4
 80032b2:	e004      	b.n	80032be <HAL_GPIO_Init+0x1ee>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e002      	b.n	80032be <HAL_GPIO_Init+0x1ee>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <HAL_GPIO_Init+0x1ee>
 80032bc:	2300      	movs	r3, #0
 80032be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c0:	f002 0203 	and.w	r2, r2, #3
 80032c4:	0092      	lsls	r2, r2, #2
 80032c6:	4093      	lsls	r3, r2
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032ce:	492f      	ldr	r1, [pc, #188]	; (800338c <HAL_GPIO_Init+0x2bc>)
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	089b      	lsrs	r3, r3, #2
 80032d4:	3302      	adds	r3, #2
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d006      	beq.n	80032f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032e8:	4b2d      	ldr	r3, [pc, #180]	; (80033a0 <HAL_GPIO_Init+0x2d0>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	492c      	ldr	r1, [pc, #176]	; (80033a0 <HAL_GPIO_Init+0x2d0>)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	600b      	str	r3, [r1, #0]
 80032f4:	e006      	b.n	8003304 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032f6:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <HAL_GPIO_Init+0x2d0>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	4928      	ldr	r1, [pc, #160]	; (80033a0 <HAL_GPIO_Init+0x2d0>)
 8003300:	4013      	ands	r3, r2
 8003302:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d006      	beq.n	800331e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003310:	4b23      	ldr	r3, [pc, #140]	; (80033a0 <HAL_GPIO_Init+0x2d0>)
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	4922      	ldr	r1, [pc, #136]	; (80033a0 <HAL_GPIO_Init+0x2d0>)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]
 800331c:	e006      	b.n	800332c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800331e:	4b20      	ldr	r3, [pc, #128]	; (80033a0 <HAL_GPIO_Init+0x2d0>)
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	43db      	mvns	r3, r3
 8003326:	491e      	ldr	r1, [pc, #120]	; (80033a0 <HAL_GPIO_Init+0x2d0>)
 8003328:	4013      	ands	r3, r2
 800332a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d006      	beq.n	8003346 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003338:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <HAL_GPIO_Init+0x2d0>)
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	4918      	ldr	r1, [pc, #96]	; (80033a0 <HAL_GPIO_Init+0x2d0>)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	4313      	orrs	r3, r2
 8003342:	608b      	str	r3, [r1, #8]
 8003344:	e006      	b.n	8003354 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003346:	4b16      	ldr	r3, [pc, #88]	; (80033a0 <HAL_GPIO_Init+0x2d0>)
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	43db      	mvns	r3, r3
 800334e:	4914      	ldr	r1, [pc, #80]	; (80033a0 <HAL_GPIO_Init+0x2d0>)
 8003350:	4013      	ands	r3, r2
 8003352:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d021      	beq.n	80033a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003360:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <HAL_GPIO_Init+0x2d0>)
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	490e      	ldr	r1, [pc, #56]	; (80033a0 <HAL_GPIO_Init+0x2d0>)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	60cb      	str	r3, [r1, #12]
 800336c:	e021      	b.n	80033b2 <HAL_GPIO_Init+0x2e2>
 800336e:	bf00      	nop
 8003370:	10320000 	.word	0x10320000
 8003374:	10310000 	.word	0x10310000
 8003378:	10220000 	.word	0x10220000
 800337c:	10210000 	.word	0x10210000
 8003380:	10120000 	.word	0x10120000
 8003384:	10110000 	.word	0x10110000
 8003388:	40021000 	.word	0x40021000
 800338c:	40010000 	.word	0x40010000
 8003390:	40010800 	.word	0x40010800
 8003394:	40010c00 	.word	0x40010c00
 8003398:	40011000 	.word	0x40011000
 800339c:	40011400 	.word	0x40011400
 80033a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_GPIO_Init+0x304>)
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	4909      	ldr	r1, [pc, #36]	; (80033d4 <HAL_GPIO_Init+0x304>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	3301      	adds	r3, #1
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	fa22 f303 	lsr.w	r3, r2, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f47f ae8e 	bne.w	80030e4 <HAL_GPIO_Init+0x14>
  }
}
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	372c      	adds	r7, #44	; 0x2c
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	40010400 	.word	0x40010400

080033d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	807b      	strh	r3, [r7, #2]
 80033e4:	4613      	mov	r3, r2
 80033e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033e8:	787b      	ldrb	r3, [r7, #1]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033f4:	e003      	b.n	80033fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033f6:	887b      	ldrh	r3, [r7, #2]
 80033f8:	041a      	lsls	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	611a      	str	r2, [r3, #16]
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e12b      	b.n	8003672 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fe ff48 	bl	80022c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2224      	movs	r2, #36	; 0x24
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800345a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800346a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800346c:	f000 fce4 	bl	8003e38 <HAL_RCC_GetPCLK1Freq>
 8003470:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4a81      	ldr	r2, [pc, #516]	; (800367c <HAL_I2C_Init+0x274>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d807      	bhi.n	800348c <HAL_I2C_Init+0x84>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4a80      	ldr	r2, [pc, #512]	; (8003680 <HAL_I2C_Init+0x278>)
 8003480:	4293      	cmp	r3, r2
 8003482:	bf94      	ite	ls
 8003484:	2301      	movls	r3, #1
 8003486:	2300      	movhi	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e006      	b.n	800349a <HAL_I2C_Init+0x92>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4a7d      	ldr	r2, [pc, #500]	; (8003684 <HAL_I2C_Init+0x27c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	bf94      	ite	ls
 8003494:	2301      	movls	r3, #1
 8003496:	2300      	movhi	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e0e7      	b.n	8003672 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4a78      	ldr	r2, [pc, #480]	; (8003688 <HAL_I2C_Init+0x280>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	0c9b      	lsrs	r3, r3, #18
 80034ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4a6a      	ldr	r2, [pc, #424]	; (800367c <HAL_I2C_Init+0x274>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d802      	bhi.n	80034dc <HAL_I2C_Init+0xd4>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	3301      	adds	r3, #1
 80034da:	e009      	b.n	80034f0 <HAL_I2C_Init+0xe8>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034e2:	fb02 f303 	mul.w	r3, r2, r3
 80034e6:	4a69      	ldr	r2, [pc, #420]	; (800368c <HAL_I2C_Init+0x284>)
 80034e8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ec:	099b      	lsrs	r3, r3, #6
 80034ee:	3301      	adds	r3, #1
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003502:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	495c      	ldr	r1, [pc, #368]	; (800367c <HAL_I2C_Init+0x274>)
 800350c:	428b      	cmp	r3, r1
 800350e:	d819      	bhi.n	8003544 <HAL_I2C_Init+0x13c>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	1e59      	subs	r1, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	fbb1 f3f3 	udiv	r3, r1, r3
 800351e:	1c59      	adds	r1, r3, #1
 8003520:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003524:	400b      	ands	r3, r1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_I2C_Init+0x138>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1e59      	subs	r1, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	fbb1 f3f3 	udiv	r3, r1, r3
 8003538:	3301      	adds	r3, #1
 800353a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353e:	e051      	b.n	80035e4 <HAL_I2C_Init+0x1dc>
 8003540:	2304      	movs	r3, #4
 8003542:	e04f      	b.n	80035e4 <HAL_I2C_Init+0x1dc>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d111      	bne.n	8003570 <HAL_I2C_Init+0x168>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	440b      	add	r3, r1
 800355a:	fbb0 f3f3 	udiv	r3, r0, r3
 800355e:	3301      	adds	r3, #1
 8003560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	e012      	b.n	8003596 <HAL_I2C_Init+0x18e>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1e58      	subs	r0, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6859      	ldr	r1, [r3, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	0099      	lsls	r1, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	fbb0 f3f3 	udiv	r3, r0, r3
 8003586:	3301      	adds	r3, #1
 8003588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf0c      	ite	eq
 8003590:	2301      	moveq	r3, #1
 8003592:	2300      	movne	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_I2C_Init+0x196>
 800359a:	2301      	movs	r3, #1
 800359c:	e022      	b.n	80035e4 <HAL_I2C_Init+0x1dc>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10e      	bne.n	80035c4 <HAL_I2C_Init+0x1bc>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1e58      	subs	r0, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6859      	ldr	r1, [r3, #4]
 80035ae:	460b      	mov	r3, r1
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	440b      	add	r3, r1
 80035b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80035b8:	3301      	adds	r3, #1
 80035ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c2:	e00f      	b.n	80035e4 <HAL_I2C_Init+0x1dc>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	1e58      	subs	r0, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6859      	ldr	r1, [r3, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	0099      	lsls	r1, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035da:	3301      	adds	r3, #1
 80035dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	6809      	ldr	r1, [r1, #0]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69da      	ldr	r2, [r3, #28]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003612:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6911      	ldr	r1, [r2, #16]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68d2      	ldr	r2, [r2, #12]
 800361e:	4311      	orrs	r1, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	430b      	orrs	r3, r1
 8003626:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	000186a0 	.word	0x000186a0
 8003680:	001e847f 	.word	0x001e847f
 8003684:	003d08ff 	.word	0x003d08ff
 8003688:	431bde83 	.word	0x431bde83
 800368c:	10624dd3 	.word	0x10624dd3

08003690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e272      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 8087 	beq.w	80037be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036b0:	4b92      	ldr	r3, [pc, #584]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 030c 	and.w	r3, r3, #12
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d00c      	beq.n	80036d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036bc:	4b8f      	ldr	r3, [pc, #572]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d112      	bne.n	80036ee <HAL_RCC_OscConfig+0x5e>
 80036c8:	4b8c      	ldr	r3, [pc, #560]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d4:	d10b      	bne.n	80036ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d6:	4b89      	ldr	r3, [pc, #548]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d06c      	beq.n	80037bc <HAL_RCC_OscConfig+0x12c>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d168      	bne.n	80037bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e24c      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f6:	d106      	bne.n	8003706 <HAL_RCC_OscConfig+0x76>
 80036f8:	4b80      	ldr	r3, [pc, #512]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a7f      	ldr	r2, [pc, #508]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80036fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	e02e      	b.n	8003764 <HAL_RCC_OscConfig+0xd4>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10c      	bne.n	8003728 <HAL_RCC_OscConfig+0x98>
 800370e:	4b7b      	ldr	r3, [pc, #492]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a7a      	ldr	r2, [pc, #488]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	4b78      	ldr	r3, [pc, #480]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a77      	ldr	r2, [pc, #476]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	e01d      	b.n	8003764 <HAL_RCC_OscConfig+0xd4>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003730:	d10c      	bne.n	800374c <HAL_RCC_OscConfig+0xbc>
 8003732:	4b72      	ldr	r3, [pc, #456]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a71      	ldr	r2, [pc, #452]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	4b6f      	ldr	r3, [pc, #444]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a6e      	ldr	r2, [pc, #440]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	e00b      	b.n	8003764 <HAL_RCC_OscConfig+0xd4>
 800374c:	4b6b      	ldr	r3, [pc, #428]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a6a      	ldr	r2, [pc, #424]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	4b68      	ldr	r3, [pc, #416]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a67      	ldr	r2, [pc, #412]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 800375e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003762:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d013      	beq.n	8003794 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376c:	f7ff f8fa 	bl	8002964 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003774:	f7ff f8f6 	bl	8002964 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	; 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e200      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003786:	4b5d      	ldr	r3, [pc, #372]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0xe4>
 8003792:	e014      	b.n	80037be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003794:	f7ff f8e6 	bl	8002964 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800379c:	f7ff f8e2 	bl	8002964 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b64      	cmp	r3, #100	; 0x64
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e1ec      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ae:	4b53      	ldr	r3, [pc, #332]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f0      	bne.n	800379c <HAL_RCC_OscConfig+0x10c>
 80037ba:	e000      	b.n	80037be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d063      	beq.n	8003892 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037ca:	4b4c      	ldr	r3, [pc, #304]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00b      	beq.n	80037ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037d6:	4b49      	ldr	r3, [pc, #292]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d11c      	bne.n	800381c <HAL_RCC_OscConfig+0x18c>
 80037e2:	4b46      	ldr	r3, [pc, #280]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d116      	bne.n	800381c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ee:	4b43      	ldr	r3, [pc, #268]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <HAL_RCC_OscConfig+0x176>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d001      	beq.n	8003806 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e1c0      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003806:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4939      	ldr	r1, [pc, #228]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003816:	4313      	orrs	r3, r2
 8003818:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381a:	e03a      	b.n	8003892 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d020      	beq.n	8003866 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003824:	4b36      	ldr	r3, [pc, #216]	; (8003900 <HAL_RCC_OscConfig+0x270>)
 8003826:	2201      	movs	r2, #1
 8003828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382a:	f7ff f89b 	bl	8002964 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003832:	f7ff f897 	bl	8002964 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e1a1      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003844:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003850:	4b2a      	ldr	r3, [pc, #168]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4927      	ldr	r1, [pc, #156]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003860:	4313      	orrs	r3, r2
 8003862:	600b      	str	r3, [r1, #0]
 8003864:	e015      	b.n	8003892 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003866:	4b26      	ldr	r3, [pc, #152]	; (8003900 <HAL_RCC_OscConfig+0x270>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7ff f87a 	bl	8002964 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003874:	f7ff f876 	bl	8002964 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e180      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003886:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	d03a      	beq.n	8003914 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d019      	beq.n	80038da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a6:	4b17      	ldr	r3, [pc, #92]	; (8003904 <HAL_RCC_OscConfig+0x274>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ac:	f7ff f85a 	bl	8002964 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b4:	f7ff f856 	bl	8002964 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e160      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c6:	4b0d      	ldr	r3, [pc, #52]	; (80038fc <HAL_RCC_OscConfig+0x26c>)
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f0      	beq.n	80038b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038d2:	2001      	movs	r0, #1
 80038d4:	f000 fad8 	bl	8003e88 <RCC_Delay>
 80038d8:	e01c      	b.n	8003914 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <HAL_RCC_OscConfig+0x274>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e0:	f7ff f840 	bl	8002964 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e6:	e00f      	b.n	8003908 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e8:	f7ff f83c 	bl	8002964 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d908      	bls.n	8003908 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e146      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000
 8003900:	42420000 	.word	0x42420000
 8003904:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003908:	4b92      	ldr	r3, [pc, #584]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e9      	bne.n	80038e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80a6 	beq.w	8003a6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003922:	2300      	movs	r3, #0
 8003924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003926:	4b8b      	ldr	r3, [pc, #556]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10d      	bne.n	800394e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003932:	4b88      	ldr	r3, [pc, #544]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	4a87      	ldr	r2, [pc, #540]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393c:	61d3      	str	r3, [r2, #28]
 800393e:	4b85      	ldr	r3, [pc, #532]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800394a:	2301      	movs	r3, #1
 800394c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394e:	4b82      	ldr	r3, [pc, #520]	; (8003b58 <HAL_RCC_OscConfig+0x4c8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003956:	2b00      	cmp	r3, #0
 8003958:	d118      	bne.n	800398c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800395a:	4b7f      	ldr	r3, [pc, #508]	; (8003b58 <HAL_RCC_OscConfig+0x4c8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a7e      	ldr	r2, [pc, #504]	; (8003b58 <HAL_RCC_OscConfig+0x4c8>)
 8003960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003966:	f7fe fffd 	bl	8002964 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396e:	f7fe fff9 	bl	8002964 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b64      	cmp	r3, #100	; 0x64
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e103      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003980:	4b75      	ldr	r3, [pc, #468]	; (8003b58 <HAL_RCC_OscConfig+0x4c8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d106      	bne.n	80039a2 <HAL_RCC_OscConfig+0x312>
 8003994:	4b6f      	ldr	r3, [pc, #444]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	4a6e      	ldr	r2, [pc, #440]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	6213      	str	r3, [r2, #32]
 80039a0:	e02d      	b.n	80039fe <HAL_RCC_OscConfig+0x36e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x334>
 80039aa:	4b6a      	ldr	r3, [pc, #424]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	4a69      	ldr	r2, [pc, #420]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	f023 0301 	bic.w	r3, r3, #1
 80039b4:	6213      	str	r3, [r2, #32]
 80039b6:	4b67      	ldr	r3, [pc, #412]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	4a66      	ldr	r2, [pc, #408]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	f023 0304 	bic.w	r3, r3, #4
 80039c0:	6213      	str	r3, [r2, #32]
 80039c2:	e01c      	b.n	80039fe <HAL_RCC_OscConfig+0x36e>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	2b05      	cmp	r3, #5
 80039ca:	d10c      	bne.n	80039e6 <HAL_RCC_OscConfig+0x356>
 80039cc:	4b61      	ldr	r3, [pc, #388]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	4a60      	ldr	r2, [pc, #384]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039d2:	f043 0304 	orr.w	r3, r3, #4
 80039d6:	6213      	str	r3, [r2, #32]
 80039d8:	4b5e      	ldr	r3, [pc, #376]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	4a5d      	ldr	r2, [pc, #372]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6213      	str	r3, [r2, #32]
 80039e4:	e00b      	b.n	80039fe <HAL_RCC_OscConfig+0x36e>
 80039e6:	4b5b      	ldr	r3, [pc, #364]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	4a5a      	ldr	r2, [pc, #360]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	6213      	str	r3, [r2, #32]
 80039f2:	4b58      	ldr	r3, [pc, #352]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	4a57      	ldr	r2, [pc, #348]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	f023 0304 	bic.w	r3, r3, #4
 80039fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d015      	beq.n	8003a32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a06:	f7fe ffad 	bl	8002964 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0e:	f7fe ffa9 	bl	8002964 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e0b1      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a24:	4b4b      	ldr	r3, [pc, #300]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0ee      	beq.n	8003a0e <HAL_RCC_OscConfig+0x37e>
 8003a30:	e014      	b.n	8003a5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a32:	f7fe ff97 	bl	8002964 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a38:	e00a      	b.n	8003a50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3a:	f7fe ff93 	bl	8002964 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e09b      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a50:	4b40      	ldr	r3, [pc, #256]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ee      	bne.n	8003a3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d105      	bne.n	8003a6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a62:	4b3c      	ldr	r3, [pc, #240]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	4a3b      	ldr	r2, [pc, #236]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 8087 	beq.w	8003b86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a78:	4b36      	ldr	r3, [pc, #216]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 030c 	and.w	r3, r3, #12
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d061      	beq.n	8003b48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d146      	bne.n	8003b1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8c:	4b33      	ldr	r3, [pc, #204]	; (8003b5c <HAL_RCC_OscConfig+0x4cc>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a92:	f7fe ff67 	bl	8002964 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9a:	f7fe ff63 	bl	8002964 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e06d      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aac:	4b29      	ldr	r3, [pc, #164]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1f0      	bne.n	8003a9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac0:	d108      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ac2:	4b24      	ldr	r3, [pc, #144]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	4921      	ldr	r1, [pc, #132]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ad4:	4b1f      	ldr	r3, [pc, #124]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a19      	ldr	r1, [r3, #32]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	491b      	ldr	r1, [pc, #108]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aec:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <HAL_RCC_OscConfig+0x4cc>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af2:	f7fe ff37 	bl	8002964 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afa:	f7fe ff33 	bl	8002964 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e03d      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b0c:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x46a>
 8003b18:	e035      	b.n	8003b86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <HAL_RCC_OscConfig+0x4cc>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b20:	f7fe ff20 	bl	8002964 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fe ff1c 	bl	8002964 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e026      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x498>
 8003b46:	e01e      	b.n	8003b86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d107      	bne.n	8003b60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e019      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40007000 	.word	0x40007000
 8003b5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_OscConfig+0x500>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d106      	bne.n	8003b82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d001      	beq.n	8003b86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021000 	.word	0x40021000

08003b94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0d0      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b6a      	ldr	r3, [pc, #424]	; (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d910      	bls.n	8003bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb6:	4b67      	ldr	r3, [pc, #412]	; (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 0207 	bic.w	r2, r3, #7
 8003bbe:	4965      	ldr	r1, [pc, #404]	; (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc6:	4b63      	ldr	r3, [pc, #396]	; (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0b8      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d020      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bf0:	4b59      	ldr	r3, [pc, #356]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4a58      	ldr	r2, [pc, #352]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c08:	4b53      	ldr	r3, [pc, #332]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4a52      	ldr	r2, [pc, #328]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c14:	4b50      	ldr	r3, [pc, #320]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	494d      	ldr	r1, [pc, #308]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d040      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d107      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3a:	4b47      	ldr	r3, [pc, #284]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d115      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e07f      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d107      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c52:	4b41      	ldr	r3, [pc, #260]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e073      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c62:	4b3d      	ldr	r3, [pc, #244]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e06b      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c72:	4b39      	ldr	r3, [pc, #228]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f023 0203 	bic.w	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4936      	ldr	r1, [pc, #216]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c84:	f7fe fe6e 	bl	8002964 <HAL_GetTick>
 8003c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c8c:	f7fe fe6a 	bl	8002964 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e053      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca2:	4b2d      	ldr	r3, [pc, #180]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f003 020c 	and.w	r2, r3, #12
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d1eb      	bne.n	8003c8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d210      	bcs.n	8003ce4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 0207 	bic.w	r2, r3, #7
 8003cca:	4922      	ldr	r1, [pc, #136]	; (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd2:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e032      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf0:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4916      	ldr	r1, [pc, #88]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d0e:	4b12      	ldr	r3, [pc, #72]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	490e      	ldr	r1, [pc, #56]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d22:	f000 f821 	bl	8003d68 <HAL_RCC_GetSysClockFreq>
 8003d26:	4602      	mov	r2, r0
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	490a      	ldr	r1, [pc, #40]	; (8003d5c <HAL_RCC_ClockConfig+0x1c8>)
 8003d34:	5ccb      	ldrb	r3, [r1, r3]
 8003d36:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3a:	4a09      	ldr	r2, [pc, #36]	; (8003d60 <HAL_RCC_ClockConfig+0x1cc>)
 8003d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d3e:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <HAL_RCC_ClockConfig+0x1d0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fdcc 	bl	80028e0 <HAL_InitTick>

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40022000 	.word	0x40022000
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	0800a6e8 	.word	0x0800a6e8
 8003d60:	20000008 	.word	0x20000008
 8003d64:	2000000c 	.word	0x2000000c

08003d68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d68:	b490      	push	{r4, r7}
 8003d6a:	b08a      	sub	sp, #40	; 0x28
 8003d6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d6e:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xac>)
 8003d70:	1d3c      	adds	r4, r7, #4
 8003d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d78:	f240 2301 	movw	r3, #513	; 0x201
 8003d7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	2300      	movs	r3, #0
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d92:	4b21      	ldr	r3, [pc, #132]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d002      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0x40>
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d003      	beq.n	8003dae <HAL_RCC_GetSysClockFreq+0x46>
 8003da6:	e02b      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003da8:	4b1c      	ldr	r3, [pc, #112]	; (8003e1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003daa:	623b      	str	r3, [r7, #32]
      break;
 8003dac:	e02b      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	0c9b      	lsrs	r3, r3, #18
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	3328      	adds	r3, #40	; 0x28
 8003db8:	443b      	add	r3, r7
 8003dba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003dbe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d012      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dca:	4b13      	ldr	r3, [pc, #76]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	0c5b      	lsrs	r3, r3, #17
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	3328      	adds	r3, #40	; 0x28
 8003dd6:	443b      	add	r3, r7
 8003dd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ddc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	4a0e      	ldr	r2, [pc, #56]	; (8003e1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003de2:	fb03 f202 	mul.w	r2, r3, r2
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
 8003dee:	e004      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	4a0b      	ldr	r2, [pc, #44]	; (8003e20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003df4:	fb02 f303 	mul.w	r3, r2, r3
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	623b      	str	r3, [r7, #32]
      break;
 8003dfe:	e002      	b.n	8003e06 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e00:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e02:	623b      	str	r3, [r7, #32]
      break;
 8003e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e06:	6a3b      	ldr	r3, [r7, #32]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3728      	adds	r7, #40	; 0x28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc90      	pop	{r4, r7}
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	0800a6d8 	.word	0x0800a6d8
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	007a1200 	.word	0x007a1200
 8003e20:	003d0900 	.word	0x003d0900

08003e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e28:	4b02      	ldr	r3, [pc, #8]	; (8003e34 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr
 8003e34:	20000008 	.word	0x20000008

08003e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e3c:	f7ff fff2 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e40:	4602      	mov	r2, r0
 8003e42:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	0a1b      	lsrs	r3, r3, #8
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	4903      	ldr	r1, [pc, #12]	; (8003e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e4e:	5ccb      	ldrb	r3, [r1, r3]
 8003e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	0800a6f8 	.word	0x0800a6f8

08003e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e64:	f7ff ffde 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	0adb      	lsrs	r3, r3, #11
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	4903      	ldr	r1, [pc, #12]	; (8003e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40021000 	.word	0x40021000
 8003e84:	0800a6f8 	.word	0x0800a6f8

08003e88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e90:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <RCC_Delay+0x34>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <RCC_Delay+0x38>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	0a5b      	lsrs	r3, r3, #9
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ea2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ea4:	bf00      	nop
  }
  while (Delay --);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1e5a      	subs	r2, r3, #1
 8003eaa:	60fa      	str	r2, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f9      	bne.n	8003ea4 <RCC_Delay+0x1c>
}
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	20000008 	.word	0x20000008
 8003ec0:	10624dd3 	.word	0x10624dd3

08003ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e041      	b.n	8003f5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fe fa94 	bl	8002418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4619      	mov	r1, r3
 8003f02:	4610      	mov	r0, r2
 8003f04:	f000 fd50 	bl	80049a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d001      	beq.n	8003f7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e03a      	b.n	8003ff2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a18      	ldr	r2, [pc, #96]	; (8003ffc <HAL_TIM_Base_Start_IT+0x98>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00e      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x58>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa6:	d009      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x58>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a14      	ldr	r2, [pc, #80]	; (8004000 <HAL_TIM_Base_Start_IT+0x9c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d004      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x58>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a13      	ldr	r2, [pc, #76]	; (8004004 <HAL_TIM_Base_Start_IT+0xa0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d111      	bne.n	8003fe0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b06      	cmp	r3, #6
 8003fcc:	d010      	beq.n	8003ff0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0201 	orr.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fde:	e007      	b.n	8003ff0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr
 8003ffc:	40012c00 	.word	0x40012c00
 8004000:	40000400 	.word	0x40000400
 8004004:	40000800 	.word	0x40000800

08004008 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e041      	b.n	800409e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fe f998 	bl	8002364 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3304      	adds	r3, #4
 8004044:	4619      	mov	r1, r3
 8004046:	4610      	mov	r0, r2
 8004048:	f000 fcae 	bl	80049a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d109      	bne.n	80040cc <HAL_TIM_PWM_Start+0x24>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	bf14      	ite	ne
 80040c4:	2301      	movne	r3, #1
 80040c6:	2300      	moveq	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	e022      	b.n	8004112 <HAL_TIM_PWM_Start+0x6a>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d109      	bne.n	80040e6 <HAL_TIM_PWM_Start+0x3e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b01      	cmp	r3, #1
 80040dc:	bf14      	ite	ne
 80040de:	2301      	movne	r3, #1
 80040e0:	2300      	moveq	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	e015      	b.n	8004112 <HAL_TIM_PWM_Start+0x6a>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d109      	bne.n	8004100 <HAL_TIM_PWM_Start+0x58>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	bf14      	ite	ne
 80040f8:	2301      	movne	r3, #1
 80040fa:	2300      	moveq	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	e008      	b.n	8004112 <HAL_TIM_PWM_Start+0x6a>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	bf14      	ite	ne
 800410c:	2301      	movne	r3, #1
 800410e:	2300      	moveq	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e05e      	b.n	80041d8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d104      	bne.n	800412a <HAL_TIM_PWM_Start+0x82>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004128:	e013      	b.n	8004152 <HAL_TIM_PWM_Start+0xaa>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b04      	cmp	r3, #4
 800412e:	d104      	bne.n	800413a <HAL_TIM_PWM_Start+0x92>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004138:	e00b      	b.n	8004152 <HAL_TIM_PWM_Start+0xaa>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b08      	cmp	r3, #8
 800413e:	d104      	bne.n	800414a <HAL_TIM_PWM_Start+0xa2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004148:	e003      	b.n	8004152 <HAL_TIM_PWM_Start+0xaa>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2202      	movs	r2, #2
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2201      	movs	r2, #1
 8004158:	6839      	ldr	r1, [r7, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fea4 	bl	8004ea8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a1e      	ldr	r2, [pc, #120]	; (80041e0 <HAL_TIM_PWM_Start+0x138>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d107      	bne.n	800417a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004178:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <HAL_TIM_PWM_Start+0x138>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00e      	beq.n	80041a2 <HAL_TIM_PWM_Start+0xfa>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418c:	d009      	beq.n	80041a2 <HAL_TIM_PWM_Start+0xfa>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a14      	ldr	r2, [pc, #80]	; (80041e4 <HAL_TIM_PWM_Start+0x13c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d004      	beq.n	80041a2 <HAL_TIM_PWM_Start+0xfa>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <HAL_TIM_PWM_Start+0x140>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d111      	bne.n	80041c6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b06      	cmp	r3, #6
 80041b2:	d010      	beq.n	80041d6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c4:	e007      	b.n	80041d6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40012c00 	.word	0x40012c00
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800

080041ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e093      	b.n	8004328 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d106      	bne.n	800421a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fe f8c3 	bl	80023a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2202      	movs	r2, #2
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004230:	f023 0307 	bic.w	r3, r3, #7
 8004234:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3304      	adds	r3, #4
 800423e:	4619      	mov	r1, r3
 8004240:	4610      	mov	r0, r2
 8004242:	f000 fbb1 	bl	80049a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426e:	f023 0303 	bic.w	r3, r3, #3
 8004272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	4313      	orrs	r3, r2
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800428c:	f023 030c 	bic.w	r3, r3, #12
 8004290:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004298:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800429c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	4313      	orrs	r3, r2
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	011a      	lsls	r2, r3, #4
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	031b      	lsls	r3, r3, #12
 80042bc:	4313      	orrs	r3, r2
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80042ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	4313      	orrs	r3, r2
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004340:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004348:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004350:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004358:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d110      	bne.n	8004382 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d102      	bne.n	800436c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004366:	7b7b      	ldrb	r3, [r7, #13]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d001      	beq.n	8004370 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e069      	b.n	8004444 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004380:	e031      	b.n	80043e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b04      	cmp	r3, #4
 8004386:	d110      	bne.n	80043aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004388:	7bbb      	ldrb	r3, [r7, #14]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d102      	bne.n	8004394 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800438e:	7b3b      	ldrb	r3, [r7, #12]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d001      	beq.n	8004398 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e055      	b.n	8004444 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043a8:	e01d      	b.n	80043e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d108      	bne.n	80043c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043b0:	7bbb      	ldrb	r3, [r7, #14]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d105      	bne.n	80043c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043b6:	7b7b      	ldrb	r3, [r7, #13]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d102      	bne.n	80043c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043bc:	7b3b      	ldrb	r3, [r7, #12]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d001      	beq.n	80043c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e03e      	b.n	8004444 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2202      	movs	r2, #2
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2202      	movs	r2, #2
 80043d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2202      	movs	r2, #2
 80043da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2202      	movs	r2, #2
 80043e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_TIM_Encoder_Start+0xc4>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d008      	beq.n	8004404 <HAL_TIM_Encoder_Start+0xd4>
 80043f2:	e00f      	b.n	8004414 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2201      	movs	r2, #1
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fd53 	bl	8004ea8 <TIM_CCxChannelCmd>
      break;
 8004402:	e016      	b.n	8004432 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2201      	movs	r2, #1
 800440a:	2104      	movs	r1, #4
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fd4b 	bl	8004ea8 <TIM_CCxChannelCmd>
      break;
 8004412:	e00e      	b.n	8004432 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2201      	movs	r2, #1
 800441a:	2100      	movs	r1, #0
 800441c:	4618      	mov	r0, r3
 800441e:	f000 fd43 	bl	8004ea8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2201      	movs	r2, #1
 8004428:	2104      	movs	r1, #4
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fd3c 	bl	8004ea8 <TIM_CCxChannelCmd>
      break;
 8004430:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0201 	orr.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b02      	cmp	r3, #2
 8004460:	d122      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b02      	cmp	r3, #2
 800446e:	d11b      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0202 	mvn.w	r2, #2
 8004478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fa6f 	bl	8004972 <HAL_TIM_IC_CaptureCallback>
 8004494:	e005      	b.n	80044a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fa62 	bl	8004960 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fa71 	bl	8004984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d122      	bne.n	80044fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d11b      	bne.n	80044fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0204 	mvn.w	r2, #4
 80044cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2202      	movs	r2, #2
 80044d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fa45 	bl	8004972 <HAL_TIM_IC_CaptureCallback>
 80044e8:	e005      	b.n	80044f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fa38 	bl	8004960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fa47 	bl	8004984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b08      	cmp	r3, #8
 8004508:	d122      	bne.n	8004550 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b08      	cmp	r3, #8
 8004516:	d11b      	bne.n	8004550 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0208 	mvn.w	r2, #8
 8004520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2204      	movs	r2, #4
 8004526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fa1b 	bl	8004972 <HAL_TIM_IC_CaptureCallback>
 800453c:	e005      	b.n	800454a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fa0e 	bl	8004960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fa1d 	bl	8004984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0310 	and.w	r3, r3, #16
 800455a:	2b10      	cmp	r3, #16
 800455c:	d122      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	2b10      	cmp	r3, #16
 800456a:	d11b      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0210 	mvn.w	r2, #16
 8004574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2208      	movs	r2, #8
 800457a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f9f1 	bl	8004972 <HAL_TIM_IC_CaptureCallback>
 8004590:	e005      	b.n	800459e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f9e4 	bl	8004960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f9f3 	bl	8004984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d10e      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d107      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0201 	mvn.w	r2, #1
 80045c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fd fa62 	bl	8001a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045da:	2b80      	cmp	r3, #128	; 0x80
 80045dc:	d10e      	bne.n	80045fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e8:	2b80      	cmp	r3, #128	; 0x80
 80045ea:	d107      	bne.n	80045fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fd32 	bl	8005060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004606:	2b40      	cmp	r3, #64	; 0x40
 8004608:	d10e      	bne.n	8004628 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004614:	2b40      	cmp	r3, #64	; 0x40
 8004616:	d107      	bne.n	8004628 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f9b7 	bl	8004996 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b20      	cmp	r3, #32
 8004634:	d10e      	bne.n	8004654 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0320 	and.w	r3, r3, #32
 8004640:	2b20      	cmp	r3, #32
 8004642:	d107      	bne.n	8004654 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0220 	mvn.w	r2, #32
 800464c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fcfd 	bl	800504e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004654:	bf00      	nop
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004672:	2302      	movs	r3, #2
 8004674:	e0ac      	b.n	80047d0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b0c      	cmp	r3, #12
 8004682:	f200 809f 	bhi.w	80047c4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004686:	a201      	add	r2, pc, #4	; (adr r2, 800468c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468c:	080046c1 	.word	0x080046c1
 8004690:	080047c5 	.word	0x080047c5
 8004694:	080047c5 	.word	0x080047c5
 8004698:	080047c5 	.word	0x080047c5
 800469c:	08004701 	.word	0x08004701
 80046a0:	080047c5 	.word	0x080047c5
 80046a4:	080047c5 	.word	0x080047c5
 80046a8:	080047c5 	.word	0x080047c5
 80046ac:	08004743 	.word	0x08004743
 80046b0:	080047c5 	.word	0x080047c5
 80046b4:	080047c5 	.word	0x080047c5
 80046b8:	080047c5 	.word	0x080047c5
 80046bc:	08004783 	.word	0x08004783
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68b9      	ldr	r1, [r7, #8]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 f9d0 	bl	8004a6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0208 	orr.w	r2, r2, #8
 80046da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699a      	ldr	r2, [r3, #24]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0204 	bic.w	r2, r2, #4
 80046ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6999      	ldr	r1, [r3, #24]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	691a      	ldr	r2, [r3, #16]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	619a      	str	r2, [r3, #24]
      break;
 80046fe:	e062      	b.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fa16 	bl	8004b38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699a      	ldr	r2, [r3, #24]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800471a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6999      	ldr	r1, [r3, #24]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	021a      	lsls	r2, r3, #8
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	619a      	str	r2, [r3, #24]
      break;
 8004740:	e041      	b.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68b9      	ldr	r1, [r7, #8]
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fa5f 	bl	8004c0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69da      	ldr	r2, [r3, #28]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0208 	orr.w	r2, r2, #8
 800475c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0204 	bic.w	r2, r2, #4
 800476c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69d9      	ldr	r1, [r3, #28]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	61da      	str	r2, [r3, #28]
      break;
 8004780:	e021      	b.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68b9      	ldr	r1, [r7, #8]
 8004788:	4618      	mov	r0, r3
 800478a:	f000 faa9 	bl	8004ce0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69da      	ldr	r2, [r3, #28]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800479c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69da      	ldr	r2, [r3, #28]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69d9      	ldr	r1, [r3, #28]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	021a      	lsls	r2, r3, #8
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	61da      	str	r2, [r3, #28]
      break;
 80047c2:	e000      	b.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80047c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_TIM_ConfigClockSource+0x18>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e0b3      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x180>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800480e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004816:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004828:	d03e      	beq.n	80048a8 <HAL_TIM_ConfigClockSource+0xd0>
 800482a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800482e:	f200 8087 	bhi.w	8004940 <HAL_TIM_ConfigClockSource+0x168>
 8004832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004836:	f000 8085 	beq.w	8004944 <HAL_TIM_ConfigClockSource+0x16c>
 800483a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800483e:	d87f      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x168>
 8004840:	2b70      	cmp	r3, #112	; 0x70
 8004842:	d01a      	beq.n	800487a <HAL_TIM_ConfigClockSource+0xa2>
 8004844:	2b70      	cmp	r3, #112	; 0x70
 8004846:	d87b      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x168>
 8004848:	2b60      	cmp	r3, #96	; 0x60
 800484a:	d050      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x116>
 800484c:	2b60      	cmp	r3, #96	; 0x60
 800484e:	d877      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x168>
 8004850:	2b50      	cmp	r3, #80	; 0x50
 8004852:	d03c      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0xf6>
 8004854:	2b50      	cmp	r3, #80	; 0x50
 8004856:	d873      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x168>
 8004858:	2b40      	cmp	r3, #64	; 0x40
 800485a:	d058      	beq.n	800490e <HAL_TIM_ConfigClockSource+0x136>
 800485c:	2b40      	cmp	r3, #64	; 0x40
 800485e:	d86f      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x168>
 8004860:	2b30      	cmp	r3, #48	; 0x30
 8004862:	d064      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x156>
 8004864:	2b30      	cmp	r3, #48	; 0x30
 8004866:	d86b      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x168>
 8004868:	2b20      	cmp	r3, #32
 800486a:	d060      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x156>
 800486c:	2b20      	cmp	r3, #32
 800486e:	d867      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x168>
 8004870:	2b00      	cmp	r3, #0
 8004872:	d05c      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x156>
 8004874:	2b10      	cmp	r3, #16
 8004876:	d05a      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004878:	e062      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6899      	ldr	r1, [r3, #8]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f000 faee 	bl	8004e6a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800489c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	609a      	str	r2, [r3, #8]
      break;
 80048a6:	e04e      	b.n	8004946 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	6899      	ldr	r1, [r3, #8]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f000 fad7 	bl	8004e6a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048ca:	609a      	str	r2, [r3, #8]
      break;
 80048cc:	e03b      	b.n	8004946 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6859      	ldr	r1, [r3, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	461a      	mov	r2, r3
 80048dc:	f000 fa4e 	bl	8004d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2150      	movs	r1, #80	; 0x50
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 faa5 	bl	8004e36 <TIM_ITRx_SetConfig>
      break;
 80048ec:	e02b      	b.n	8004946 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6859      	ldr	r1, [r3, #4]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	461a      	mov	r2, r3
 80048fc:	f000 fa6c 	bl	8004dd8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2160      	movs	r1, #96	; 0x60
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fa95 	bl	8004e36 <TIM_ITRx_SetConfig>
      break;
 800490c:	e01b      	b.n	8004946 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6818      	ldr	r0, [r3, #0]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	6859      	ldr	r1, [r3, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	461a      	mov	r2, r3
 800491c:	f000 fa2e 	bl	8004d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2140      	movs	r1, #64	; 0x40
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fa85 	bl	8004e36 <TIM_ITRx_SetConfig>
      break;
 800492c:	e00b      	b.n	8004946 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4619      	mov	r1, r3
 8004938:	4610      	mov	r0, r2
 800493a:	f000 fa7c 	bl	8004e36 <TIM_ITRx_SetConfig>
        break;
 800493e:	e002      	b.n	8004946 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004940:	bf00      	nop
 8004942:	e000      	b.n	8004946 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004944:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	bc80      	pop	{r7}
 8004970:	4770      	bx	lr

08004972 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr

08004996 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr

080049a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a29      	ldr	r2, [pc, #164]	; (8004a60 <TIM_Base_SetConfig+0xb8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00b      	beq.n	80049d8 <TIM_Base_SetConfig+0x30>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c6:	d007      	beq.n	80049d8 <TIM_Base_SetConfig+0x30>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a26      	ldr	r2, [pc, #152]	; (8004a64 <TIM_Base_SetConfig+0xbc>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d003      	beq.n	80049d8 <TIM_Base_SetConfig+0x30>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a25      	ldr	r2, [pc, #148]	; (8004a68 <TIM_Base_SetConfig+0xc0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d108      	bne.n	80049ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a1c      	ldr	r2, [pc, #112]	; (8004a60 <TIM_Base_SetConfig+0xb8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00b      	beq.n	8004a0a <TIM_Base_SetConfig+0x62>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f8:	d007      	beq.n	8004a0a <TIM_Base_SetConfig+0x62>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a19      	ldr	r2, [pc, #100]	; (8004a64 <TIM_Base_SetConfig+0xbc>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d003      	beq.n	8004a0a <TIM_Base_SetConfig+0x62>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a18      	ldr	r2, [pc, #96]	; (8004a68 <TIM_Base_SetConfig+0xc0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d108      	bne.n	8004a1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a07      	ldr	r2, [pc, #28]	; (8004a60 <TIM_Base_SetConfig+0xb8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d103      	bne.n	8004a50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	615a      	str	r2, [r3, #20]
}
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	40000400 	.word	0x40000400
 8004a68:	40000800 	.word	0x40000800

08004a6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	f023 0201 	bic.w	r2, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0303 	bic.w	r3, r3, #3
 8004aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f023 0302 	bic.w	r3, r3, #2
 8004ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a1c      	ldr	r2, [pc, #112]	; (8004b34 <TIM_OC1_SetConfig+0xc8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d10c      	bne.n	8004ae2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f023 0308 	bic.w	r3, r3, #8
 8004ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f023 0304 	bic.w	r3, r3, #4
 8004ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a13      	ldr	r2, [pc, #76]	; (8004b34 <TIM_OC1_SetConfig+0xc8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d111      	bne.n	8004b0e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	621a      	str	r2, [r3, #32]
}
 8004b28:	bf00      	nop
 8004b2a:	371c      	adds	r7, #28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40012c00 	.word	0x40012c00

08004b38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	f023 0210 	bic.w	r2, r3, #16
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f023 0320 	bic.w	r3, r3, #32
 8004b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a1d      	ldr	r2, [pc, #116]	; (8004c08 <TIM_OC2_SetConfig+0xd0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d10d      	bne.n	8004bb4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <TIM_OC2_SetConfig+0xd0>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d113      	bne.n	8004be4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	621a      	str	r2, [r3, #32]
}
 8004bfe:	bf00      	nop
 8004c00:	371c      	adds	r7, #28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr
 8004c08:	40012c00 	.word	0x40012c00

08004c0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0303 	bic.w	r3, r3, #3
 8004c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	021b      	lsls	r3, r3, #8
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a1d      	ldr	r2, [pc, #116]	; (8004cdc <TIM_OC3_SetConfig+0xd0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d10d      	bne.n	8004c86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	021b      	lsls	r3, r3, #8
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a14      	ldr	r2, [pc, #80]	; (8004cdc <TIM_OC3_SetConfig+0xd0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d113      	bne.n	8004cb6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	621a      	str	r2, [r3, #32]
}
 8004cd0:	bf00      	nop
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40012c00 	.word	0x40012c00

08004ce0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	031b      	lsls	r3, r3, #12
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a0f      	ldr	r2, [pc, #60]	; (8004d78 <TIM_OC4_SetConfig+0x98>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d109      	bne.n	8004d54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	019b      	lsls	r3, r3, #6
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	621a      	str	r2, [r3, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr
 8004d78:	40012c00 	.word	0x40012c00

08004d7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	f023 0201 	bic.w	r2, r3, #1
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f023 030a 	bic.w	r3, r3, #10
 8004db8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	621a      	str	r2, [r3, #32]
}
 8004dce:	bf00      	nop
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr

08004dd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f023 0210 	bic.w	r2, r3, #16
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	031b      	lsls	r3, r3, #12
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	011b      	lsls	r3, r3, #4
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	621a      	str	r2, [r3, #32]
}
 8004e2c:	bf00      	nop
 8004e2e:	371c      	adds	r7, #28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bc80      	pop	{r7}
 8004e34:	4770      	bx	lr

08004e36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b085      	sub	sp, #20
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f043 0307 	orr.w	r3, r3, #7
 8004e58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	609a      	str	r2, [r3, #8]
}
 8004e60:	bf00      	nop
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr

08004e6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b087      	sub	sp, #28
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	607a      	str	r2, [r7, #4]
 8004e76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	021a      	lsls	r2, r3, #8
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	609a      	str	r2, [r3, #8]
}
 8004e9e:	bf00      	nop
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bc80      	pop	{r7}
 8004ea6:	4770      	bx	lr

08004ea8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f003 031f 	and.w	r3, r3, #31
 8004eba:	2201      	movs	r2, #1
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a1a      	ldr	r2, [r3, #32]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	401a      	ands	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a1a      	ldr	r2, [r3, #32]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f003 031f 	and.w	r3, r3, #31
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	621a      	str	r2, [r3, #32]
}
 8004ee6:	bf00      	nop
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr

08004ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e046      	b.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a16      	ldr	r2, [pc, #88]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00e      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f54:	d009      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a12      	ldr	r2, [pc, #72]	; (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d004      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a10      	ldr	r2, [pc, #64]	; (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d10c      	bne.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bc80      	pop	{r7}
 8004f9e:	4770      	bx	lr
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40000400 	.word	0x40000400
 8004fa8:	40000800 	.word	0x40000800

08004fac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e03d      	b.n	8005044 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	bc80      	pop	{r7}
 800504c:	4770      	bx	lr

0800504e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr

08005060 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr

08005072 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e03f      	b.n	8005104 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7fd fa17 	bl	80024cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2224      	movs	r2, #36	; 0x24
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050b4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fcb4 	bl	8005a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	691a      	ldr	r2, [r3, #16]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695a      	ldr	r2, [r3, #20]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050da:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050ea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	4613      	mov	r3, r2
 8005118:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b20      	cmp	r3, #32
 8005124:	d11d      	bne.n	8005162 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <HAL_UART_Receive_IT+0x26>
 800512c:	88fb      	ldrh	r3, [r7, #6]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e016      	b.n	8005164 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_UART_Receive_IT+0x38>
 8005140:	2302      	movs	r3, #2
 8005142:	e00f      	b.n	8005164 <HAL_UART_Receive_IT+0x58>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	461a      	mov	r2, r3
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 fac4 	bl	80056e6 <UART_Start_Receive_IT>
 800515e:	4603      	mov	r3, r0
 8005160:	e000      	b.n	8005164 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005162:	2302      	movs	r3, #2
  }
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	4613      	mov	r3, r2
 8005178:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b20      	cmp	r3, #32
 8005184:	d153      	bne.n	800522e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <HAL_UART_Transmit_DMA+0x26>
 800518c:	88fb      	ldrh	r3, [r7, #6]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e04c      	b.n	8005230 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_UART_Transmit_DMA+0x38>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e045      	b.n	8005230 <HAL_UART_Transmit_DMA+0xc4>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	88fa      	ldrh	r2, [r7, #6]
 80051b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	88fa      	ldrh	r2, [r7, #6]
 80051bc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2221      	movs	r2, #33	; 0x21
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d0:	4a19      	ldr	r2, [pc, #100]	; (8005238 <HAL_UART_Transmit_DMA+0xcc>)
 80051d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d8:	4a18      	ldr	r2, [pc, #96]	; (800523c <HAL_UART_Transmit_DMA+0xd0>)
 80051da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e0:	4a17      	ldr	r2, [pc, #92]	; (8005240 <HAL_UART_Transmit_DMA+0xd4>)
 80051e2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e8:	2200      	movs	r2, #0
 80051ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80051ec:	f107 0308 	add.w	r3, r7, #8
 80051f0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	6819      	ldr	r1, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3304      	adds	r3, #4
 8005200:	461a      	mov	r2, r3
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	f7fd fd20 	bl	8002c48 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005210:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695a      	ldr	r2, [r3, #20]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005228:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	e000      	b.n	8005230 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800522e:	2302      	movs	r3, #2
  }
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	080055e5 	.word	0x080055e5
 800523c:	08005637 	.word	0x08005637
 8005240:	08005653 	.word	0x08005653

08005244 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	; 0x28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005264:	2300      	movs	r3, #0
 8005266:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10d      	bne.n	8005296 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	f003 0320 	and.w	r3, r3, #32
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <HAL_UART_IRQHandler+0x52>
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fb1e 	bl	80058d0 <UART_Receive_IT>
      return;
 8005294:	e17b      	b.n	800558e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 80b1 	beq.w	8005400 <HAL_UART_IRQHandler+0x1bc>
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d105      	bne.n	80052b4 <HAL_UART_IRQHandler+0x70>
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 80a6 	beq.w	8005400 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <HAL_UART_IRQHandler+0x90>
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	f043 0201 	orr.w	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <HAL_UART_IRQHandler+0xb0>
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d005      	beq.n	80052f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	f043 0202 	orr.w	r2, r3, #2
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <HAL_UART_IRQHandler+0xd0>
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d005      	beq.n	8005314 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	f043 0204 	orr.w	r2, r3, #4
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00f      	beq.n	800533e <HAL_UART_IRQHandler+0xfa>
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d104      	bne.n	8005332 <HAL_UART_IRQHandler+0xee>
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f043 0208 	orr.w	r2, r3, #8
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 811e 	beq.w	8005584 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <HAL_UART_IRQHandler+0x11e>
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fab7 	bl	80058d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536c:	2b00      	cmp	r3, #0
 800536e:	bf14      	ite	ne
 8005370:	2301      	movne	r3, #1
 8005372:	2300      	moveq	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	f003 0308 	and.w	r3, r3, #8
 8005380:	2b00      	cmp	r3, #0
 8005382:	d102      	bne.n	800538a <HAL_UART_IRQHandler+0x146>
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d031      	beq.n	80053ee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f9f9 	bl	8005782 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539a:	2b00      	cmp	r3, #0
 800539c:	d023      	beq.n	80053e6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695a      	ldr	r2, [r3, #20]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d013      	beq.n	80053de <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ba:	4a76      	ldr	r2, [pc, #472]	; (8005594 <HAL_UART_IRQHandler+0x350>)
 80053bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fd fcda 	bl	8002d7c <HAL_DMA_Abort_IT>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d016      	beq.n	80053fc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053d8:	4610      	mov	r0, r2
 80053da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053dc:	e00e      	b.n	80053fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f8ec 	bl	80055bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e4:	e00a      	b.n	80053fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f8e8 	bl	80055bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ec:	e006      	b.n	80053fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f8e4 	bl	80055bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80053fa:	e0c3      	b.n	8005584 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fc:	bf00      	nop
    return;
 80053fe:	e0c1      	b.n	8005584 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005404:	2b01      	cmp	r3, #1
 8005406:	f040 80a1 	bne.w	800554c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 809b 	beq.w	800554c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	f003 0310 	and.w	r3, r3, #16
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 8095 	beq.w	800554c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005422:	2300      	movs	r3, #0
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d04e      	beq.n	80054e4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005450:	8a3b      	ldrh	r3, [r7, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 8098 	beq.w	8005588 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800545c:	8a3a      	ldrh	r2, [r7, #16]
 800545e:	429a      	cmp	r2, r3
 8005460:	f080 8092 	bcs.w	8005588 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	8a3a      	ldrh	r2, [r7, #16]
 8005468:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	2b20      	cmp	r3, #32
 8005472:	d02b      	beq.n	80054cc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005482:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695a      	ldr	r2, [r3, #20]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0201 	bic.w	r2, r2, #1
 8005492:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695a      	ldr	r2, [r3, #20]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054a2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0210 	bic.w	r2, r2, #16
 80054c0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fd fc1d 	bl	8002d06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	b29b      	uxth	r3, r3
 80054da:	4619      	mov	r1, r3
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f876 	bl	80055ce <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80054e2:	e051      	b.n	8005588 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d047      	beq.n	800558c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80054fc:	8a7b      	ldrh	r3, [r7, #18]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d044      	beq.n	800558c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005510:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695a      	ldr	r2, [r3, #20]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0201 	bic.w	r2, r2, #1
 8005520:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2220      	movs	r2, #32
 8005526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0210 	bic.w	r2, r2, #16
 800553e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005540:	8a7b      	ldrh	r3, [r7, #18]
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f842 	bl	80055ce <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800554a:	e01f      	b.n	800558c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005552:	2b00      	cmp	r3, #0
 8005554:	d008      	beq.n	8005568 <HAL_UART_IRQHandler+0x324>
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f94e 	bl	8005802 <UART_Transmit_IT>
    return;
 8005566:	e012      	b.n	800558e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00d      	beq.n	800558e <HAL_UART_IRQHandler+0x34a>
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005578:	2b00      	cmp	r3, #0
 800557a:	d008      	beq.n	800558e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f98f 	bl	80058a0 <UART_EndTransmit_IT>
    return;
 8005582:	e004      	b.n	800558e <HAL_UART_IRQHandler+0x34a>
    return;
 8005584:	bf00      	nop
 8005586:	e002      	b.n	800558e <HAL_UART_IRQHandler+0x34a>
      return;
 8005588:	bf00      	nop
 800558a:	e000      	b.n	800558e <HAL_UART_IRQHandler+0x34a>
      return;
 800558c:	bf00      	nop
  }
}
 800558e:	3728      	adds	r7, #40	; 0x28
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	080057db 	.word	0x080057db

08005598 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr

080055aa <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bc80      	pop	{r7}
 80055ba:	4770      	bx	lr

080055bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr

080055ce <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	460b      	mov	r3, r1
 80055d8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr

080055e4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0320 	and.w	r3, r3, #32
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d113      	bne.n	8005628 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695a      	ldr	r2, [r3, #20]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005614:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005624:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005626:	e002      	b.n	800562e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f7ff ffb5 	bl	8005598 <HAL_UART_TxCpltCallback>
}
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff ffb0 	bl	80055aa <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800564a:	bf00      	nop
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800565a:	2300      	movs	r3, #0
 800565c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566e:	2b00      	cmp	r3, #0
 8005670:	bf14      	ite	ne
 8005672:	2301      	movne	r3, #1
 8005674:	2300      	moveq	r3, #0
 8005676:	b2db      	uxtb	r3, r3
 8005678:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b21      	cmp	r3, #33	; 0x21
 8005684:	d108      	bne.n	8005698 <UART_DMAError+0x46>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d005      	beq.n	8005698 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2200      	movs	r2, #0
 8005690:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005692:	68b8      	ldr	r0, [r7, #8]
 8005694:	f000 f860 	bl	8005758 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	bf14      	ite	ne
 80056a6:	2301      	movne	r3, #1
 80056a8:	2300      	moveq	r3, #0
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b22      	cmp	r3, #34	; 0x22
 80056b8:	d108      	bne.n	80056cc <UART_DMAError+0x7a>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d005      	beq.n	80056cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2200      	movs	r2, #0
 80056c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80056c6:	68b8      	ldr	r0, [r7, #8]
 80056c8:	f000 f85b 	bl	8005782 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	f043 0210 	orr.w	r2, r3, #16
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056d8:	68b8      	ldr	r0, [r7, #8]
 80056da:	f7ff ff6f 	bl	80055bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056de:	bf00      	nop
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b085      	sub	sp, #20
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	60f8      	str	r0, [r7, #12]
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	4613      	mov	r3, r2
 80056f2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	88fa      	ldrh	r2, [r7, #6]
 80056fe:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	88fa      	ldrh	r2, [r7, #6]
 8005704:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2222      	movs	r2, #34	; 0x22
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800572a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695a      	ldr	r2, [r3, #20]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0201 	orr.w	r2, r2, #1
 800573a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0220 	orr.w	r2, r2, #32
 800574a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr

08005758 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800576e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	bc80      	pop	{r7}
 8005780:	4770      	bx	lr

08005782 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005798:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	695a      	ldr	r2, [r3, #20]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0201 	bic.w	r2, r2, #1
 80057a8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d107      	bne.n	80057c2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 0210 	bic.w	r2, r2, #16
 80057c0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr

080057da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f7ff fee1 	bl	80055bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057fa:	bf00      	nop
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005802:	b480      	push	{r7}
 8005804:	b085      	sub	sp, #20
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b21      	cmp	r3, #33	; 0x21
 8005814:	d13e      	bne.n	8005894 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581e:	d114      	bne.n	800584a <UART_Transmit_IT+0x48>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d110      	bne.n	800584a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800583c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	1c9a      	adds	r2, r3, #2
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	621a      	str	r2, [r3, #32]
 8005848:	e008      	b.n	800585c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	1c59      	adds	r1, r3, #1
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6211      	str	r1, [r2, #32]
 8005854:	781a      	ldrb	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005860:	b29b      	uxth	r3, r3
 8005862:	3b01      	subs	r3, #1
 8005864:	b29b      	uxth	r3, r3
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	4619      	mov	r1, r3
 800586a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10f      	bne.n	8005890 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800587e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800588e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	e000      	b.n	8005896 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005894:	2302      	movs	r3, #2
  }
}
 8005896:	4618      	mov	r0, r3
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	bc80      	pop	{r7}
 800589e:	4770      	bx	lr

080058a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff fe69 	bl	8005598 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b22      	cmp	r3, #34	; 0x22
 80058e2:	f040 8099 	bne.w	8005a18 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ee:	d117      	bne.n	8005920 <UART_Receive_IT+0x50>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d113      	bne.n	8005920 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058f8:	2300      	movs	r3, #0
 80058fa:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005900:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	b29b      	uxth	r3, r3
 800590a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800590e:	b29a      	uxth	r2, r3
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005918:	1c9a      	adds	r2, r3, #2
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	629a      	str	r2, [r3, #40]	; 0x28
 800591e:	e026      	b.n	800596e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005924:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005926:	2300      	movs	r3, #0
 8005928:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005932:	d007      	beq.n	8005944 <UART_Receive_IT+0x74>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <UART_Receive_IT+0x82>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d106      	bne.n	8005952 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	b2da      	uxtb	r2, r3
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	e008      	b.n	8005964 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800595e:	b2da      	uxtb	r2, r3
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29b      	uxth	r3, r3
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	4619      	mov	r1, r3
 800597c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800597e:	2b00      	cmp	r3, #0
 8005980:	d148      	bne.n	8005a14 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0220 	bic.w	r2, r2, #32
 8005990:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0201 	bic.w	r2, r2, #1
 80059b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d123      	bne.n	8005a0a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68da      	ldr	r2, [r3, #12]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0210 	bic.w	r2, r2, #16
 80059d6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0310 	and.w	r3, r3, #16
 80059e2:	2b10      	cmp	r3, #16
 80059e4:	d10a      	bne.n	80059fc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a00:	4619      	mov	r1, r3
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7ff fde3 	bl	80055ce <HAL_UARTEx_RxEventCallback>
 8005a08:	e002      	b.n	8005a10 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fc f880 	bl	8001b10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	e002      	b.n	8005a1a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	e000      	b.n	8005a1a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005a18:	2302      	movs	r3, #2
  }
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005a5e:	f023 030c 	bic.w	r3, r3, #12
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	430b      	orrs	r3, r1
 8005a6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699a      	ldr	r2, [r3, #24]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a2c      	ldr	r2, [pc, #176]	; (8005b38 <UART_SetConfig+0x114>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d103      	bne.n	8005a94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a8c:	f7fe f9e8 	bl	8003e60 <HAL_RCC_GetPCLK2Freq>
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	e002      	b.n	8005a9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a94:	f7fe f9d0 	bl	8003e38 <HAL_RCC_GetPCLK1Freq>
 8005a98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009a      	lsls	r2, r3, #2
 8005aa4:	441a      	add	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab0:	4a22      	ldr	r2, [pc, #136]	; (8005b3c <UART_SetConfig+0x118>)
 8005ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	0119      	lsls	r1, r3, #4
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	009a      	lsls	r2, r3, #2
 8005ac4:	441a      	add	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ad0:	4b1a      	ldr	r3, [pc, #104]	; (8005b3c <UART_SetConfig+0x118>)
 8005ad2:	fba3 0302 	umull	r0, r3, r3, r2
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	2064      	movs	r0, #100	; 0x64
 8005ada:	fb00 f303 	mul.w	r3, r0, r3
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	3332      	adds	r3, #50	; 0x32
 8005ae4:	4a15      	ldr	r2, [pc, #84]	; (8005b3c <UART_SetConfig+0x118>)
 8005ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aea:	095b      	lsrs	r3, r3, #5
 8005aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005af0:	4419      	add	r1, r3
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	009a      	lsls	r2, r3, #2
 8005afc:	441a      	add	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b08:	4b0c      	ldr	r3, [pc, #48]	; (8005b3c <UART_SetConfig+0x118>)
 8005b0a:	fba3 0302 	umull	r0, r3, r3, r2
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	2064      	movs	r0, #100	; 0x64
 8005b12:	fb00 f303 	mul.w	r3, r0, r3
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	3332      	adds	r3, #50	; 0x32
 8005b1c:	4a07      	ldr	r2, [pc, #28]	; (8005b3c <UART_SetConfig+0x118>)
 8005b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	f003 020f 	and.w	r2, r3, #15
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b30:	bf00      	nop
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40013800 	.word	0x40013800
 8005b3c:	51eb851f 	.word	0x51eb851f

08005b40 <crc16_floating>:
	for(counter = 0; counter < len; counter++)
		crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(uint8_t *)buf++)&0x00FF];
	return crc;
}

uint16_t crc16_floating(uint8_t next, uint16_t seed) {
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	4603      	mov	r3, r0
 8005b48:	460a      	mov	r2, r1
 8005b4a:	71fb      	strb	r3, [r7, #7]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	80bb      	strh	r3, [r7, #4]
    return (seed<<8) ^ crc16tab[(seed>>8) ^ next & 0x00FF];
 8005b50:	88bb      	ldrh	r3, [r7, #4]
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	b21a      	sxth	r2, r3
 8005b56:	88bb      	ldrh	r3, [r7, #4]
 8005b58:	0a1b      	lsrs	r3, r3, #8
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	404b      	eors	r3, r1
 8005b62:	4906      	ldr	r1, [pc, #24]	; (8005b7c <crc16_floating+0x3c>)
 8005b64:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005b68:	b21b      	sxth	r3, r3
 8005b6a:	4053      	eors	r3, r2
 8005b6c:	b21b      	sxth	r3, r3
 8005b6e:	b29b      	uxth	r3, r3
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	0800a700 	.word	0x0800a700

08005b80 <UART_get_data>:
#include "uart_proto.h"
#include "crc16.h"

int8_t UART_get_data(uint8_t *pu8Src, uint16_t u16Src_len, uint8_t *pu8Dest, uint16_t *pu16Dest_len)
{   
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08a      	sub	sp, #40	; 0x28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	607a      	str	r2, [r7, #4]
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	817b      	strh	r3, [r7, #10]
	const uint8_t *pu8Src_start = pu8Src;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	61fb      	str	r3, [r7, #28]
	const uint8_t *pu8Src_findStart = pu8Src + (u16Src_len);
 8005b94:	897b      	ldrh	r3, [r7, #10]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4413      	add	r3, r2
 8005b9a:	61bb      	str	r3, [r7, #24]
	char checkFindStart = 0;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t checkESC = 0;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t index = 0;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint16_t crc_check = 0;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	847b      	strh	r3, [r7, #34]	; 0x22
	// Advance src to start byte
	if(*pu8Src == PROTO_START_BYTE)   // neu vua vo ma nhan duoc byte start luon thi khoi vo ham while
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d106      	bne.n	8005bc8 <UART_get_data+0x48>
	{
	    checkFindStart = 1;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	while(pu8Src < pu8Src_findStart && *pu8Src != PROTO_START_BYTE)
 8005bc0:	e002      	b.n	8005bc8 <UART_get_data+0x48>
	{
		pu8Src++;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	60fb      	str	r3, [r7, #12]
	while(pu8Src < pu8Src_findStart && *pu8Src != PROTO_START_BYTE)
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d203      	bcs.n	8005bd8 <UART_get_data+0x58>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d1f4      	bne.n	8005bc2 <UART_get_data+0x42>
	}
	if(*pu8Src == PROTO_START_BYTE)   // neu vua vo ma nhan duoc byte start luon thi khoi vo ham while
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d102      	bne.n	8005be6 <UART_get_data+0x66>
	{
		checkFindStart = 1;
 8005be0:	2301      	movs	r3, #1
 8005be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	// Set our error return val for dest_len
	if(checkFindStart == 0)
 8005be6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d102      	bne.n	8005bf4 <UART_get_data+0x74>
	{
	   return Phuc_no_valid;
 8005bee:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf2:	e074      	b.n	8005cde <UART_get_data+0x15e>
	}
	// Loop through the data
	pu8Src++;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	60fb      	str	r3, [r7, #12]
	while(index < PROTO_DATA_SIZE_RX)
 8005bfa:	e03e      	b.n	8005c7a <UART_get_data+0xfa>
	{
		if (*pu8Src == PROTO_ESC_BYTE) // 7E
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b7e      	cmp	r3, #126	; 0x7e
 8005c02:	d123      	bne.n	8005c4c <UART_get_data+0xcc>
		{
			crc_check = crc16_floating(*pu8Src, crc_check);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff ff97 	bl	8005b40 <crc16_floating>
 8005c12:	4603      	mov	r3, r0
 8005c14:	847b      	strh	r3, [r7, #34]	; 0x22
			*(pu8Dest++)  = (*(++pu8Src)) ^ 0x20;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	781a      	ldrb	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	1c59      	adds	r1, r3, #1
 8005c24:	6079      	str	r1, [r7, #4]
 8005c26:	f082 0220 	eor.w	r2, r2, #32
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	701a      	strb	r2, [r3, #0]
			crc_check = crc16_floating(*pu8Src, crc_check);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005c34:	4611      	mov	r1, r2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff ff82 	bl	8005b40 <crc16_floating>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	847b      	strh	r3, [r7, #34]	; 0x22
			checkESC++;
 8005c40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c44:	3301      	adds	r3, #1
 8005c46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005c4a:	e00e      	b.n	8005c6a <UART_get_data+0xea>
		}
		else
		{
			crc_check = crc16_floating(*pu8Src, crc_check);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005c52:	4611      	mov	r1, r2
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff ff73 	bl	8005b40 <crc16_floating>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	847b      	strh	r3, [r7, #34]	; 0x22
			*(pu8Dest++) = *pu8Src;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	7812      	ldrb	r2, [r2, #0]
 8005c68:	701a      	strb	r2, [r3, #0]
		}
		pu8Src++;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]
		index++;
 8005c70:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005c74:	3301      	adds	r3, #1
 8005c76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(index < PROTO_DATA_SIZE_RX)
 8005c7a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005c7e:	2b0c      	cmp	r3, #12
 8005c80:	d9bc      	bls.n	8005bfc <UART_get_data+0x7c>
	}

	if (*(pu8Src + 2) != PROTO_END_BYTE)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3302      	adds	r3, #2
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d002      	beq.n	8005c92 <UART_get_data+0x112>
		{  // luc nay pu8Src dang o byte CRC dau tien
			return Phuc_no_valid;
 8005c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c90:	e025      	b.n	8005cde <UART_get_data+0x15e>
		}
		uint8_t byte2_crc = (crc_check) & 0xFF;
 8005c92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c94:	75fb      	strb	r3, [r7, #23]
		uint8_t byte1_crc = (crc_check >> 8) & 0xFF;
 8005c96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c98:	0a1b      	lsrs	r3, r3, #8
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	75bb      	strb	r3, [r7, #22]
		if(*(pu8Src++) != byte1_crc || *(pu8Src) != byte2_crc)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	60fa      	str	r2, [r7, #12]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	7dba      	ldrb	r2, [r7, #22]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d104      	bne.n	8005cb6 <UART_get_data+0x136>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	7dfa      	ldrb	r2, [r7, #23]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d002      	beq.n	8005cbc <UART_get_data+0x13c>
		{
			return Phuc_false_CRC;
 8005cb6:	f06f 0301 	mvn.w	r3, #1
 8005cba:	e010      	b.n	8005cde <UART_get_data+0x15e>
		}
		*pu16Dest_len =(++pu8Src - pu8Src_start - 4 - checkESC); // do dai data thu duoc
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	3b04      	subs	r3, #4
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	801a      	strh	r2, [r3, #0]
		return Phuc_right;
 8005cdc:	2302      	movs	r3, #2
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3728      	adds	r7, #40	; 0x28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <UART_frame_data>:
void UART_frame_data(uint8_t *pu8Src, uint8_t u8Src_len, uint8_t *pu8Dest, uint16_t *pu16Dest_len)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b086      	sub	sp, #24
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	607a      	str	r2, [r7, #4]
 8005cf0:	603b      	str	r3, [r7, #0]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	72fb      	strb	r3, [r7, #11]
	uint8_t index = 0;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	75fb      	strb	r3, [r7, #23]
	uint8_t checkESC = 0;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	75bb      	strb	r3, [r7, #22]
	uint16_t crc = 0;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	82bb      	strh	r3, [r7, #20]
	*(pu8Dest++) = PROTO_START_BYTE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	607a      	str	r2, [r7, #4]
 8005d08:	2202      	movs	r2, #2
 8005d0a:	701a      	strb	r2, [r3, #0]

	while(index < u8Src_len) {
 8005d0c:	e046      	b.n	8005d9c <UART_frame_data+0xb6>
			if (*pu8Src == PROTO_START_BYTE || *pu8Src == PROTO_ESC_BYTE || *pu8Src == PROTO_END_BYTE) {
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d007      	beq.n	8005d26 <UART_frame_data+0x40>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b7e      	cmp	r3, #126	; 0x7e
 8005d1c:	d003      	beq.n	8005d26 <UART_frame_data+0x40>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	d125      	bne.n	8005d72 <UART_frame_data+0x8c>
					*(pu8Dest++) = PROTO_ESC_BYTE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	227e      	movs	r2, #126	; 0x7e
 8005d2e:	701a      	strb	r2, [r3, #0]
					crc = crc16_floating(*(pu8Dest-1), crc);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	8aba      	ldrh	r2, [r7, #20]
 8005d38:	4611      	mov	r1, r2
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7ff ff00 	bl	8005b40 <crc16_floating>
 8005d40:	4603      	mov	r3, r0
 8005d42:	82bb      	strh	r3, [r7, #20]
					*(pu8Dest++) = (*pu8Src) ^ 0x20;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	781a      	ldrb	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	1c59      	adds	r1, r3, #1
 8005d4c:	6079      	str	r1, [r7, #4]
 8005d4e:	f082 0220 	eor.w	r2, r2, #32
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]
					crc = crc16_floating(*(pu8Dest-1), crc);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	8aba      	ldrh	r2, [r7, #20]
 8005d5e:	4611      	mov	r1, r2
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff feed 	bl	8005b40 <crc16_floating>
 8005d66:	4603      	mov	r3, r0
 8005d68:	82bb      	strh	r3, [r7, #20]
					checkESC++;
 8005d6a:	7dbb      	ldrb	r3, [r7, #22]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	75bb      	strb	r3, [r7, #22]
 8005d70:	e00e      	b.n	8005d90 <UART_frame_data+0xaa>
			}
			else {
					crc = crc16_floating(*pu8Src, crc);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	8aba      	ldrh	r2, [r7, #20]
 8005d78:	4611      	mov	r1, r2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff fee0 	bl	8005b40 <crc16_floating>
 8005d80:	4603      	mov	r3, r0
 8005d82:	82bb      	strh	r3, [r7, #20]
					*(pu8Dest++) = *pu8Src;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	607a      	str	r2, [r7, #4]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	7812      	ldrb	r2, [r2, #0]
 8005d8e:	701a      	strb	r2, [r3, #0]
			}
			++pu8Src;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3301      	adds	r3, #1
 8005d94:	60fb      	str	r3, [r7, #12]
			index++;
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	75fb      	strb	r3, [r7, #23]
	while(index < u8Src_len) {
 8005d9c:	7dfa      	ldrb	r2, [r7, #23]
 8005d9e:	7afb      	ldrb	r3, [r7, #11]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d3b4      	bcc.n	8005d0e <UART_frame_data+0x28>
	}

	// Set the CRC

	//Casting the CRC to lets the word be assigned to a non-word boundary in memory
	*(pu8Dest) = (char)(crc >>8);
 8005da4:	8abb      	ldrh	r3, [r7, #20]
 8005da6:	0a1b      	lsrs	r3, r3, #8
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	701a      	strb	r2, [r3, #0]
	pu8Dest++;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3301      	adds	r3, #1
 8005db4:	607b      	str	r3, [r7, #4]
	*(pu8Dest) = (char)crc;
 8005db6:	8abb      	ldrh	r3, [r7, #20]
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	701a      	strb	r2, [r3, #0]
	pu8Dest++;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	607b      	str	r3, [r7, #4]
	*(pu8Dest++) = PROTO_END_BYTE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	607a      	str	r2, [r7, #4]
 8005dca:	2203      	movs	r2, #3
 8005dcc:	701a      	strb	r2, [r3, #0]
//	*(pu16Dest_len) = pu8Dest - pu8Dest_start;
	*(pu16Dest_len) = u8Src_len + checkESC + 4;   // do dai frame, 4 la start crc crc stop
 8005dce:	7afb      	ldrb	r3, [r7, #11]
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	7dbb      	ldrb	r3, [r7, #22]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	4413      	add	r3, r2
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	3304      	adds	r3, #4
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	801a      	strh	r2, [r3, #0]
}
 8005de2:	bf00      	nop
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <__errno>:
 8005dec:	4b01      	ldr	r3, [pc, #4]	; (8005df4 <__errno+0x8>)
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	20000014 	.word	0x20000014

08005df8 <__libc_init_array>:
 8005df8:	b570      	push	{r4, r5, r6, lr}
 8005dfa:	2600      	movs	r6, #0
 8005dfc:	4d0c      	ldr	r5, [pc, #48]	; (8005e30 <__libc_init_array+0x38>)
 8005dfe:	4c0d      	ldr	r4, [pc, #52]	; (8005e34 <__libc_init_array+0x3c>)
 8005e00:	1b64      	subs	r4, r4, r5
 8005e02:	10a4      	asrs	r4, r4, #2
 8005e04:	42a6      	cmp	r6, r4
 8005e06:	d109      	bne.n	8005e1c <__libc_init_array+0x24>
 8005e08:	f004 fc5a 	bl	800a6c0 <_init>
 8005e0c:	2600      	movs	r6, #0
 8005e0e:	4d0a      	ldr	r5, [pc, #40]	; (8005e38 <__libc_init_array+0x40>)
 8005e10:	4c0a      	ldr	r4, [pc, #40]	; (8005e3c <__libc_init_array+0x44>)
 8005e12:	1b64      	subs	r4, r4, r5
 8005e14:	10a4      	asrs	r4, r4, #2
 8005e16:	42a6      	cmp	r6, r4
 8005e18:	d105      	bne.n	8005e26 <__libc_init_array+0x2e>
 8005e1a:	bd70      	pop	{r4, r5, r6, pc}
 8005e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e20:	4798      	blx	r3
 8005e22:	3601      	adds	r6, #1
 8005e24:	e7ee      	b.n	8005e04 <__libc_init_array+0xc>
 8005e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e2a:	4798      	blx	r3
 8005e2c:	3601      	adds	r6, #1
 8005e2e:	e7f2      	b.n	8005e16 <__libc_init_array+0x1e>
 8005e30:	0800ada4 	.word	0x0800ada4
 8005e34:	0800ada4 	.word	0x0800ada4
 8005e38:	0800ada4 	.word	0x0800ada4
 8005e3c:	0800ada8 	.word	0x0800ada8

08005e40 <malloc>:
 8005e40:	4b02      	ldr	r3, [pc, #8]	; (8005e4c <malloc+0xc>)
 8005e42:	4601      	mov	r1, r0
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	f000 b889 	b.w	8005f5c <_malloc_r>
 8005e4a:	bf00      	nop
 8005e4c:	20000014 	.word	0x20000014

08005e50 <free>:
 8005e50:	4b02      	ldr	r3, [pc, #8]	; (8005e5c <free+0xc>)
 8005e52:	4601      	mov	r1, r0
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	f000 b819 	b.w	8005e8c <_free_r>
 8005e5a:	bf00      	nop
 8005e5c:	20000014 	.word	0x20000014

08005e60 <memcpy>:
 8005e60:	440a      	add	r2, r1
 8005e62:	4291      	cmp	r1, r2
 8005e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e68:	d100      	bne.n	8005e6c <memcpy+0xc>
 8005e6a:	4770      	bx	lr
 8005e6c:	b510      	push	{r4, lr}
 8005e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e72:	4291      	cmp	r1, r2
 8005e74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e78:	d1f9      	bne.n	8005e6e <memcpy+0xe>
 8005e7a:	bd10      	pop	{r4, pc}

08005e7c <memset>:
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	4402      	add	r2, r0
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d100      	bne.n	8005e86 <memset+0xa>
 8005e84:	4770      	bx	lr
 8005e86:	f803 1b01 	strb.w	r1, [r3], #1
 8005e8a:	e7f9      	b.n	8005e80 <memset+0x4>

08005e8c <_free_r>:
 8005e8c:	b538      	push	{r3, r4, r5, lr}
 8005e8e:	4605      	mov	r5, r0
 8005e90:	2900      	cmp	r1, #0
 8005e92:	d040      	beq.n	8005f16 <_free_r+0x8a>
 8005e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e98:	1f0c      	subs	r4, r1, #4
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	bfb8      	it	lt
 8005e9e:	18e4      	addlt	r4, r4, r3
 8005ea0:	f003 f806 	bl	8008eb0 <__malloc_lock>
 8005ea4:	4a1c      	ldr	r2, [pc, #112]	; (8005f18 <_free_r+0x8c>)
 8005ea6:	6813      	ldr	r3, [r2, #0]
 8005ea8:	b933      	cbnz	r3, 8005eb8 <_free_r+0x2c>
 8005eaa:	6063      	str	r3, [r4, #4]
 8005eac:	6014      	str	r4, [r2, #0]
 8005eae:	4628      	mov	r0, r5
 8005eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eb4:	f003 b802 	b.w	8008ebc <__malloc_unlock>
 8005eb8:	42a3      	cmp	r3, r4
 8005eba:	d908      	bls.n	8005ece <_free_r+0x42>
 8005ebc:	6820      	ldr	r0, [r4, #0]
 8005ebe:	1821      	adds	r1, r4, r0
 8005ec0:	428b      	cmp	r3, r1
 8005ec2:	bf01      	itttt	eq
 8005ec4:	6819      	ldreq	r1, [r3, #0]
 8005ec6:	685b      	ldreq	r3, [r3, #4]
 8005ec8:	1809      	addeq	r1, r1, r0
 8005eca:	6021      	streq	r1, [r4, #0]
 8005ecc:	e7ed      	b.n	8005eaa <_free_r+0x1e>
 8005ece:	461a      	mov	r2, r3
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	b10b      	cbz	r3, 8005ed8 <_free_r+0x4c>
 8005ed4:	42a3      	cmp	r3, r4
 8005ed6:	d9fa      	bls.n	8005ece <_free_r+0x42>
 8005ed8:	6811      	ldr	r1, [r2, #0]
 8005eda:	1850      	adds	r0, r2, r1
 8005edc:	42a0      	cmp	r0, r4
 8005ede:	d10b      	bne.n	8005ef8 <_free_r+0x6c>
 8005ee0:	6820      	ldr	r0, [r4, #0]
 8005ee2:	4401      	add	r1, r0
 8005ee4:	1850      	adds	r0, r2, r1
 8005ee6:	4283      	cmp	r3, r0
 8005ee8:	6011      	str	r1, [r2, #0]
 8005eea:	d1e0      	bne.n	8005eae <_free_r+0x22>
 8005eec:	6818      	ldr	r0, [r3, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	4401      	add	r1, r0
 8005ef2:	6011      	str	r1, [r2, #0]
 8005ef4:	6053      	str	r3, [r2, #4]
 8005ef6:	e7da      	b.n	8005eae <_free_r+0x22>
 8005ef8:	d902      	bls.n	8005f00 <_free_r+0x74>
 8005efa:	230c      	movs	r3, #12
 8005efc:	602b      	str	r3, [r5, #0]
 8005efe:	e7d6      	b.n	8005eae <_free_r+0x22>
 8005f00:	6820      	ldr	r0, [r4, #0]
 8005f02:	1821      	adds	r1, r4, r0
 8005f04:	428b      	cmp	r3, r1
 8005f06:	bf01      	itttt	eq
 8005f08:	6819      	ldreq	r1, [r3, #0]
 8005f0a:	685b      	ldreq	r3, [r3, #4]
 8005f0c:	1809      	addeq	r1, r1, r0
 8005f0e:	6021      	streq	r1, [r4, #0]
 8005f10:	6063      	str	r3, [r4, #4]
 8005f12:	6054      	str	r4, [r2, #4]
 8005f14:	e7cb      	b.n	8005eae <_free_r+0x22>
 8005f16:	bd38      	pop	{r3, r4, r5, pc}
 8005f18:	200004dc 	.word	0x200004dc

08005f1c <sbrk_aligned>:
 8005f1c:	b570      	push	{r4, r5, r6, lr}
 8005f1e:	4e0e      	ldr	r6, [pc, #56]	; (8005f58 <sbrk_aligned+0x3c>)
 8005f20:	460c      	mov	r4, r1
 8005f22:	6831      	ldr	r1, [r6, #0]
 8005f24:	4605      	mov	r5, r0
 8005f26:	b911      	cbnz	r1, 8005f2e <sbrk_aligned+0x12>
 8005f28:	f000 fefa 	bl	8006d20 <_sbrk_r>
 8005f2c:	6030      	str	r0, [r6, #0]
 8005f2e:	4621      	mov	r1, r4
 8005f30:	4628      	mov	r0, r5
 8005f32:	f000 fef5 	bl	8006d20 <_sbrk_r>
 8005f36:	1c43      	adds	r3, r0, #1
 8005f38:	d00a      	beq.n	8005f50 <sbrk_aligned+0x34>
 8005f3a:	1cc4      	adds	r4, r0, #3
 8005f3c:	f024 0403 	bic.w	r4, r4, #3
 8005f40:	42a0      	cmp	r0, r4
 8005f42:	d007      	beq.n	8005f54 <sbrk_aligned+0x38>
 8005f44:	1a21      	subs	r1, r4, r0
 8005f46:	4628      	mov	r0, r5
 8005f48:	f000 feea 	bl	8006d20 <_sbrk_r>
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d101      	bne.n	8005f54 <sbrk_aligned+0x38>
 8005f50:	f04f 34ff 	mov.w	r4, #4294967295
 8005f54:	4620      	mov	r0, r4
 8005f56:	bd70      	pop	{r4, r5, r6, pc}
 8005f58:	200004e0 	.word	0x200004e0

08005f5c <_malloc_r>:
 8005f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f60:	1ccd      	adds	r5, r1, #3
 8005f62:	f025 0503 	bic.w	r5, r5, #3
 8005f66:	3508      	adds	r5, #8
 8005f68:	2d0c      	cmp	r5, #12
 8005f6a:	bf38      	it	cc
 8005f6c:	250c      	movcc	r5, #12
 8005f6e:	2d00      	cmp	r5, #0
 8005f70:	4607      	mov	r7, r0
 8005f72:	db01      	blt.n	8005f78 <_malloc_r+0x1c>
 8005f74:	42a9      	cmp	r1, r5
 8005f76:	d905      	bls.n	8005f84 <_malloc_r+0x28>
 8005f78:	230c      	movs	r3, #12
 8005f7a:	2600      	movs	r6, #0
 8005f7c:	603b      	str	r3, [r7, #0]
 8005f7e:	4630      	mov	r0, r6
 8005f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f84:	4e2e      	ldr	r6, [pc, #184]	; (8006040 <_malloc_r+0xe4>)
 8005f86:	f002 ff93 	bl	8008eb0 <__malloc_lock>
 8005f8a:	6833      	ldr	r3, [r6, #0]
 8005f8c:	461c      	mov	r4, r3
 8005f8e:	bb34      	cbnz	r4, 8005fde <_malloc_r+0x82>
 8005f90:	4629      	mov	r1, r5
 8005f92:	4638      	mov	r0, r7
 8005f94:	f7ff ffc2 	bl	8005f1c <sbrk_aligned>
 8005f98:	1c43      	adds	r3, r0, #1
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	d14d      	bne.n	800603a <_malloc_r+0xde>
 8005f9e:	6834      	ldr	r4, [r6, #0]
 8005fa0:	4626      	mov	r6, r4
 8005fa2:	2e00      	cmp	r6, #0
 8005fa4:	d140      	bne.n	8006028 <_malloc_r+0xcc>
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	4631      	mov	r1, r6
 8005faa:	4638      	mov	r0, r7
 8005fac:	eb04 0803 	add.w	r8, r4, r3
 8005fb0:	f000 feb6 	bl	8006d20 <_sbrk_r>
 8005fb4:	4580      	cmp	r8, r0
 8005fb6:	d13a      	bne.n	800602e <_malloc_r+0xd2>
 8005fb8:	6821      	ldr	r1, [r4, #0]
 8005fba:	3503      	adds	r5, #3
 8005fbc:	1a6d      	subs	r5, r5, r1
 8005fbe:	f025 0503 	bic.w	r5, r5, #3
 8005fc2:	3508      	adds	r5, #8
 8005fc4:	2d0c      	cmp	r5, #12
 8005fc6:	bf38      	it	cc
 8005fc8:	250c      	movcc	r5, #12
 8005fca:	4638      	mov	r0, r7
 8005fcc:	4629      	mov	r1, r5
 8005fce:	f7ff ffa5 	bl	8005f1c <sbrk_aligned>
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	d02b      	beq.n	800602e <_malloc_r+0xd2>
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	442b      	add	r3, r5
 8005fda:	6023      	str	r3, [r4, #0]
 8005fdc:	e00e      	b.n	8005ffc <_malloc_r+0xa0>
 8005fde:	6822      	ldr	r2, [r4, #0]
 8005fe0:	1b52      	subs	r2, r2, r5
 8005fe2:	d41e      	bmi.n	8006022 <_malloc_r+0xc6>
 8005fe4:	2a0b      	cmp	r2, #11
 8005fe6:	d916      	bls.n	8006016 <_malloc_r+0xba>
 8005fe8:	1961      	adds	r1, r4, r5
 8005fea:	42a3      	cmp	r3, r4
 8005fec:	6025      	str	r5, [r4, #0]
 8005fee:	bf18      	it	ne
 8005ff0:	6059      	strne	r1, [r3, #4]
 8005ff2:	6863      	ldr	r3, [r4, #4]
 8005ff4:	bf08      	it	eq
 8005ff6:	6031      	streq	r1, [r6, #0]
 8005ff8:	5162      	str	r2, [r4, r5]
 8005ffa:	604b      	str	r3, [r1, #4]
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	f104 060b 	add.w	r6, r4, #11
 8006002:	f002 ff5b 	bl	8008ebc <__malloc_unlock>
 8006006:	f026 0607 	bic.w	r6, r6, #7
 800600a:	1d23      	adds	r3, r4, #4
 800600c:	1af2      	subs	r2, r6, r3
 800600e:	d0b6      	beq.n	8005f7e <_malloc_r+0x22>
 8006010:	1b9b      	subs	r3, r3, r6
 8006012:	50a3      	str	r3, [r4, r2]
 8006014:	e7b3      	b.n	8005f7e <_malloc_r+0x22>
 8006016:	6862      	ldr	r2, [r4, #4]
 8006018:	42a3      	cmp	r3, r4
 800601a:	bf0c      	ite	eq
 800601c:	6032      	streq	r2, [r6, #0]
 800601e:	605a      	strne	r2, [r3, #4]
 8006020:	e7ec      	b.n	8005ffc <_malloc_r+0xa0>
 8006022:	4623      	mov	r3, r4
 8006024:	6864      	ldr	r4, [r4, #4]
 8006026:	e7b2      	b.n	8005f8e <_malloc_r+0x32>
 8006028:	4634      	mov	r4, r6
 800602a:	6876      	ldr	r6, [r6, #4]
 800602c:	e7b9      	b.n	8005fa2 <_malloc_r+0x46>
 800602e:	230c      	movs	r3, #12
 8006030:	4638      	mov	r0, r7
 8006032:	603b      	str	r3, [r7, #0]
 8006034:	f002 ff42 	bl	8008ebc <__malloc_unlock>
 8006038:	e7a1      	b.n	8005f7e <_malloc_r+0x22>
 800603a:	6025      	str	r5, [r4, #0]
 800603c:	e7de      	b.n	8005ffc <_malloc_r+0xa0>
 800603e:	bf00      	nop
 8006040:	200004dc 	.word	0x200004dc

08006044 <__cvt>:
 8006044:	2b00      	cmp	r3, #0
 8006046:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800604a:	461f      	mov	r7, r3
 800604c:	bfbb      	ittet	lt
 800604e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006052:	461f      	movlt	r7, r3
 8006054:	2300      	movge	r3, #0
 8006056:	232d      	movlt	r3, #45	; 0x2d
 8006058:	b088      	sub	sp, #32
 800605a:	4614      	mov	r4, r2
 800605c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800605e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006060:	7013      	strb	r3, [r2, #0]
 8006062:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006064:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006068:	f023 0820 	bic.w	r8, r3, #32
 800606c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006070:	d005      	beq.n	800607e <__cvt+0x3a>
 8006072:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006076:	d100      	bne.n	800607a <__cvt+0x36>
 8006078:	3501      	adds	r5, #1
 800607a:	2302      	movs	r3, #2
 800607c:	e000      	b.n	8006080 <__cvt+0x3c>
 800607e:	2303      	movs	r3, #3
 8006080:	aa07      	add	r2, sp, #28
 8006082:	9204      	str	r2, [sp, #16]
 8006084:	aa06      	add	r2, sp, #24
 8006086:	e9cd a202 	strd	sl, r2, [sp, #8]
 800608a:	e9cd 3500 	strd	r3, r5, [sp]
 800608e:	4622      	mov	r2, r4
 8006090:	463b      	mov	r3, r7
 8006092:	f001 fd95 	bl	8007bc0 <_dtoa_r>
 8006096:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800609a:	4606      	mov	r6, r0
 800609c:	d102      	bne.n	80060a4 <__cvt+0x60>
 800609e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060a0:	07db      	lsls	r3, r3, #31
 80060a2:	d522      	bpl.n	80060ea <__cvt+0xa6>
 80060a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060a8:	eb06 0905 	add.w	r9, r6, r5
 80060ac:	d110      	bne.n	80060d0 <__cvt+0x8c>
 80060ae:	7833      	ldrb	r3, [r6, #0]
 80060b0:	2b30      	cmp	r3, #48	; 0x30
 80060b2:	d10a      	bne.n	80060ca <__cvt+0x86>
 80060b4:	2200      	movs	r2, #0
 80060b6:	2300      	movs	r3, #0
 80060b8:	4620      	mov	r0, r4
 80060ba:	4639      	mov	r1, r7
 80060bc:	f7fa fc74 	bl	80009a8 <__aeabi_dcmpeq>
 80060c0:	b918      	cbnz	r0, 80060ca <__cvt+0x86>
 80060c2:	f1c5 0501 	rsb	r5, r5, #1
 80060c6:	f8ca 5000 	str.w	r5, [sl]
 80060ca:	f8da 3000 	ldr.w	r3, [sl]
 80060ce:	4499      	add	r9, r3
 80060d0:	2200      	movs	r2, #0
 80060d2:	2300      	movs	r3, #0
 80060d4:	4620      	mov	r0, r4
 80060d6:	4639      	mov	r1, r7
 80060d8:	f7fa fc66 	bl	80009a8 <__aeabi_dcmpeq>
 80060dc:	b108      	cbz	r0, 80060e2 <__cvt+0x9e>
 80060de:	f8cd 901c 	str.w	r9, [sp, #28]
 80060e2:	2230      	movs	r2, #48	; 0x30
 80060e4:	9b07      	ldr	r3, [sp, #28]
 80060e6:	454b      	cmp	r3, r9
 80060e8:	d307      	bcc.n	80060fa <__cvt+0xb6>
 80060ea:	4630      	mov	r0, r6
 80060ec:	9b07      	ldr	r3, [sp, #28]
 80060ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80060f0:	1b9b      	subs	r3, r3, r6
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	b008      	add	sp, #32
 80060f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060fa:	1c59      	adds	r1, r3, #1
 80060fc:	9107      	str	r1, [sp, #28]
 80060fe:	701a      	strb	r2, [r3, #0]
 8006100:	e7f0      	b.n	80060e4 <__cvt+0xa0>

08006102 <__exponent>:
 8006102:	4603      	mov	r3, r0
 8006104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006106:	2900      	cmp	r1, #0
 8006108:	f803 2b02 	strb.w	r2, [r3], #2
 800610c:	bfb6      	itet	lt
 800610e:	222d      	movlt	r2, #45	; 0x2d
 8006110:	222b      	movge	r2, #43	; 0x2b
 8006112:	4249      	neglt	r1, r1
 8006114:	2909      	cmp	r1, #9
 8006116:	7042      	strb	r2, [r0, #1]
 8006118:	dd2b      	ble.n	8006172 <__exponent+0x70>
 800611a:	f10d 0407 	add.w	r4, sp, #7
 800611e:	46a4      	mov	ip, r4
 8006120:	270a      	movs	r7, #10
 8006122:	fb91 f6f7 	sdiv	r6, r1, r7
 8006126:	460a      	mov	r2, r1
 8006128:	46a6      	mov	lr, r4
 800612a:	fb07 1516 	mls	r5, r7, r6, r1
 800612e:	2a63      	cmp	r2, #99	; 0x63
 8006130:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006134:	4631      	mov	r1, r6
 8006136:	f104 34ff 	add.w	r4, r4, #4294967295
 800613a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800613e:	dcf0      	bgt.n	8006122 <__exponent+0x20>
 8006140:	3130      	adds	r1, #48	; 0x30
 8006142:	f1ae 0502 	sub.w	r5, lr, #2
 8006146:	f804 1c01 	strb.w	r1, [r4, #-1]
 800614a:	4629      	mov	r1, r5
 800614c:	1c44      	adds	r4, r0, #1
 800614e:	4561      	cmp	r1, ip
 8006150:	d30a      	bcc.n	8006168 <__exponent+0x66>
 8006152:	f10d 0209 	add.w	r2, sp, #9
 8006156:	eba2 020e 	sub.w	r2, r2, lr
 800615a:	4565      	cmp	r5, ip
 800615c:	bf88      	it	hi
 800615e:	2200      	movhi	r2, #0
 8006160:	4413      	add	r3, r2
 8006162:	1a18      	subs	r0, r3, r0
 8006164:	b003      	add	sp, #12
 8006166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006168:	f811 2b01 	ldrb.w	r2, [r1], #1
 800616c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006170:	e7ed      	b.n	800614e <__exponent+0x4c>
 8006172:	2330      	movs	r3, #48	; 0x30
 8006174:	3130      	adds	r1, #48	; 0x30
 8006176:	7083      	strb	r3, [r0, #2]
 8006178:	70c1      	strb	r1, [r0, #3]
 800617a:	1d03      	adds	r3, r0, #4
 800617c:	e7f1      	b.n	8006162 <__exponent+0x60>
	...

08006180 <_printf_float>:
 8006180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006184:	b091      	sub	sp, #68	; 0x44
 8006186:	460c      	mov	r4, r1
 8006188:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800618c:	4616      	mov	r6, r2
 800618e:	461f      	mov	r7, r3
 8006190:	4605      	mov	r5, r0
 8006192:	f002 fe69 	bl	8008e68 <_localeconv_r>
 8006196:	6803      	ldr	r3, [r0, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	9309      	str	r3, [sp, #36]	; 0x24
 800619c:	f7f9 ffd8 	bl	8000150 <strlen>
 80061a0:	2300      	movs	r3, #0
 80061a2:	930e      	str	r3, [sp, #56]	; 0x38
 80061a4:	f8d8 3000 	ldr.w	r3, [r8]
 80061a8:	900a      	str	r0, [sp, #40]	; 0x28
 80061aa:	3307      	adds	r3, #7
 80061ac:	f023 0307 	bic.w	r3, r3, #7
 80061b0:	f103 0208 	add.w	r2, r3, #8
 80061b4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80061b8:	f8d4 b000 	ldr.w	fp, [r4]
 80061bc:	f8c8 2000 	str.w	r2, [r8]
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80061c8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80061cc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80061d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80061d2:	f04f 32ff 	mov.w	r2, #4294967295
 80061d6:	4640      	mov	r0, r8
 80061d8:	4b9c      	ldr	r3, [pc, #624]	; (800644c <_printf_float+0x2cc>)
 80061da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061dc:	f7fa fc16 	bl	8000a0c <__aeabi_dcmpun>
 80061e0:	bb70      	cbnz	r0, 8006240 <_printf_float+0xc0>
 80061e2:	f04f 32ff 	mov.w	r2, #4294967295
 80061e6:	4640      	mov	r0, r8
 80061e8:	4b98      	ldr	r3, [pc, #608]	; (800644c <_printf_float+0x2cc>)
 80061ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061ec:	f7fa fbf0 	bl	80009d0 <__aeabi_dcmple>
 80061f0:	bb30      	cbnz	r0, 8006240 <_printf_float+0xc0>
 80061f2:	2200      	movs	r2, #0
 80061f4:	2300      	movs	r3, #0
 80061f6:	4640      	mov	r0, r8
 80061f8:	4651      	mov	r1, sl
 80061fa:	f7fa fbdf 	bl	80009bc <__aeabi_dcmplt>
 80061fe:	b110      	cbz	r0, 8006206 <_printf_float+0x86>
 8006200:	232d      	movs	r3, #45	; 0x2d
 8006202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006206:	4b92      	ldr	r3, [pc, #584]	; (8006450 <_printf_float+0x2d0>)
 8006208:	4892      	ldr	r0, [pc, #584]	; (8006454 <_printf_float+0x2d4>)
 800620a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800620e:	bf94      	ite	ls
 8006210:	4698      	movls	r8, r3
 8006212:	4680      	movhi	r8, r0
 8006214:	2303      	movs	r3, #3
 8006216:	f04f 0a00 	mov.w	sl, #0
 800621a:	6123      	str	r3, [r4, #16]
 800621c:	f02b 0304 	bic.w	r3, fp, #4
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	4633      	mov	r3, r6
 8006224:	4621      	mov	r1, r4
 8006226:	4628      	mov	r0, r5
 8006228:	9700      	str	r7, [sp, #0]
 800622a:	aa0f      	add	r2, sp, #60	; 0x3c
 800622c:	f000 f9d4 	bl	80065d8 <_printf_common>
 8006230:	3001      	adds	r0, #1
 8006232:	f040 8090 	bne.w	8006356 <_printf_float+0x1d6>
 8006236:	f04f 30ff 	mov.w	r0, #4294967295
 800623a:	b011      	add	sp, #68	; 0x44
 800623c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006240:	4642      	mov	r2, r8
 8006242:	4653      	mov	r3, sl
 8006244:	4640      	mov	r0, r8
 8006246:	4651      	mov	r1, sl
 8006248:	f7fa fbe0 	bl	8000a0c <__aeabi_dcmpun>
 800624c:	b148      	cbz	r0, 8006262 <_printf_float+0xe2>
 800624e:	f1ba 0f00 	cmp.w	sl, #0
 8006252:	bfb8      	it	lt
 8006254:	232d      	movlt	r3, #45	; 0x2d
 8006256:	4880      	ldr	r0, [pc, #512]	; (8006458 <_printf_float+0x2d8>)
 8006258:	bfb8      	it	lt
 800625a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800625e:	4b7f      	ldr	r3, [pc, #508]	; (800645c <_printf_float+0x2dc>)
 8006260:	e7d3      	b.n	800620a <_printf_float+0x8a>
 8006262:	6863      	ldr	r3, [r4, #4]
 8006264:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	d142      	bne.n	80062f2 <_printf_float+0x172>
 800626c:	2306      	movs	r3, #6
 800626e:	6063      	str	r3, [r4, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	9206      	str	r2, [sp, #24]
 8006274:	aa0e      	add	r2, sp, #56	; 0x38
 8006276:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800627a:	aa0d      	add	r2, sp, #52	; 0x34
 800627c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006280:	9203      	str	r2, [sp, #12]
 8006282:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006286:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800628a:	6023      	str	r3, [r4, #0]
 800628c:	6863      	ldr	r3, [r4, #4]
 800628e:	4642      	mov	r2, r8
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	4628      	mov	r0, r5
 8006294:	4653      	mov	r3, sl
 8006296:	910b      	str	r1, [sp, #44]	; 0x2c
 8006298:	f7ff fed4 	bl	8006044 <__cvt>
 800629c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800629e:	4680      	mov	r8, r0
 80062a0:	2947      	cmp	r1, #71	; 0x47
 80062a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80062a4:	d108      	bne.n	80062b8 <_printf_float+0x138>
 80062a6:	1cc8      	adds	r0, r1, #3
 80062a8:	db02      	blt.n	80062b0 <_printf_float+0x130>
 80062aa:	6863      	ldr	r3, [r4, #4]
 80062ac:	4299      	cmp	r1, r3
 80062ae:	dd40      	ble.n	8006332 <_printf_float+0x1b2>
 80062b0:	f1a9 0902 	sub.w	r9, r9, #2
 80062b4:	fa5f f989 	uxtb.w	r9, r9
 80062b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80062bc:	d81f      	bhi.n	80062fe <_printf_float+0x17e>
 80062be:	464a      	mov	r2, r9
 80062c0:	3901      	subs	r1, #1
 80062c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80062c6:	910d      	str	r1, [sp, #52]	; 0x34
 80062c8:	f7ff ff1b 	bl	8006102 <__exponent>
 80062cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062ce:	4682      	mov	sl, r0
 80062d0:	1813      	adds	r3, r2, r0
 80062d2:	2a01      	cmp	r2, #1
 80062d4:	6123      	str	r3, [r4, #16]
 80062d6:	dc02      	bgt.n	80062de <_printf_float+0x15e>
 80062d8:	6822      	ldr	r2, [r4, #0]
 80062da:	07d2      	lsls	r2, r2, #31
 80062dc:	d501      	bpl.n	80062e2 <_printf_float+0x162>
 80062de:	3301      	adds	r3, #1
 80062e0:	6123      	str	r3, [r4, #16]
 80062e2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d09b      	beq.n	8006222 <_printf_float+0xa2>
 80062ea:	232d      	movs	r3, #45	; 0x2d
 80062ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062f0:	e797      	b.n	8006222 <_printf_float+0xa2>
 80062f2:	2947      	cmp	r1, #71	; 0x47
 80062f4:	d1bc      	bne.n	8006270 <_printf_float+0xf0>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1ba      	bne.n	8006270 <_printf_float+0xf0>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e7b7      	b.n	800626e <_printf_float+0xee>
 80062fe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006302:	d118      	bne.n	8006336 <_printf_float+0x1b6>
 8006304:	2900      	cmp	r1, #0
 8006306:	6863      	ldr	r3, [r4, #4]
 8006308:	dd0b      	ble.n	8006322 <_printf_float+0x1a2>
 800630a:	6121      	str	r1, [r4, #16]
 800630c:	b913      	cbnz	r3, 8006314 <_printf_float+0x194>
 800630e:	6822      	ldr	r2, [r4, #0]
 8006310:	07d0      	lsls	r0, r2, #31
 8006312:	d502      	bpl.n	800631a <_printf_float+0x19a>
 8006314:	3301      	adds	r3, #1
 8006316:	440b      	add	r3, r1
 8006318:	6123      	str	r3, [r4, #16]
 800631a:	f04f 0a00 	mov.w	sl, #0
 800631e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006320:	e7df      	b.n	80062e2 <_printf_float+0x162>
 8006322:	b913      	cbnz	r3, 800632a <_printf_float+0x1aa>
 8006324:	6822      	ldr	r2, [r4, #0]
 8006326:	07d2      	lsls	r2, r2, #31
 8006328:	d501      	bpl.n	800632e <_printf_float+0x1ae>
 800632a:	3302      	adds	r3, #2
 800632c:	e7f4      	b.n	8006318 <_printf_float+0x198>
 800632e:	2301      	movs	r3, #1
 8006330:	e7f2      	b.n	8006318 <_printf_float+0x198>
 8006332:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006338:	4299      	cmp	r1, r3
 800633a:	db05      	blt.n	8006348 <_printf_float+0x1c8>
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	6121      	str	r1, [r4, #16]
 8006340:	07d8      	lsls	r0, r3, #31
 8006342:	d5ea      	bpl.n	800631a <_printf_float+0x19a>
 8006344:	1c4b      	adds	r3, r1, #1
 8006346:	e7e7      	b.n	8006318 <_printf_float+0x198>
 8006348:	2900      	cmp	r1, #0
 800634a:	bfcc      	ite	gt
 800634c:	2201      	movgt	r2, #1
 800634e:	f1c1 0202 	rsble	r2, r1, #2
 8006352:	4413      	add	r3, r2
 8006354:	e7e0      	b.n	8006318 <_printf_float+0x198>
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	055a      	lsls	r2, r3, #21
 800635a:	d407      	bmi.n	800636c <_printf_float+0x1ec>
 800635c:	6923      	ldr	r3, [r4, #16]
 800635e:	4642      	mov	r2, r8
 8006360:	4631      	mov	r1, r6
 8006362:	4628      	mov	r0, r5
 8006364:	47b8      	blx	r7
 8006366:	3001      	adds	r0, #1
 8006368:	d12b      	bne.n	80063c2 <_printf_float+0x242>
 800636a:	e764      	b.n	8006236 <_printf_float+0xb6>
 800636c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006370:	f240 80dd 	bls.w	800652e <_printf_float+0x3ae>
 8006374:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006378:	2200      	movs	r2, #0
 800637a:	2300      	movs	r3, #0
 800637c:	f7fa fb14 	bl	80009a8 <__aeabi_dcmpeq>
 8006380:	2800      	cmp	r0, #0
 8006382:	d033      	beq.n	80063ec <_printf_float+0x26c>
 8006384:	2301      	movs	r3, #1
 8006386:	4631      	mov	r1, r6
 8006388:	4628      	mov	r0, r5
 800638a:	4a35      	ldr	r2, [pc, #212]	; (8006460 <_printf_float+0x2e0>)
 800638c:	47b8      	blx	r7
 800638e:	3001      	adds	r0, #1
 8006390:	f43f af51 	beq.w	8006236 <_printf_float+0xb6>
 8006394:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006398:	429a      	cmp	r2, r3
 800639a:	db02      	blt.n	80063a2 <_printf_float+0x222>
 800639c:	6823      	ldr	r3, [r4, #0]
 800639e:	07d8      	lsls	r0, r3, #31
 80063a0:	d50f      	bpl.n	80063c2 <_printf_float+0x242>
 80063a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063a6:	4631      	mov	r1, r6
 80063a8:	4628      	mov	r0, r5
 80063aa:	47b8      	blx	r7
 80063ac:	3001      	adds	r0, #1
 80063ae:	f43f af42 	beq.w	8006236 <_printf_float+0xb6>
 80063b2:	f04f 0800 	mov.w	r8, #0
 80063b6:	f104 091a 	add.w	r9, r4, #26
 80063ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063bc:	3b01      	subs	r3, #1
 80063be:	4543      	cmp	r3, r8
 80063c0:	dc09      	bgt.n	80063d6 <_printf_float+0x256>
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	079b      	lsls	r3, r3, #30
 80063c6:	f100 8102 	bmi.w	80065ce <_printf_float+0x44e>
 80063ca:	68e0      	ldr	r0, [r4, #12]
 80063cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063ce:	4298      	cmp	r0, r3
 80063d0:	bfb8      	it	lt
 80063d2:	4618      	movlt	r0, r3
 80063d4:	e731      	b.n	800623a <_printf_float+0xba>
 80063d6:	2301      	movs	r3, #1
 80063d8:	464a      	mov	r2, r9
 80063da:	4631      	mov	r1, r6
 80063dc:	4628      	mov	r0, r5
 80063de:	47b8      	blx	r7
 80063e0:	3001      	adds	r0, #1
 80063e2:	f43f af28 	beq.w	8006236 <_printf_float+0xb6>
 80063e6:	f108 0801 	add.w	r8, r8, #1
 80063ea:	e7e6      	b.n	80063ba <_printf_float+0x23a>
 80063ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	dc38      	bgt.n	8006464 <_printf_float+0x2e4>
 80063f2:	2301      	movs	r3, #1
 80063f4:	4631      	mov	r1, r6
 80063f6:	4628      	mov	r0, r5
 80063f8:	4a19      	ldr	r2, [pc, #100]	; (8006460 <_printf_float+0x2e0>)
 80063fa:	47b8      	blx	r7
 80063fc:	3001      	adds	r0, #1
 80063fe:	f43f af1a 	beq.w	8006236 <_printf_float+0xb6>
 8006402:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006406:	4313      	orrs	r3, r2
 8006408:	d102      	bne.n	8006410 <_printf_float+0x290>
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	07d9      	lsls	r1, r3, #31
 800640e:	d5d8      	bpl.n	80063c2 <_printf_float+0x242>
 8006410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006414:	4631      	mov	r1, r6
 8006416:	4628      	mov	r0, r5
 8006418:	47b8      	blx	r7
 800641a:	3001      	adds	r0, #1
 800641c:	f43f af0b 	beq.w	8006236 <_printf_float+0xb6>
 8006420:	f04f 0900 	mov.w	r9, #0
 8006424:	f104 0a1a 	add.w	sl, r4, #26
 8006428:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800642a:	425b      	negs	r3, r3
 800642c:	454b      	cmp	r3, r9
 800642e:	dc01      	bgt.n	8006434 <_printf_float+0x2b4>
 8006430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006432:	e794      	b.n	800635e <_printf_float+0x1de>
 8006434:	2301      	movs	r3, #1
 8006436:	4652      	mov	r2, sl
 8006438:	4631      	mov	r1, r6
 800643a:	4628      	mov	r0, r5
 800643c:	47b8      	blx	r7
 800643e:	3001      	adds	r0, #1
 8006440:	f43f aef9 	beq.w	8006236 <_printf_float+0xb6>
 8006444:	f109 0901 	add.w	r9, r9, #1
 8006448:	e7ee      	b.n	8006428 <_printf_float+0x2a8>
 800644a:	bf00      	nop
 800644c:	7fefffff 	.word	0x7fefffff
 8006450:	0800a904 	.word	0x0800a904
 8006454:	0800a908 	.word	0x0800a908
 8006458:	0800a910 	.word	0x0800a910
 800645c:	0800a90c 	.word	0x0800a90c
 8006460:	0800a914 	.word	0x0800a914
 8006464:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006466:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006468:	429a      	cmp	r2, r3
 800646a:	bfa8      	it	ge
 800646c:	461a      	movge	r2, r3
 800646e:	2a00      	cmp	r2, #0
 8006470:	4691      	mov	r9, r2
 8006472:	dc37      	bgt.n	80064e4 <_printf_float+0x364>
 8006474:	f04f 0b00 	mov.w	fp, #0
 8006478:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800647c:	f104 021a 	add.w	r2, r4, #26
 8006480:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006484:	ebaa 0309 	sub.w	r3, sl, r9
 8006488:	455b      	cmp	r3, fp
 800648a:	dc33      	bgt.n	80064f4 <_printf_float+0x374>
 800648c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006490:	429a      	cmp	r2, r3
 8006492:	db3b      	blt.n	800650c <_printf_float+0x38c>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	07da      	lsls	r2, r3, #31
 8006498:	d438      	bmi.n	800650c <_printf_float+0x38c>
 800649a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800649c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800649e:	eba3 020a 	sub.w	r2, r3, sl
 80064a2:	eba3 0901 	sub.w	r9, r3, r1
 80064a6:	4591      	cmp	r9, r2
 80064a8:	bfa8      	it	ge
 80064aa:	4691      	movge	r9, r2
 80064ac:	f1b9 0f00 	cmp.w	r9, #0
 80064b0:	dc34      	bgt.n	800651c <_printf_float+0x39c>
 80064b2:	f04f 0800 	mov.w	r8, #0
 80064b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064ba:	f104 0a1a 	add.w	sl, r4, #26
 80064be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80064c2:	1a9b      	subs	r3, r3, r2
 80064c4:	eba3 0309 	sub.w	r3, r3, r9
 80064c8:	4543      	cmp	r3, r8
 80064ca:	f77f af7a 	ble.w	80063c2 <_printf_float+0x242>
 80064ce:	2301      	movs	r3, #1
 80064d0:	4652      	mov	r2, sl
 80064d2:	4631      	mov	r1, r6
 80064d4:	4628      	mov	r0, r5
 80064d6:	47b8      	blx	r7
 80064d8:	3001      	adds	r0, #1
 80064da:	f43f aeac 	beq.w	8006236 <_printf_float+0xb6>
 80064de:	f108 0801 	add.w	r8, r8, #1
 80064e2:	e7ec      	b.n	80064be <_printf_float+0x33e>
 80064e4:	4613      	mov	r3, r2
 80064e6:	4631      	mov	r1, r6
 80064e8:	4642      	mov	r2, r8
 80064ea:	4628      	mov	r0, r5
 80064ec:	47b8      	blx	r7
 80064ee:	3001      	adds	r0, #1
 80064f0:	d1c0      	bne.n	8006474 <_printf_float+0x2f4>
 80064f2:	e6a0      	b.n	8006236 <_printf_float+0xb6>
 80064f4:	2301      	movs	r3, #1
 80064f6:	4631      	mov	r1, r6
 80064f8:	4628      	mov	r0, r5
 80064fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80064fc:	47b8      	blx	r7
 80064fe:	3001      	adds	r0, #1
 8006500:	f43f ae99 	beq.w	8006236 <_printf_float+0xb6>
 8006504:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006506:	f10b 0b01 	add.w	fp, fp, #1
 800650a:	e7b9      	b.n	8006480 <_printf_float+0x300>
 800650c:	4631      	mov	r1, r6
 800650e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006512:	4628      	mov	r0, r5
 8006514:	47b8      	blx	r7
 8006516:	3001      	adds	r0, #1
 8006518:	d1bf      	bne.n	800649a <_printf_float+0x31a>
 800651a:	e68c      	b.n	8006236 <_printf_float+0xb6>
 800651c:	464b      	mov	r3, r9
 800651e:	4631      	mov	r1, r6
 8006520:	4628      	mov	r0, r5
 8006522:	eb08 020a 	add.w	r2, r8, sl
 8006526:	47b8      	blx	r7
 8006528:	3001      	adds	r0, #1
 800652a:	d1c2      	bne.n	80064b2 <_printf_float+0x332>
 800652c:	e683      	b.n	8006236 <_printf_float+0xb6>
 800652e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006530:	2a01      	cmp	r2, #1
 8006532:	dc01      	bgt.n	8006538 <_printf_float+0x3b8>
 8006534:	07db      	lsls	r3, r3, #31
 8006536:	d537      	bpl.n	80065a8 <_printf_float+0x428>
 8006538:	2301      	movs	r3, #1
 800653a:	4642      	mov	r2, r8
 800653c:	4631      	mov	r1, r6
 800653e:	4628      	mov	r0, r5
 8006540:	47b8      	blx	r7
 8006542:	3001      	adds	r0, #1
 8006544:	f43f ae77 	beq.w	8006236 <_printf_float+0xb6>
 8006548:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800654c:	4631      	mov	r1, r6
 800654e:	4628      	mov	r0, r5
 8006550:	47b8      	blx	r7
 8006552:	3001      	adds	r0, #1
 8006554:	f43f ae6f 	beq.w	8006236 <_printf_float+0xb6>
 8006558:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800655c:	2200      	movs	r2, #0
 800655e:	2300      	movs	r3, #0
 8006560:	f7fa fa22 	bl	80009a8 <__aeabi_dcmpeq>
 8006564:	b9d8      	cbnz	r0, 800659e <_printf_float+0x41e>
 8006566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006568:	f108 0201 	add.w	r2, r8, #1
 800656c:	3b01      	subs	r3, #1
 800656e:	4631      	mov	r1, r6
 8006570:	4628      	mov	r0, r5
 8006572:	47b8      	blx	r7
 8006574:	3001      	adds	r0, #1
 8006576:	d10e      	bne.n	8006596 <_printf_float+0x416>
 8006578:	e65d      	b.n	8006236 <_printf_float+0xb6>
 800657a:	2301      	movs	r3, #1
 800657c:	464a      	mov	r2, r9
 800657e:	4631      	mov	r1, r6
 8006580:	4628      	mov	r0, r5
 8006582:	47b8      	blx	r7
 8006584:	3001      	adds	r0, #1
 8006586:	f43f ae56 	beq.w	8006236 <_printf_float+0xb6>
 800658a:	f108 0801 	add.w	r8, r8, #1
 800658e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006590:	3b01      	subs	r3, #1
 8006592:	4543      	cmp	r3, r8
 8006594:	dcf1      	bgt.n	800657a <_printf_float+0x3fa>
 8006596:	4653      	mov	r3, sl
 8006598:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800659c:	e6e0      	b.n	8006360 <_printf_float+0x1e0>
 800659e:	f04f 0800 	mov.w	r8, #0
 80065a2:	f104 091a 	add.w	r9, r4, #26
 80065a6:	e7f2      	b.n	800658e <_printf_float+0x40e>
 80065a8:	2301      	movs	r3, #1
 80065aa:	4642      	mov	r2, r8
 80065ac:	e7df      	b.n	800656e <_printf_float+0x3ee>
 80065ae:	2301      	movs	r3, #1
 80065b0:	464a      	mov	r2, r9
 80065b2:	4631      	mov	r1, r6
 80065b4:	4628      	mov	r0, r5
 80065b6:	47b8      	blx	r7
 80065b8:	3001      	adds	r0, #1
 80065ba:	f43f ae3c 	beq.w	8006236 <_printf_float+0xb6>
 80065be:	f108 0801 	add.w	r8, r8, #1
 80065c2:	68e3      	ldr	r3, [r4, #12]
 80065c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80065c6:	1a5b      	subs	r3, r3, r1
 80065c8:	4543      	cmp	r3, r8
 80065ca:	dcf0      	bgt.n	80065ae <_printf_float+0x42e>
 80065cc:	e6fd      	b.n	80063ca <_printf_float+0x24a>
 80065ce:	f04f 0800 	mov.w	r8, #0
 80065d2:	f104 0919 	add.w	r9, r4, #25
 80065d6:	e7f4      	b.n	80065c2 <_printf_float+0x442>

080065d8 <_printf_common>:
 80065d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065dc:	4616      	mov	r6, r2
 80065de:	4699      	mov	r9, r3
 80065e0:	688a      	ldr	r2, [r1, #8]
 80065e2:	690b      	ldr	r3, [r1, #16]
 80065e4:	4607      	mov	r7, r0
 80065e6:	4293      	cmp	r3, r2
 80065e8:	bfb8      	it	lt
 80065ea:	4613      	movlt	r3, r2
 80065ec:	6033      	str	r3, [r6, #0]
 80065ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065f2:	460c      	mov	r4, r1
 80065f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065f8:	b10a      	cbz	r2, 80065fe <_printf_common+0x26>
 80065fa:	3301      	adds	r3, #1
 80065fc:	6033      	str	r3, [r6, #0]
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	0699      	lsls	r1, r3, #26
 8006602:	bf42      	ittt	mi
 8006604:	6833      	ldrmi	r3, [r6, #0]
 8006606:	3302      	addmi	r3, #2
 8006608:	6033      	strmi	r3, [r6, #0]
 800660a:	6825      	ldr	r5, [r4, #0]
 800660c:	f015 0506 	ands.w	r5, r5, #6
 8006610:	d106      	bne.n	8006620 <_printf_common+0x48>
 8006612:	f104 0a19 	add.w	sl, r4, #25
 8006616:	68e3      	ldr	r3, [r4, #12]
 8006618:	6832      	ldr	r2, [r6, #0]
 800661a:	1a9b      	subs	r3, r3, r2
 800661c:	42ab      	cmp	r3, r5
 800661e:	dc28      	bgt.n	8006672 <_printf_common+0x9a>
 8006620:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006624:	1e13      	subs	r3, r2, #0
 8006626:	6822      	ldr	r2, [r4, #0]
 8006628:	bf18      	it	ne
 800662a:	2301      	movne	r3, #1
 800662c:	0692      	lsls	r2, r2, #26
 800662e:	d42d      	bmi.n	800668c <_printf_common+0xb4>
 8006630:	4649      	mov	r1, r9
 8006632:	4638      	mov	r0, r7
 8006634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006638:	47c0      	blx	r8
 800663a:	3001      	adds	r0, #1
 800663c:	d020      	beq.n	8006680 <_printf_common+0xa8>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	68e5      	ldr	r5, [r4, #12]
 8006642:	f003 0306 	and.w	r3, r3, #6
 8006646:	2b04      	cmp	r3, #4
 8006648:	bf18      	it	ne
 800664a:	2500      	movne	r5, #0
 800664c:	6832      	ldr	r2, [r6, #0]
 800664e:	f04f 0600 	mov.w	r6, #0
 8006652:	68a3      	ldr	r3, [r4, #8]
 8006654:	bf08      	it	eq
 8006656:	1aad      	subeq	r5, r5, r2
 8006658:	6922      	ldr	r2, [r4, #16]
 800665a:	bf08      	it	eq
 800665c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006660:	4293      	cmp	r3, r2
 8006662:	bfc4      	itt	gt
 8006664:	1a9b      	subgt	r3, r3, r2
 8006666:	18ed      	addgt	r5, r5, r3
 8006668:	341a      	adds	r4, #26
 800666a:	42b5      	cmp	r5, r6
 800666c:	d11a      	bne.n	80066a4 <_printf_common+0xcc>
 800666e:	2000      	movs	r0, #0
 8006670:	e008      	b.n	8006684 <_printf_common+0xac>
 8006672:	2301      	movs	r3, #1
 8006674:	4652      	mov	r2, sl
 8006676:	4649      	mov	r1, r9
 8006678:	4638      	mov	r0, r7
 800667a:	47c0      	blx	r8
 800667c:	3001      	adds	r0, #1
 800667e:	d103      	bne.n	8006688 <_printf_common+0xb0>
 8006680:	f04f 30ff 	mov.w	r0, #4294967295
 8006684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006688:	3501      	adds	r5, #1
 800668a:	e7c4      	b.n	8006616 <_printf_common+0x3e>
 800668c:	2030      	movs	r0, #48	; 0x30
 800668e:	18e1      	adds	r1, r4, r3
 8006690:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006694:	1c5a      	adds	r2, r3, #1
 8006696:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800669a:	4422      	add	r2, r4
 800669c:	3302      	adds	r3, #2
 800669e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066a2:	e7c5      	b.n	8006630 <_printf_common+0x58>
 80066a4:	2301      	movs	r3, #1
 80066a6:	4622      	mov	r2, r4
 80066a8:	4649      	mov	r1, r9
 80066aa:	4638      	mov	r0, r7
 80066ac:	47c0      	blx	r8
 80066ae:	3001      	adds	r0, #1
 80066b0:	d0e6      	beq.n	8006680 <_printf_common+0xa8>
 80066b2:	3601      	adds	r6, #1
 80066b4:	e7d9      	b.n	800666a <_printf_common+0x92>
	...

080066b8 <_printf_i>:
 80066b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066bc:	7e0f      	ldrb	r7, [r1, #24]
 80066be:	4691      	mov	r9, r2
 80066c0:	2f78      	cmp	r7, #120	; 0x78
 80066c2:	4680      	mov	r8, r0
 80066c4:	460c      	mov	r4, r1
 80066c6:	469a      	mov	sl, r3
 80066c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066ce:	d807      	bhi.n	80066e0 <_printf_i+0x28>
 80066d0:	2f62      	cmp	r7, #98	; 0x62
 80066d2:	d80a      	bhi.n	80066ea <_printf_i+0x32>
 80066d4:	2f00      	cmp	r7, #0
 80066d6:	f000 80d9 	beq.w	800688c <_printf_i+0x1d4>
 80066da:	2f58      	cmp	r7, #88	; 0x58
 80066dc:	f000 80a4 	beq.w	8006828 <_printf_i+0x170>
 80066e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066e8:	e03a      	b.n	8006760 <_printf_i+0xa8>
 80066ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066ee:	2b15      	cmp	r3, #21
 80066f0:	d8f6      	bhi.n	80066e0 <_printf_i+0x28>
 80066f2:	a101      	add	r1, pc, #4	; (adr r1, 80066f8 <_printf_i+0x40>)
 80066f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066f8:	08006751 	.word	0x08006751
 80066fc:	08006765 	.word	0x08006765
 8006700:	080066e1 	.word	0x080066e1
 8006704:	080066e1 	.word	0x080066e1
 8006708:	080066e1 	.word	0x080066e1
 800670c:	080066e1 	.word	0x080066e1
 8006710:	08006765 	.word	0x08006765
 8006714:	080066e1 	.word	0x080066e1
 8006718:	080066e1 	.word	0x080066e1
 800671c:	080066e1 	.word	0x080066e1
 8006720:	080066e1 	.word	0x080066e1
 8006724:	08006873 	.word	0x08006873
 8006728:	08006795 	.word	0x08006795
 800672c:	08006855 	.word	0x08006855
 8006730:	080066e1 	.word	0x080066e1
 8006734:	080066e1 	.word	0x080066e1
 8006738:	08006895 	.word	0x08006895
 800673c:	080066e1 	.word	0x080066e1
 8006740:	08006795 	.word	0x08006795
 8006744:	080066e1 	.word	0x080066e1
 8006748:	080066e1 	.word	0x080066e1
 800674c:	0800685d 	.word	0x0800685d
 8006750:	682b      	ldr	r3, [r5, #0]
 8006752:	1d1a      	adds	r2, r3, #4
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	602a      	str	r2, [r5, #0]
 8006758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800675c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006760:	2301      	movs	r3, #1
 8006762:	e0a4      	b.n	80068ae <_printf_i+0x1f6>
 8006764:	6820      	ldr	r0, [r4, #0]
 8006766:	6829      	ldr	r1, [r5, #0]
 8006768:	0606      	lsls	r6, r0, #24
 800676a:	f101 0304 	add.w	r3, r1, #4
 800676e:	d50a      	bpl.n	8006786 <_printf_i+0xce>
 8006770:	680e      	ldr	r6, [r1, #0]
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	2e00      	cmp	r6, #0
 8006776:	da03      	bge.n	8006780 <_printf_i+0xc8>
 8006778:	232d      	movs	r3, #45	; 0x2d
 800677a:	4276      	negs	r6, r6
 800677c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006780:	230a      	movs	r3, #10
 8006782:	485e      	ldr	r0, [pc, #376]	; (80068fc <_printf_i+0x244>)
 8006784:	e019      	b.n	80067ba <_printf_i+0x102>
 8006786:	680e      	ldr	r6, [r1, #0]
 8006788:	f010 0f40 	tst.w	r0, #64	; 0x40
 800678c:	602b      	str	r3, [r5, #0]
 800678e:	bf18      	it	ne
 8006790:	b236      	sxthne	r6, r6
 8006792:	e7ef      	b.n	8006774 <_printf_i+0xbc>
 8006794:	682b      	ldr	r3, [r5, #0]
 8006796:	6820      	ldr	r0, [r4, #0]
 8006798:	1d19      	adds	r1, r3, #4
 800679a:	6029      	str	r1, [r5, #0]
 800679c:	0601      	lsls	r1, r0, #24
 800679e:	d501      	bpl.n	80067a4 <_printf_i+0xec>
 80067a0:	681e      	ldr	r6, [r3, #0]
 80067a2:	e002      	b.n	80067aa <_printf_i+0xf2>
 80067a4:	0646      	lsls	r6, r0, #25
 80067a6:	d5fb      	bpl.n	80067a0 <_printf_i+0xe8>
 80067a8:	881e      	ldrh	r6, [r3, #0]
 80067aa:	2f6f      	cmp	r7, #111	; 0x6f
 80067ac:	bf0c      	ite	eq
 80067ae:	2308      	moveq	r3, #8
 80067b0:	230a      	movne	r3, #10
 80067b2:	4852      	ldr	r0, [pc, #328]	; (80068fc <_printf_i+0x244>)
 80067b4:	2100      	movs	r1, #0
 80067b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067ba:	6865      	ldr	r5, [r4, #4]
 80067bc:	2d00      	cmp	r5, #0
 80067be:	bfa8      	it	ge
 80067c0:	6821      	ldrge	r1, [r4, #0]
 80067c2:	60a5      	str	r5, [r4, #8]
 80067c4:	bfa4      	itt	ge
 80067c6:	f021 0104 	bicge.w	r1, r1, #4
 80067ca:	6021      	strge	r1, [r4, #0]
 80067cc:	b90e      	cbnz	r6, 80067d2 <_printf_i+0x11a>
 80067ce:	2d00      	cmp	r5, #0
 80067d0:	d04d      	beq.n	800686e <_printf_i+0x1b6>
 80067d2:	4615      	mov	r5, r2
 80067d4:	fbb6 f1f3 	udiv	r1, r6, r3
 80067d8:	fb03 6711 	mls	r7, r3, r1, r6
 80067dc:	5dc7      	ldrb	r7, [r0, r7]
 80067de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067e2:	4637      	mov	r7, r6
 80067e4:	42bb      	cmp	r3, r7
 80067e6:	460e      	mov	r6, r1
 80067e8:	d9f4      	bls.n	80067d4 <_printf_i+0x11c>
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d10b      	bne.n	8006806 <_printf_i+0x14e>
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	07de      	lsls	r6, r3, #31
 80067f2:	d508      	bpl.n	8006806 <_printf_i+0x14e>
 80067f4:	6923      	ldr	r3, [r4, #16]
 80067f6:	6861      	ldr	r1, [r4, #4]
 80067f8:	4299      	cmp	r1, r3
 80067fa:	bfde      	ittt	le
 80067fc:	2330      	movle	r3, #48	; 0x30
 80067fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006802:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006806:	1b52      	subs	r2, r2, r5
 8006808:	6122      	str	r2, [r4, #16]
 800680a:	464b      	mov	r3, r9
 800680c:	4621      	mov	r1, r4
 800680e:	4640      	mov	r0, r8
 8006810:	f8cd a000 	str.w	sl, [sp]
 8006814:	aa03      	add	r2, sp, #12
 8006816:	f7ff fedf 	bl	80065d8 <_printf_common>
 800681a:	3001      	adds	r0, #1
 800681c:	d14c      	bne.n	80068b8 <_printf_i+0x200>
 800681e:	f04f 30ff 	mov.w	r0, #4294967295
 8006822:	b004      	add	sp, #16
 8006824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006828:	4834      	ldr	r0, [pc, #208]	; (80068fc <_printf_i+0x244>)
 800682a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800682e:	6829      	ldr	r1, [r5, #0]
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	f851 6b04 	ldr.w	r6, [r1], #4
 8006836:	6029      	str	r1, [r5, #0]
 8006838:	061d      	lsls	r5, r3, #24
 800683a:	d514      	bpl.n	8006866 <_printf_i+0x1ae>
 800683c:	07df      	lsls	r7, r3, #31
 800683e:	bf44      	itt	mi
 8006840:	f043 0320 	orrmi.w	r3, r3, #32
 8006844:	6023      	strmi	r3, [r4, #0]
 8006846:	b91e      	cbnz	r6, 8006850 <_printf_i+0x198>
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	f023 0320 	bic.w	r3, r3, #32
 800684e:	6023      	str	r3, [r4, #0]
 8006850:	2310      	movs	r3, #16
 8006852:	e7af      	b.n	80067b4 <_printf_i+0xfc>
 8006854:	6823      	ldr	r3, [r4, #0]
 8006856:	f043 0320 	orr.w	r3, r3, #32
 800685a:	6023      	str	r3, [r4, #0]
 800685c:	2378      	movs	r3, #120	; 0x78
 800685e:	4828      	ldr	r0, [pc, #160]	; (8006900 <_printf_i+0x248>)
 8006860:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006864:	e7e3      	b.n	800682e <_printf_i+0x176>
 8006866:	0659      	lsls	r1, r3, #25
 8006868:	bf48      	it	mi
 800686a:	b2b6      	uxthmi	r6, r6
 800686c:	e7e6      	b.n	800683c <_printf_i+0x184>
 800686e:	4615      	mov	r5, r2
 8006870:	e7bb      	b.n	80067ea <_printf_i+0x132>
 8006872:	682b      	ldr	r3, [r5, #0]
 8006874:	6826      	ldr	r6, [r4, #0]
 8006876:	1d18      	adds	r0, r3, #4
 8006878:	6961      	ldr	r1, [r4, #20]
 800687a:	6028      	str	r0, [r5, #0]
 800687c:	0635      	lsls	r5, r6, #24
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	d501      	bpl.n	8006886 <_printf_i+0x1ce>
 8006882:	6019      	str	r1, [r3, #0]
 8006884:	e002      	b.n	800688c <_printf_i+0x1d4>
 8006886:	0670      	lsls	r0, r6, #25
 8006888:	d5fb      	bpl.n	8006882 <_printf_i+0x1ca>
 800688a:	8019      	strh	r1, [r3, #0]
 800688c:	2300      	movs	r3, #0
 800688e:	4615      	mov	r5, r2
 8006890:	6123      	str	r3, [r4, #16]
 8006892:	e7ba      	b.n	800680a <_printf_i+0x152>
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	2100      	movs	r1, #0
 8006898:	1d1a      	adds	r2, r3, #4
 800689a:	602a      	str	r2, [r5, #0]
 800689c:	681d      	ldr	r5, [r3, #0]
 800689e:	6862      	ldr	r2, [r4, #4]
 80068a0:	4628      	mov	r0, r5
 80068a2:	f002 faf7 	bl	8008e94 <memchr>
 80068a6:	b108      	cbz	r0, 80068ac <_printf_i+0x1f4>
 80068a8:	1b40      	subs	r0, r0, r5
 80068aa:	6060      	str	r0, [r4, #4]
 80068ac:	6863      	ldr	r3, [r4, #4]
 80068ae:	6123      	str	r3, [r4, #16]
 80068b0:	2300      	movs	r3, #0
 80068b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068b6:	e7a8      	b.n	800680a <_printf_i+0x152>
 80068b8:	462a      	mov	r2, r5
 80068ba:	4649      	mov	r1, r9
 80068bc:	4640      	mov	r0, r8
 80068be:	6923      	ldr	r3, [r4, #16]
 80068c0:	47d0      	blx	sl
 80068c2:	3001      	adds	r0, #1
 80068c4:	d0ab      	beq.n	800681e <_printf_i+0x166>
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	079b      	lsls	r3, r3, #30
 80068ca:	d413      	bmi.n	80068f4 <_printf_i+0x23c>
 80068cc:	68e0      	ldr	r0, [r4, #12]
 80068ce:	9b03      	ldr	r3, [sp, #12]
 80068d0:	4298      	cmp	r0, r3
 80068d2:	bfb8      	it	lt
 80068d4:	4618      	movlt	r0, r3
 80068d6:	e7a4      	b.n	8006822 <_printf_i+0x16a>
 80068d8:	2301      	movs	r3, #1
 80068da:	4632      	mov	r2, r6
 80068dc:	4649      	mov	r1, r9
 80068de:	4640      	mov	r0, r8
 80068e0:	47d0      	blx	sl
 80068e2:	3001      	adds	r0, #1
 80068e4:	d09b      	beq.n	800681e <_printf_i+0x166>
 80068e6:	3501      	adds	r5, #1
 80068e8:	68e3      	ldr	r3, [r4, #12]
 80068ea:	9903      	ldr	r1, [sp, #12]
 80068ec:	1a5b      	subs	r3, r3, r1
 80068ee:	42ab      	cmp	r3, r5
 80068f0:	dcf2      	bgt.n	80068d8 <_printf_i+0x220>
 80068f2:	e7eb      	b.n	80068cc <_printf_i+0x214>
 80068f4:	2500      	movs	r5, #0
 80068f6:	f104 0619 	add.w	r6, r4, #25
 80068fa:	e7f5      	b.n	80068e8 <_printf_i+0x230>
 80068fc:	0800a916 	.word	0x0800a916
 8006900:	0800a927 	.word	0x0800a927

08006904 <_scanf_float>:
 8006904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006908:	b087      	sub	sp, #28
 800690a:	9303      	str	r3, [sp, #12]
 800690c:	688b      	ldr	r3, [r1, #8]
 800690e:	4617      	mov	r7, r2
 8006910:	1e5a      	subs	r2, r3, #1
 8006912:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006916:	bf85      	ittet	hi
 8006918:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800691c:	195b      	addhi	r3, r3, r5
 800691e:	2300      	movls	r3, #0
 8006920:	9302      	strhi	r3, [sp, #8]
 8006922:	bf88      	it	hi
 8006924:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006928:	468b      	mov	fp, r1
 800692a:	f04f 0500 	mov.w	r5, #0
 800692e:	bf8c      	ite	hi
 8006930:	608b      	strhi	r3, [r1, #8]
 8006932:	9302      	strls	r3, [sp, #8]
 8006934:	680b      	ldr	r3, [r1, #0]
 8006936:	4680      	mov	r8, r0
 8006938:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800693c:	f84b 3b1c 	str.w	r3, [fp], #28
 8006940:	460c      	mov	r4, r1
 8006942:	465e      	mov	r6, fp
 8006944:	46aa      	mov	sl, r5
 8006946:	46a9      	mov	r9, r5
 8006948:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800694c:	9501      	str	r5, [sp, #4]
 800694e:	68a2      	ldr	r2, [r4, #8]
 8006950:	b152      	cbz	r2, 8006968 <_scanf_float+0x64>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	2b4e      	cmp	r3, #78	; 0x4e
 8006958:	d864      	bhi.n	8006a24 <_scanf_float+0x120>
 800695a:	2b40      	cmp	r3, #64	; 0x40
 800695c:	d83c      	bhi.n	80069d8 <_scanf_float+0xd4>
 800695e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006962:	b2c8      	uxtb	r0, r1
 8006964:	280e      	cmp	r0, #14
 8006966:	d93a      	bls.n	80069de <_scanf_float+0xda>
 8006968:	f1b9 0f00 	cmp.w	r9, #0
 800696c:	d003      	beq.n	8006976 <_scanf_float+0x72>
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	f10a 3aff 	add.w	sl, sl, #4294967295
 800697a:	f1ba 0f01 	cmp.w	sl, #1
 800697e:	f200 8113 	bhi.w	8006ba8 <_scanf_float+0x2a4>
 8006982:	455e      	cmp	r6, fp
 8006984:	f200 8105 	bhi.w	8006b92 <_scanf_float+0x28e>
 8006988:	2501      	movs	r5, #1
 800698a:	4628      	mov	r0, r5
 800698c:	b007      	add	sp, #28
 800698e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006992:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006996:	2a0d      	cmp	r2, #13
 8006998:	d8e6      	bhi.n	8006968 <_scanf_float+0x64>
 800699a:	a101      	add	r1, pc, #4	; (adr r1, 80069a0 <_scanf_float+0x9c>)
 800699c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80069a0:	08006adf 	.word	0x08006adf
 80069a4:	08006969 	.word	0x08006969
 80069a8:	08006969 	.word	0x08006969
 80069ac:	08006969 	.word	0x08006969
 80069b0:	08006b3f 	.word	0x08006b3f
 80069b4:	08006b17 	.word	0x08006b17
 80069b8:	08006969 	.word	0x08006969
 80069bc:	08006969 	.word	0x08006969
 80069c0:	08006aed 	.word	0x08006aed
 80069c4:	08006969 	.word	0x08006969
 80069c8:	08006969 	.word	0x08006969
 80069cc:	08006969 	.word	0x08006969
 80069d0:	08006969 	.word	0x08006969
 80069d4:	08006aa5 	.word	0x08006aa5
 80069d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80069dc:	e7db      	b.n	8006996 <_scanf_float+0x92>
 80069de:	290e      	cmp	r1, #14
 80069e0:	d8c2      	bhi.n	8006968 <_scanf_float+0x64>
 80069e2:	a001      	add	r0, pc, #4	; (adr r0, 80069e8 <_scanf_float+0xe4>)
 80069e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80069e8:	08006a97 	.word	0x08006a97
 80069ec:	08006969 	.word	0x08006969
 80069f0:	08006a97 	.word	0x08006a97
 80069f4:	08006b2b 	.word	0x08006b2b
 80069f8:	08006969 	.word	0x08006969
 80069fc:	08006a45 	.word	0x08006a45
 8006a00:	08006a81 	.word	0x08006a81
 8006a04:	08006a81 	.word	0x08006a81
 8006a08:	08006a81 	.word	0x08006a81
 8006a0c:	08006a81 	.word	0x08006a81
 8006a10:	08006a81 	.word	0x08006a81
 8006a14:	08006a81 	.word	0x08006a81
 8006a18:	08006a81 	.word	0x08006a81
 8006a1c:	08006a81 	.word	0x08006a81
 8006a20:	08006a81 	.word	0x08006a81
 8006a24:	2b6e      	cmp	r3, #110	; 0x6e
 8006a26:	d809      	bhi.n	8006a3c <_scanf_float+0x138>
 8006a28:	2b60      	cmp	r3, #96	; 0x60
 8006a2a:	d8b2      	bhi.n	8006992 <_scanf_float+0x8e>
 8006a2c:	2b54      	cmp	r3, #84	; 0x54
 8006a2e:	d077      	beq.n	8006b20 <_scanf_float+0x21c>
 8006a30:	2b59      	cmp	r3, #89	; 0x59
 8006a32:	d199      	bne.n	8006968 <_scanf_float+0x64>
 8006a34:	2d07      	cmp	r5, #7
 8006a36:	d197      	bne.n	8006968 <_scanf_float+0x64>
 8006a38:	2508      	movs	r5, #8
 8006a3a:	e029      	b.n	8006a90 <_scanf_float+0x18c>
 8006a3c:	2b74      	cmp	r3, #116	; 0x74
 8006a3e:	d06f      	beq.n	8006b20 <_scanf_float+0x21c>
 8006a40:	2b79      	cmp	r3, #121	; 0x79
 8006a42:	e7f6      	b.n	8006a32 <_scanf_float+0x12e>
 8006a44:	6821      	ldr	r1, [r4, #0]
 8006a46:	05c8      	lsls	r0, r1, #23
 8006a48:	d51a      	bpl.n	8006a80 <_scanf_float+0x17c>
 8006a4a:	9b02      	ldr	r3, [sp, #8]
 8006a4c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006a50:	6021      	str	r1, [r4, #0]
 8006a52:	f109 0901 	add.w	r9, r9, #1
 8006a56:	b11b      	cbz	r3, 8006a60 <_scanf_float+0x15c>
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	3201      	adds	r2, #1
 8006a5c:	9302      	str	r3, [sp, #8]
 8006a5e:	60a2      	str	r2, [r4, #8]
 8006a60:	68a3      	ldr	r3, [r4, #8]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	60a3      	str	r3, [r4, #8]
 8006a66:	6923      	ldr	r3, [r4, #16]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	6123      	str	r3, [r4, #16]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	607b      	str	r3, [r7, #4]
 8006a74:	f340 8084 	ble.w	8006b80 <_scanf_float+0x27c>
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	603b      	str	r3, [r7, #0]
 8006a7e:	e766      	b.n	800694e <_scanf_float+0x4a>
 8006a80:	eb1a 0f05 	cmn.w	sl, r5
 8006a84:	f47f af70 	bne.w	8006968 <_scanf_float+0x64>
 8006a88:	6822      	ldr	r2, [r4, #0]
 8006a8a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006a8e:	6022      	str	r2, [r4, #0]
 8006a90:	f806 3b01 	strb.w	r3, [r6], #1
 8006a94:	e7e4      	b.n	8006a60 <_scanf_float+0x15c>
 8006a96:	6822      	ldr	r2, [r4, #0]
 8006a98:	0610      	lsls	r0, r2, #24
 8006a9a:	f57f af65 	bpl.w	8006968 <_scanf_float+0x64>
 8006a9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aa2:	e7f4      	b.n	8006a8e <_scanf_float+0x18a>
 8006aa4:	f1ba 0f00 	cmp.w	sl, #0
 8006aa8:	d10e      	bne.n	8006ac8 <_scanf_float+0x1c4>
 8006aaa:	f1b9 0f00 	cmp.w	r9, #0
 8006aae:	d10e      	bne.n	8006ace <_scanf_float+0x1ca>
 8006ab0:	6822      	ldr	r2, [r4, #0]
 8006ab2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006ab6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006aba:	d108      	bne.n	8006ace <_scanf_float+0x1ca>
 8006abc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ac0:	f04f 0a01 	mov.w	sl, #1
 8006ac4:	6022      	str	r2, [r4, #0]
 8006ac6:	e7e3      	b.n	8006a90 <_scanf_float+0x18c>
 8006ac8:	f1ba 0f02 	cmp.w	sl, #2
 8006acc:	d055      	beq.n	8006b7a <_scanf_float+0x276>
 8006ace:	2d01      	cmp	r5, #1
 8006ad0:	d002      	beq.n	8006ad8 <_scanf_float+0x1d4>
 8006ad2:	2d04      	cmp	r5, #4
 8006ad4:	f47f af48 	bne.w	8006968 <_scanf_float+0x64>
 8006ad8:	3501      	adds	r5, #1
 8006ada:	b2ed      	uxtb	r5, r5
 8006adc:	e7d8      	b.n	8006a90 <_scanf_float+0x18c>
 8006ade:	f1ba 0f01 	cmp.w	sl, #1
 8006ae2:	f47f af41 	bne.w	8006968 <_scanf_float+0x64>
 8006ae6:	f04f 0a02 	mov.w	sl, #2
 8006aea:	e7d1      	b.n	8006a90 <_scanf_float+0x18c>
 8006aec:	b97d      	cbnz	r5, 8006b0e <_scanf_float+0x20a>
 8006aee:	f1b9 0f00 	cmp.w	r9, #0
 8006af2:	f47f af3c 	bne.w	800696e <_scanf_float+0x6a>
 8006af6:	6822      	ldr	r2, [r4, #0]
 8006af8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006afc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b00:	f47f af39 	bne.w	8006976 <_scanf_float+0x72>
 8006b04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b08:	2501      	movs	r5, #1
 8006b0a:	6022      	str	r2, [r4, #0]
 8006b0c:	e7c0      	b.n	8006a90 <_scanf_float+0x18c>
 8006b0e:	2d03      	cmp	r5, #3
 8006b10:	d0e2      	beq.n	8006ad8 <_scanf_float+0x1d4>
 8006b12:	2d05      	cmp	r5, #5
 8006b14:	e7de      	b.n	8006ad4 <_scanf_float+0x1d0>
 8006b16:	2d02      	cmp	r5, #2
 8006b18:	f47f af26 	bne.w	8006968 <_scanf_float+0x64>
 8006b1c:	2503      	movs	r5, #3
 8006b1e:	e7b7      	b.n	8006a90 <_scanf_float+0x18c>
 8006b20:	2d06      	cmp	r5, #6
 8006b22:	f47f af21 	bne.w	8006968 <_scanf_float+0x64>
 8006b26:	2507      	movs	r5, #7
 8006b28:	e7b2      	b.n	8006a90 <_scanf_float+0x18c>
 8006b2a:	6822      	ldr	r2, [r4, #0]
 8006b2c:	0591      	lsls	r1, r2, #22
 8006b2e:	f57f af1b 	bpl.w	8006968 <_scanf_float+0x64>
 8006b32:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006b36:	6022      	str	r2, [r4, #0]
 8006b38:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b3c:	e7a8      	b.n	8006a90 <_scanf_float+0x18c>
 8006b3e:	6822      	ldr	r2, [r4, #0]
 8006b40:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006b44:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006b48:	d006      	beq.n	8006b58 <_scanf_float+0x254>
 8006b4a:	0550      	lsls	r0, r2, #21
 8006b4c:	f57f af0c 	bpl.w	8006968 <_scanf_float+0x64>
 8006b50:	f1b9 0f00 	cmp.w	r9, #0
 8006b54:	f43f af0f 	beq.w	8006976 <_scanf_float+0x72>
 8006b58:	0591      	lsls	r1, r2, #22
 8006b5a:	bf58      	it	pl
 8006b5c:	9901      	ldrpl	r1, [sp, #4]
 8006b5e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b62:	bf58      	it	pl
 8006b64:	eba9 0101 	subpl.w	r1, r9, r1
 8006b68:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006b6c:	f04f 0900 	mov.w	r9, #0
 8006b70:	bf58      	it	pl
 8006b72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006b76:	6022      	str	r2, [r4, #0]
 8006b78:	e78a      	b.n	8006a90 <_scanf_float+0x18c>
 8006b7a:	f04f 0a03 	mov.w	sl, #3
 8006b7e:	e787      	b.n	8006a90 <_scanf_float+0x18c>
 8006b80:	4639      	mov	r1, r7
 8006b82:	4640      	mov	r0, r8
 8006b84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006b88:	4798      	blx	r3
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	f43f aedf 	beq.w	800694e <_scanf_float+0x4a>
 8006b90:	e6ea      	b.n	8006968 <_scanf_float+0x64>
 8006b92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b96:	463a      	mov	r2, r7
 8006b98:	4640      	mov	r0, r8
 8006b9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b9e:	4798      	blx	r3
 8006ba0:	6923      	ldr	r3, [r4, #16]
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	6123      	str	r3, [r4, #16]
 8006ba6:	e6ec      	b.n	8006982 <_scanf_float+0x7e>
 8006ba8:	1e6b      	subs	r3, r5, #1
 8006baa:	2b06      	cmp	r3, #6
 8006bac:	d825      	bhi.n	8006bfa <_scanf_float+0x2f6>
 8006bae:	2d02      	cmp	r5, #2
 8006bb0:	d836      	bhi.n	8006c20 <_scanf_float+0x31c>
 8006bb2:	455e      	cmp	r6, fp
 8006bb4:	f67f aee8 	bls.w	8006988 <_scanf_float+0x84>
 8006bb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bbc:	463a      	mov	r2, r7
 8006bbe:	4640      	mov	r0, r8
 8006bc0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bc4:	4798      	blx	r3
 8006bc6:	6923      	ldr	r3, [r4, #16]
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	6123      	str	r3, [r4, #16]
 8006bcc:	e7f1      	b.n	8006bb2 <_scanf_float+0x2ae>
 8006bce:	9802      	ldr	r0, [sp, #8]
 8006bd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bd4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006bd8:	463a      	mov	r2, r7
 8006bda:	9002      	str	r0, [sp, #8]
 8006bdc:	4640      	mov	r0, r8
 8006bde:	4798      	blx	r3
 8006be0:	6923      	ldr	r3, [r4, #16]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	6123      	str	r3, [r4, #16]
 8006be6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bea:	fa5f fa8a 	uxtb.w	sl, sl
 8006bee:	f1ba 0f02 	cmp.w	sl, #2
 8006bf2:	d1ec      	bne.n	8006bce <_scanf_float+0x2ca>
 8006bf4:	3d03      	subs	r5, #3
 8006bf6:	b2ed      	uxtb	r5, r5
 8006bf8:	1b76      	subs	r6, r6, r5
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	05da      	lsls	r2, r3, #23
 8006bfe:	d52f      	bpl.n	8006c60 <_scanf_float+0x35c>
 8006c00:	055b      	lsls	r3, r3, #21
 8006c02:	d510      	bpl.n	8006c26 <_scanf_float+0x322>
 8006c04:	455e      	cmp	r6, fp
 8006c06:	f67f aebf 	bls.w	8006988 <_scanf_float+0x84>
 8006c0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c0e:	463a      	mov	r2, r7
 8006c10:	4640      	mov	r0, r8
 8006c12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c16:	4798      	blx	r3
 8006c18:	6923      	ldr	r3, [r4, #16]
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	6123      	str	r3, [r4, #16]
 8006c1e:	e7f1      	b.n	8006c04 <_scanf_float+0x300>
 8006c20:	46aa      	mov	sl, r5
 8006c22:	9602      	str	r6, [sp, #8]
 8006c24:	e7df      	b.n	8006be6 <_scanf_float+0x2e2>
 8006c26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006c2a:	6923      	ldr	r3, [r4, #16]
 8006c2c:	2965      	cmp	r1, #101	; 0x65
 8006c2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c32:	f106 35ff 	add.w	r5, r6, #4294967295
 8006c36:	6123      	str	r3, [r4, #16]
 8006c38:	d00c      	beq.n	8006c54 <_scanf_float+0x350>
 8006c3a:	2945      	cmp	r1, #69	; 0x45
 8006c3c:	d00a      	beq.n	8006c54 <_scanf_float+0x350>
 8006c3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c42:	463a      	mov	r2, r7
 8006c44:	4640      	mov	r0, r8
 8006c46:	4798      	blx	r3
 8006c48:	6923      	ldr	r3, [r4, #16]
 8006c4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	1eb5      	subs	r5, r6, #2
 8006c52:	6123      	str	r3, [r4, #16]
 8006c54:	463a      	mov	r2, r7
 8006c56:	4640      	mov	r0, r8
 8006c58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c5c:	4798      	blx	r3
 8006c5e:	462e      	mov	r6, r5
 8006c60:	6825      	ldr	r5, [r4, #0]
 8006c62:	f015 0510 	ands.w	r5, r5, #16
 8006c66:	d155      	bne.n	8006d14 <_scanf_float+0x410>
 8006c68:	7035      	strb	r5, [r6, #0]
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c74:	d11b      	bne.n	8006cae <_scanf_float+0x3aa>
 8006c76:	9b01      	ldr	r3, [sp, #4]
 8006c78:	454b      	cmp	r3, r9
 8006c7a:	eba3 0209 	sub.w	r2, r3, r9
 8006c7e:	d123      	bne.n	8006cc8 <_scanf_float+0x3c4>
 8006c80:	2200      	movs	r2, #0
 8006c82:	4659      	mov	r1, fp
 8006c84:	4640      	mov	r0, r8
 8006c86:	f000 fe8b 	bl	80079a0 <_strtod_r>
 8006c8a:	6822      	ldr	r2, [r4, #0]
 8006c8c:	9b03      	ldr	r3, [sp, #12]
 8006c8e:	f012 0f02 	tst.w	r2, #2
 8006c92:	4606      	mov	r6, r0
 8006c94:	460f      	mov	r7, r1
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	d021      	beq.n	8006cde <_scanf_float+0x3da>
 8006c9a:	1d1a      	adds	r2, r3, #4
 8006c9c:	9903      	ldr	r1, [sp, #12]
 8006c9e:	600a      	str	r2, [r1, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	e9c3 6700 	strd	r6, r7, [r3]
 8006ca6:	68e3      	ldr	r3, [r4, #12]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	60e3      	str	r3, [r4, #12]
 8006cac:	e66d      	b.n	800698a <_scanf_float+0x86>
 8006cae:	9b04      	ldr	r3, [sp, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0e5      	beq.n	8006c80 <_scanf_float+0x37c>
 8006cb4:	9905      	ldr	r1, [sp, #20]
 8006cb6:	230a      	movs	r3, #10
 8006cb8:	462a      	mov	r2, r5
 8006cba:	4640      	mov	r0, r8
 8006cbc:	3101      	adds	r1, #1
 8006cbe:	f000 fef1 	bl	8007aa4 <_strtol_r>
 8006cc2:	9b04      	ldr	r3, [sp, #16]
 8006cc4:	9e05      	ldr	r6, [sp, #20]
 8006cc6:	1ac2      	subs	r2, r0, r3
 8006cc8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006ccc:	429e      	cmp	r6, r3
 8006cce:	bf28      	it	cs
 8006cd0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	4910      	ldr	r1, [pc, #64]	; (8006d18 <_scanf_float+0x414>)
 8006cd8:	f000 f836 	bl	8006d48 <siprintf>
 8006cdc:	e7d0      	b.n	8006c80 <_scanf_float+0x37c>
 8006cde:	f012 0f04 	tst.w	r2, #4
 8006ce2:	f103 0204 	add.w	r2, r3, #4
 8006ce6:	d1d9      	bne.n	8006c9c <_scanf_float+0x398>
 8006ce8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006cec:	f8cc 2000 	str.w	r2, [ip]
 8006cf0:	f8d3 8000 	ldr.w	r8, [r3]
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	f7f9 fe88 	bl	8000a0c <__aeabi_dcmpun>
 8006cfc:	b128      	cbz	r0, 8006d0a <_scanf_float+0x406>
 8006cfe:	4807      	ldr	r0, [pc, #28]	; (8006d1c <_scanf_float+0x418>)
 8006d00:	f000 f81e 	bl	8006d40 <nanf>
 8006d04:	f8c8 0000 	str.w	r0, [r8]
 8006d08:	e7cd      	b.n	8006ca6 <_scanf_float+0x3a2>
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	4639      	mov	r1, r7
 8006d0e:	f7f9 fedb 	bl	8000ac8 <__aeabi_d2f>
 8006d12:	e7f7      	b.n	8006d04 <_scanf_float+0x400>
 8006d14:	2500      	movs	r5, #0
 8006d16:	e638      	b.n	800698a <_scanf_float+0x86>
 8006d18:	0800a938 	.word	0x0800a938
 8006d1c:	0800ad40 	.word	0x0800ad40

08006d20 <_sbrk_r>:
 8006d20:	b538      	push	{r3, r4, r5, lr}
 8006d22:	2300      	movs	r3, #0
 8006d24:	4d05      	ldr	r5, [pc, #20]	; (8006d3c <_sbrk_r+0x1c>)
 8006d26:	4604      	mov	r4, r0
 8006d28:	4608      	mov	r0, r1
 8006d2a:	602b      	str	r3, [r5, #0]
 8006d2c:	f7fb fd60 	bl	80027f0 <_sbrk>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	d102      	bne.n	8006d3a <_sbrk_r+0x1a>
 8006d34:	682b      	ldr	r3, [r5, #0]
 8006d36:	b103      	cbz	r3, 8006d3a <_sbrk_r+0x1a>
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	bd38      	pop	{r3, r4, r5, pc}
 8006d3c:	200004e4 	.word	0x200004e4

08006d40 <nanf>:
 8006d40:	4800      	ldr	r0, [pc, #0]	; (8006d44 <nanf+0x4>)
 8006d42:	4770      	bx	lr
 8006d44:	7fc00000 	.word	0x7fc00000

08006d48 <siprintf>:
 8006d48:	b40e      	push	{r1, r2, r3}
 8006d4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d4e:	b500      	push	{lr}
 8006d50:	b09c      	sub	sp, #112	; 0x70
 8006d52:	ab1d      	add	r3, sp, #116	; 0x74
 8006d54:	9002      	str	r0, [sp, #8]
 8006d56:	9006      	str	r0, [sp, #24]
 8006d58:	9107      	str	r1, [sp, #28]
 8006d5a:	9104      	str	r1, [sp, #16]
 8006d5c:	4808      	ldr	r0, [pc, #32]	; (8006d80 <siprintf+0x38>)
 8006d5e:	4909      	ldr	r1, [pc, #36]	; (8006d84 <siprintf+0x3c>)
 8006d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d64:	9105      	str	r1, [sp, #20]
 8006d66:	6800      	ldr	r0, [r0, #0]
 8006d68:	a902      	add	r1, sp, #8
 8006d6a:	9301      	str	r3, [sp, #4]
 8006d6c:	f002 fdd4 	bl	8009918 <_svfiprintf_r>
 8006d70:	2200      	movs	r2, #0
 8006d72:	9b02      	ldr	r3, [sp, #8]
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	b01c      	add	sp, #112	; 0x70
 8006d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d7c:	b003      	add	sp, #12
 8006d7e:	4770      	bx	lr
 8006d80:	20000014 	.word	0x20000014
 8006d84:	ffff0208 	.word	0xffff0208

08006d88 <sulp>:
 8006d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d8c:	460f      	mov	r7, r1
 8006d8e:	4690      	mov	r8, r2
 8006d90:	f002 fc0a 	bl	80095a8 <__ulp>
 8006d94:	4604      	mov	r4, r0
 8006d96:	460d      	mov	r5, r1
 8006d98:	f1b8 0f00 	cmp.w	r8, #0
 8006d9c:	d011      	beq.n	8006dc2 <sulp+0x3a>
 8006d9e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006da2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	dd0b      	ble.n	8006dc2 <sulp+0x3a>
 8006daa:	2400      	movs	r4, #0
 8006dac:	051b      	lsls	r3, r3, #20
 8006dae:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006db2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006db6:	4622      	mov	r2, r4
 8006db8:	462b      	mov	r3, r5
 8006dba:	f7f9 fb8d 	bl	80004d8 <__aeabi_dmul>
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	460d      	mov	r5, r1
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dca:	0000      	movs	r0, r0
 8006dcc:	0000      	movs	r0, r0
	...

08006dd0 <_strtod_l>:
 8006dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd4:	469b      	mov	fp, r3
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	b09f      	sub	sp, #124	; 0x7c
 8006dda:	931a      	str	r3, [sp, #104]	; 0x68
 8006ddc:	4b9e      	ldr	r3, [pc, #632]	; (8007058 <_strtod_l+0x288>)
 8006dde:	4682      	mov	sl, r0
 8006de0:	681f      	ldr	r7, [r3, #0]
 8006de2:	460e      	mov	r6, r1
 8006de4:	4638      	mov	r0, r7
 8006de6:	9215      	str	r2, [sp, #84]	; 0x54
 8006de8:	f7f9 f9b2 	bl	8000150 <strlen>
 8006dec:	f04f 0800 	mov.w	r8, #0
 8006df0:	4604      	mov	r4, r0
 8006df2:	f04f 0900 	mov.w	r9, #0
 8006df6:	9619      	str	r6, [sp, #100]	; 0x64
 8006df8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006dfa:	781a      	ldrb	r2, [r3, #0]
 8006dfc:	2a2b      	cmp	r2, #43	; 0x2b
 8006dfe:	d04c      	beq.n	8006e9a <_strtod_l+0xca>
 8006e00:	d83a      	bhi.n	8006e78 <_strtod_l+0xa8>
 8006e02:	2a0d      	cmp	r2, #13
 8006e04:	d833      	bhi.n	8006e6e <_strtod_l+0x9e>
 8006e06:	2a08      	cmp	r2, #8
 8006e08:	d833      	bhi.n	8006e72 <_strtod_l+0xa2>
 8006e0a:	2a00      	cmp	r2, #0
 8006e0c:	d03d      	beq.n	8006e8a <_strtod_l+0xba>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	930a      	str	r3, [sp, #40]	; 0x28
 8006e12:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006e14:	782b      	ldrb	r3, [r5, #0]
 8006e16:	2b30      	cmp	r3, #48	; 0x30
 8006e18:	f040 80aa 	bne.w	8006f70 <_strtod_l+0x1a0>
 8006e1c:	786b      	ldrb	r3, [r5, #1]
 8006e1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e22:	2b58      	cmp	r3, #88	; 0x58
 8006e24:	d166      	bne.n	8006ef4 <_strtod_l+0x124>
 8006e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e28:	4650      	mov	r0, sl
 8006e2a:	9301      	str	r3, [sp, #4]
 8006e2c:	ab1a      	add	r3, sp, #104	; 0x68
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	4a8a      	ldr	r2, [pc, #552]	; (800705c <_strtod_l+0x28c>)
 8006e32:	f8cd b008 	str.w	fp, [sp, #8]
 8006e36:	ab1b      	add	r3, sp, #108	; 0x6c
 8006e38:	a919      	add	r1, sp, #100	; 0x64
 8006e3a:	f001 fd17 	bl	800886c <__gethex>
 8006e3e:	f010 0607 	ands.w	r6, r0, #7
 8006e42:	4604      	mov	r4, r0
 8006e44:	d005      	beq.n	8006e52 <_strtod_l+0x82>
 8006e46:	2e06      	cmp	r6, #6
 8006e48:	d129      	bne.n	8006e9e <_strtod_l+0xce>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	3501      	adds	r5, #1
 8006e4e:	9519      	str	r5, [sp, #100]	; 0x64
 8006e50:	930a      	str	r3, [sp, #40]	; 0x28
 8006e52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f040 858a 	bne.w	800796e <_strtod_l+0xb9e>
 8006e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e5c:	b1d3      	cbz	r3, 8006e94 <_strtod_l+0xc4>
 8006e5e:	4642      	mov	r2, r8
 8006e60:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006e64:	4610      	mov	r0, r2
 8006e66:	4619      	mov	r1, r3
 8006e68:	b01f      	add	sp, #124	; 0x7c
 8006e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6e:	2a20      	cmp	r2, #32
 8006e70:	d1cd      	bne.n	8006e0e <_strtod_l+0x3e>
 8006e72:	3301      	adds	r3, #1
 8006e74:	9319      	str	r3, [sp, #100]	; 0x64
 8006e76:	e7bf      	b.n	8006df8 <_strtod_l+0x28>
 8006e78:	2a2d      	cmp	r2, #45	; 0x2d
 8006e7a:	d1c8      	bne.n	8006e0e <_strtod_l+0x3e>
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	920a      	str	r2, [sp, #40]	; 0x28
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	9219      	str	r2, [sp, #100]	; 0x64
 8006e84:	785b      	ldrb	r3, [r3, #1]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1c3      	bne.n	8006e12 <_strtod_l+0x42>
 8006e8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e8c:	9619      	str	r6, [sp, #100]	; 0x64
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f040 856b 	bne.w	800796a <_strtod_l+0xb9a>
 8006e94:	4642      	mov	r2, r8
 8006e96:	464b      	mov	r3, r9
 8006e98:	e7e4      	b.n	8006e64 <_strtod_l+0x94>
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	e7ef      	b.n	8006e7e <_strtod_l+0xae>
 8006e9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006ea0:	b13a      	cbz	r2, 8006eb2 <_strtod_l+0xe2>
 8006ea2:	2135      	movs	r1, #53	; 0x35
 8006ea4:	a81c      	add	r0, sp, #112	; 0x70
 8006ea6:	f002 fc83 	bl	80097b0 <__copybits>
 8006eaa:	4650      	mov	r0, sl
 8006eac:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006eae:	f002 f84b 	bl	8008f48 <_Bfree>
 8006eb2:	3e01      	subs	r6, #1
 8006eb4:	2e04      	cmp	r6, #4
 8006eb6:	d806      	bhi.n	8006ec6 <_strtod_l+0xf6>
 8006eb8:	e8df f006 	tbb	[pc, r6]
 8006ebc:	1714030a 	.word	0x1714030a
 8006ec0:	0a          	.byte	0x0a
 8006ec1:	00          	.byte	0x00
 8006ec2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006ec6:	0721      	lsls	r1, r4, #28
 8006ec8:	d5c3      	bpl.n	8006e52 <_strtod_l+0x82>
 8006eca:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006ece:	e7c0      	b.n	8006e52 <_strtod_l+0x82>
 8006ed0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006ed2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006ed6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006eda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006ede:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006ee2:	e7f0      	b.n	8006ec6 <_strtod_l+0xf6>
 8006ee4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007060 <_strtod_l+0x290>
 8006ee8:	e7ed      	b.n	8006ec6 <_strtod_l+0xf6>
 8006eea:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006eee:	f04f 38ff 	mov.w	r8, #4294967295
 8006ef2:	e7e8      	b.n	8006ec6 <_strtod_l+0xf6>
 8006ef4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ef6:	1c5a      	adds	r2, r3, #1
 8006ef8:	9219      	str	r2, [sp, #100]	; 0x64
 8006efa:	785b      	ldrb	r3, [r3, #1]
 8006efc:	2b30      	cmp	r3, #48	; 0x30
 8006efe:	d0f9      	beq.n	8006ef4 <_strtod_l+0x124>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0a6      	beq.n	8006e52 <_strtod_l+0x82>
 8006f04:	2301      	movs	r3, #1
 8006f06:	9307      	str	r3, [sp, #28]
 8006f08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f0a:	220a      	movs	r2, #10
 8006f0c:	9308      	str	r3, [sp, #32]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	469b      	mov	fp, r3
 8006f12:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006f16:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006f18:	7805      	ldrb	r5, [r0, #0]
 8006f1a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006f1e:	b2d9      	uxtb	r1, r3
 8006f20:	2909      	cmp	r1, #9
 8006f22:	d927      	bls.n	8006f74 <_strtod_l+0x1a4>
 8006f24:	4622      	mov	r2, r4
 8006f26:	4639      	mov	r1, r7
 8006f28:	f002 fdfc 	bl	8009b24 <strncmp>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d033      	beq.n	8006f98 <_strtod_l+0x1c8>
 8006f30:	2000      	movs	r0, #0
 8006f32:	462a      	mov	r2, r5
 8006f34:	465c      	mov	r4, fp
 8006f36:	4603      	mov	r3, r0
 8006f38:	9004      	str	r0, [sp, #16]
 8006f3a:	2a65      	cmp	r2, #101	; 0x65
 8006f3c:	d001      	beq.n	8006f42 <_strtod_l+0x172>
 8006f3e:	2a45      	cmp	r2, #69	; 0x45
 8006f40:	d114      	bne.n	8006f6c <_strtod_l+0x19c>
 8006f42:	b91c      	cbnz	r4, 8006f4c <_strtod_l+0x17c>
 8006f44:	9a07      	ldr	r2, [sp, #28]
 8006f46:	4302      	orrs	r2, r0
 8006f48:	d09f      	beq.n	8006e8a <_strtod_l+0xba>
 8006f4a:	2400      	movs	r4, #0
 8006f4c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006f4e:	1c72      	adds	r2, r6, #1
 8006f50:	9219      	str	r2, [sp, #100]	; 0x64
 8006f52:	7872      	ldrb	r2, [r6, #1]
 8006f54:	2a2b      	cmp	r2, #43	; 0x2b
 8006f56:	d079      	beq.n	800704c <_strtod_l+0x27c>
 8006f58:	2a2d      	cmp	r2, #45	; 0x2d
 8006f5a:	f000 8083 	beq.w	8007064 <_strtod_l+0x294>
 8006f5e:	2700      	movs	r7, #0
 8006f60:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006f64:	2909      	cmp	r1, #9
 8006f66:	f240 8083 	bls.w	8007070 <_strtod_l+0x2a0>
 8006f6a:	9619      	str	r6, [sp, #100]	; 0x64
 8006f6c:	2500      	movs	r5, #0
 8006f6e:	e09f      	b.n	80070b0 <_strtod_l+0x2e0>
 8006f70:	2300      	movs	r3, #0
 8006f72:	e7c8      	b.n	8006f06 <_strtod_l+0x136>
 8006f74:	f1bb 0f08 	cmp.w	fp, #8
 8006f78:	bfd5      	itete	le
 8006f7a:	9906      	ldrle	r1, [sp, #24]
 8006f7c:	9905      	ldrgt	r1, [sp, #20]
 8006f7e:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f82:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006f86:	f100 0001 	add.w	r0, r0, #1
 8006f8a:	bfd4      	ite	le
 8006f8c:	9306      	strle	r3, [sp, #24]
 8006f8e:	9305      	strgt	r3, [sp, #20]
 8006f90:	f10b 0b01 	add.w	fp, fp, #1
 8006f94:	9019      	str	r0, [sp, #100]	; 0x64
 8006f96:	e7be      	b.n	8006f16 <_strtod_l+0x146>
 8006f98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f9a:	191a      	adds	r2, r3, r4
 8006f9c:	9219      	str	r2, [sp, #100]	; 0x64
 8006f9e:	5d1a      	ldrb	r2, [r3, r4]
 8006fa0:	f1bb 0f00 	cmp.w	fp, #0
 8006fa4:	d036      	beq.n	8007014 <_strtod_l+0x244>
 8006fa6:	465c      	mov	r4, fp
 8006fa8:	9004      	str	r0, [sp, #16]
 8006faa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006fae:	2b09      	cmp	r3, #9
 8006fb0:	d912      	bls.n	8006fd8 <_strtod_l+0x208>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e7c1      	b.n	8006f3a <_strtod_l+0x16a>
 8006fb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fb8:	3001      	adds	r0, #1
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	9219      	str	r2, [sp, #100]	; 0x64
 8006fbe:	785a      	ldrb	r2, [r3, #1]
 8006fc0:	2a30      	cmp	r2, #48	; 0x30
 8006fc2:	d0f8      	beq.n	8006fb6 <_strtod_l+0x1e6>
 8006fc4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	f200 84d5 	bhi.w	8007978 <_strtod_l+0xba8>
 8006fce:	9004      	str	r0, [sp, #16]
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fd6:	9308      	str	r3, [sp, #32]
 8006fd8:	3a30      	subs	r2, #48	; 0x30
 8006fda:	f100 0301 	add.w	r3, r0, #1
 8006fde:	d013      	beq.n	8007008 <_strtod_l+0x238>
 8006fe0:	9904      	ldr	r1, [sp, #16]
 8006fe2:	1905      	adds	r5, r0, r4
 8006fe4:	4419      	add	r1, r3
 8006fe6:	9104      	str	r1, [sp, #16]
 8006fe8:	4623      	mov	r3, r4
 8006fea:	210a      	movs	r1, #10
 8006fec:	42ab      	cmp	r3, r5
 8006fee:	d113      	bne.n	8007018 <_strtod_l+0x248>
 8006ff0:	1823      	adds	r3, r4, r0
 8006ff2:	2b08      	cmp	r3, #8
 8006ff4:	f104 0401 	add.w	r4, r4, #1
 8006ff8:	4404      	add	r4, r0
 8006ffa:	dc1b      	bgt.n	8007034 <_strtod_l+0x264>
 8006ffc:	230a      	movs	r3, #10
 8006ffe:	9906      	ldr	r1, [sp, #24]
 8007000:	fb03 2301 	mla	r3, r3, r1, r2
 8007004:	9306      	str	r3, [sp, #24]
 8007006:	2300      	movs	r3, #0
 8007008:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800700a:	4618      	mov	r0, r3
 800700c:	1c51      	adds	r1, r2, #1
 800700e:	9119      	str	r1, [sp, #100]	; 0x64
 8007010:	7852      	ldrb	r2, [r2, #1]
 8007012:	e7ca      	b.n	8006faa <_strtod_l+0x1da>
 8007014:	4658      	mov	r0, fp
 8007016:	e7d3      	b.n	8006fc0 <_strtod_l+0x1f0>
 8007018:	2b08      	cmp	r3, #8
 800701a:	dc04      	bgt.n	8007026 <_strtod_l+0x256>
 800701c:	9f06      	ldr	r7, [sp, #24]
 800701e:	434f      	muls	r7, r1
 8007020:	9706      	str	r7, [sp, #24]
 8007022:	3301      	adds	r3, #1
 8007024:	e7e2      	b.n	8006fec <_strtod_l+0x21c>
 8007026:	1c5f      	adds	r7, r3, #1
 8007028:	2f10      	cmp	r7, #16
 800702a:	bfde      	ittt	le
 800702c:	9f05      	ldrle	r7, [sp, #20]
 800702e:	434f      	mulle	r7, r1
 8007030:	9705      	strle	r7, [sp, #20]
 8007032:	e7f6      	b.n	8007022 <_strtod_l+0x252>
 8007034:	2c10      	cmp	r4, #16
 8007036:	bfdf      	itttt	le
 8007038:	230a      	movle	r3, #10
 800703a:	9905      	ldrle	r1, [sp, #20]
 800703c:	fb03 2301 	mlale	r3, r3, r1, r2
 8007040:	9305      	strle	r3, [sp, #20]
 8007042:	e7e0      	b.n	8007006 <_strtod_l+0x236>
 8007044:	2300      	movs	r3, #0
 8007046:	9304      	str	r3, [sp, #16]
 8007048:	2301      	movs	r3, #1
 800704a:	e77b      	b.n	8006f44 <_strtod_l+0x174>
 800704c:	2700      	movs	r7, #0
 800704e:	1cb2      	adds	r2, r6, #2
 8007050:	9219      	str	r2, [sp, #100]	; 0x64
 8007052:	78b2      	ldrb	r2, [r6, #2]
 8007054:	e784      	b.n	8006f60 <_strtod_l+0x190>
 8007056:	bf00      	nop
 8007058:	0800ab88 	.word	0x0800ab88
 800705c:	0800a940 	.word	0x0800a940
 8007060:	7ff00000 	.word	0x7ff00000
 8007064:	2701      	movs	r7, #1
 8007066:	e7f2      	b.n	800704e <_strtod_l+0x27e>
 8007068:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800706a:	1c51      	adds	r1, r2, #1
 800706c:	9119      	str	r1, [sp, #100]	; 0x64
 800706e:	7852      	ldrb	r2, [r2, #1]
 8007070:	2a30      	cmp	r2, #48	; 0x30
 8007072:	d0f9      	beq.n	8007068 <_strtod_l+0x298>
 8007074:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007078:	2908      	cmp	r1, #8
 800707a:	f63f af77 	bhi.w	8006f6c <_strtod_l+0x19c>
 800707e:	f04f 0e0a 	mov.w	lr, #10
 8007082:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007086:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007088:	9209      	str	r2, [sp, #36]	; 0x24
 800708a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800708c:	1c51      	adds	r1, r2, #1
 800708e:	9119      	str	r1, [sp, #100]	; 0x64
 8007090:	7852      	ldrb	r2, [r2, #1]
 8007092:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007096:	2d09      	cmp	r5, #9
 8007098:	d935      	bls.n	8007106 <_strtod_l+0x336>
 800709a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800709c:	1b49      	subs	r1, r1, r5
 800709e:	2908      	cmp	r1, #8
 80070a0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80070a4:	dc02      	bgt.n	80070ac <_strtod_l+0x2dc>
 80070a6:	4565      	cmp	r5, ip
 80070a8:	bfa8      	it	ge
 80070aa:	4665      	movge	r5, ip
 80070ac:	b107      	cbz	r7, 80070b0 <_strtod_l+0x2e0>
 80070ae:	426d      	negs	r5, r5
 80070b0:	2c00      	cmp	r4, #0
 80070b2:	d14c      	bne.n	800714e <_strtod_l+0x37e>
 80070b4:	9907      	ldr	r1, [sp, #28]
 80070b6:	4301      	orrs	r1, r0
 80070b8:	f47f aecb 	bne.w	8006e52 <_strtod_l+0x82>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f47f aee4 	bne.w	8006e8a <_strtod_l+0xba>
 80070c2:	2a69      	cmp	r2, #105	; 0x69
 80070c4:	d026      	beq.n	8007114 <_strtod_l+0x344>
 80070c6:	dc23      	bgt.n	8007110 <_strtod_l+0x340>
 80070c8:	2a49      	cmp	r2, #73	; 0x49
 80070ca:	d023      	beq.n	8007114 <_strtod_l+0x344>
 80070cc:	2a4e      	cmp	r2, #78	; 0x4e
 80070ce:	f47f aedc 	bne.w	8006e8a <_strtod_l+0xba>
 80070d2:	499d      	ldr	r1, [pc, #628]	; (8007348 <_strtod_l+0x578>)
 80070d4:	a819      	add	r0, sp, #100	; 0x64
 80070d6:	f001 fe17 	bl	8008d08 <__match>
 80070da:	2800      	cmp	r0, #0
 80070dc:	f43f aed5 	beq.w	8006e8a <_strtod_l+0xba>
 80070e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	2b28      	cmp	r3, #40	; 0x28
 80070e6:	d12c      	bne.n	8007142 <_strtod_l+0x372>
 80070e8:	4998      	ldr	r1, [pc, #608]	; (800734c <_strtod_l+0x57c>)
 80070ea:	aa1c      	add	r2, sp, #112	; 0x70
 80070ec:	a819      	add	r0, sp, #100	; 0x64
 80070ee:	f001 fe1f 	bl	8008d30 <__hexnan>
 80070f2:	2805      	cmp	r0, #5
 80070f4:	d125      	bne.n	8007142 <_strtod_l+0x372>
 80070f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80070f8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80070fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007100:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007104:	e6a5      	b.n	8006e52 <_strtod_l+0x82>
 8007106:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800710a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800710e:	e7bc      	b.n	800708a <_strtod_l+0x2ba>
 8007110:	2a6e      	cmp	r2, #110	; 0x6e
 8007112:	e7dc      	b.n	80070ce <_strtod_l+0x2fe>
 8007114:	498e      	ldr	r1, [pc, #568]	; (8007350 <_strtod_l+0x580>)
 8007116:	a819      	add	r0, sp, #100	; 0x64
 8007118:	f001 fdf6 	bl	8008d08 <__match>
 800711c:	2800      	cmp	r0, #0
 800711e:	f43f aeb4 	beq.w	8006e8a <_strtod_l+0xba>
 8007122:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007124:	498b      	ldr	r1, [pc, #556]	; (8007354 <_strtod_l+0x584>)
 8007126:	3b01      	subs	r3, #1
 8007128:	a819      	add	r0, sp, #100	; 0x64
 800712a:	9319      	str	r3, [sp, #100]	; 0x64
 800712c:	f001 fdec 	bl	8008d08 <__match>
 8007130:	b910      	cbnz	r0, 8007138 <_strtod_l+0x368>
 8007132:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007134:	3301      	adds	r3, #1
 8007136:	9319      	str	r3, [sp, #100]	; 0x64
 8007138:	f04f 0800 	mov.w	r8, #0
 800713c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007358 <_strtod_l+0x588>
 8007140:	e687      	b.n	8006e52 <_strtod_l+0x82>
 8007142:	4886      	ldr	r0, [pc, #536]	; (800735c <_strtod_l+0x58c>)
 8007144:	f002 fce8 	bl	8009b18 <nan>
 8007148:	4680      	mov	r8, r0
 800714a:	4689      	mov	r9, r1
 800714c:	e681      	b.n	8006e52 <_strtod_l+0x82>
 800714e:	9b04      	ldr	r3, [sp, #16]
 8007150:	f1bb 0f00 	cmp.w	fp, #0
 8007154:	bf08      	it	eq
 8007156:	46a3      	moveq	fp, r4
 8007158:	1aeb      	subs	r3, r5, r3
 800715a:	2c10      	cmp	r4, #16
 800715c:	9806      	ldr	r0, [sp, #24]
 800715e:	4626      	mov	r6, r4
 8007160:	9307      	str	r3, [sp, #28]
 8007162:	bfa8      	it	ge
 8007164:	2610      	movge	r6, #16
 8007166:	f7f9 f93d 	bl	80003e4 <__aeabi_ui2d>
 800716a:	2c09      	cmp	r4, #9
 800716c:	4680      	mov	r8, r0
 800716e:	4689      	mov	r9, r1
 8007170:	dd13      	ble.n	800719a <_strtod_l+0x3ca>
 8007172:	4b7b      	ldr	r3, [pc, #492]	; (8007360 <_strtod_l+0x590>)
 8007174:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007178:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800717c:	f7f9 f9ac 	bl	80004d8 <__aeabi_dmul>
 8007180:	4680      	mov	r8, r0
 8007182:	9805      	ldr	r0, [sp, #20]
 8007184:	4689      	mov	r9, r1
 8007186:	f7f9 f92d 	bl	80003e4 <__aeabi_ui2d>
 800718a:	4602      	mov	r2, r0
 800718c:	460b      	mov	r3, r1
 800718e:	4640      	mov	r0, r8
 8007190:	4649      	mov	r1, r9
 8007192:	f7f8 ffeb 	bl	800016c <__adddf3>
 8007196:	4680      	mov	r8, r0
 8007198:	4689      	mov	r9, r1
 800719a:	2c0f      	cmp	r4, #15
 800719c:	dc36      	bgt.n	800720c <_strtod_l+0x43c>
 800719e:	9b07      	ldr	r3, [sp, #28]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f43f ae56 	beq.w	8006e52 <_strtod_l+0x82>
 80071a6:	dd22      	ble.n	80071ee <_strtod_l+0x41e>
 80071a8:	2b16      	cmp	r3, #22
 80071aa:	dc09      	bgt.n	80071c0 <_strtod_l+0x3f0>
 80071ac:	496c      	ldr	r1, [pc, #432]	; (8007360 <_strtod_l+0x590>)
 80071ae:	4642      	mov	r2, r8
 80071b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071b4:	464b      	mov	r3, r9
 80071b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071ba:	f7f9 f98d 	bl	80004d8 <__aeabi_dmul>
 80071be:	e7c3      	b.n	8007148 <_strtod_l+0x378>
 80071c0:	9a07      	ldr	r2, [sp, #28]
 80071c2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80071c6:	4293      	cmp	r3, r2
 80071c8:	db20      	blt.n	800720c <_strtod_l+0x43c>
 80071ca:	4d65      	ldr	r5, [pc, #404]	; (8007360 <_strtod_l+0x590>)
 80071cc:	f1c4 040f 	rsb	r4, r4, #15
 80071d0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80071d4:	4642      	mov	r2, r8
 80071d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071da:	464b      	mov	r3, r9
 80071dc:	f7f9 f97c 	bl	80004d8 <__aeabi_dmul>
 80071e0:	9b07      	ldr	r3, [sp, #28]
 80071e2:	1b1c      	subs	r4, r3, r4
 80071e4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80071e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071ec:	e7e5      	b.n	80071ba <_strtod_l+0x3ea>
 80071ee:	9b07      	ldr	r3, [sp, #28]
 80071f0:	3316      	adds	r3, #22
 80071f2:	db0b      	blt.n	800720c <_strtod_l+0x43c>
 80071f4:	9b04      	ldr	r3, [sp, #16]
 80071f6:	4640      	mov	r0, r8
 80071f8:	1b5d      	subs	r5, r3, r5
 80071fa:	4b59      	ldr	r3, [pc, #356]	; (8007360 <_strtod_l+0x590>)
 80071fc:	4649      	mov	r1, r9
 80071fe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007202:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007206:	f7f9 fa91 	bl	800072c <__aeabi_ddiv>
 800720a:	e79d      	b.n	8007148 <_strtod_l+0x378>
 800720c:	9b07      	ldr	r3, [sp, #28]
 800720e:	1ba6      	subs	r6, r4, r6
 8007210:	441e      	add	r6, r3
 8007212:	2e00      	cmp	r6, #0
 8007214:	dd74      	ble.n	8007300 <_strtod_l+0x530>
 8007216:	f016 030f 	ands.w	r3, r6, #15
 800721a:	d00a      	beq.n	8007232 <_strtod_l+0x462>
 800721c:	4950      	ldr	r1, [pc, #320]	; (8007360 <_strtod_l+0x590>)
 800721e:	4642      	mov	r2, r8
 8007220:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007228:	464b      	mov	r3, r9
 800722a:	f7f9 f955 	bl	80004d8 <__aeabi_dmul>
 800722e:	4680      	mov	r8, r0
 8007230:	4689      	mov	r9, r1
 8007232:	f036 060f 	bics.w	r6, r6, #15
 8007236:	d052      	beq.n	80072de <_strtod_l+0x50e>
 8007238:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800723c:	dd27      	ble.n	800728e <_strtod_l+0x4be>
 800723e:	f04f 0b00 	mov.w	fp, #0
 8007242:	f8cd b010 	str.w	fp, [sp, #16]
 8007246:	f8cd b020 	str.w	fp, [sp, #32]
 800724a:	f8cd b018 	str.w	fp, [sp, #24]
 800724e:	2322      	movs	r3, #34	; 0x22
 8007250:	f04f 0800 	mov.w	r8, #0
 8007254:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007358 <_strtod_l+0x588>
 8007258:	f8ca 3000 	str.w	r3, [sl]
 800725c:	9b08      	ldr	r3, [sp, #32]
 800725e:	2b00      	cmp	r3, #0
 8007260:	f43f adf7 	beq.w	8006e52 <_strtod_l+0x82>
 8007264:	4650      	mov	r0, sl
 8007266:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007268:	f001 fe6e 	bl	8008f48 <_Bfree>
 800726c:	4650      	mov	r0, sl
 800726e:	9906      	ldr	r1, [sp, #24]
 8007270:	f001 fe6a 	bl	8008f48 <_Bfree>
 8007274:	4650      	mov	r0, sl
 8007276:	9904      	ldr	r1, [sp, #16]
 8007278:	f001 fe66 	bl	8008f48 <_Bfree>
 800727c:	4650      	mov	r0, sl
 800727e:	9908      	ldr	r1, [sp, #32]
 8007280:	f001 fe62 	bl	8008f48 <_Bfree>
 8007284:	4659      	mov	r1, fp
 8007286:	4650      	mov	r0, sl
 8007288:	f001 fe5e 	bl	8008f48 <_Bfree>
 800728c:	e5e1      	b.n	8006e52 <_strtod_l+0x82>
 800728e:	4b35      	ldr	r3, [pc, #212]	; (8007364 <_strtod_l+0x594>)
 8007290:	4640      	mov	r0, r8
 8007292:	9305      	str	r3, [sp, #20]
 8007294:	2300      	movs	r3, #0
 8007296:	4649      	mov	r1, r9
 8007298:	461f      	mov	r7, r3
 800729a:	1136      	asrs	r6, r6, #4
 800729c:	2e01      	cmp	r6, #1
 800729e:	dc21      	bgt.n	80072e4 <_strtod_l+0x514>
 80072a0:	b10b      	cbz	r3, 80072a6 <_strtod_l+0x4d6>
 80072a2:	4680      	mov	r8, r0
 80072a4:	4689      	mov	r9, r1
 80072a6:	4b2f      	ldr	r3, [pc, #188]	; (8007364 <_strtod_l+0x594>)
 80072a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80072ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80072b0:	4642      	mov	r2, r8
 80072b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072b6:	464b      	mov	r3, r9
 80072b8:	f7f9 f90e 	bl	80004d8 <__aeabi_dmul>
 80072bc:	4b26      	ldr	r3, [pc, #152]	; (8007358 <_strtod_l+0x588>)
 80072be:	460a      	mov	r2, r1
 80072c0:	400b      	ands	r3, r1
 80072c2:	4929      	ldr	r1, [pc, #164]	; (8007368 <_strtod_l+0x598>)
 80072c4:	4680      	mov	r8, r0
 80072c6:	428b      	cmp	r3, r1
 80072c8:	d8b9      	bhi.n	800723e <_strtod_l+0x46e>
 80072ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80072ce:	428b      	cmp	r3, r1
 80072d0:	bf86      	itte	hi
 80072d2:	f04f 38ff 	movhi.w	r8, #4294967295
 80072d6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800736c <_strtod_l+0x59c>
 80072da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80072de:	2300      	movs	r3, #0
 80072e0:	9305      	str	r3, [sp, #20]
 80072e2:	e07f      	b.n	80073e4 <_strtod_l+0x614>
 80072e4:	07f2      	lsls	r2, r6, #31
 80072e6:	d505      	bpl.n	80072f4 <_strtod_l+0x524>
 80072e8:	9b05      	ldr	r3, [sp, #20]
 80072ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ee:	f7f9 f8f3 	bl	80004d8 <__aeabi_dmul>
 80072f2:	2301      	movs	r3, #1
 80072f4:	9a05      	ldr	r2, [sp, #20]
 80072f6:	3701      	adds	r7, #1
 80072f8:	3208      	adds	r2, #8
 80072fa:	1076      	asrs	r6, r6, #1
 80072fc:	9205      	str	r2, [sp, #20]
 80072fe:	e7cd      	b.n	800729c <_strtod_l+0x4cc>
 8007300:	d0ed      	beq.n	80072de <_strtod_l+0x50e>
 8007302:	4276      	negs	r6, r6
 8007304:	f016 020f 	ands.w	r2, r6, #15
 8007308:	d00a      	beq.n	8007320 <_strtod_l+0x550>
 800730a:	4b15      	ldr	r3, [pc, #84]	; (8007360 <_strtod_l+0x590>)
 800730c:	4640      	mov	r0, r8
 800730e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007312:	4649      	mov	r1, r9
 8007314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007318:	f7f9 fa08 	bl	800072c <__aeabi_ddiv>
 800731c:	4680      	mov	r8, r0
 800731e:	4689      	mov	r9, r1
 8007320:	1136      	asrs	r6, r6, #4
 8007322:	d0dc      	beq.n	80072de <_strtod_l+0x50e>
 8007324:	2e1f      	cmp	r6, #31
 8007326:	dd23      	ble.n	8007370 <_strtod_l+0x5a0>
 8007328:	f04f 0b00 	mov.w	fp, #0
 800732c:	f8cd b010 	str.w	fp, [sp, #16]
 8007330:	f8cd b020 	str.w	fp, [sp, #32]
 8007334:	f8cd b018 	str.w	fp, [sp, #24]
 8007338:	2322      	movs	r3, #34	; 0x22
 800733a:	f04f 0800 	mov.w	r8, #0
 800733e:	f04f 0900 	mov.w	r9, #0
 8007342:	f8ca 3000 	str.w	r3, [sl]
 8007346:	e789      	b.n	800725c <_strtod_l+0x48c>
 8007348:	0800a911 	.word	0x0800a911
 800734c:	0800a954 	.word	0x0800a954
 8007350:	0800a909 	.word	0x0800a909
 8007354:	0800aa94 	.word	0x0800aa94
 8007358:	7ff00000 	.word	0x7ff00000
 800735c:	0800ad40 	.word	0x0800ad40
 8007360:	0800ac20 	.word	0x0800ac20
 8007364:	0800abf8 	.word	0x0800abf8
 8007368:	7ca00000 	.word	0x7ca00000
 800736c:	7fefffff 	.word	0x7fefffff
 8007370:	f016 0310 	ands.w	r3, r6, #16
 8007374:	bf18      	it	ne
 8007376:	236a      	movne	r3, #106	; 0x6a
 8007378:	4640      	mov	r0, r8
 800737a:	9305      	str	r3, [sp, #20]
 800737c:	4649      	mov	r1, r9
 800737e:	2300      	movs	r3, #0
 8007380:	4fb0      	ldr	r7, [pc, #704]	; (8007644 <_strtod_l+0x874>)
 8007382:	07f2      	lsls	r2, r6, #31
 8007384:	d504      	bpl.n	8007390 <_strtod_l+0x5c0>
 8007386:	e9d7 2300 	ldrd	r2, r3, [r7]
 800738a:	f7f9 f8a5 	bl	80004d8 <__aeabi_dmul>
 800738e:	2301      	movs	r3, #1
 8007390:	1076      	asrs	r6, r6, #1
 8007392:	f107 0708 	add.w	r7, r7, #8
 8007396:	d1f4      	bne.n	8007382 <_strtod_l+0x5b2>
 8007398:	b10b      	cbz	r3, 800739e <_strtod_l+0x5ce>
 800739a:	4680      	mov	r8, r0
 800739c:	4689      	mov	r9, r1
 800739e:	9b05      	ldr	r3, [sp, #20]
 80073a0:	b1c3      	cbz	r3, 80073d4 <_strtod_l+0x604>
 80073a2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80073a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	4649      	mov	r1, r9
 80073ae:	dd11      	ble.n	80073d4 <_strtod_l+0x604>
 80073b0:	2b1f      	cmp	r3, #31
 80073b2:	f340 8127 	ble.w	8007604 <_strtod_l+0x834>
 80073b6:	2b34      	cmp	r3, #52	; 0x34
 80073b8:	bfd8      	it	le
 80073ba:	f04f 33ff 	movle.w	r3, #4294967295
 80073be:	f04f 0800 	mov.w	r8, #0
 80073c2:	bfcf      	iteee	gt
 80073c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80073c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80073cc:	fa03 f202 	lslle.w	r2, r3, r2
 80073d0:	ea02 0901 	andle.w	r9, r2, r1
 80073d4:	2200      	movs	r2, #0
 80073d6:	2300      	movs	r3, #0
 80073d8:	4640      	mov	r0, r8
 80073da:	4649      	mov	r1, r9
 80073dc:	f7f9 fae4 	bl	80009a8 <__aeabi_dcmpeq>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d1a1      	bne.n	8007328 <_strtod_l+0x558>
 80073e4:	9b06      	ldr	r3, [sp, #24]
 80073e6:	465a      	mov	r2, fp
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	4650      	mov	r0, sl
 80073ec:	4623      	mov	r3, r4
 80073ee:	9908      	ldr	r1, [sp, #32]
 80073f0:	f001 fe12 	bl	8009018 <__s2b>
 80073f4:	9008      	str	r0, [sp, #32]
 80073f6:	2800      	cmp	r0, #0
 80073f8:	f43f af21 	beq.w	800723e <_strtod_l+0x46e>
 80073fc:	9b04      	ldr	r3, [sp, #16]
 80073fe:	f04f 0b00 	mov.w	fp, #0
 8007402:	1b5d      	subs	r5, r3, r5
 8007404:	9b07      	ldr	r3, [sp, #28]
 8007406:	f8cd b010 	str.w	fp, [sp, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	bfb4      	ite	lt
 800740e:	462b      	movlt	r3, r5
 8007410:	2300      	movge	r3, #0
 8007412:	930e      	str	r3, [sp, #56]	; 0x38
 8007414:	9b07      	ldr	r3, [sp, #28]
 8007416:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800741a:	9314      	str	r3, [sp, #80]	; 0x50
 800741c:	9b08      	ldr	r3, [sp, #32]
 800741e:	4650      	mov	r0, sl
 8007420:	6859      	ldr	r1, [r3, #4]
 8007422:	f001 fd51 	bl	8008ec8 <_Balloc>
 8007426:	9006      	str	r0, [sp, #24]
 8007428:	2800      	cmp	r0, #0
 800742a:	f43f af10 	beq.w	800724e <_strtod_l+0x47e>
 800742e:	9b08      	ldr	r3, [sp, #32]
 8007430:	300c      	adds	r0, #12
 8007432:	691a      	ldr	r2, [r3, #16]
 8007434:	f103 010c 	add.w	r1, r3, #12
 8007438:	3202      	adds	r2, #2
 800743a:	0092      	lsls	r2, r2, #2
 800743c:	f7fe fd10 	bl	8005e60 <memcpy>
 8007440:	ab1c      	add	r3, sp, #112	; 0x70
 8007442:	9301      	str	r3, [sp, #4]
 8007444:	ab1b      	add	r3, sp, #108	; 0x6c
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	4642      	mov	r2, r8
 800744a:	464b      	mov	r3, r9
 800744c:	4650      	mov	r0, sl
 800744e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007452:	f002 f923 	bl	800969c <__d2b>
 8007456:	901a      	str	r0, [sp, #104]	; 0x68
 8007458:	2800      	cmp	r0, #0
 800745a:	f43f aef8 	beq.w	800724e <_strtod_l+0x47e>
 800745e:	2101      	movs	r1, #1
 8007460:	4650      	mov	r0, sl
 8007462:	f001 fe71 	bl	8009148 <__i2b>
 8007466:	4603      	mov	r3, r0
 8007468:	9004      	str	r0, [sp, #16]
 800746a:	2800      	cmp	r0, #0
 800746c:	f43f aeef 	beq.w	800724e <_strtod_l+0x47e>
 8007470:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007472:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007474:	2d00      	cmp	r5, #0
 8007476:	bfab      	itete	ge
 8007478:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800747a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800747c:	18ee      	addge	r6, r5, r3
 800747e:	1b5c      	sublt	r4, r3, r5
 8007480:	9b05      	ldr	r3, [sp, #20]
 8007482:	bfa8      	it	ge
 8007484:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8007486:	eba5 0503 	sub.w	r5, r5, r3
 800748a:	4415      	add	r5, r2
 800748c:	4b6e      	ldr	r3, [pc, #440]	; (8007648 <_strtod_l+0x878>)
 800748e:	f105 35ff 	add.w	r5, r5, #4294967295
 8007492:	bfb8      	it	lt
 8007494:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007496:	429d      	cmp	r5, r3
 8007498:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800749c:	f280 80c4 	bge.w	8007628 <_strtod_l+0x858>
 80074a0:	1b5b      	subs	r3, r3, r5
 80074a2:	2b1f      	cmp	r3, #31
 80074a4:	f04f 0701 	mov.w	r7, #1
 80074a8:	eba2 0203 	sub.w	r2, r2, r3
 80074ac:	f300 80b1 	bgt.w	8007612 <_strtod_l+0x842>
 80074b0:	2500      	movs	r5, #0
 80074b2:	fa07 f303 	lsl.w	r3, r7, r3
 80074b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80074b8:	18b7      	adds	r7, r6, r2
 80074ba:	9b05      	ldr	r3, [sp, #20]
 80074bc:	42be      	cmp	r6, r7
 80074be:	4414      	add	r4, r2
 80074c0:	441c      	add	r4, r3
 80074c2:	4633      	mov	r3, r6
 80074c4:	bfa8      	it	ge
 80074c6:	463b      	movge	r3, r7
 80074c8:	42a3      	cmp	r3, r4
 80074ca:	bfa8      	it	ge
 80074cc:	4623      	movge	r3, r4
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	bfc2      	ittt	gt
 80074d2:	1aff      	subgt	r7, r7, r3
 80074d4:	1ae4      	subgt	r4, r4, r3
 80074d6:	1af6      	subgt	r6, r6, r3
 80074d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074da:	2b00      	cmp	r3, #0
 80074dc:	dd17      	ble.n	800750e <_strtod_l+0x73e>
 80074de:	461a      	mov	r2, r3
 80074e0:	4650      	mov	r0, sl
 80074e2:	9904      	ldr	r1, [sp, #16]
 80074e4:	f001 feee 	bl	80092c4 <__pow5mult>
 80074e8:	9004      	str	r0, [sp, #16]
 80074ea:	2800      	cmp	r0, #0
 80074ec:	f43f aeaf 	beq.w	800724e <_strtod_l+0x47e>
 80074f0:	4601      	mov	r1, r0
 80074f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80074f4:	4650      	mov	r0, sl
 80074f6:	f001 fe3d 	bl	8009174 <__multiply>
 80074fa:	9009      	str	r0, [sp, #36]	; 0x24
 80074fc:	2800      	cmp	r0, #0
 80074fe:	f43f aea6 	beq.w	800724e <_strtod_l+0x47e>
 8007502:	4650      	mov	r0, sl
 8007504:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007506:	f001 fd1f 	bl	8008f48 <_Bfree>
 800750a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800750c:	931a      	str	r3, [sp, #104]	; 0x68
 800750e:	2f00      	cmp	r7, #0
 8007510:	f300 808e 	bgt.w	8007630 <_strtod_l+0x860>
 8007514:	9b07      	ldr	r3, [sp, #28]
 8007516:	2b00      	cmp	r3, #0
 8007518:	dd08      	ble.n	800752c <_strtod_l+0x75c>
 800751a:	4650      	mov	r0, sl
 800751c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800751e:	9906      	ldr	r1, [sp, #24]
 8007520:	f001 fed0 	bl	80092c4 <__pow5mult>
 8007524:	9006      	str	r0, [sp, #24]
 8007526:	2800      	cmp	r0, #0
 8007528:	f43f ae91 	beq.w	800724e <_strtod_l+0x47e>
 800752c:	2c00      	cmp	r4, #0
 800752e:	dd08      	ble.n	8007542 <_strtod_l+0x772>
 8007530:	4622      	mov	r2, r4
 8007532:	4650      	mov	r0, sl
 8007534:	9906      	ldr	r1, [sp, #24]
 8007536:	f001 ff1f 	bl	8009378 <__lshift>
 800753a:	9006      	str	r0, [sp, #24]
 800753c:	2800      	cmp	r0, #0
 800753e:	f43f ae86 	beq.w	800724e <_strtod_l+0x47e>
 8007542:	2e00      	cmp	r6, #0
 8007544:	dd08      	ble.n	8007558 <_strtod_l+0x788>
 8007546:	4632      	mov	r2, r6
 8007548:	4650      	mov	r0, sl
 800754a:	9904      	ldr	r1, [sp, #16]
 800754c:	f001 ff14 	bl	8009378 <__lshift>
 8007550:	9004      	str	r0, [sp, #16]
 8007552:	2800      	cmp	r0, #0
 8007554:	f43f ae7b 	beq.w	800724e <_strtod_l+0x47e>
 8007558:	4650      	mov	r0, sl
 800755a:	9a06      	ldr	r2, [sp, #24]
 800755c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800755e:	f001 ff97 	bl	8009490 <__mdiff>
 8007562:	4683      	mov	fp, r0
 8007564:	2800      	cmp	r0, #0
 8007566:	f43f ae72 	beq.w	800724e <_strtod_l+0x47e>
 800756a:	2400      	movs	r4, #0
 800756c:	68c3      	ldr	r3, [r0, #12]
 800756e:	9904      	ldr	r1, [sp, #16]
 8007570:	60c4      	str	r4, [r0, #12]
 8007572:	930b      	str	r3, [sp, #44]	; 0x2c
 8007574:	f001 ff70 	bl	8009458 <__mcmp>
 8007578:	42a0      	cmp	r0, r4
 800757a:	da6b      	bge.n	8007654 <_strtod_l+0x884>
 800757c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800757e:	ea53 0308 	orrs.w	r3, r3, r8
 8007582:	f040 8091 	bne.w	80076a8 <_strtod_l+0x8d8>
 8007586:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800758a:	2b00      	cmp	r3, #0
 800758c:	f040 808c 	bne.w	80076a8 <_strtod_l+0x8d8>
 8007590:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007594:	0d1b      	lsrs	r3, r3, #20
 8007596:	051b      	lsls	r3, r3, #20
 8007598:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800759c:	f240 8084 	bls.w	80076a8 <_strtod_l+0x8d8>
 80075a0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80075a4:	b91b      	cbnz	r3, 80075ae <_strtod_l+0x7de>
 80075a6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	dd7c      	ble.n	80076a8 <_strtod_l+0x8d8>
 80075ae:	4659      	mov	r1, fp
 80075b0:	2201      	movs	r2, #1
 80075b2:	4650      	mov	r0, sl
 80075b4:	f001 fee0 	bl	8009378 <__lshift>
 80075b8:	9904      	ldr	r1, [sp, #16]
 80075ba:	4683      	mov	fp, r0
 80075bc:	f001 ff4c 	bl	8009458 <__mcmp>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	dd71      	ble.n	80076a8 <_strtod_l+0x8d8>
 80075c4:	9905      	ldr	r1, [sp, #20]
 80075c6:	464b      	mov	r3, r9
 80075c8:	4a20      	ldr	r2, [pc, #128]	; (800764c <_strtod_l+0x87c>)
 80075ca:	2900      	cmp	r1, #0
 80075cc:	f000 808c 	beq.w	80076e8 <_strtod_l+0x918>
 80075d0:	ea02 0109 	and.w	r1, r2, r9
 80075d4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80075d8:	f300 8086 	bgt.w	80076e8 <_strtod_l+0x918>
 80075dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80075e0:	f77f aeaa 	ble.w	8007338 <_strtod_l+0x568>
 80075e4:	4640      	mov	r0, r8
 80075e6:	4649      	mov	r1, r9
 80075e8:	4b19      	ldr	r3, [pc, #100]	; (8007650 <_strtod_l+0x880>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	f7f8 ff74 	bl	80004d8 <__aeabi_dmul>
 80075f0:	460b      	mov	r3, r1
 80075f2:	4303      	orrs	r3, r0
 80075f4:	bf08      	it	eq
 80075f6:	2322      	moveq	r3, #34	; 0x22
 80075f8:	4680      	mov	r8, r0
 80075fa:	4689      	mov	r9, r1
 80075fc:	bf08      	it	eq
 80075fe:	f8ca 3000 	streq.w	r3, [sl]
 8007602:	e62f      	b.n	8007264 <_strtod_l+0x494>
 8007604:	f04f 32ff 	mov.w	r2, #4294967295
 8007608:	fa02 f303 	lsl.w	r3, r2, r3
 800760c:	ea03 0808 	and.w	r8, r3, r8
 8007610:	e6e0      	b.n	80073d4 <_strtod_l+0x604>
 8007612:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007616:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800761a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800761e:	35e2      	adds	r5, #226	; 0xe2
 8007620:	fa07 f505 	lsl.w	r5, r7, r5
 8007624:	970f      	str	r7, [sp, #60]	; 0x3c
 8007626:	e747      	b.n	80074b8 <_strtod_l+0x6e8>
 8007628:	2301      	movs	r3, #1
 800762a:	2500      	movs	r5, #0
 800762c:	930f      	str	r3, [sp, #60]	; 0x3c
 800762e:	e743      	b.n	80074b8 <_strtod_l+0x6e8>
 8007630:	463a      	mov	r2, r7
 8007632:	4650      	mov	r0, sl
 8007634:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007636:	f001 fe9f 	bl	8009378 <__lshift>
 800763a:	901a      	str	r0, [sp, #104]	; 0x68
 800763c:	2800      	cmp	r0, #0
 800763e:	f47f af69 	bne.w	8007514 <_strtod_l+0x744>
 8007642:	e604      	b.n	800724e <_strtod_l+0x47e>
 8007644:	0800a968 	.word	0x0800a968
 8007648:	fffffc02 	.word	0xfffffc02
 800764c:	7ff00000 	.word	0x7ff00000
 8007650:	39500000 	.word	0x39500000
 8007654:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007658:	d165      	bne.n	8007726 <_strtod_l+0x956>
 800765a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800765c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007660:	b35a      	cbz	r2, 80076ba <_strtod_l+0x8ea>
 8007662:	4a99      	ldr	r2, [pc, #612]	; (80078c8 <_strtod_l+0xaf8>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d12b      	bne.n	80076c0 <_strtod_l+0x8f0>
 8007668:	9b05      	ldr	r3, [sp, #20]
 800766a:	4641      	mov	r1, r8
 800766c:	b303      	cbz	r3, 80076b0 <_strtod_l+0x8e0>
 800766e:	464a      	mov	r2, r9
 8007670:	4b96      	ldr	r3, [pc, #600]	; (80078cc <_strtod_l+0xafc>)
 8007672:	4013      	ands	r3, r2
 8007674:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007678:	f04f 32ff 	mov.w	r2, #4294967295
 800767c:	d81b      	bhi.n	80076b6 <_strtod_l+0x8e6>
 800767e:	0d1b      	lsrs	r3, r3, #20
 8007680:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007684:	fa02 f303 	lsl.w	r3, r2, r3
 8007688:	4299      	cmp	r1, r3
 800768a:	d119      	bne.n	80076c0 <_strtod_l+0x8f0>
 800768c:	4b90      	ldr	r3, [pc, #576]	; (80078d0 <_strtod_l+0xb00>)
 800768e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007690:	429a      	cmp	r2, r3
 8007692:	d102      	bne.n	800769a <_strtod_l+0x8ca>
 8007694:	3101      	adds	r1, #1
 8007696:	f43f adda 	beq.w	800724e <_strtod_l+0x47e>
 800769a:	f04f 0800 	mov.w	r8, #0
 800769e:	4b8b      	ldr	r3, [pc, #556]	; (80078cc <_strtod_l+0xafc>)
 80076a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076a2:	401a      	ands	r2, r3
 80076a4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80076a8:	9b05      	ldr	r3, [sp, #20]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d19a      	bne.n	80075e4 <_strtod_l+0x814>
 80076ae:	e5d9      	b.n	8007264 <_strtod_l+0x494>
 80076b0:	f04f 33ff 	mov.w	r3, #4294967295
 80076b4:	e7e8      	b.n	8007688 <_strtod_l+0x8b8>
 80076b6:	4613      	mov	r3, r2
 80076b8:	e7e6      	b.n	8007688 <_strtod_l+0x8b8>
 80076ba:	ea53 0308 	orrs.w	r3, r3, r8
 80076be:	d081      	beq.n	80075c4 <_strtod_l+0x7f4>
 80076c0:	b1e5      	cbz	r5, 80076fc <_strtod_l+0x92c>
 80076c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c4:	421d      	tst	r5, r3
 80076c6:	d0ef      	beq.n	80076a8 <_strtod_l+0x8d8>
 80076c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ca:	4640      	mov	r0, r8
 80076cc:	4649      	mov	r1, r9
 80076ce:	9a05      	ldr	r2, [sp, #20]
 80076d0:	b1c3      	cbz	r3, 8007704 <_strtod_l+0x934>
 80076d2:	f7ff fb59 	bl	8006d88 <sulp>
 80076d6:	4602      	mov	r2, r0
 80076d8:	460b      	mov	r3, r1
 80076da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076de:	f7f8 fd45 	bl	800016c <__adddf3>
 80076e2:	4680      	mov	r8, r0
 80076e4:	4689      	mov	r9, r1
 80076e6:	e7df      	b.n	80076a8 <_strtod_l+0x8d8>
 80076e8:	4013      	ands	r3, r2
 80076ea:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80076ee:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80076f2:	f04f 38ff 	mov.w	r8, #4294967295
 80076f6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80076fa:	e7d5      	b.n	80076a8 <_strtod_l+0x8d8>
 80076fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076fe:	ea13 0f08 	tst.w	r3, r8
 8007702:	e7e0      	b.n	80076c6 <_strtod_l+0x8f6>
 8007704:	f7ff fb40 	bl	8006d88 <sulp>
 8007708:	4602      	mov	r2, r0
 800770a:	460b      	mov	r3, r1
 800770c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007710:	f7f8 fd2a 	bl	8000168 <__aeabi_dsub>
 8007714:	2200      	movs	r2, #0
 8007716:	2300      	movs	r3, #0
 8007718:	4680      	mov	r8, r0
 800771a:	4689      	mov	r9, r1
 800771c:	f7f9 f944 	bl	80009a8 <__aeabi_dcmpeq>
 8007720:	2800      	cmp	r0, #0
 8007722:	d0c1      	beq.n	80076a8 <_strtod_l+0x8d8>
 8007724:	e608      	b.n	8007338 <_strtod_l+0x568>
 8007726:	4658      	mov	r0, fp
 8007728:	9904      	ldr	r1, [sp, #16]
 800772a:	f002 f813 	bl	8009754 <__ratio>
 800772e:	2200      	movs	r2, #0
 8007730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007734:	4606      	mov	r6, r0
 8007736:	460f      	mov	r7, r1
 8007738:	f7f9 f94a 	bl	80009d0 <__aeabi_dcmple>
 800773c:	2800      	cmp	r0, #0
 800773e:	d070      	beq.n	8007822 <_strtod_l+0xa52>
 8007740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007742:	2b00      	cmp	r3, #0
 8007744:	d042      	beq.n	80077cc <_strtod_l+0x9fc>
 8007746:	2600      	movs	r6, #0
 8007748:	4f62      	ldr	r7, [pc, #392]	; (80078d4 <_strtod_l+0xb04>)
 800774a:	4d62      	ldr	r5, [pc, #392]	; (80078d4 <_strtod_l+0xb04>)
 800774c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800774e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007752:	0d1b      	lsrs	r3, r3, #20
 8007754:	051b      	lsls	r3, r3, #20
 8007756:	930f      	str	r3, [sp, #60]	; 0x3c
 8007758:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800775a:	4b5f      	ldr	r3, [pc, #380]	; (80078d8 <_strtod_l+0xb08>)
 800775c:	429a      	cmp	r2, r3
 800775e:	f040 80c3 	bne.w	80078e8 <_strtod_l+0xb18>
 8007762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007764:	4640      	mov	r0, r8
 8007766:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800776a:	4649      	mov	r1, r9
 800776c:	f001 ff1c 	bl	80095a8 <__ulp>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4630      	mov	r0, r6
 8007776:	4639      	mov	r1, r7
 8007778:	f7f8 feae 	bl	80004d8 <__aeabi_dmul>
 800777c:	4642      	mov	r2, r8
 800777e:	464b      	mov	r3, r9
 8007780:	f7f8 fcf4 	bl	800016c <__adddf3>
 8007784:	460b      	mov	r3, r1
 8007786:	4951      	ldr	r1, [pc, #324]	; (80078cc <_strtod_l+0xafc>)
 8007788:	4a54      	ldr	r2, [pc, #336]	; (80078dc <_strtod_l+0xb0c>)
 800778a:	4019      	ands	r1, r3
 800778c:	4291      	cmp	r1, r2
 800778e:	4680      	mov	r8, r0
 8007790:	d95d      	bls.n	800784e <_strtod_l+0xa7e>
 8007792:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007794:	4b4e      	ldr	r3, [pc, #312]	; (80078d0 <_strtod_l+0xb00>)
 8007796:	429a      	cmp	r2, r3
 8007798:	d103      	bne.n	80077a2 <_strtod_l+0x9d2>
 800779a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800779c:	3301      	adds	r3, #1
 800779e:	f43f ad56 	beq.w	800724e <_strtod_l+0x47e>
 80077a2:	f04f 38ff 	mov.w	r8, #4294967295
 80077a6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80078d0 <_strtod_l+0xb00>
 80077aa:	4650      	mov	r0, sl
 80077ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80077ae:	f001 fbcb 	bl	8008f48 <_Bfree>
 80077b2:	4650      	mov	r0, sl
 80077b4:	9906      	ldr	r1, [sp, #24]
 80077b6:	f001 fbc7 	bl	8008f48 <_Bfree>
 80077ba:	4650      	mov	r0, sl
 80077bc:	9904      	ldr	r1, [sp, #16]
 80077be:	f001 fbc3 	bl	8008f48 <_Bfree>
 80077c2:	4659      	mov	r1, fp
 80077c4:	4650      	mov	r0, sl
 80077c6:	f001 fbbf 	bl	8008f48 <_Bfree>
 80077ca:	e627      	b.n	800741c <_strtod_l+0x64c>
 80077cc:	f1b8 0f00 	cmp.w	r8, #0
 80077d0:	d119      	bne.n	8007806 <_strtod_l+0xa36>
 80077d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077d8:	b9e3      	cbnz	r3, 8007814 <_strtod_l+0xa44>
 80077da:	2200      	movs	r2, #0
 80077dc:	4630      	mov	r0, r6
 80077de:	4639      	mov	r1, r7
 80077e0:	4b3c      	ldr	r3, [pc, #240]	; (80078d4 <_strtod_l+0xb04>)
 80077e2:	f7f9 f8eb 	bl	80009bc <__aeabi_dcmplt>
 80077e6:	b9c8      	cbnz	r0, 800781c <_strtod_l+0xa4c>
 80077e8:	2200      	movs	r2, #0
 80077ea:	4630      	mov	r0, r6
 80077ec:	4639      	mov	r1, r7
 80077ee:	4b3c      	ldr	r3, [pc, #240]	; (80078e0 <_strtod_l+0xb10>)
 80077f0:	f7f8 fe72 	bl	80004d8 <__aeabi_dmul>
 80077f4:	4604      	mov	r4, r0
 80077f6:	460d      	mov	r5, r1
 80077f8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80077fc:	9416      	str	r4, [sp, #88]	; 0x58
 80077fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8007800:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8007804:	e7a2      	b.n	800774c <_strtod_l+0x97c>
 8007806:	f1b8 0f01 	cmp.w	r8, #1
 800780a:	d103      	bne.n	8007814 <_strtod_l+0xa44>
 800780c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800780e:	2b00      	cmp	r3, #0
 8007810:	f43f ad92 	beq.w	8007338 <_strtod_l+0x568>
 8007814:	2600      	movs	r6, #0
 8007816:	2400      	movs	r4, #0
 8007818:	4f32      	ldr	r7, [pc, #200]	; (80078e4 <_strtod_l+0xb14>)
 800781a:	e796      	b.n	800774a <_strtod_l+0x97a>
 800781c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800781e:	4d30      	ldr	r5, [pc, #192]	; (80078e0 <_strtod_l+0xb10>)
 8007820:	e7ea      	b.n	80077f8 <_strtod_l+0xa28>
 8007822:	4b2f      	ldr	r3, [pc, #188]	; (80078e0 <_strtod_l+0xb10>)
 8007824:	2200      	movs	r2, #0
 8007826:	4630      	mov	r0, r6
 8007828:	4639      	mov	r1, r7
 800782a:	f7f8 fe55 	bl	80004d8 <__aeabi_dmul>
 800782e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007830:	4604      	mov	r4, r0
 8007832:	460d      	mov	r5, r1
 8007834:	b933      	cbnz	r3, 8007844 <_strtod_l+0xa74>
 8007836:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800783a:	9010      	str	r0, [sp, #64]	; 0x40
 800783c:	9311      	str	r3, [sp, #68]	; 0x44
 800783e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007842:	e783      	b.n	800774c <_strtod_l+0x97c>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800784c:	e7f7      	b.n	800783e <_strtod_l+0xa6e>
 800784e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007852:	9b05      	ldr	r3, [sp, #20]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1a8      	bne.n	80077aa <_strtod_l+0x9da>
 8007858:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800785c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800785e:	0d1b      	lsrs	r3, r3, #20
 8007860:	051b      	lsls	r3, r3, #20
 8007862:	429a      	cmp	r2, r3
 8007864:	d1a1      	bne.n	80077aa <_strtod_l+0x9da>
 8007866:	4620      	mov	r0, r4
 8007868:	4629      	mov	r1, r5
 800786a:	f7f9 fc97 	bl	800119c <__aeabi_d2lz>
 800786e:	f7f8 fe05 	bl	800047c <__aeabi_l2d>
 8007872:	4602      	mov	r2, r0
 8007874:	460b      	mov	r3, r1
 8007876:	4620      	mov	r0, r4
 8007878:	4629      	mov	r1, r5
 800787a:	f7f8 fc75 	bl	8000168 <__aeabi_dsub>
 800787e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007884:	ea43 0308 	orr.w	r3, r3, r8
 8007888:	4313      	orrs	r3, r2
 800788a:	4604      	mov	r4, r0
 800788c:	460d      	mov	r5, r1
 800788e:	d066      	beq.n	800795e <_strtod_l+0xb8e>
 8007890:	a309      	add	r3, pc, #36	; (adr r3, 80078b8 <_strtod_l+0xae8>)
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	f7f9 f891 	bl	80009bc <__aeabi_dcmplt>
 800789a:	2800      	cmp	r0, #0
 800789c:	f47f ace2 	bne.w	8007264 <_strtod_l+0x494>
 80078a0:	a307      	add	r3, pc, #28	; (adr r3, 80078c0 <_strtod_l+0xaf0>)
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	4620      	mov	r0, r4
 80078a8:	4629      	mov	r1, r5
 80078aa:	f7f9 f8a5 	bl	80009f8 <__aeabi_dcmpgt>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f43f af7b 	beq.w	80077aa <_strtod_l+0x9da>
 80078b4:	e4d6      	b.n	8007264 <_strtod_l+0x494>
 80078b6:	bf00      	nop
 80078b8:	94a03595 	.word	0x94a03595
 80078bc:	3fdfffff 	.word	0x3fdfffff
 80078c0:	35afe535 	.word	0x35afe535
 80078c4:	3fe00000 	.word	0x3fe00000
 80078c8:	000fffff 	.word	0x000fffff
 80078cc:	7ff00000 	.word	0x7ff00000
 80078d0:	7fefffff 	.word	0x7fefffff
 80078d4:	3ff00000 	.word	0x3ff00000
 80078d8:	7fe00000 	.word	0x7fe00000
 80078dc:	7c9fffff 	.word	0x7c9fffff
 80078e0:	3fe00000 	.word	0x3fe00000
 80078e4:	bff00000 	.word	0xbff00000
 80078e8:	9b05      	ldr	r3, [sp, #20]
 80078ea:	b313      	cbz	r3, 8007932 <_strtod_l+0xb62>
 80078ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80078f2:	d81e      	bhi.n	8007932 <_strtod_l+0xb62>
 80078f4:	a326      	add	r3, pc, #152	; (adr r3, 8007990 <_strtod_l+0xbc0>)
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	4620      	mov	r0, r4
 80078fc:	4629      	mov	r1, r5
 80078fe:	f7f9 f867 	bl	80009d0 <__aeabi_dcmple>
 8007902:	b190      	cbz	r0, 800792a <_strtod_l+0xb5a>
 8007904:	4629      	mov	r1, r5
 8007906:	4620      	mov	r0, r4
 8007908:	f7f9 f8be 	bl	8000a88 <__aeabi_d2uiz>
 800790c:	2801      	cmp	r0, #1
 800790e:	bf38      	it	cc
 8007910:	2001      	movcc	r0, #1
 8007912:	f7f8 fd67 	bl	80003e4 <__aeabi_ui2d>
 8007916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007918:	4604      	mov	r4, r0
 800791a:	460d      	mov	r5, r1
 800791c:	b9d3      	cbnz	r3, 8007954 <_strtod_l+0xb84>
 800791e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007922:	9012      	str	r0, [sp, #72]	; 0x48
 8007924:	9313      	str	r3, [sp, #76]	; 0x4c
 8007926:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800792a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800792c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007930:	1a9f      	subs	r7, r3, r2
 8007932:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007936:	f001 fe37 	bl	80095a8 <__ulp>
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	4630      	mov	r0, r6
 8007940:	4639      	mov	r1, r7
 8007942:	f7f8 fdc9 	bl	80004d8 <__aeabi_dmul>
 8007946:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800794a:	f7f8 fc0f 	bl	800016c <__adddf3>
 800794e:	4680      	mov	r8, r0
 8007950:	4689      	mov	r9, r1
 8007952:	e77e      	b.n	8007852 <_strtod_l+0xa82>
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800795c:	e7e3      	b.n	8007926 <_strtod_l+0xb56>
 800795e:	a30e      	add	r3, pc, #56	; (adr r3, 8007998 <_strtod_l+0xbc8>)
 8007960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007964:	f7f9 f82a 	bl	80009bc <__aeabi_dcmplt>
 8007968:	e7a1      	b.n	80078ae <_strtod_l+0xade>
 800796a:	2300      	movs	r3, #0
 800796c:	930a      	str	r3, [sp, #40]	; 0x28
 800796e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007970:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007972:	6013      	str	r3, [r2, #0]
 8007974:	f7ff ba71 	b.w	8006e5a <_strtod_l+0x8a>
 8007978:	2a65      	cmp	r2, #101	; 0x65
 800797a:	f43f ab63 	beq.w	8007044 <_strtod_l+0x274>
 800797e:	2a45      	cmp	r2, #69	; 0x45
 8007980:	f43f ab60 	beq.w	8007044 <_strtod_l+0x274>
 8007984:	2301      	movs	r3, #1
 8007986:	f7ff bb95 	b.w	80070b4 <_strtod_l+0x2e4>
 800798a:	bf00      	nop
 800798c:	f3af 8000 	nop.w
 8007990:	ffc00000 	.word	0xffc00000
 8007994:	41dfffff 	.word	0x41dfffff
 8007998:	94a03595 	.word	0x94a03595
 800799c:	3fcfffff 	.word	0x3fcfffff

080079a0 <_strtod_r>:
 80079a0:	4b01      	ldr	r3, [pc, #4]	; (80079a8 <_strtod_r+0x8>)
 80079a2:	f7ff ba15 	b.w	8006dd0 <_strtod_l>
 80079a6:	bf00      	nop
 80079a8:	2000007c 	.word	0x2000007c

080079ac <_strtol_l.constprop.0>:
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b2:	4680      	mov	r8, r0
 80079b4:	d001      	beq.n	80079ba <_strtol_l.constprop.0+0xe>
 80079b6:	2b24      	cmp	r3, #36	; 0x24
 80079b8:	d906      	bls.n	80079c8 <_strtol_l.constprop.0+0x1c>
 80079ba:	f7fe fa17 	bl	8005dec <__errno>
 80079be:	2316      	movs	r3, #22
 80079c0:	6003      	str	r3, [r0, #0]
 80079c2:	2000      	movs	r0, #0
 80079c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c8:	460d      	mov	r5, r1
 80079ca:	4f35      	ldr	r7, [pc, #212]	; (8007aa0 <_strtol_l.constprop.0+0xf4>)
 80079cc:	4628      	mov	r0, r5
 80079ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079d2:	5de6      	ldrb	r6, [r4, r7]
 80079d4:	f016 0608 	ands.w	r6, r6, #8
 80079d8:	d1f8      	bne.n	80079cc <_strtol_l.constprop.0+0x20>
 80079da:	2c2d      	cmp	r4, #45	; 0x2d
 80079dc:	d12f      	bne.n	8007a3e <_strtol_l.constprop.0+0x92>
 80079de:	2601      	movs	r6, #1
 80079e0:	782c      	ldrb	r4, [r5, #0]
 80079e2:	1c85      	adds	r5, r0, #2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d057      	beq.n	8007a98 <_strtol_l.constprop.0+0xec>
 80079e8:	2b10      	cmp	r3, #16
 80079ea:	d109      	bne.n	8007a00 <_strtol_l.constprop.0+0x54>
 80079ec:	2c30      	cmp	r4, #48	; 0x30
 80079ee:	d107      	bne.n	8007a00 <_strtol_l.constprop.0+0x54>
 80079f0:	7828      	ldrb	r0, [r5, #0]
 80079f2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80079f6:	2858      	cmp	r0, #88	; 0x58
 80079f8:	d149      	bne.n	8007a8e <_strtol_l.constprop.0+0xe2>
 80079fa:	2310      	movs	r3, #16
 80079fc:	786c      	ldrb	r4, [r5, #1]
 80079fe:	3502      	adds	r5, #2
 8007a00:	2700      	movs	r7, #0
 8007a02:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007a06:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007a0a:	fbbe f9f3 	udiv	r9, lr, r3
 8007a0e:	4638      	mov	r0, r7
 8007a10:	fb03 ea19 	mls	sl, r3, r9, lr
 8007a14:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007a18:	f1bc 0f09 	cmp.w	ip, #9
 8007a1c:	d814      	bhi.n	8007a48 <_strtol_l.constprop.0+0x9c>
 8007a1e:	4664      	mov	r4, ip
 8007a20:	42a3      	cmp	r3, r4
 8007a22:	dd22      	ble.n	8007a6a <_strtol_l.constprop.0+0xbe>
 8007a24:	2f00      	cmp	r7, #0
 8007a26:	db1d      	blt.n	8007a64 <_strtol_l.constprop.0+0xb8>
 8007a28:	4581      	cmp	r9, r0
 8007a2a:	d31b      	bcc.n	8007a64 <_strtol_l.constprop.0+0xb8>
 8007a2c:	d101      	bne.n	8007a32 <_strtol_l.constprop.0+0x86>
 8007a2e:	45a2      	cmp	sl, r4
 8007a30:	db18      	blt.n	8007a64 <_strtol_l.constprop.0+0xb8>
 8007a32:	2701      	movs	r7, #1
 8007a34:	fb00 4003 	mla	r0, r0, r3, r4
 8007a38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a3c:	e7ea      	b.n	8007a14 <_strtol_l.constprop.0+0x68>
 8007a3e:	2c2b      	cmp	r4, #43	; 0x2b
 8007a40:	bf04      	itt	eq
 8007a42:	782c      	ldrbeq	r4, [r5, #0]
 8007a44:	1c85      	addeq	r5, r0, #2
 8007a46:	e7cd      	b.n	80079e4 <_strtol_l.constprop.0+0x38>
 8007a48:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007a4c:	f1bc 0f19 	cmp.w	ip, #25
 8007a50:	d801      	bhi.n	8007a56 <_strtol_l.constprop.0+0xaa>
 8007a52:	3c37      	subs	r4, #55	; 0x37
 8007a54:	e7e4      	b.n	8007a20 <_strtol_l.constprop.0+0x74>
 8007a56:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007a5a:	f1bc 0f19 	cmp.w	ip, #25
 8007a5e:	d804      	bhi.n	8007a6a <_strtol_l.constprop.0+0xbe>
 8007a60:	3c57      	subs	r4, #87	; 0x57
 8007a62:	e7dd      	b.n	8007a20 <_strtol_l.constprop.0+0x74>
 8007a64:	f04f 37ff 	mov.w	r7, #4294967295
 8007a68:	e7e6      	b.n	8007a38 <_strtol_l.constprop.0+0x8c>
 8007a6a:	2f00      	cmp	r7, #0
 8007a6c:	da07      	bge.n	8007a7e <_strtol_l.constprop.0+0xd2>
 8007a6e:	2322      	movs	r3, #34	; 0x22
 8007a70:	4670      	mov	r0, lr
 8007a72:	f8c8 3000 	str.w	r3, [r8]
 8007a76:	2a00      	cmp	r2, #0
 8007a78:	d0a4      	beq.n	80079c4 <_strtol_l.constprop.0+0x18>
 8007a7a:	1e69      	subs	r1, r5, #1
 8007a7c:	e005      	b.n	8007a8a <_strtol_l.constprop.0+0xde>
 8007a7e:	b106      	cbz	r6, 8007a82 <_strtol_l.constprop.0+0xd6>
 8007a80:	4240      	negs	r0, r0
 8007a82:	2a00      	cmp	r2, #0
 8007a84:	d09e      	beq.n	80079c4 <_strtol_l.constprop.0+0x18>
 8007a86:	2f00      	cmp	r7, #0
 8007a88:	d1f7      	bne.n	8007a7a <_strtol_l.constprop.0+0xce>
 8007a8a:	6011      	str	r1, [r2, #0]
 8007a8c:	e79a      	b.n	80079c4 <_strtol_l.constprop.0+0x18>
 8007a8e:	2430      	movs	r4, #48	; 0x30
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1b5      	bne.n	8007a00 <_strtol_l.constprop.0+0x54>
 8007a94:	2308      	movs	r3, #8
 8007a96:	e7b3      	b.n	8007a00 <_strtol_l.constprop.0+0x54>
 8007a98:	2c30      	cmp	r4, #48	; 0x30
 8007a9a:	d0a9      	beq.n	80079f0 <_strtol_l.constprop.0+0x44>
 8007a9c:	230a      	movs	r3, #10
 8007a9e:	e7af      	b.n	8007a00 <_strtol_l.constprop.0+0x54>
 8007aa0:	0800a991 	.word	0x0800a991

08007aa4 <_strtol_r>:
 8007aa4:	f7ff bf82 	b.w	80079ac <_strtol_l.constprop.0>

08007aa8 <quorem>:
 8007aa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aac:	6903      	ldr	r3, [r0, #16]
 8007aae:	690c      	ldr	r4, [r1, #16]
 8007ab0:	4607      	mov	r7, r0
 8007ab2:	42a3      	cmp	r3, r4
 8007ab4:	f2c0 8082 	blt.w	8007bbc <quorem+0x114>
 8007ab8:	3c01      	subs	r4, #1
 8007aba:	f100 0514 	add.w	r5, r0, #20
 8007abe:	f101 0814 	add.w	r8, r1, #20
 8007ac2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ac6:	9301      	str	r3, [sp, #4]
 8007ac8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007acc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ad8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007adc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ae0:	d331      	bcc.n	8007b46 <quorem+0x9e>
 8007ae2:	f04f 0e00 	mov.w	lr, #0
 8007ae6:	4640      	mov	r0, r8
 8007ae8:	46ac      	mov	ip, r5
 8007aea:	46f2      	mov	sl, lr
 8007aec:	f850 2b04 	ldr.w	r2, [r0], #4
 8007af0:	b293      	uxth	r3, r2
 8007af2:	fb06 e303 	mla	r3, r6, r3, lr
 8007af6:	0c12      	lsrs	r2, r2, #16
 8007af8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	fb06 e202 	mla	r2, r6, r2, lr
 8007b02:	ebaa 0303 	sub.w	r3, sl, r3
 8007b06:	f8dc a000 	ldr.w	sl, [ip]
 8007b0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b0e:	fa1f fa8a 	uxth.w	sl, sl
 8007b12:	4453      	add	r3, sl
 8007b14:	f8dc a000 	ldr.w	sl, [ip]
 8007b18:	b292      	uxth	r2, r2
 8007b1a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007b1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b28:	4581      	cmp	r9, r0
 8007b2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b2e:	f84c 3b04 	str.w	r3, [ip], #4
 8007b32:	d2db      	bcs.n	8007aec <quorem+0x44>
 8007b34:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b38:	b92b      	cbnz	r3, 8007b46 <quorem+0x9e>
 8007b3a:	9b01      	ldr	r3, [sp, #4]
 8007b3c:	3b04      	subs	r3, #4
 8007b3e:	429d      	cmp	r5, r3
 8007b40:	461a      	mov	r2, r3
 8007b42:	d32f      	bcc.n	8007ba4 <quorem+0xfc>
 8007b44:	613c      	str	r4, [r7, #16]
 8007b46:	4638      	mov	r0, r7
 8007b48:	f001 fc86 	bl	8009458 <__mcmp>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	db25      	blt.n	8007b9c <quorem+0xf4>
 8007b50:	4628      	mov	r0, r5
 8007b52:	f04f 0c00 	mov.w	ip, #0
 8007b56:	3601      	adds	r6, #1
 8007b58:	f858 1b04 	ldr.w	r1, [r8], #4
 8007b5c:	f8d0 e000 	ldr.w	lr, [r0]
 8007b60:	b28b      	uxth	r3, r1
 8007b62:	ebac 0303 	sub.w	r3, ip, r3
 8007b66:	fa1f f28e 	uxth.w	r2, lr
 8007b6a:	4413      	add	r3, r2
 8007b6c:	0c0a      	lsrs	r2, r1, #16
 8007b6e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b7c:	45c1      	cmp	r9, r8
 8007b7e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b82:	f840 3b04 	str.w	r3, [r0], #4
 8007b86:	d2e7      	bcs.n	8007b58 <quorem+0xb0>
 8007b88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b90:	b922      	cbnz	r2, 8007b9c <quorem+0xf4>
 8007b92:	3b04      	subs	r3, #4
 8007b94:	429d      	cmp	r5, r3
 8007b96:	461a      	mov	r2, r3
 8007b98:	d30a      	bcc.n	8007bb0 <quorem+0x108>
 8007b9a:	613c      	str	r4, [r7, #16]
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	b003      	add	sp, #12
 8007ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba4:	6812      	ldr	r2, [r2, #0]
 8007ba6:	3b04      	subs	r3, #4
 8007ba8:	2a00      	cmp	r2, #0
 8007baa:	d1cb      	bne.n	8007b44 <quorem+0x9c>
 8007bac:	3c01      	subs	r4, #1
 8007bae:	e7c6      	b.n	8007b3e <quorem+0x96>
 8007bb0:	6812      	ldr	r2, [r2, #0]
 8007bb2:	3b04      	subs	r3, #4
 8007bb4:	2a00      	cmp	r2, #0
 8007bb6:	d1f0      	bne.n	8007b9a <quorem+0xf2>
 8007bb8:	3c01      	subs	r4, #1
 8007bba:	e7eb      	b.n	8007b94 <quorem+0xec>
 8007bbc:	2000      	movs	r0, #0
 8007bbe:	e7ee      	b.n	8007b9e <quorem+0xf6>

08007bc0 <_dtoa_r>:
 8007bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc4:	4616      	mov	r6, r2
 8007bc6:	461f      	mov	r7, r3
 8007bc8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007bca:	b099      	sub	sp, #100	; 0x64
 8007bcc:	4605      	mov	r5, r0
 8007bce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007bd2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007bd6:	b974      	cbnz	r4, 8007bf6 <_dtoa_r+0x36>
 8007bd8:	2010      	movs	r0, #16
 8007bda:	f7fe f931 	bl	8005e40 <malloc>
 8007bde:	4602      	mov	r2, r0
 8007be0:	6268      	str	r0, [r5, #36]	; 0x24
 8007be2:	b920      	cbnz	r0, 8007bee <_dtoa_r+0x2e>
 8007be4:	21ea      	movs	r1, #234	; 0xea
 8007be6:	4ba8      	ldr	r3, [pc, #672]	; (8007e88 <_dtoa_r+0x2c8>)
 8007be8:	48a8      	ldr	r0, [pc, #672]	; (8007e8c <_dtoa_r+0x2cc>)
 8007bea:	f001 ffbd 	bl	8009b68 <__assert_func>
 8007bee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bf2:	6004      	str	r4, [r0, #0]
 8007bf4:	60c4      	str	r4, [r0, #12]
 8007bf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007bf8:	6819      	ldr	r1, [r3, #0]
 8007bfa:	b151      	cbz	r1, 8007c12 <_dtoa_r+0x52>
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	2301      	movs	r3, #1
 8007c00:	4093      	lsls	r3, r2
 8007c02:	604a      	str	r2, [r1, #4]
 8007c04:	608b      	str	r3, [r1, #8]
 8007c06:	4628      	mov	r0, r5
 8007c08:	f001 f99e 	bl	8008f48 <_Bfree>
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	1e3b      	subs	r3, r7, #0
 8007c14:	bfaf      	iteee	ge
 8007c16:	2300      	movge	r3, #0
 8007c18:	2201      	movlt	r2, #1
 8007c1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007c1e:	9305      	strlt	r3, [sp, #20]
 8007c20:	bfa8      	it	ge
 8007c22:	f8c8 3000 	strge.w	r3, [r8]
 8007c26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007c2a:	4b99      	ldr	r3, [pc, #612]	; (8007e90 <_dtoa_r+0x2d0>)
 8007c2c:	bfb8      	it	lt
 8007c2e:	f8c8 2000 	strlt.w	r2, [r8]
 8007c32:	ea33 0309 	bics.w	r3, r3, r9
 8007c36:	d119      	bne.n	8007c6c <_dtoa_r+0xac>
 8007c38:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007c3e:	6013      	str	r3, [r2, #0]
 8007c40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c44:	4333      	orrs	r3, r6
 8007c46:	f000 857f 	beq.w	8008748 <_dtoa_r+0xb88>
 8007c4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c4c:	b953      	cbnz	r3, 8007c64 <_dtoa_r+0xa4>
 8007c4e:	4b91      	ldr	r3, [pc, #580]	; (8007e94 <_dtoa_r+0x2d4>)
 8007c50:	e022      	b.n	8007c98 <_dtoa_r+0xd8>
 8007c52:	4b91      	ldr	r3, [pc, #580]	; (8007e98 <_dtoa_r+0x2d8>)
 8007c54:	9303      	str	r3, [sp, #12]
 8007c56:	3308      	adds	r3, #8
 8007c58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007c5a:	6013      	str	r3, [r2, #0]
 8007c5c:	9803      	ldr	r0, [sp, #12]
 8007c5e:	b019      	add	sp, #100	; 0x64
 8007c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c64:	4b8b      	ldr	r3, [pc, #556]	; (8007e94 <_dtoa_r+0x2d4>)
 8007c66:	9303      	str	r3, [sp, #12]
 8007c68:	3303      	adds	r3, #3
 8007c6a:	e7f5      	b.n	8007c58 <_dtoa_r+0x98>
 8007c6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007c70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007c74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c78:	2200      	movs	r2, #0
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	f7f8 fe94 	bl	80009a8 <__aeabi_dcmpeq>
 8007c80:	4680      	mov	r8, r0
 8007c82:	b158      	cbz	r0, 8007c9c <_dtoa_r+0xdc>
 8007c84:	2301      	movs	r3, #1
 8007c86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007c88:	6013      	str	r3, [r2, #0]
 8007c8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 8558 	beq.w	8008742 <_dtoa_r+0xb82>
 8007c92:	4882      	ldr	r0, [pc, #520]	; (8007e9c <_dtoa_r+0x2dc>)
 8007c94:	6018      	str	r0, [r3, #0]
 8007c96:	1e43      	subs	r3, r0, #1
 8007c98:	9303      	str	r3, [sp, #12]
 8007c9a:	e7df      	b.n	8007c5c <_dtoa_r+0x9c>
 8007c9c:	ab16      	add	r3, sp, #88	; 0x58
 8007c9e:	9301      	str	r3, [sp, #4]
 8007ca0:	ab17      	add	r3, sp, #92	; 0x5c
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007caa:	f001 fcf7 	bl	800969c <__d2b>
 8007cae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007cb2:	4683      	mov	fp, r0
 8007cb4:	2c00      	cmp	r4, #0
 8007cb6:	d07f      	beq.n	8007db8 <_dtoa_r+0x1f8>
 8007cb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cbe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007cc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cc6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007cca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007cce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	4b72      	ldr	r3, [pc, #456]	; (8007ea0 <_dtoa_r+0x2e0>)
 8007cd6:	f7f8 fa47 	bl	8000168 <__aeabi_dsub>
 8007cda:	a365      	add	r3, pc, #404	; (adr r3, 8007e70 <_dtoa_r+0x2b0>)
 8007cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce0:	f7f8 fbfa 	bl	80004d8 <__aeabi_dmul>
 8007ce4:	a364      	add	r3, pc, #400	; (adr r3, 8007e78 <_dtoa_r+0x2b8>)
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	f7f8 fa3f 	bl	800016c <__adddf3>
 8007cee:	4606      	mov	r6, r0
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	460f      	mov	r7, r1
 8007cf4:	f7f8 fb86 	bl	8000404 <__aeabi_i2d>
 8007cf8:	a361      	add	r3, pc, #388	; (adr r3, 8007e80 <_dtoa_r+0x2c0>)
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	f7f8 fbeb 	bl	80004d8 <__aeabi_dmul>
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	4630      	mov	r0, r6
 8007d08:	4639      	mov	r1, r7
 8007d0a:	f7f8 fa2f 	bl	800016c <__adddf3>
 8007d0e:	4606      	mov	r6, r0
 8007d10:	460f      	mov	r7, r1
 8007d12:	f7f8 fe91 	bl	8000a38 <__aeabi_d2iz>
 8007d16:	2200      	movs	r2, #0
 8007d18:	4682      	mov	sl, r0
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	4639      	mov	r1, r7
 8007d20:	f7f8 fe4c 	bl	80009bc <__aeabi_dcmplt>
 8007d24:	b148      	cbz	r0, 8007d3a <_dtoa_r+0x17a>
 8007d26:	4650      	mov	r0, sl
 8007d28:	f7f8 fb6c 	bl	8000404 <__aeabi_i2d>
 8007d2c:	4632      	mov	r2, r6
 8007d2e:	463b      	mov	r3, r7
 8007d30:	f7f8 fe3a 	bl	80009a8 <__aeabi_dcmpeq>
 8007d34:	b908      	cbnz	r0, 8007d3a <_dtoa_r+0x17a>
 8007d36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d3a:	f1ba 0f16 	cmp.w	sl, #22
 8007d3e:	d858      	bhi.n	8007df2 <_dtoa_r+0x232>
 8007d40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d44:	4b57      	ldr	r3, [pc, #348]	; (8007ea4 <_dtoa_r+0x2e4>)
 8007d46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4e:	f7f8 fe35 	bl	80009bc <__aeabi_dcmplt>
 8007d52:	2800      	cmp	r0, #0
 8007d54:	d04f      	beq.n	8007df6 <_dtoa_r+0x236>
 8007d56:	2300      	movs	r3, #0
 8007d58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007d60:	1b1c      	subs	r4, r3, r4
 8007d62:	1e63      	subs	r3, r4, #1
 8007d64:	9309      	str	r3, [sp, #36]	; 0x24
 8007d66:	bf49      	itett	mi
 8007d68:	f1c4 0301 	rsbmi	r3, r4, #1
 8007d6c:	2300      	movpl	r3, #0
 8007d6e:	9306      	strmi	r3, [sp, #24]
 8007d70:	2300      	movmi	r3, #0
 8007d72:	bf54      	ite	pl
 8007d74:	9306      	strpl	r3, [sp, #24]
 8007d76:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007d78:	f1ba 0f00 	cmp.w	sl, #0
 8007d7c:	db3d      	blt.n	8007dfa <_dtoa_r+0x23a>
 8007d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d80:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007d84:	4453      	add	r3, sl
 8007d86:	9309      	str	r3, [sp, #36]	; 0x24
 8007d88:	2300      	movs	r3, #0
 8007d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d8e:	2b09      	cmp	r3, #9
 8007d90:	f200 808c 	bhi.w	8007eac <_dtoa_r+0x2ec>
 8007d94:	2b05      	cmp	r3, #5
 8007d96:	bfc4      	itt	gt
 8007d98:	3b04      	subgt	r3, #4
 8007d9a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007d9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d9e:	bfc8      	it	gt
 8007da0:	2400      	movgt	r4, #0
 8007da2:	f1a3 0302 	sub.w	r3, r3, #2
 8007da6:	bfd8      	it	le
 8007da8:	2401      	movle	r4, #1
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	f200 808a 	bhi.w	8007ec4 <_dtoa_r+0x304>
 8007db0:	e8df f003 	tbb	[pc, r3]
 8007db4:	5b4d4f2d 	.word	0x5b4d4f2d
 8007db8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007dbc:	441c      	add	r4, r3
 8007dbe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007dc2:	2b20      	cmp	r3, #32
 8007dc4:	bfc3      	ittte	gt
 8007dc6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007dca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007dce:	fa09 f303 	lslgt.w	r3, r9, r3
 8007dd2:	f1c3 0320 	rsble	r3, r3, #32
 8007dd6:	bfc6      	itte	gt
 8007dd8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ddc:	4318      	orrgt	r0, r3
 8007dde:	fa06 f003 	lslle.w	r0, r6, r3
 8007de2:	f7f8 faff 	bl	80003e4 <__aeabi_ui2d>
 8007de6:	2301      	movs	r3, #1
 8007de8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007dec:	3c01      	subs	r4, #1
 8007dee:	9313      	str	r3, [sp, #76]	; 0x4c
 8007df0:	e76f      	b.n	8007cd2 <_dtoa_r+0x112>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e7b2      	b.n	8007d5c <_dtoa_r+0x19c>
 8007df6:	900f      	str	r0, [sp, #60]	; 0x3c
 8007df8:	e7b1      	b.n	8007d5e <_dtoa_r+0x19e>
 8007dfa:	9b06      	ldr	r3, [sp, #24]
 8007dfc:	eba3 030a 	sub.w	r3, r3, sl
 8007e00:	9306      	str	r3, [sp, #24]
 8007e02:	f1ca 0300 	rsb	r3, sl, #0
 8007e06:	930a      	str	r3, [sp, #40]	; 0x28
 8007e08:	2300      	movs	r3, #0
 8007e0a:	930e      	str	r3, [sp, #56]	; 0x38
 8007e0c:	e7be      	b.n	8007d8c <_dtoa_r+0x1cc>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	dc58      	bgt.n	8007eca <_dtoa_r+0x30a>
 8007e18:	f04f 0901 	mov.w	r9, #1
 8007e1c:	464b      	mov	r3, r9
 8007e1e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007e22:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007e26:	2200      	movs	r2, #0
 8007e28:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007e2a:	6042      	str	r2, [r0, #4]
 8007e2c:	2204      	movs	r2, #4
 8007e2e:	f102 0614 	add.w	r6, r2, #20
 8007e32:	429e      	cmp	r6, r3
 8007e34:	6841      	ldr	r1, [r0, #4]
 8007e36:	d94e      	bls.n	8007ed6 <_dtoa_r+0x316>
 8007e38:	4628      	mov	r0, r5
 8007e3a:	f001 f845 	bl	8008ec8 <_Balloc>
 8007e3e:	9003      	str	r0, [sp, #12]
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d14c      	bne.n	8007ede <_dtoa_r+0x31e>
 8007e44:	4602      	mov	r2, r0
 8007e46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007e4a:	4b17      	ldr	r3, [pc, #92]	; (8007ea8 <_dtoa_r+0x2e8>)
 8007e4c:	e6cc      	b.n	8007be8 <_dtoa_r+0x28>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e7de      	b.n	8007e10 <_dtoa_r+0x250>
 8007e52:	2300      	movs	r3, #0
 8007e54:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e58:	eb0a 0903 	add.w	r9, sl, r3
 8007e5c:	f109 0301 	add.w	r3, r9, #1
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	9308      	str	r3, [sp, #32]
 8007e64:	bfb8      	it	lt
 8007e66:	2301      	movlt	r3, #1
 8007e68:	e7dd      	b.n	8007e26 <_dtoa_r+0x266>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e7f2      	b.n	8007e54 <_dtoa_r+0x294>
 8007e6e:	bf00      	nop
 8007e70:	636f4361 	.word	0x636f4361
 8007e74:	3fd287a7 	.word	0x3fd287a7
 8007e78:	8b60c8b3 	.word	0x8b60c8b3
 8007e7c:	3fc68a28 	.word	0x3fc68a28
 8007e80:	509f79fb 	.word	0x509f79fb
 8007e84:	3fd34413 	.word	0x3fd34413
 8007e88:	0800aa9e 	.word	0x0800aa9e
 8007e8c:	0800aab5 	.word	0x0800aab5
 8007e90:	7ff00000 	.word	0x7ff00000
 8007e94:	0800aa9a 	.word	0x0800aa9a
 8007e98:	0800aa91 	.word	0x0800aa91
 8007e9c:	0800a915 	.word	0x0800a915
 8007ea0:	3ff80000 	.word	0x3ff80000
 8007ea4:	0800ac20 	.word	0x0800ac20
 8007ea8:	0800ab10 	.word	0x0800ab10
 8007eac:	2401      	movs	r4, #1
 8007eae:	2300      	movs	r3, #0
 8007eb0:	940b      	str	r4, [sp, #44]	; 0x2c
 8007eb2:	9322      	str	r3, [sp, #136]	; 0x88
 8007eb4:	f04f 39ff 	mov.w	r9, #4294967295
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2312      	movs	r3, #18
 8007ebc:	f8cd 9020 	str.w	r9, [sp, #32]
 8007ec0:	9223      	str	r2, [sp, #140]	; 0x8c
 8007ec2:	e7b0      	b.n	8007e26 <_dtoa_r+0x266>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ec8:	e7f4      	b.n	8007eb4 <_dtoa_r+0x2f4>
 8007eca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007ece:	464b      	mov	r3, r9
 8007ed0:	f8cd 9020 	str.w	r9, [sp, #32]
 8007ed4:	e7a7      	b.n	8007e26 <_dtoa_r+0x266>
 8007ed6:	3101      	adds	r1, #1
 8007ed8:	6041      	str	r1, [r0, #4]
 8007eda:	0052      	lsls	r2, r2, #1
 8007edc:	e7a7      	b.n	8007e2e <_dtoa_r+0x26e>
 8007ede:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ee0:	9a03      	ldr	r2, [sp, #12]
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	9b08      	ldr	r3, [sp, #32]
 8007ee6:	2b0e      	cmp	r3, #14
 8007ee8:	f200 80a8 	bhi.w	800803c <_dtoa_r+0x47c>
 8007eec:	2c00      	cmp	r4, #0
 8007eee:	f000 80a5 	beq.w	800803c <_dtoa_r+0x47c>
 8007ef2:	f1ba 0f00 	cmp.w	sl, #0
 8007ef6:	dd34      	ble.n	8007f62 <_dtoa_r+0x3a2>
 8007ef8:	4a9a      	ldr	r2, [pc, #616]	; (8008164 <_dtoa_r+0x5a4>)
 8007efa:	f00a 030f 	and.w	r3, sl, #15
 8007efe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f02:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007f06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007f0e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007f12:	d016      	beq.n	8007f42 <_dtoa_r+0x382>
 8007f14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f18:	4b93      	ldr	r3, [pc, #588]	; (8008168 <_dtoa_r+0x5a8>)
 8007f1a:	2703      	movs	r7, #3
 8007f1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f20:	f7f8 fc04 	bl	800072c <__aeabi_ddiv>
 8007f24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f28:	f004 040f 	and.w	r4, r4, #15
 8007f2c:	4e8e      	ldr	r6, [pc, #568]	; (8008168 <_dtoa_r+0x5a8>)
 8007f2e:	b954      	cbnz	r4, 8007f46 <_dtoa_r+0x386>
 8007f30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f38:	f7f8 fbf8 	bl	800072c <__aeabi_ddiv>
 8007f3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f40:	e029      	b.n	8007f96 <_dtoa_r+0x3d6>
 8007f42:	2702      	movs	r7, #2
 8007f44:	e7f2      	b.n	8007f2c <_dtoa_r+0x36c>
 8007f46:	07e1      	lsls	r1, r4, #31
 8007f48:	d508      	bpl.n	8007f5c <_dtoa_r+0x39c>
 8007f4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f52:	f7f8 fac1 	bl	80004d8 <__aeabi_dmul>
 8007f56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f5a:	3701      	adds	r7, #1
 8007f5c:	1064      	asrs	r4, r4, #1
 8007f5e:	3608      	adds	r6, #8
 8007f60:	e7e5      	b.n	8007f2e <_dtoa_r+0x36e>
 8007f62:	f000 80a5 	beq.w	80080b0 <_dtoa_r+0x4f0>
 8007f66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f6a:	f1ca 0400 	rsb	r4, sl, #0
 8007f6e:	4b7d      	ldr	r3, [pc, #500]	; (8008164 <_dtoa_r+0x5a4>)
 8007f70:	f004 020f 	and.w	r2, r4, #15
 8007f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7c:	f7f8 faac 	bl	80004d8 <__aeabi_dmul>
 8007f80:	2702      	movs	r7, #2
 8007f82:	2300      	movs	r3, #0
 8007f84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f88:	4e77      	ldr	r6, [pc, #476]	; (8008168 <_dtoa_r+0x5a8>)
 8007f8a:	1124      	asrs	r4, r4, #4
 8007f8c:	2c00      	cmp	r4, #0
 8007f8e:	f040 8084 	bne.w	800809a <_dtoa_r+0x4da>
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1d2      	bne.n	8007f3c <_dtoa_r+0x37c>
 8007f96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 808b 	beq.w	80080b4 <_dtoa_r+0x4f4>
 8007f9e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007fa2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007fa6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007faa:	2200      	movs	r2, #0
 8007fac:	4b6f      	ldr	r3, [pc, #444]	; (800816c <_dtoa_r+0x5ac>)
 8007fae:	f7f8 fd05 	bl	80009bc <__aeabi_dcmplt>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d07e      	beq.n	80080b4 <_dtoa_r+0x4f4>
 8007fb6:	9b08      	ldr	r3, [sp, #32]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d07b      	beq.n	80080b4 <_dtoa_r+0x4f4>
 8007fbc:	f1b9 0f00 	cmp.w	r9, #0
 8007fc0:	dd38      	ble.n	8008034 <_dtoa_r+0x474>
 8007fc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	4b69      	ldr	r3, [pc, #420]	; (8008170 <_dtoa_r+0x5b0>)
 8007fca:	f7f8 fa85 	bl	80004d8 <__aeabi_dmul>
 8007fce:	464c      	mov	r4, r9
 8007fd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fd4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007fd8:	3701      	adds	r7, #1
 8007fda:	4638      	mov	r0, r7
 8007fdc:	f7f8 fa12 	bl	8000404 <__aeabi_i2d>
 8007fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fe4:	f7f8 fa78 	bl	80004d8 <__aeabi_dmul>
 8007fe8:	2200      	movs	r2, #0
 8007fea:	4b62      	ldr	r3, [pc, #392]	; (8008174 <_dtoa_r+0x5b4>)
 8007fec:	f7f8 f8be 	bl	800016c <__adddf3>
 8007ff0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007ff4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ff8:	9611      	str	r6, [sp, #68]	; 0x44
 8007ffa:	2c00      	cmp	r4, #0
 8007ffc:	d15d      	bne.n	80080ba <_dtoa_r+0x4fa>
 8007ffe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008002:	2200      	movs	r2, #0
 8008004:	4b5c      	ldr	r3, [pc, #368]	; (8008178 <_dtoa_r+0x5b8>)
 8008006:	f7f8 f8af 	bl	8000168 <__aeabi_dsub>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008012:	4633      	mov	r3, r6
 8008014:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008016:	f7f8 fcef 	bl	80009f8 <__aeabi_dcmpgt>
 800801a:	2800      	cmp	r0, #0
 800801c:	f040 829c 	bne.w	8008558 <_dtoa_r+0x998>
 8008020:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008024:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008026:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800802a:	f7f8 fcc7 	bl	80009bc <__aeabi_dcmplt>
 800802e:	2800      	cmp	r0, #0
 8008030:	f040 8290 	bne.w	8008554 <_dtoa_r+0x994>
 8008034:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008038:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800803c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800803e:	2b00      	cmp	r3, #0
 8008040:	f2c0 8152 	blt.w	80082e8 <_dtoa_r+0x728>
 8008044:	f1ba 0f0e 	cmp.w	sl, #14
 8008048:	f300 814e 	bgt.w	80082e8 <_dtoa_r+0x728>
 800804c:	4b45      	ldr	r3, [pc, #276]	; (8008164 <_dtoa_r+0x5a4>)
 800804e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008052:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008056:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800805a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800805c:	2b00      	cmp	r3, #0
 800805e:	f280 80db 	bge.w	8008218 <_dtoa_r+0x658>
 8008062:	9b08      	ldr	r3, [sp, #32]
 8008064:	2b00      	cmp	r3, #0
 8008066:	f300 80d7 	bgt.w	8008218 <_dtoa_r+0x658>
 800806a:	f040 8272 	bne.w	8008552 <_dtoa_r+0x992>
 800806e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008072:	2200      	movs	r2, #0
 8008074:	4b40      	ldr	r3, [pc, #256]	; (8008178 <_dtoa_r+0x5b8>)
 8008076:	f7f8 fa2f 	bl	80004d8 <__aeabi_dmul>
 800807a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800807e:	f7f8 fcb1 	bl	80009e4 <__aeabi_dcmpge>
 8008082:	9c08      	ldr	r4, [sp, #32]
 8008084:	4626      	mov	r6, r4
 8008086:	2800      	cmp	r0, #0
 8008088:	f040 8248 	bne.w	800851c <_dtoa_r+0x95c>
 800808c:	2331      	movs	r3, #49	; 0x31
 800808e:	9f03      	ldr	r7, [sp, #12]
 8008090:	f10a 0a01 	add.w	sl, sl, #1
 8008094:	f807 3b01 	strb.w	r3, [r7], #1
 8008098:	e244      	b.n	8008524 <_dtoa_r+0x964>
 800809a:	07e2      	lsls	r2, r4, #31
 800809c:	d505      	bpl.n	80080aa <_dtoa_r+0x4ea>
 800809e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080a2:	f7f8 fa19 	bl	80004d8 <__aeabi_dmul>
 80080a6:	2301      	movs	r3, #1
 80080a8:	3701      	adds	r7, #1
 80080aa:	1064      	asrs	r4, r4, #1
 80080ac:	3608      	adds	r6, #8
 80080ae:	e76d      	b.n	8007f8c <_dtoa_r+0x3cc>
 80080b0:	2702      	movs	r7, #2
 80080b2:	e770      	b.n	8007f96 <_dtoa_r+0x3d6>
 80080b4:	46d0      	mov	r8, sl
 80080b6:	9c08      	ldr	r4, [sp, #32]
 80080b8:	e78f      	b.n	8007fda <_dtoa_r+0x41a>
 80080ba:	9903      	ldr	r1, [sp, #12]
 80080bc:	4b29      	ldr	r3, [pc, #164]	; (8008164 <_dtoa_r+0x5a4>)
 80080be:	4421      	add	r1, r4
 80080c0:	9112      	str	r1, [sp, #72]	; 0x48
 80080c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80080c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80080cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080d0:	2900      	cmp	r1, #0
 80080d2:	d055      	beq.n	8008180 <_dtoa_r+0x5c0>
 80080d4:	2000      	movs	r0, #0
 80080d6:	4929      	ldr	r1, [pc, #164]	; (800817c <_dtoa_r+0x5bc>)
 80080d8:	f7f8 fb28 	bl	800072c <__aeabi_ddiv>
 80080dc:	463b      	mov	r3, r7
 80080de:	4632      	mov	r2, r6
 80080e0:	f7f8 f842 	bl	8000168 <__aeabi_dsub>
 80080e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80080e8:	9f03      	ldr	r7, [sp, #12]
 80080ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080ee:	f7f8 fca3 	bl	8000a38 <__aeabi_d2iz>
 80080f2:	4604      	mov	r4, r0
 80080f4:	f7f8 f986 	bl	8000404 <__aeabi_i2d>
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008100:	f7f8 f832 	bl	8000168 <__aeabi_dsub>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	3430      	adds	r4, #48	; 0x30
 800810a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800810e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008112:	f807 4b01 	strb.w	r4, [r7], #1
 8008116:	f7f8 fc51 	bl	80009bc <__aeabi_dcmplt>
 800811a:	2800      	cmp	r0, #0
 800811c:	d174      	bne.n	8008208 <_dtoa_r+0x648>
 800811e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008122:	2000      	movs	r0, #0
 8008124:	4911      	ldr	r1, [pc, #68]	; (800816c <_dtoa_r+0x5ac>)
 8008126:	f7f8 f81f 	bl	8000168 <__aeabi_dsub>
 800812a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800812e:	f7f8 fc45 	bl	80009bc <__aeabi_dcmplt>
 8008132:	2800      	cmp	r0, #0
 8008134:	f040 80b7 	bne.w	80082a6 <_dtoa_r+0x6e6>
 8008138:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800813a:	429f      	cmp	r7, r3
 800813c:	f43f af7a 	beq.w	8008034 <_dtoa_r+0x474>
 8008140:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008144:	2200      	movs	r2, #0
 8008146:	4b0a      	ldr	r3, [pc, #40]	; (8008170 <_dtoa_r+0x5b0>)
 8008148:	f7f8 f9c6 	bl	80004d8 <__aeabi_dmul>
 800814c:	2200      	movs	r2, #0
 800814e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008152:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008156:	4b06      	ldr	r3, [pc, #24]	; (8008170 <_dtoa_r+0x5b0>)
 8008158:	f7f8 f9be 	bl	80004d8 <__aeabi_dmul>
 800815c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008160:	e7c3      	b.n	80080ea <_dtoa_r+0x52a>
 8008162:	bf00      	nop
 8008164:	0800ac20 	.word	0x0800ac20
 8008168:	0800abf8 	.word	0x0800abf8
 800816c:	3ff00000 	.word	0x3ff00000
 8008170:	40240000 	.word	0x40240000
 8008174:	401c0000 	.word	0x401c0000
 8008178:	40140000 	.word	0x40140000
 800817c:	3fe00000 	.word	0x3fe00000
 8008180:	4630      	mov	r0, r6
 8008182:	4639      	mov	r1, r7
 8008184:	f7f8 f9a8 	bl	80004d8 <__aeabi_dmul>
 8008188:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800818a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800818e:	9c03      	ldr	r4, [sp, #12]
 8008190:	9314      	str	r3, [sp, #80]	; 0x50
 8008192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008196:	f7f8 fc4f 	bl	8000a38 <__aeabi_d2iz>
 800819a:	9015      	str	r0, [sp, #84]	; 0x54
 800819c:	f7f8 f932 	bl	8000404 <__aeabi_i2d>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081a8:	f7f7 ffde 	bl	8000168 <__aeabi_dsub>
 80081ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081ae:	4606      	mov	r6, r0
 80081b0:	3330      	adds	r3, #48	; 0x30
 80081b2:	f804 3b01 	strb.w	r3, [r4], #1
 80081b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081b8:	460f      	mov	r7, r1
 80081ba:	429c      	cmp	r4, r3
 80081bc:	f04f 0200 	mov.w	r2, #0
 80081c0:	d124      	bne.n	800820c <_dtoa_r+0x64c>
 80081c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081c6:	4bb0      	ldr	r3, [pc, #704]	; (8008488 <_dtoa_r+0x8c8>)
 80081c8:	f7f7 ffd0 	bl	800016c <__adddf3>
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	4630      	mov	r0, r6
 80081d2:	4639      	mov	r1, r7
 80081d4:	f7f8 fc10 	bl	80009f8 <__aeabi_dcmpgt>
 80081d8:	2800      	cmp	r0, #0
 80081da:	d163      	bne.n	80082a4 <_dtoa_r+0x6e4>
 80081dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081e0:	2000      	movs	r0, #0
 80081e2:	49a9      	ldr	r1, [pc, #676]	; (8008488 <_dtoa_r+0x8c8>)
 80081e4:	f7f7 ffc0 	bl	8000168 <__aeabi_dsub>
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	4630      	mov	r0, r6
 80081ee:	4639      	mov	r1, r7
 80081f0:	f7f8 fbe4 	bl	80009bc <__aeabi_dcmplt>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	f43f af1d 	beq.w	8008034 <_dtoa_r+0x474>
 80081fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80081fc:	1e7b      	subs	r3, r7, #1
 80081fe:	9314      	str	r3, [sp, #80]	; 0x50
 8008200:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008204:	2b30      	cmp	r3, #48	; 0x30
 8008206:	d0f8      	beq.n	80081fa <_dtoa_r+0x63a>
 8008208:	46c2      	mov	sl, r8
 800820a:	e03b      	b.n	8008284 <_dtoa_r+0x6c4>
 800820c:	4b9f      	ldr	r3, [pc, #636]	; (800848c <_dtoa_r+0x8cc>)
 800820e:	f7f8 f963 	bl	80004d8 <__aeabi_dmul>
 8008212:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008216:	e7bc      	b.n	8008192 <_dtoa_r+0x5d2>
 8008218:	9f03      	ldr	r7, [sp, #12]
 800821a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800821e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008222:	4640      	mov	r0, r8
 8008224:	4649      	mov	r1, r9
 8008226:	f7f8 fa81 	bl	800072c <__aeabi_ddiv>
 800822a:	f7f8 fc05 	bl	8000a38 <__aeabi_d2iz>
 800822e:	4604      	mov	r4, r0
 8008230:	f7f8 f8e8 	bl	8000404 <__aeabi_i2d>
 8008234:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008238:	f7f8 f94e 	bl	80004d8 <__aeabi_dmul>
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	4640      	mov	r0, r8
 8008242:	4649      	mov	r1, r9
 8008244:	f7f7 ff90 	bl	8000168 <__aeabi_dsub>
 8008248:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800824c:	f807 6b01 	strb.w	r6, [r7], #1
 8008250:	9e03      	ldr	r6, [sp, #12]
 8008252:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008256:	1bbe      	subs	r6, r7, r6
 8008258:	45b4      	cmp	ip, r6
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	d136      	bne.n	80082ce <_dtoa_r+0x70e>
 8008260:	f7f7 ff84 	bl	800016c <__adddf3>
 8008264:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008268:	4680      	mov	r8, r0
 800826a:	4689      	mov	r9, r1
 800826c:	f7f8 fbc4 	bl	80009f8 <__aeabi_dcmpgt>
 8008270:	bb58      	cbnz	r0, 80082ca <_dtoa_r+0x70a>
 8008272:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008276:	4640      	mov	r0, r8
 8008278:	4649      	mov	r1, r9
 800827a:	f7f8 fb95 	bl	80009a8 <__aeabi_dcmpeq>
 800827e:	b108      	cbz	r0, 8008284 <_dtoa_r+0x6c4>
 8008280:	07e1      	lsls	r1, r4, #31
 8008282:	d422      	bmi.n	80082ca <_dtoa_r+0x70a>
 8008284:	4628      	mov	r0, r5
 8008286:	4659      	mov	r1, fp
 8008288:	f000 fe5e 	bl	8008f48 <_Bfree>
 800828c:	2300      	movs	r3, #0
 800828e:	703b      	strb	r3, [r7, #0]
 8008290:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008292:	f10a 0001 	add.w	r0, sl, #1
 8008296:	6018      	str	r0, [r3, #0]
 8008298:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800829a:	2b00      	cmp	r3, #0
 800829c:	f43f acde 	beq.w	8007c5c <_dtoa_r+0x9c>
 80082a0:	601f      	str	r7, [r3, #0]
 80082a2:	e4db      	b.n	8007c5c <_dtoa_r+0x9c>
 80082a4:	4627      	mov	r7, r4
 80082a6:	463b      	mov	r3, r7
 80082a8:	461f      	mov	r7, r3
 80082aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082ae:	2a39      	cmp	r2, #57	; 0x39
 80082b0:	d107      	bne.n	80082c2 <_dtoa_r+0x702>
 80082b2:	9a03      	ldr	r2, [sp, #12]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d1f7      	bne.n	80082a8 <_dtoa_r+0x6e8>
 80082b8:	2230      	movs	r2, #48	; 0x30
 80082ba:	9903      	ldr	r1, [sp, #12]
 80082bc:	f108 0801 	add.w	r8, r8, #1
 80082c0:	700a      	strb	r2, [r1, #0]
 80082c2:	781a      	ldrb	r2, [r3, #0]
 80082c4:	3201      	adds	r2, #1
 80082c6:	701a      	strb	r2, [r3, #0]
 80082c8:	e79e      	b.n	8008208 <_dtoa_r+0x648>
 80082ca:	46d0      	mov	r8, sl
 80082cc:	e7eb      	b.n	80082a6 <_dtoa_r+0x6e6>
 80082ce:	2200      	movs	r2, #0
 80082d0:	4b6e      	ldr	r3, [pc, #440]	; (800848c <_dtoa_r+0x8cc>)
 80082d2:	f7f8 f901 	bl	80004d8 <__aeabi_dmul>
 80082d6:	2200      	movs	r2, #0
 80082d8:	2300      	movs	r3, #0
 80082da:	4680      	mov	r8, r0
 80082dc:	4689      	mov	r9, r1
 80082de:	f7f8 fb63 	bl	80009a8 <__aeabi_dcmpeq>
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d09b      	beq.n	800821e <_dtoa_r+0x65e>
 80082e6:	e7cd      	b.n	8008284 <_dtoa_r+0x6c4>
 80082e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082ea:	2a00      	cmp	r2, #0
 80082ec:	f000 80d0 	beq.w	8008490 <_dtoa_r+0x8d0>
 80082f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80082f2:	2a01      	cmp	r2, #1
 80082f4:	f300 80ae 	bgt.w	8008454 <_dtoa_r+0x894>
 80082f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80082fa:	2a00      	cmp	r2, #0
 80082fc:	f000 80a6 	beq.w	800844c <_dtoa_r+0x88c>
 8008300:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008304:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008306:	9f06      	ldr	r7, [sp, #24]
 8008308:	9a06      	ldr	r2, [sp, #24]
 800830a:	2101      	movs	r1, #1
 800830c:	441a      	add	r2, r3
 800830e:	9206      	str	r2, [sp, #24]
 8008310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008312:	4628      	mov	r0, r5
 8008314:	441a      	add	r2, r3
 8008316:	9209      	str	r2, [sp, #36]	; 0x24
 8008318:	f000 ff16 	bl	8009148 <__i2b>
 800831c:	4606      	mov	r6, r0
 800831e:	2f00      	cmp	r7, #0
 8008320:	dd0c      	ble.n	800833c <_dtoa_r+0x77c>
 8008322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008324:	2b00      	cmp	r3, #0
 8008326:	dd09      	ble.n	800833c <_dtoa_r+0x77c>
 8008328:	42bb      	cmp	r3, r7
 800832a:	bfa8      	it	ge
 800832c:	463b      	movge	r3, r7
 800832e:	9a06      	ldr	r2, [sp, #24]
 8008330:	1aff      	subs	r7, r7, r3
 8008332:	1ad2      	subs	r2, r2, r3
 8008334:	9206      	str	r2, [sp, #24]
 8008336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	9309      	str	r3, [sp, #36]	; 0x24
 800833c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800833e:	b1f3      	cbz	r3, 800837e <_dtoa_r+0x7be>
 8008340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 80a8 	beq.w	8008498 <_dtoa_r+0x8d8>
 8008348:	2c00      	cmp	r4, #0
 800834a:	dd10      	ble.n	800836e <_dtoa_r+0x7ae>
 800834c:	4631      	mov	r1, r6
 800834e:	4622      	mov	r2, r4
 8008350:	4628      	mov	r0, r5
 8008352:	f000 ffb7 	bl	80092c4 <__pow5mult>
 8008356:	465a      	mov	r2, fp
 8008358:	4601      	mov	r1, r0
 800835a:	4606      	mov	r6, r0
 800835c:	4628      	mov	r0, r5
 800835e:	f000 ff09 	bl	8009174 <__multiply>
 8008362:	4680      	mov	r8, r0
 8008364:	4659      	mov	r1, fp
 8008366:	4628      	mov	r0, r5
 8008368:	f000 fdee 	bl	8008f48 <_Bfree>
 800836c:	46c3      	mov	fp, r8
 800836e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008370:	1b1a      	subs	r2, r3, r4
 8008372:	d004      	beq.n	800837e <_dtoa_r+0x7be>
 8008374:	4659      	mov	r1, fp
 8008376:	4628      	mov	r0, r5
 8008378:	f000 ffa4 	bl	80092c4 <__pow5mult>
 800837c:	4683      	mov	fp, r0
 800837e:	2101      	movs	r1, #1
 8008380:	4628      	mov	r0, r5
 8008382:	f000 fee1 	bl	8009148 <__i2b>
 8008386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008388:	4604      	mov	r4, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	f340 8086 	ble.w	800849c <_dtoa_r+0x8dc>
 8008390:	461a      	mov	r2, r3
 8008392:	4601      	mov	r1, r0
 8008394:	4628      	mov	r0, r5
 8008396:	f000 ff95 	bl	80092c4 <__pow5mult>
 800839a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800839c:	4604      	mov	r4, r0
 800839e:	2b01      	cmp	r3, #1
 80083a0:	dd7f      	ble.n	80084a2 <_dtoa_r+0x8e2>
 80083a2:	f04f 0800 	mov.w	r8, #0
 80083a6:	6923      	ldr	r3, [r4, #16]
 80083a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083ac:	6918      	ldr	r0, [r3, #16]
 80083ae:	f000 fe7d 	bl	80090ac <__hi0bits>
 80083b2:	f1c0 0020 	rsb	r0, r0, #32
 80083b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b8:	4418      	add	r0, r3
 80083ba:	f010 001f 	ands.w	r0, r0, #31
 80083be:	f000 8092 	beq.w	80084e6 <_dtoa_r+0x926>
 80083c2:	f1c0 0320 	rsb	r3, r0, #32
 80083c6:	2b04      	cmp	r3, #4
 80083c8:	f340 808a 	ble.w	80084e0 <_dtoa_r+0x920>
 80083cc:	f1c0 001c 	rsb	r0, r0, #28
 80083d0:	9b06      	ldr	r3, [sp, #24]
 80083d2:	4407      	add	r7, r0
 80083d4:	4403      	add	r3, r0
 80083d6:	9306      	str	r3, [sp, #24]
 80083d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083da:	4403      	add	r3, r0
 80083dc:	9309      	str	r3, [sp, #36]	; 0x24
 80083de:	9b06      	ldr	r3, [sp, #24]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	dd05      	ble.n	80083f0 <_dtoa_r+0x830>
 80083e4:	4659      	mov	r1, fp
 80083e6:	461a      	mov	r2, r3
 80083e8:	4628      	mov	r0, r5
 80083ea:	f000 ffc5 	bl	8009378 <__lshift>
 80083ee:	4683      	mov	fp, r0
 80083f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	dd05      	ble.n	8008402 <_dtoa_r+0x842>
 80083f6:	4621      	mov	r1, r4
 80083f8:	461a      	mov	r2, r3
 80083fa:	4628      	mov	r0, r5
 80083fc:	f000 ffbc 	bl	8009378 <__lshift>
 8008400:	4604      	mov	r4, r0
 8008402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008404:	2b00      	cmp	r3, #0
 8008406:	d070      	beq.n	80084ea <_dtoa_r+0x92a>
 8008408:	4621      	mov	r1, r4
 800840a:	4658      	mov	r0, fp
 800840c:	f001 f824 	bl	8009458 <__mcmp>
 8008410:	2800      	cmp	r0, #0
 8008412:	da6a      	bge.n	80084ea <_dtoa_r+0x92a>
 8008414:	2300      	movs	r3, #0
 8008416:	4659      	mov	r1, fp
 8008418:	220a      	movs	r2, #10
 800841a:	4628      	mov	r0, r5
 800841c:	f000 fdb6 	bl	8008f8c <__multadd>
 8008420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008422:	4683      	mov	fp, r0
 8008424:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 8194 	beq.w	8008756 <_dtoa_r+0xb96>
 800842e:	4631      	mov	r1, r6
 8008430:	2300      	movs	r3, #0
 8008432:	220a      	movs	r2, #10
 8008434:	4628      	mov	r0, r5
 8008436:	f000 fda9 	bl	8008f8c <__multadd>
 800843a:	f1b9 0f00 	cmp.w	r9, #0
 800843e:	4606      	mov	r6, r0
 8008440:	f300 8093 	bgt.w	800856a <_dtoa_r+0x9aa>
 8008444:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008446:	2b02      	cmp	r3, #2
 8008448:	dc57      	bgt.n	80084fa <_dtoa_r+0x93a>
 800844a:	e08e      	b.n	800856a <_dtoa_r+0x9aa>
 800844c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800844e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008452:	e757      	b.n	8008304 <_dtoa_r+0x744>
 8008454:	9b08      	ldr	r3, [sp, #32]
 8008456:	1e5c      	subs	r4, r3, #1
 8008458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800845a:	42a3      	cmp	r3, r4
 800845c:	bfb7      	itett	lt
 800845e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008460:	1b1c      	subge	r4, r3, r4
 8008462:	1ae2      	sublt	r2, r4, r3
 8008464:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008466:	bfbe      	ittt	lt
 8008468:	940a      	strlt	r4, [sp, #40]	; 0x28
 800846a:	189b      	addlt	r3, r3, r2
 800846c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800846e:	9b08      	ldr	r3, [sp, #32]
 8008470:	bfb8      	it	lt
 8008472:	2400      	movlt	r4, #0
 8008474:	2b00      	cmp	r3, #0
 8008476:	bfbb      	ittet	lt
 8008478:	9b06      	ldrlt	r3, [sp, #24]
 800847a:	9a08      	ldrlt	r2, [sp, #32]
 800847c:	9f06      	ldrge	r7, [sp, #24]
 800847e:	1a9f      	sublt	r7, r3, r2
 8008480:	bfac      	ite	ge
 8008482:	9b08      	ldrge	r3, [sp, #32]
 8008484:	2300      	movlt	r3, #0
 8008486:	e73f      	b.n	8008308 <_dtoa_r+0x748>
 8008488:	3fe00000 	.word	0x3fe00000
 800848c:	40240000 	.word	0x40240000
 8008490:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008492:	9f06      	ldr	r7, [sp, #24]
 8008494:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008496:	e742      	b.n	800831e <_dtoa_r+0x75e>
 8008498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800849a:	e76b      	b.n	8008374 <_dtoa_r+0x7b4>
 800849c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800849e:	2b01      	cmp	r3, #1
 80084a0:	dc19      	bgt.n	80084d6 <_dtoa_r+0x916>
 80084a2:	9b04      	ldr	r3, [sp, #16]
 80084a4:	b9bb      	cbnz	r3, 80084d6 <_dtoa_r+0x916>
 80084a6:	9b05      	ldr	r3, [sp, #20]
 80084a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084ac:	b99b      	cbnz	r3, 80084d6 <_dtoa_r+0x916>
 80084ae:	9b05      	ldr	r3, [sp, #20]
 80084b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084b4:	0d1b      	lsrs	r3, r3, #20
 80084b6:	051b      	lsls	r3, r3, #20
 80084b8:	b183      	cbz	r3, 80084dc <_dtoa_r+0x91c>
 80084ba:	f04f 0801 	mov.w	r8, #1
 80084be:	9b06      	ldr	r3, [sp, #24]
 80084c0:	3301      	adds	r3, #1
 80084c2:	9306      	str	r3, [sp, #24]
 80084c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c6:	3301      	adds	r3, #1
 80084c8:	9309      	str	r3, [sp, #36]	; 0x24
 80084ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f47f af6a 	bne.w	80083a6 <_dtoa_r+0x7e6>
 80084d2:	2001      	movs	r0, #1
 80084d4:	e76f      	b.n	80083b6 <_dtoa_r+0x7f6>
 80084d6:	f04f 0800 	mov.w	r8, #0
 80084da:	e7f6      	b.n	80084ca <_dtoa_r+0x90a>
 80084dc:	4698      	mov	r8, r3
 80084de:	e7f4      	b.n	80084ca <_dtoa_r+0x90a>
 80084e0:	f43f af7d 	beq.w	80083de <_dtoa_r+0x81e>
 80084e4:	4618      	mov	r0, r3
 80084e6:	301c      	adds	r0, #28
 80084e8:	e772      	b.n	80083d0 <_dtoa_r+0x810>
 80084ea:	9b08      	ldr	r3, [sp, #32]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	dc36      	bgt.n	800855e <_dtoa_r+0x99e>
 80084f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	dd33      	ble.n	800855e <_dtoa_r+0x99e>
 80084f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084fa:	f1b9 0f00 	cmp.w	r9, #0
 80084fe:	d10d      	bne.n	800851c <_dtoa_r+0x95c>
 8008500:	4621      	mov	r1, r4
 8008502:	464b      	mov	r3, r9
 8008504:	2205      	movs	r2, #5
 8008506:	4628      	mov	r0, r5
 8008508:	f000 fd40 	bl	8008f8c <__multadd>
 800850c:	4601      	mov	r1, r0
 800850e:	4604      	mov	r4, r0
 8008510:	4658      	mov	r0, fp
 8008512:	f000 ffa1 	bl	8009458 <__mcmp>
 8008516:	2800      	cmp	r0, #0
 8008518:	f73f adb8 	bgt.w	800808c <_dtoa_r+0x4cc>
 800851c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800851e:	9f03      	ldr	r7, [sp, #12]
 8008520:	ea6f 0a03 	mvn.w	sl, r3
 8008524:	f04f 0800 	mov.w	r8, #0
 8008528:	4621      	mov	r1, r4
 800852a:	4628      	mov	r0, r5
 800852c:	f000 fd0c 	bl	8008f48 <_Bfree>
 8008530:	2e00      	cmp	r6, #0
 8008532:	f43f aea7 	beq.w	8008284 <_dtoa_r+0x6c4>
 8008536:	f1b8 0f00 	cmp.w	r8, #0
 800853a:	d005      	beq.n	8008548 <_dtoa_r+0x988>
 800853c:	45b0      	cmp	r8, r6
 800853e:	d003      	beq.n	8008548 <_dtoa_r+0x988>
 8008540:	4641      	mov	r1, r8
 8008542:	4628      	mov	r0, r5
 8008544:	f000 fd00 	bl	8008f48 <_Bfree>
 8008548:	4631      	mov	r1, r6
 800854a:	4628      	mov	r0, r5
 800854c:	f000 fcfc 	bl	8008f48 <_Bfree>
 8008550:	e698      	b.n	8008284 <_dtoa_r+0x6c4>
 8008552:	2400      	movs	r4, #0
 8008554:	4626      	mov	r6, r4
 8008556:	e7e1      	b.n	800851c <_dtoa_r+0x95c>
 8008558:	46c2      	mov	sl, r8
 800855a:	4626      	mov	r6, r4
 800855c:	e596      	b.n	800808c <_dtoa_r+0x4cc>
 800855e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008560:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 80fd 	beq.w	8008764 <_dtoa_r+0xba4>
 800856a:	2f00      	cmp	r7, #0
 800856c:	dd05      	ble.n	800857a <_dtoa_r+0x9ba>
 800856e:	4631      	mov	r1, r6
 8008570:	463a      	mov	r2, r7
 8008572:	4628      	mov	r0, r5
 8008574:	f000 ff00 	bl	8009378 <__lshift>
 8008578:	4606      	mov	r6, r0
 800857a:	f1b8 0f00 	cmp.w	r8, #0
 800857e:	d05c      	beq.n	800863a <_dtoa_r+0xa7a>
 8008580:	4628      	mov	r0, r5
 8008582:	6871      	ldr	r1, [r6, #4]
 8008584:	f000 fca0 	bl	8008ec8 <_Balloc>
 8008588:	4607      	mov	r7, r0
 800858a:	b928      	cbnz	r0, 8008598 <_dtoa_r+0x9d8>
 800858c:	4602      	mov	r2, r0
 800858e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008592:	4b7f      	ldr	r3, [pc, #508]	; (8008790 <_dtoa_r+0xbd0>)
 8008594:	f7ff bb28 	b.w	8007be8 <_dtoa_r+0x28>
 8008598:	6932      	ldr	r2, [r6, #16]
 800859a:	f106 010c 	add.w	r1, r6, #12
 800859e:	3202      	adds	r2, #2
 80085a0:	0092      	lsls	r2, r2, #2
 80085a2:	300c      	adds	r0, #12
 80085a4:	f7fd fc5c 	bl	8005e60 <memcpy>
 80085a8:	2201      	movs	r2, #1
 80085aa:	4639      	mov	r1, r7
 80085ac:	4628      	mov	r0, r5
 80085ae:	f000 fee3 	bl	8009378 <__lshift>
 80085b2:	46b0      	mov	r8, r6
 80085b4:	4606      	mov	r6, r0
 80085b6:	9b03      	ldr	r3, [sp, #12]
 80085b8:	3301      	adds	r3, #1
 80085ba:	9308      	str	r3, [sp, #32]
 80085bc:	9b03      	ldr	r3, [sp, #12]
 80085be:	444b      	add	r3, r9
 80085c0:	930a      	str	r3, [sp, #40]	; 0x28
 80085c2:	9b04      	ldr	r3, [sp, #16]
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	9309      	str	r3, [sp, #36]	; 0x24
 80085ca:	9b08      	ldr	r3, [sp, #32]
 80085cc:	4621      	mov	r1, r4
 80085ce:	3b01      	subs	r3, #1
 80085d0:	4658      	mov	r0, fp
 80085d2:	9304      	str	r3, [sp, #16]
 80085d4:	f7ff fa68 	bl	8007aa8 <quorem>
 80085d8:	4603      	mov	r3, r0
 80085da:	4641      	mov	r1, r8
 80085dc:	3330      	adds	r3, #48	; 0x30
 80085de:	9006      	str	r0, [sp, #24]
 80085e0:	4658      	mov	r0, fp
 80085e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80085e4:	f000 ff38 	bl	8009458 <__mcmp>
 80085e8:	4632      	mov	r2, r6
 80085ea:	4681      	mov	r9, r0
 80085ec:	4621      	mov	r1, r4
 80085ee:	4628      	mov	r0, r5
 80085f0:	f000 ff4e 	bl	8009490 <__mdiff>
 80085f4:	68c2      	ldr	r2, [r0, #12]
 80085f6:	4607      	mov	r7, r0
 80085f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085fa:	bb02      	cbnz	r2, 800863e <_dtoa_r+0xa7e>
 80085fc:	4601      	mov	r1, r0
 80085fe:	4658      	mov	r0, fp
 8008600:	f000 ff2a 	bl	8009458 <__mcmp>
 8008604:	4602      	mov	r2, r0
 8008606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008608:	4639      	mov	r1, r7
 800860a:	4628      	mov	r0, r5
 800860c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008610:	f000 fc9a 	bl	8008f48 <_Bfree>
 8008614:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008618:	9f08      	ldr	r7, [sp, #32]
 800861a:	ea43 0102 	orr.w	r1, r3, r2
 800861e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008620:	430b      	orrs	r3, r1
 8008622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008624:	d10d      	bne.n	8008642 <_dtoa_r+0xa82>
 8008626:	2b39      	cmp	r3, #57	; 0x39
 8008628:	d029      	beq.n	800867e <_dtoa_r+0xabe>
 800862a:	f1b9 0f00 	cmp.w	r9, #0
 800862e:	dd01      	ble.n	8008634 <_dtoa_r+0xa74>
 8008630:	9b06      	ldr	r3, [sp, #24]
 8008632:	3331      	adds	r3, #49	; 0x31
 8008634:	9a04      	ldr	r2, [sp, #16]
 8008636:	7013      	strb	r3, [r2, #0]
 8008638:	e776      	b.n	8008528 <_dtoa_r+0x968>
 800863a:	4630      	mov	r0, r6
 800863c:	e7b9      	b.n	80085b2 <_dtoa_r+0x9f2>
 800863e:	2201      	movs	r2, #1
 8008640:	e7e2      	b.n	8008608 <_dtoa_r+0xa48>
 8008642:	f1b9 0f00 	cmp.w	r9, #0
 8008646:	db06      	blt.n	8008656 <_dtoa_r+0xa96>
 8008648:	9922      	ldr	r1, [sp, #136]	; 0x88
 800864a:	ea41 0909 	orr.w	r9, r1, r9
 800864e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008650:	ea59 0101 	orrs.w	r1, r9, r1
 8008654:	d120      	bne.n	8008698 <_dtoa_r+0xad8>
 8008656:	2a00      	cmp	r2, #0
 8008658:	ddec      	ble.n	8008634 <_dtoa_r+0xa74>
 800865a:	4659      	mov	r1, fp
 800865c:	2201      	movs	r2, #1
 800865e:	4628      	mov	r0, r5
 8008660:	9308      	str	r3, [sp, #32]
 8008662:	f000 fe89 	bl	8009378 <__lshift>
 8008666:	4621      	mov	r1, r4
 8008668:	4683      	mov	fp, r0
 800866a:	f000 fef5 	bl	8009458 <__mcmp>
 800866e:	2800      	cmp	r0, #0
 8008670:	9b08      	ldr	r3, [sp, #32]
 8008672:	dc02      	bgt.n	800867a <_dtoa_r+0xaba>
 8008674:	d1de      	bne.n	8008634 <_dtoa_r+0xa74>
 8008676:	07da      	lsls	r2, r3, #31
 8008678:	d5dc      	bpl.n	8008634 <_dtoa_r+0xa74>
 800867a:	2b39      	cmp	r3, #57	; 0x39
 800867c:	d1d8      	bne.n	8008630 <_dtoa_r+0xa70>
 800867e:	2339      	movs	r3, #57	; 0x39
 8008680:	9a04      	ldr	r2, [sp, #16]
 8008682:	7013      	strb	r3, [r2, #0]
 8008684:	463b      	mov	r3, r7
 8008686:	461f      	mov	r7, r3
 8008688:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800868c:	3b01      	subs	r3, #1
 800868e:	2a39      	cmp	r2, #57	; 0x39
 8008690:	d050      	beq.n	8008734 <_dtoa_r+0xb74>
 8008692:	3201      	adds	r2, #1
 8008694:	701a      	strb	r2, [r3, #0]
 8008696:	e747      	b.n	8008528 <_dtoa_r+0x968>
 8008698:	2a00      	cmp	r2, #0
 800869a:	dd03      	ble.n	80086a4 <_dtoa_r+0xae4>
 800869c:	2b39      	cmp	r3, #57	; 0x39
 800869e:	d0ee      	beq.n	800867e <_dtoa_r+0xabe>
 80086a0:	3301      	adds	r3, #1
 80086a2:	e7c7      	b.n	8008634 <_dtoa_r+0xa74>
 80086a4:	9a08      	ldr	r2, [sp, #32]
 80086a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80086a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80086ac:	428a      	cmp	r2, r1
 80086ae:	d02a      	beq.n	8008706 <_dtoa_r+0xb46>
 80086b0:	4659      	mov	r1, fp
 80086b2:	2300      	movs	r3, #0
 80086b4:	220a      	movs	r2, #10
 80086b6:	4628      	mov	r0, r5
 80086b8:	f000 fc68 	bl	8008f8c <__multadd>
 80086bc:	45b0      	cmp	r8, r6
 80086be:	4683      	mov	fp, r0
 80086c0:	f04f 0300 	mov.w	r3, #0
 80086c4:	f04f 020a 	mov.w	r2, #10
 80086c8:	4641      	mov	r1, r8
 80086ca:	4628      	mov	r0, r5
 80086cc:	d107      	bne.n	80086de <_dtoa_r+0xb1e>
 80086ce:	f000 fc5d 	bl	8008f8c <__multadd>
 80086d2:	4680      	mov	r8, r0
 80086d4:	4606      	mov	r6, r0
 80086d6:	9b08      	ldr	r3, [sp, #32]
 80086d8:	3301      	adds	r3, #1
 80086da:	9308      	str	r3, [sp, #32]
 80086dc:	e775      	b.n	80085ca <_dtoa_r+0xa0a>
 80086de:	f000 fc55 	bl	8008f8c <__multadd>
 80086e2:	4631      	mov	r1, r6
 80086e4:	4680      	mov	r8, r0
 80086e6:	2300      	movs	r3, #0
 80086e8:	220a      	movs	r2, #10
 80086ea:	4628      	mov	r0, r5
 80086ec:	f000 fc4e 	bl	8008f8c <__multadd>
 80086f0:	4606      	mov	r6, r0
 80086f2:	e7f0      	b.n	80086d6 <_dtoa_r+0xb16>
 80086f4:	f1b9 0f00 	cmp.w	r9, #0
 80086f8:	bfcc      	ite	gt
 80086fa:	464f      	movgt	r7, r9
 80086fc:	2701      	movle	r7, #1
 80086fe:	f04f 0800 	mov.w	r8, #0
 8008702:	9a03      	ldr	r2, [sp, #12]
 8008704:	4417      	add	r7, r2
 8008706:	4659      	mov	r1, fp
 8008708:	2201      	movs	r2, #1
 800870a:	4628      	mov	r0, r5
 800870c:	9308      	str	r3, [sp, #32]
 800870e:	f000 fe33 	bl	8009378 <__lshift>
 8008712:	4621      	mov	r1, r4
 8008714:	4683      	mov	fp, r0
 8008716:	f000 fe9f 	bl	8009458 <__mcmp>
 800871a:	2800      	cmp	r0, #0
 800871c:	dcb2      	bgt.n	8008684 <_dtoa_r+0xac4>
 800871e:	d102      	bne.n	8008726 <_dtoa_r+0xb66>
 8008720:	9b08      	ldr	r3, [sp, #32]
 8008722:	07db      	lsls	r3, r3, #31
 8008724:	d4ae      	bmi.n	8008684 <_dtoa_r+0xac4>
 8008726:	463b      	mov	r3, r7
 8008728:	461f      	mov	r7, r3
 800872a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800872e:	2a30      	cmp	r2, #48	; 0x30
 8008730:	d0fa      	beq.n	8008728 <_dtoa_r+0xb68>
 8008732:	e6f9      	b.n	8008528 <_dtoa_r+0x968>
 8008734:	9a03      	ldr	r2, [sp, #12]
 8008736:	429a      	cmp	r2, r3
 8008738:	d1a5      	bne.n	8008686 <_dtoa_r+0xac6>
 800873a:	2331      	movs	r3, #49	; 0x31
 800873c:	f10a 0a01 	add.w	sl, sl, #1
 8008740:	e779      	b.n	8008636 <_dtoa_r+0xa76>
 8008742:	4b14      	ldr	r3, [pc, #80]	; (8008794 <_dtoa_r+0xbd4>)
 8008744:	f7ff baa8 	b.w	8007c98 <_dtoa_r+0xd8>
 8008748:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800874a:	2b00      	cmp	r3, #0
 800874c:	f47f aa81 	bne.w	8007c52 <_dtoa_r+0x92>
 8008750:	4b11      	ldr	r3, [pc, #68]	; (8008798 <_dtoa_r+0xbd8>)
 8008752:	f7ff baa1 	b.w	8007c98 <_dtoa_r+0xd8>
 8008756:	f1b9 0f00 	cmp.w	r9, #0
 800875a:	dc03      	bgt.n	8008764 <_dtoa_r+0xba4>
 800875c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800875e:	2b02      	cmp	r3, #2
 8008760:	f73f aecb 	bgt.w	80084fa <_dtoa_r+0x93a>
 8008764:	9f03      	ldr	r7, [sp, #12]
 8008766:	4621      	mov	r1, r4
 8008768:	4658      	mov	r0, fp
 800876a:	f7ff f99d 	bl	8007aa8 <quorem>
 800876e:	9a03      	ldr	r2, [sp, #12]
 8008770:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008774:	f807 3b01 	strb.w	r3, [r7], #1
 8008778:	1aba      	subs	r2, r7, r2
 800877a:	4591      	cmp	r9, r2
 800877c:	ddba      	ble.n	80086f4 <_dtoa_r+0xb34>
 800877e:	4659      	mov	r1, fp
 8008780:	2300      	movs	r3, #0
 8008782:	220a      	movs	r2, #10
 8008784:	4628      	mov	r0, r5
 8008786:	f000 fc01 	bl	8008f8c <__multadd>
 800878a:	4683      	mov	fp, r0
 800878c:	e7eb      	b.n	8008766 <_dtoa_r+0xba6>
 800878e:	bf00      	nop
 8008790:	0800ab10 	.word	0x0800ab10
 8008794:	0800a914 	.word	0x0800a914
 8008798:	0800aa91 	.word	0x0800aa91

0800879c <rshift>:
 800879c:	6903      	ldr	r3, [r0, #16]
 800879e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80087a6:	f100 0414 	add.w	r4, r0, #20
 80087aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80087ae:	dd46      	ble.n	800883e <rshift+0xa2>
 80087b0:	f011 011f 	ands.w	r1, r1, #31
 80087b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80087b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80087bc:	d10c      	bne.n	80087d8 <rshift+0x3c>
 80087be:	4629      	mov	r1, r5
 80087c0:	f100 0710 	add.w	r7, r0, #16
 80087c4:	42b1      	cmp	r1, r6
 80087c6:	d335      	bcc.n	8008834 <rshift+0x98>
 80087c8:	1a9b      	subs	r3, r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	1eea      	subs	r2, r5, #3
 80087ce:	4296      	cmp	r6, r2
 80087d0:	bf38      	it	cc
 80087d2:	2300      	movcc	r3, #0
 80087d4:	4423      	add	r3, r4
 80087d6:	e015      	b.n	8008804 <rshift+0x68>
 80087d8:	46a1      	mov	r9, r4
 80087da:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80087de:	f1c1 0820 	rsb	r8, r1, #32
 80087e2:	40cf      	lsrs	r7, r1
 80087e4:	f105 0e04 	add.w	lr, r5, #4
 80087e8:	4576      	cmp	r6, lr
 80087ea:	46f4      	mov	ip, lr
 80087ec:	d816      	bhi.n	800881c <rshift+0x80>
 80087ee:	1a9a      	subs	r2, r3, r2
 80087f0:	0092      	lsls	r2, r2, #2
 80087f2:	3a04      	subs	r2, #4
 80087f4:	3501      	adds	r5, #1
 80087f6:	42ae      	cmp	r6, r5
 80087f8:	bf38      	it	cc
 80087fa:	2200      	movcc	r2, #0
 80087fc:	18a3      	adds	r3, r4, r2
 80087fe:	50a7      	str	r7, [r4, r2]
 8008800:	b107      	cbz	r7, 8008804 <rshift+0x68>
 8008802:	3304      	adds	r3, #4
 8008804:	42a3      	cmp	r3, r4
 8008806:	eba3 0204 	sub.w	r2, r3, r4
 800880a:	bf08      	it	eq
 800880c:	2300      	moveq	r3, #0
 800880e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008812:	6102      	str	r2, [r0, #16]
 8008814:	bf08      	it	eq
 8008816:	6143      	streq	r3, [r0, #20]
 8008818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800881c:	f8dc c000 	ldr.w	ip, [ip]
 8008820:	fa0c fc08 	lsl.w	ip, ip, r8
 8008824:	ea4c 0707 	orr.w	r7, ip, r7
 8008828:	f849 7b04 	str.w	r7, [r9], #4
 800882c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008830:	40cf      	lsrs	r7, r1
 8008832:	e7d9      	b.n	80087e8 <rshift+0x4c>
 8008834:	f851 cb04 	ldr.w	ip, [r1], #4
 8008838:	f847 cf04 	str.w	ip, [r7, #4]!
 800883c:	e7c2      	b.n	80087c4 <rshift+0x28>
 800883e:	4623      	mov	r3, r4
 8008840:	e7e0      	b.n	8008804 <rshift+0x68>

08008842 <__hexdig_fun>:
 8008842:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008846:	2b09      	cmp	r3, #9
 8008848:	d802      	bhi.n	8008850 <__hexdig_fun+0xe>
 800884a:	3820      	subs	r0, #32
 800884c:	b2c0      	uxtb	r0, r0
 800884e:	4770      	bx	lr
 8008850:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008854:	2b05      	cmp	r3, #5
 8008856:	d801      	bhi.n	800885c <__hexdig_fun+0x1a>
 8008858:	3847      	subs	r0, #71	; 0x47
 800885a:	e7f7      	b.n	800884c <__hexdig_fun+0xa>
 800885c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008860:	2b05      	cmp	r3, #5
 8008862:	d801      	bhi.n	8008868 <__hexdig_fun+0x26>
 8008864:	3827      	subs	r0, #39	; 0x27
 8008866:	e7f1      	b.n	800884c <__hexdig_fun+0xa>
 8008868:	2000      	movs	r0, #0
 800886a:	4770      	bx	lr

0800886c <__gethex>:
 800886c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008870:	b08b      	sub	sp, #44	; 0x2c
 8008872:	9305      	str	r3, [sp, #20]
 8008874:	4bb2      	ldr	r3, [pc, #712]	; (8008b40 <__gethex+0x2d4>)
 8008876:	9002      	str	r0, [sp, #8]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	468b      	mov	fp, r1
 800887c:	4618      	mov	r0, r3
 800887e:	4690      	mov	r8, r2
 8008880:	9303      	str	r3, [sp, #12]
 8008882:	f7f7 fc65 	bl	8000150 <strlen>
 8008886:	4682      	mov	sl, r0
 8008888:	9b03      	ldr	r3, [sp, #12]
 800888a:	f8db 2000 	ldr.w	r2, [fp]
 800888e:	4403      	add	r3, r0
 8008890:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008894:	9306      	str	r3, [sp, #24]
 8008896:	1c93      	adds	r3, r2, #2
 8008898:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800889c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80088a0:	32fe      	adds	r2, #254	; 0xfe
 80088a2:	18d1      	adds	r1, r2, r3
 80088a4:	461f      	mov	r7, r3
 80088a6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80088aa:	9101      	str	r1, [sp, #4]
 80088ac:	2830      	cmp	r0, #48	; 0x30
 80088ae:	d0f8      	beq.n	80088a2 <__gethex+0x36>
 80088b0:	f7ff ffc7 	bl	8008842 <__hexdig_fun>
 80088b4:	4604      	mov	r4, r0
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d13a      	bne.n	8008930 <__gethex+0xc4>
 80088ba:	4652      	mov	r2, sl
 80088bc:	4638      	mov	r0, r7
 80088be:	9903      	ldr	r1, [sp, #12]
 80088c0:	f001 f930 	bl	8009b24 <strncmp>
 80088c4:	4605      	mov	r5, r0
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d166      	bne.n	8008998 <__gethex+0x12c>
 80088ca:	f817 000a 	ldrb.w	r0, [r7, sl]
 80088ce:	eb07 060a 	add.w	r6, r7, sl
 80088d2:	f7ff ffb6 	bl	8008842 <__hexdig_fun>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d060      	beq.n	800899c <__gethex+0x130>
 80088da:	4633      	mov	r3, r6
 80088dc:	7818      	ldrb	r0, [r3, #0]
 80088de:	461f      	mov	r7, r3
 80088e0:	2830      	cmp	r0, #48	; 0x30
 80088e2:	f103 0301 	add.w	r3, r3, #1
 80088e6:	d0f9      	beq.n	80088dc <__gethex+0x70>
 80088e8:	f7ff ffab 	bl	8008842 <__hexdig_fun>
 80088ec:	2301      	movs	r3, #1
 80088ee:	fab0 f480 	clz	r4, r0
 80088f2:	4635      	mov	r5, r6
 80088f4:	0964      	lsrs	r4, r4, #5
 80088f6:	9301      	str	r3, [sp, #4]
 80088f8:	463a      	mov	r2, r7
 80088fa:	4616      	mov	r6, r2
 80088fc:	7830      	ldrb	r0, [r6, #0]
 80088fe:	3201      	adds	r2, #1
 8008900:	f7ff ff9f 	bl	8008842 <__hexdig_fun>
 8008904:	2800      	cmp	r0, #0
 8008906:	d1f8      	bne.n	80088fa <__gethex+0x8e>
 8008908:	4652      	mov	r2, sl
 800890a:	4630      	mov	r0, r6
 800890c:	9903      	ldr	r1, [sp, #12]
 800890e:	f001 f909 	bl	8009b24 <strncmp>
 8008912:	b980      	cbnz	r0, 8008936 <__gethex+0xca>
 8008914:	b94d      	cbnz	r5, 800892a <__gethex+0xbe>
 8008916:	eb06 050a 	add.w	r5, r6, sl
 800891a:	462a      	mov	r2, r5
 800891c:	4616      	mov	r6, r2
 800891e:	7830      	ldrb	r0, [r6, #0]
 8008920:	3201      	adds	r2, #1
 8008922:	f7ff ff8e 	bl	8008842 <__hexdig_fun>
 8008926:	2800      	cmp	r0, #0
 8008928:	d1f8      	bne.n	800891c <__gethex+0xb0>
 800892a:	1bad      	subs	r5, r5, r6
 800892c:	00ad      	lsls	r5, r5, #2
 800892e:	e004      	b.n	800893a <__gethex+0xce>
 8008930:	2400      	movs	r4, #0
 8008932:	4625      	mov	r5, r4
 8008934:	e7e0      	b.n	80088f8 <__gethex+0x8c>
 8008936:	2d00      	cmp	r5, #0
 8008938:	d1f7      	bne.n	800892a <__gethex+0xbe>
 800893a:	7833      	ldrb	r3, [r6, #0]
 800893c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008940:	2b50      	cmp	r3, #80	; 0x50
 8008942:	d139      	bne.n	80089b8 <__gethex+0x14c>
 8008944:	7873      	ldrb	r3, [r6, #1]
 8008946:	2b2b      	cmp	r3, #43	; 0x2b
 8008948:	d02a      	beq.n	80089a0 <__gethex+0x134>
 800894a:	2b2d      	cmp	r3, #45	; 0x2d
 800894c:	d02c      	beq.n	80089a8 <__gethex+0x13c>
 800894e:	f04f 0900 	mov.w	r9, #0
 8008952:	1c71      	adds	r1, r6, #1
 8008954:	7808      	ldrb	r0, [r1, #0]
 8008956:	f7ff ff74 	bl	8008842 <__hexdig_fun>
 800895a:	1e43      	subs	r3, r0, #1
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b18      	cmp	r3, #24
 8008960:	d82a      	bhi.n	80089b8 <__gethex+0x14c>
 8008962:	f1a0 0210 	sub.w	r2, r0, #16
 8008966:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800896a:	f7ff ff6a 	bl	8008842 <__hexdig_fun>
 800896e:	1e43      	subs	r3, r0, #1
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b18      	cmp	r3, #24
 8008974:	d91b      	bls.n	80089ae <__gethex+0x142>
 8008976:	f1b9 0f00 	cmp.w	r9, #0
 800897a:	d000      	beq.n	800897e <__gethex+0x112>
 800897c:	4252      	negs	r2, r2
 800897e:	4415      	add	r5, r2
 8008980:	f8cb 1000 	str.w	r1, [fp]
 8008984:	b1d4      	cbz	r4, 80089bc <__gethex+0x150>
 8008986:	9b01      	ldr	r3, [sp, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	bf14      	ite	ne
 800898c:	2700      	movne	r7, #0
 800898e:	2706      	moveq	r7, #6
 8008990:	4638      	mov	r0, r7
 8008992:	b00b      	add	sp, #44	; 0x2c
 8008994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008998:	463e      	mov	r6, r7
 800899a:	4625      	mov	r5, r4
 800899c:	2401      	movs	r4, #1
 800899e:	e7cc      	b.n	800893a <__gethex+0xce>
 80089a0:	f04f 0900 	mov.w	r9, #0
 80089a4:	1cb1      	adds	r1, r6, #2
 80089a6:	e7d5      	b.n	8008954 <__gethex+0xe8>
 80089a8:	f04f 0901 	mov.w	r9, #1
 80089ac:	e7fa      	b.n	80089a4 <__gethex+0x138>
 80089ae:	230a      	movs	r3, #10
 80089b0:	fb03 0202 	mla	r2, r3, r2, r0
 80089b4:	3a10      	subs	r2, #16
 80089b6:	e7d6      	b.n	8008966 <__gethex+0xfa>
 80089b8:	4631      	mov	r1, r6
 80089ba:	e7e1      	b.n	8008980 <__gethex+0x114>
 80089bc:	4621      	mov	r1, r4
 80089be:	1bf3      	subs	r3, r6, r7
 80089c0:	3b01      	subs	r3, #1
 80089c2:	2b07      	cmp	r3, #7
 80089c4:	dc0a      	bgt.n	80089dc <__gethex+0x170>
 80089c6:	9802      	ldr	r0, [sp, #8]
 80089c8:	f000 fa7e 	bl	8008ec8 <_Balloc>
 80089cc:	4604      	mov	r4, r0
 80089ce:	b940      	cbnz	r0, 80089e2 <__gethex+0x176>
 80089d0:	4602      	mov	r2, r0
 80089d2:	21de      	movs	r1, #222	; 0xde
 80089d4:	4b5b      	ldr	r3, [pc, #364]	; (8008b44 <__gethex+0x2d8>)
 80089d6:	485c      	ldr	r0, [pc, #368]	; (8008b48 <__gethex+0x2dc>)
 80089d8:	f001 f8c6 	bl	8009b68 <__assert_func>
 80089dc:	3101      	adds	r1, #1
 80089de:	105b      	asrs	r3, r3, #1
 80089e0:	e7ef      	b.n	80089c2 <__gethex+0x156>
 80089e2:	f04f 0b00 	mov.w	fp, #0
 80089e6:	f100 0914 	add.w	r9, r0, #20
 80089ea:	f1ca 0301 	rsb	r3, sl, #1
 80089ee:	f8cd 9010 	str.w	r9, [sp, #16]
 80089f2:	f8cd b004 	str.w	fp, [sp, #4]
 80089f6:	9308      	str	r3, [sp, #32]
 80089f8:	42b7      	cmp	r7, r6
 80089fa:	d33f      	bcc.n	8008a7c <__gethex+0x210>
 80089fc:	9f04      	ldr	r7, [sp, #16]
 80089fe:	9b01      	ldr	r3, [sp, #4]
 8008a00:	f847 3b04 	str.w	r3, [r7], #4
 8008a04:	eba7 0709 	sub.w	r7, r7, r9
 8008a08:	10bf      	asrs	r7, r7, #2
 8008a0a:	6127      	str	r7, [r4, #16]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 fb4d 	bl	80090ac <__hi0bits>
 8008a12:	017f      	lsls	r7, r7, #5
 8008a14:	f8d8 6000 	ldr.w	r6, [r8]
 8008a18:	1a3f      	subs	r7, r7, r0
 8008a1a:	42b7      	cmp	r7, r6
 8008a1c:	dd62      	ble.n	8008ae4 <__gethex+0x278>
 8008a1e:	1bbf      	subs	r7, r7, r6
 8008a20:	4639      	mov	r1, r7
 8008a22:	4620      	mov	r0, r4
 8008a24:	f000 fee7 	bl	80097f6 <__any_on>
 8008a28:	4682      	mov	sl, r0
 8008a2a:	b1a8      	cbz	r0, 8008a58 <__gethex+0x1ec>
 8008a2c:	f04f 0a01 	mov.w	sl, #1
 8008a30:	1e7b      	subs	r3, r7, #1
 8008a32:	1159      	asrs	r1, r3, #5
 8008a34:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008a38:	f003 021f 	and.w	r2, r3, #31
 8008a3c:	fa0a f202 	lsl.w	r2, sl, r2
 8008a40:	420a      	tst	r2, r1
 8008a42:	d009      	beq.n	8008a58 <__gethex+0x1ec>
 8008a44:	4553      	cmp	r3, sl
 8008a46:	dd05      	ble.n	8008a54 <__gethex+0x1e8>
 8008a48:	4620      	mov	r0, r4
 8008a4a:	1eb9      	subs	r1, r7, #2
 8008a4c:	f000 fed3 	bl	80097f6 <__any_on>
 8008a50:	2800      	cmp	r0, #0
 8008a52:	d144      	bne.n	8008ade <__gethex+0x272>
 8008a54:	f04f 0a02 	mov.w	sl, #2
 8008a58:	4639      	mov	r1, r7
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f7ff fe9e 	bl	800879c <rshift>
 8008a60:	443d      	add	r5, r7
 8008a62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a66:	42ab      	cmp	r3, r5
 8008a68:	da4a      	bge.n	8008b00 <__gethex+0x294>
 8008a6a:	4621      	mov	r1, r4
 8008a6c:	9802      	ldr	r0, [sp, #8]
 8008a6e:	f000 fa6b 	bl	8008f48 <_Bfree>
 8008a72:	2300      	movs	r3, #0
 8008a74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008a76:	27a3      	movs	r7, #163	; 0xa3
 8008a78:	6013      	str	r3, [r2, #0]
 8008a7a:	e789      	b.n	8008990 <__gethex+0x124>
 8008a7c:	1e73      	subs	r3, r6, #1
 8008a7e:	9a06      	ldr	r2, [sp, #24]
 8008a80:	9307      	str	r3, [sp, #28]
 8008a82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d019      	beq.n	8008abe <__gethex+0x252>
 8008a8a:	f1bb 0f20 	cmp.w	fp, #32
 8008a8e:	d107      	bne.n	8008aa0 <__gethex+0x234>
 8008a90:	9b04      	ldr	r3, [sp, #16]
 8008a92:	9a01      	ldr	r2, [sp, #4]
 8008a94:	f843 2b04 	str.w	r2, [r3], #4
 8008a98:	9304      	str	r3, [sp, #16]
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	469b      	mov	fp, r3
 8008a9e:	9301      	str	r3, [sp, #4]
 8008aa0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008aa4:	f7ff fecd 	bl	8008842 <__hexdig_fun>
 8008aa8:	9b01      	ldr	r3, [sp, #4]
 8008aaa:	f000 000f 	and.w	r0, r0, #15
 8008aae:	fa00 f00b 	lsl.w	r0, r0, fp
 8008ab2:	4303      	orrs	r3, r0
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	f10b 0b04 	add.w	fp, fp, #4
 8008aba:	9b07      	ldr	r3, [sp, #28]
 8008abc:	e00d      	b.n	8008ada <__gethex+0x26e>
 8008abe:	9a08      	ldr	r2, [sp, #32]
 8008ac0:	1e73      	subs	r3, r6, #1
 8008ac2:	4413      	add	r3, r2
 8008ac4:	42bb      	cmp	r3, r7
 8008ac6:	d3e0      	bcc.n	8008a8a <__gethex+0x21e>
 8008ac8:	4618      	mov	r0, r3
 8008aca:	4652      	mov	r2, sl
 8008acc:	9903      	ldr	r1, [sp, #12]
 8008ace:	9309      	str	r3, [sp, #36]	; 0x24
 8008ad0:	f001 f828 	bl	8009b24 <strncmp>
 8008ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d1d7      	bne.n	8008a8a <__gethex+0x21e>
 8008ada:	461e      	mov	r6, r3
 8008adc:	e78c      	b.n	80089f8 <__gethex+0x18c>
 8008ade:	f04f 0a03 	mov.w	sl, #3
 8008ae2:	e7b9      	b.n	8008a58 <__gethex+0x1ec>
 8008ae4:	da09      	bge.n	8008afa <__gethex+0x28e>
 8008ae6:	1bf7      	subs	r7, r6, r7
 8008ae8:	4621      	mov	r1, r4
 8008aea:	463a      	mov	r2, r7
 8008aec:	9802      	ldr	r0, [sp, #8]
 8008aee:	f000 fc43 	bl	8009378 <__lshift>
 8008af2:	4604      	mov	r4, r0
 8008af4:	1bed      	subs	r5, r5, r7
 8008af6:	f100 0914 	add.w	r9, r0, #20
 8008afa:	f04f 0a00 	mov.w	sl, #0
 8008afe:	e7b0      	b.n	8008a62 <__gethex+0x1f6>
 8008b00:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008b04:	42a8      	cmp	r0, r5
 8008b06:	dd72      	ble.n	8008bee <__gethex+0x382>
 8008b08:	1b45      	subs	r5, r0, r5
 8008b0a:	42ae      	cmp	r6, r5
 8008b0c:	dc35      	bgt.n	8008b7a <__gethex+0x30e>
 8008b0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d029      	beq.n	8008b6a <__gethex+0x2fe>
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d02b      	beq.n	8008b72 <__gethex+0x306>
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d11c      	bne.n	8008b58 <__gethex+0x2ec>
 8008b1e:	42ae      	cmp	r6, r5
 8008b20:	d11a      	bne.n	8008b58 <__gethex+0x2ec>
 8008b22:	2e01      	cmp	r6, #1
 8008b24:	d112      	bne.n	8008b4c <__gethex+0x2e0>
 8008b26:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b2a:	9a05      	ldr	r2, [sp, #20]
 8008b2c:	2762      	movs	r7, #98	; 0x62
 8008b2e:	6013      	str	r3, [r2, #0]
 8008b30:	2301      	movs	r3, #1
 8008b32:	6123      	str	r3, [r4, #16]
 8008b34:	f8c9 3000 	str.w	r3, [r9]
 8008b38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b3a:	601c      	str	r4, [r3, #0]
 8008b3c:	e728      	b.n	8008990 <__gethex+0x124>
 8008b3e:	bf00      	nop
 8008b40:	0800ab88 	.word	0x0800ab88
 8008b44:	0800ab10 	.word	0x0800ab10
 8008b48:	0800ab21 	.word	0x0800ab21
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	1e71      	subs	r1, r6, #1
 8008b50:	f000 fe51 	bl	80097f6 <__any_on>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d1e6      	bne.n	8008b26 <__gethex+0x2ba>
 8008b58:	4621      	mov	r1, r4
 8008b5a:	9802      	ldr	r0, [sp, #8]
 8008b5c:	f000 f9f4 	bl	8008f48 <_Bfree>
 8008b60:	2300      	movs	r3, #0
 8008b62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b64:	2750      	movs	r7, #80	; 0x50
 8008b66:	6013      	str	r3, [r2, #0]
 8008b68:	e712      	b.n	8008990 <__gethex+0x124>
 8008b6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1f3      	bne.n	8008b58 <__gethex+0x2ec>
 8008b70:	e7d9      	b.n	8008b26 <__gethex+0x2ba>
 8008b72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1d6      	bne.n	8008b26 <__gethex+0x2ba>
 8008b78:	e7ee      	b.n	8008b58 <__gethex+0x2ec>
 8008b7a:	1e6f      	subs	r7, r5, #1
 8008b7c:	f1ba 0f00 	cmp.w	sl, #0
 8008b80:	d132      	bne.n	8008be8 <__gethex+0x37c>
 8008b82:	b127      	cbz	r7, 8008b8e <__gethex+0x322>
 8008b84:	4639      	mov	r1, r7
 8008b86:	4620      	mov	r0, r4
 8008b88:	f000 fe35 	bl	80097f6 <__any_on>
 8008b8c:	4682      	mov	sl, r0
 8008b8e:	2101      	movs	r1, #1
 8008b90:	117b      	asrs	r3, r7, #5
 8008b92:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008b96:	f007 071f 	and.w	r7, r7, #31
 8008b9a:	fa01 f707 	lsl.w	r7, r1, r7
 8008b9e:	421f      	tst	r7, r3
 8008ba0:	f04f 0702 	mov.w	r7, #2
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	bf18      	it	ne
 8008baa:	f04a 0a02 	orrne.w	sl, sl, #2
 8008bae:	1b76      	subs	r6, r6, r5
 8008bb0:	f7ff fdf4 	bl	800879c <rshift>
 8008bb4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008bb8:	f1ba 0f00 	cmp.w	sl, #0
 8008bbc:	d048      	beq.n	8008c50 <__gethex+0x3e4>
 8008bbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d015      	beq.n	8008bf2 <__gethex+0x386>
 8008bc6:	2b03      	cmp	r3, #3
 8008bc8:	d017      	beq.n	8008bfa <__gethex+0x38e>
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d109      	bne.n	8008be2 <__gethex+0x376>
 8008bce:	f01a 0f02 	tst.w	sl, #2
 8008bd2:	d006      	beq.n	8008be2 <__gethex+0x376>
 8008bd4:	f8d9 0000 	ldr.w	r0, [r9]
 8008bd8:	ea4a 0a00 	orr.w	sl, sl, r0
 8008bdc:	f01a 0f01 	tst.w	sl, #1
 8008be0:	d10e      	bne.n	8008c00 <__gethex+0x394>
 8008be2:	f047 0710 	orr.w	r7, r7, #16
 8008be6:	e033      	b.n	8008c50 <__gethex+0x3e4>
 8008be8:	f04f 0a01 	mov.w	sl, #1
 8008bec:	e7cf      	b.n	8008b8e <__gethex+0x322>
 8008bee:	2701      	movs	r7, #1
 8008bf0:	e7e2      	b.n	8008bb8 <__gethex+0x34c>
 8008bf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bf4:	f1c3 0301 	rsb	r3, r3, #1
 8008bf8:	9315      	str	r3, [sp, #84]	; 0x54
 8008bfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0f0      	beq.n	8008be2 <__gethex+0x376>
 8008c00:	f04f 0c00 	mov.w	ip, #0
 8008c04:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008c08:	f104 0314 	add.w	r3, r4, #20
 8008c0c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008c10:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008c14:	4618      	mov	r0, r3
 8008c16:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c1a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008c1e:	d01c      	beq.n	8008c5a <__gethex+0x3ee>
 8008c20:	3201      	adds	r2, #1
 8008c22:	6002      	str	r2, [r0, #0]
 8008c24:	2f02      	cmp	r7, #2
 8008c26:	f104 0314 	add.w	r3, r4, #20
 8008c2a:	d13d      	bne.n	8008ca8 <__gethex+0x43c>
 8008c2c:	f8d8 2000 	ldr.w	r2, [r8]
 8008c30:	3a01      	subs	r2, #1
 8008c32:	42b2      	cmp	r2, r6
 8008c34:	d10a      	bne.n	8008c4c <__gethex+0x3e0>
 8008c36:	2201      	movs	r2, #1
 8008c38:	1171      	asrs	r1, r6, #5
 8008c3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c3e:	f006 061f 	and.w	r6, r6, #31
 8008c42:	fa02 f606 	lsl.w	r6, r2, r6
 8008c46:	421e      	tst	r6, r3
 8008c48:	bf18      	it	ne
 8008c4a:	4617      	movne	r7, r2
 8008c4c:	f047 0720 	orr.w	r7, r7, #32
 8008c50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c52:	601c      	str	r4, [r3, #0]
 8008c54:	9b05      	ldr	r3, [sp, #20]
 8008c56:	601d      	str	r5, [r3, #0]
 8008c58:	e69a      	b.n	8008990 <__gethex+0x124>
 8008c5a:	4299      	cmp	r1, r3
 8008c5c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008c60:	d8d8      	bhi.n	8008c14 <__gethex+0x3a8>
 8008c62:	68a3      	ldr	r3, [r4, #8]
 8008c64:	459b      	cmp	fp, r3
 8008c66:	db17      	blt.n	8008c98 <__gethex+0x42c>
 8008c68:	6861      	ldr	r1, [r4, #4]
 8008c6a:	9802      	ldr	r0, [sp, #8]
 8008c6c:	3101      	adds	r1, #1
 8008c6e:	f000 f92b 	bl	8008ec8 <_Balloc>
 8008c72:	4681      	mov	r9, r0
 8008c74:	b918      	cbnz	r0, 8008c7e <__gethex+0x412>
 8008c76:	4602      	mov	r2, r0
 8008c78:	2184      	movs	r1, #132	; 0x84
 8008c7a:	4b19      	ldr	r3, [pc, #100]	; (8008ce0 <__gethex+0x474>)
 8008c7c:	e6ab      	b.n	80089d6 <__gethex+0x16a>
 8008c7e:	6922      	ldr	r2, [r4, #16]
 8008c80:	f104 010c 	add.w	r1, r4, #12
 8008c84:	3202      	adds	r2, #2
 8008c86:	0092      	lsls	r2, r2, #2
 8008c88:	300c      	adds	r0, #12
 8008c8a:	f7fd f8e9 	bl	8005e60 <memcpy>
 8008c8e:	4621      	mov	r1, r4
 8008c90:	9802      	ldr	r0, [sp, #8]
 8008c92:	f000 f959 	bl	8008f48 <_Bfree>
 8008c96:	464c      	mov	r4, r9
 8008c98:	6923      	ldr	r3, [r4, #16]
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	6122      	str	r2, [r4, #16]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ca4:	615a      	str	r2, [r3, #20]
 8008ca6:	e7bd      	b.n	8008c24 <__gethex+0x3b8>
 8008ca8:	6922      	ldr	r2, [r4, #16]
 8008caa:	455a      	cmp	r2, fp
 8008cac:	dd0b      	ble.n	8008cc6 <__gethex+0x45a>
 8008cae:	2101      	movs	r1, #1
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f7ff fd73 	bl	800879c <rshift>
 8008cb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008cba:	3501      	adds	r5, #1
 8008cbc:	42ab      	cmp	r3, r5
 8008cbe:	f6ff aed4 	blt.w	8008a6a <__gethex+0x1fe>
 8008cc2:	2701      	movs	r7, #1
 8008cc4:	e7c2      	b.n	8008c4c <__gethex+0x3e0>
 8008cc6:	f016 061f 	ands.w	r6, r6, #31
 8008cca:	d0fa      	beq.n	8008cc2 <__gethex+0x456>
 8008ccc:	4453      	add	r3, sl
 8008cce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008cd2:	f000 f9eb 	bl	80090ac <__hi0bits>
 8008cd6:	f1c6 0620 	rsb	r6, r6, #32
 8008cda:	42b0      	cmp	r0, r6
 8008cdc:	dbe7      	blt.n	8008cae <__gethex+0x442>
 8008cde:	e7f0      	b.n	8008cc2 <__gethex+0x456>
 8008ce0:	0800ab10 	.word	0x0800ab10

08008ce4 <L_shift>:
 8008ce4:	f1c2 0208 	rsb	r2, r2, #8
 8008ce8:	0092      	lsls	r2, r2, #2
 8008cea:	b570      	push	{r4, r5, r6, lr}
 8008cec:	f1c2 0620 	rsb	r6, r2, #32
 8008cf0:	6843      	ldr	r3, [r0, #4]
 8008cf2:	6804      	ldr	r4, [r0, #0]
 8008cf4:	fa03 f506 	lsl.w	r5, r3, r6
 8008cf8:	432c      	orrs	r4, r5
 8008cfa:	40d3      	lsrs	r3, r2
 8008cfc:	6004      	str	r4, [r0, #0]
 8008cfe:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d02:	4288      	cmp	r0, r1
 8008d04:	d3f4      	bcc.n	8008cf0 <L_shift+0xc>
 8008d06:	bd70      	pop	{r4, r5, r6, pc}

08008d08 <__match>:
 8008d08:	b530      	push	{r4, r5, lr}
 8008d0a:	6803      	ldr	r3, [r0, #0]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d12:	b914      	cbnz	r4, 8008d1a <__match+0x12>
 8008d14:	6003      	str	r3, [r0, #0]
 8008d16:	2001      	movs	r0, #1
 8008d18:	bd30      	pop	{r4, r5, pc}
 8008d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008d22:	2d19      	cmp	r5, #25
 8008d24:	bf98      	it	ls
 8008d26:	3220      	addls	r2, #32
 8008d28:	42a2      	cmp	r2, r4
 8008d2a:	d0f0      	beq.n	8008d0e <__match+0x6>
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	e7f3      	b.n	8008d18 <__match+0x10>

08008d30 <__hexnan>:
 8008d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	2500      	movs	r5, #0
 8008d36:	680b      	ldr	r3, [r1, #0]
 8008d38:	4682      	mov	sl, r0
 8008d3a:	115e      	asrs	r6, r3, #5
 8008d3c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008d40:	f013 031f 	ands.w	r3, r3, #31
 8008d44:	bf18      	it	ne
 8008d46:	3604      	addne	r6, #4
 8008d48:	1f37      	subs	r7, r6, #4
 8008d4a:	46b9      	mov	r9, r7
 8008d4c:	463c      	mov	r4, r7
 8008d4e:	46ab      	mov	fp, r5
 8008d50:	b087      	sub	sp, #28
 8008d52:	4690      	mov	r8, r2
 8008d54:	6802      	ldr	r2, [r0, #0]
 8008d56:	9301      	str	r3, [sp, #4]
 8008d58:	f846 5c04 	str.w	r5, [r6, #-4]
 8008d5c:	9502      	str	r5, [sp, #8]
 8008d5e:	7851      	ldrb	r1, [r2, #1]
 8008d60:	1c53      	adds	r3, r2, #1
 8008d62:	9303      	str	r3, [sp, #12]
 8008d64:	b341      	cbz	r1, 8008db8 <__hexnan+0x88>
 8008d66:	4608      	mov	r0, r1
 8008d68:	9205      	str	r2, [sp, #20]
 8008d6a:	9104      	str	r1, [sp, #16]
 8008d6c:	f7ff fd69 	bl	8008842 <__hexdig_fun>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d14f      	bne.n	8008e14 <__hexnan+0xe4>
 8008d74:	9904      	ldr	r1, [sp, #16]
 8008d76:	9a05      	ldr	r2, [sp, #20]
 8008d78:	2920      	cmp	r1, #32
 8008d7a:	d818      	bhi.n	8008dae <__hexnan+0x7e>
 8008d7c:	9b02      	ldr	r3, [sp, #8]
 8008d7e:	459b      	cmp	fp, r3
 8008d80:	dd13      	ble.n	8008daa <__hexnan+0x7a>
 8008d82:	454c      	cmp	r4, r9
 8008d84:	d206      	bcs.n	8008d94 <__hexnan+0x64>
 8008d86:	2d07      	cmp	r5, #7
 8008d88:	dc04      	bgt.n	8008d94 <__hexnan+0x64>
 8008d8a:	462a      	mov	r2, r5
 8008d8c:	4649      	mov	r1, r9
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f7ff ffa8 	bl	8008ce4 <L_shift>
 8008d94:	4544      	cmp	r4, r8
 8008d96:	d950      	bls.n	8008e3a <__hexnan+0x10a>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f1a4 0904 	sub.w	r9, r4, #4
 8008d9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008da2:	461d      	mov	r5, r3
 8008da4:	464c      	mov	r4, r9
 8008da6:	f8cd b008 	str.w	fp, [sp, #8]
 8008daa:	9a03      	ldr	r2, [sp, #12]
 8008dac:	e7d7      	b.n	8008d5e <__hexnan+0x2e>
 8008dae:	2929      	cmp	r1, #41	; 0x29
 8008db0:	d156      	bne.n	8008e60 <__hexnan+0x130>
 8008db2:	3202      	adds	r2, #2
 8008db4:	f8ca 2000 	str.w	r2, [sl]
 8008db8:	f1bb 0f00 	cmp.w	fp, #0
 8008dbc:	d050      	beq.n	8008e60 <__hexnan+0x130>
 8008dbe:	454c      	cmp	r4, r9
 8008dc0:	d206      	bcs.n	8008dd0 <__hexnan+0xa0>
 8008dc2:	2d07      	cmp	r5, #7
 8008dc4:	dc04      	bgt.n	8008dd0 <__hexnan+0xa0>
 8008dc6:	462a      	mov	r2, r5
 8008dc8:	4649      	mov	r1, r9
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f7ff ff8a 	bl	8008ce4 <L_shift>
 8008dd0:	4544      	cmp	r4, r8
 8008dd2:	d934      	bls.n	8008e3e <__hexnan+0x10e>
 8008dd4:	4623      	mov	r3, r4
 8008dd6:	f1a8 0204 	sub.w	r2, r8, #4
 8008dda:	f853 1b04 	ldr.w	r1, [r3], #4
 8008dde:	429f      	cmp	r7, r3
 8008de0:	f842 1f04 	str.w	r1, [r2, #4]!
 8008de4:	d2f9      	bcs.n	8008dda <__hexnan+0xaa>
 8008de6:	1b3b      	subs	r3, r7, r4
 8008de8:	f023 0303 	bic.w	r3, r3, #3
 8008dec:	3304      	adds	r3, #4
 8008dee:	3401      	adds	r4, #1
 8008df0:	3e03      	subs	r6, #3
 8008df2:	42b4      	cmp	r4, r6
 8008df4:	bf88      	it	hi
 8008df6:	2304      	movhi	r3, #4
 8008df8:	2200      	movs	r2, #0
 8008dfa:	4443      	add	r3, r8
 8008dfc:	f843 2b04 	str.w	r2, [r3], #4
 8008e00:	429f      	cmp	r7, r3
 8008e02:	d2fb      	bcs.n	8008dfc <__hexnan+0xcc>
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	b91b      	cbnz	r3, 8008e10 <__hexnan+0xe0>
 8008e08:	4547      	cmp	r7, r8
 8008e0a:	d127      	bne.n	8008e5c <__hexnan+0x12c>
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	603b      	str	r3, [r7, #0]
 8008e10:	2005      	movs	r0, #5
 8008e12:	e026      	b.n	8008e62 <__hexnan+0x132>
 8008e14:	3501      	adds	r5, #1
 8008e16:	2d08      	cmp	r5, #8
 8008e18:	f10b 0b01 	add.w	fp, fp, #1
 8008e1c:	dd06      	ble.n	8008e2c <__hexnan+0xfc>
 8008e1e:	4544      	cmp	r4, r8
 8008e20:	d9c3      	bls.n	8008daa <__hexnan+0x7a>
 8008e22:	2300      	movs	r3, #0
 8008e24:	2501      	movs	r5, #1
 8008e26:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e2a:	3c04      	subs	r4, #4
 8008e2c:	6822      	ldr	r2, [r4, #0]
 8008e2e:	f000 000f 	and.w	r0, r0, #15
 8008e32:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008e36:	6022      	str	r2, [r4, #0]
 8008e38:	e7b7      	b.n	8008daa <__hexnan+0x7a>
 8008e3a:	2508      	movs	r5, #8
 8008e3c:	e7b5      	b.n	8008daa <__hexnan+0x7a>
 8008e3e:	9b01      	ldr	r3, [sp, #4]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d0df      	beq.n	8008e04 <__hexnan+0xd4>
 8008e44:	f04f 32ff 	mov.w	r2, #4294967295
 8008e48:	f1c3 0320 	rsb	r3, r3, #32
 8008e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008e54:	401a      	ands	r2, r3
 8008e56:	f846 2c04 	str.w	r2, [r6, #-4]
 8008e5a:	e7d3      	b.n	8008e04 <__hexnan+0xd4>
 8008e5c:	3f04      	subs	r7, #4
 8008e5e:	e7d1      	b.n	8008e04 <__hexnan+0xd4>
 8008e60:	2004      	movs	r0, #4
 8008e62:	b007      	add	sp, #28
 8008e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e68 <_localeconv_r>:
 8008e68:	4800      	ldr	r0, [pc, #0]	; (8008e6c <_localeconv_r+0x4>)
 8008e6a:	4770      	bx	lr
 8008e6c:	2000016c 	.word	0x2000016c

08008e70 <__ascii_mbtowc>:
 8008e70:	b082      	sub	sp, #8
 8008e72:	b901      	cbnz	r1, 8008e76 <__ascii_mbtowc+0x6>
 8008e74:	a901      	add	r1, sp, #4
 8008e76:	b142      	cbz	r2, 8008e8a <__ascii_mbtowc+0x1a>
 8008e78:	b14b      	cbz	r3, 8008e8e <__ascii_mbtowc+0x1e>
 8008e7a:	7813      	ldrb	r3, [r2, #0]
 8008e7c:	600b      	str	r3, [r1, #0]
 8008e7e:	7812      	ldrb	r2, [r2, #0]
 8008e80:	1e10      	subs	r0, r2, #0
 8008e82:	bf18      	it	ne
 8008e84:	2001      	movne	r0, #1
 8008e86:	b002      	add	sp, #8
 8008e88:	4770      	bx	lr
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	e7fb      	b.n	8008e86 <__ascii_mbtowc+0x16>
 8008e8e:	f06f 0001 	mvn.w	r0, #1
 8008e92:	e7f8      	b.n	8008e86 <__ascii_mbtowc+0x16>

08008e94 <memchr>:
 8008e94:	4603      	mov	r3, r0
 8008e96:	b510      	push	{r4, lr}
 8008e98:	b2c9      	uxtb	r1, r1
 8008e9a:	4402      	add	r2, r0
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	d101      	bne.n	8008ea6 <memchr+0x12>
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	e003      	b.n	8008eae <memchr+0x1a>
 8008ea6:	7804      	ldrb	r4, [r0, #0]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	428c      	cmp	r4, r1
 8008eac:	d1f6      	bne.n	8008e9c <memchr+0x8>
 8008eae:	bd10      	pop	{r4, pc}

08008eb0 <__malloc_lock>:
 8008eb0:	4801      	ldr	r0, [pc, #4]	; (8008eb8 <__malloc_lock+0x8>)
 8008eb2:	f000 be8a 	b.w	8009bca <__retarget_lock_acquire_recursive>
 8008eb6:	bf00      	nop
 8008eb8:	200004e8 	.word	0x200004e8

08008ebc <__malloc_unlock>:
 8008ebc:	4801      	ldr	r0, [pc, #4]	; (8008ec4 <__malloc_unlock+0x8>)
 8008ebe:	f000 be85 	b.w	8009bcc <__retarget_lock_release_recursive>
 8008ec2:	bf00      	nop
 8008ec4:	200004e8 	.word	0x200004e8

08008ec8 <_Balloc>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ecc:	4604      	mov	r4, r0
 8008ece:	460d      	mov	r5, r1
 8008ed0:	b976      	cbnz	r6, 8008ef0 <_Balloc+0x28>
 8008ed2:	2010      	movs	r0, #16
 8008ed4:	f7fc ffb4 	bl	8005e40 <malloc>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	6260      	str	r0, [r4, #36]	; 0x24
 8008edc:	b920      	cbnz	r0, 8008ee8 <_Balloc+0x20>
 8008ede:	2166      	movs	r1, #102	; 0x66
 8008ee0:	4b17      	ldr	r3, [pc, #92]	; (8008f40 <_Balloc+0x78>)
 8008ee2:	4818      	ldr	r0, [pc, #96]	; (8008f44 <_Balloc+0x7c>)
 8008ee4:	f000 fe40 	bl	8009b68 <__assert_func>
 8008ee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008eec:	6006      	str	r6, [r0, #0]
 8008eee:	60c6      	str	r6, [r0, #12]
 8008ef0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ef2:	68f3      	ldr	r3, [r6, #12]
 8008ef4:	b183      	cbz	r3, 8008f18 <_Balloc+0x50>
 8008ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008efe:	b9b8      	cbnz	r0, 8008f30 <_Balloc+0x68>
 8008f00:	2101      	movs	r1, #1
 8008f02:	fa01 f605 	lsl.w	r6, r1, r5
 8008f06:	1d72      	adds	r2, r6, #5
 8008f08:	4620      	mov	r0, r4
 8008f0a:	0092      	lsls	r2, r2, #2
 8008f0c:	f000 fc94 	bl	8009838 <_calloc_r>
 8008f10:	b160      	cbz	r0, 8008f2c <_Balloc+0x64>
 8008f12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f16:	e00e      	b.n	8008f36 <_Balloc+0x6e>
 8008f18:	2221      	movs	r2, #33	; 0x21
 8008f1a:	2104      	movs	r1, #4
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f000 fc8b 	bl	8009838 <_calloc_r>
 8008f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f24:	60f0      	str	r0, [r6, #12]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1e4      	bne.n	8008ef6 <_Balloc+0x2e>
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	bd70      	pop	{r4, r5, r6, pc}
 8008f30:	6802      	ldr	r2, [r0, #0]
 8008f32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f36:	2300      	movs	r3, #0
 8008f38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f3c:	e7f7      	b.n	8008f2e <_Balloc+0x66>
 8008f3e:	bf00      	nop
 8008f40:	0800aa9e 	.word	0x0800aa9e
 8008f44:	0800ab9c 	.word	0x0800ab9c

08008f48 <_Bfree>:
 8008f48:	b570      	push	{r4, r5, r6, lr}
 8008f4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	460c      	mov	r4, r1
 8008f50:	b976      	cbnz	r6, 8008f70 <_Bfree+0x28>
 8008f52:	2010      	movs	r0, #16
 8008f54:	f7fc ff74 	bl	8005e40 <malloc>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	6268      	str	r0, [r5, #36]	; 0x24
 8008f5c:	b920      	cbnz	r0, 8008f68 <_Bfree+0x20>
 8008f5e:	218a      	movs	r1, #138	; 0x8a
 8008f60:	4b08      	ldr	r3, [pc, #32]	; (8008f84 <_Bfree+0x3c>)
 8008f62:	4809      	ldr	r0, [pc, #36]	; (8008f88 <_Bfree+0x40>)
 8008f64:	f000 fe00 	bl	8009b68 <__assert_func>
 8008f68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f6c:	6006      	str	r6, [r0, #0]
 8008f6e:	60c6      	str	r6, [r0, #12]
 8008f70:	b13c      	cbz	r4, 8008f82 <_Bfree+0x3a>
 8008f72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f74:	6862      	ldr	r2, [r4, #4]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f7c:	6021      	str	r1, [r4, #0]
 8008f7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f82:	bd70      	pop	{r4, r5, r6, pc}
 8008f84:	0800aa9e 	.word	0x0800aa9e
 8008f88:	0800ab9c 	.word	0x0800ab9c

08008f8c <__multadd>:
 8008f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f90:	4607      	mov	r7, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	461e      	mov	r6, r3
 8008f96:	2000      	movs	r0, #0
 8008f98:	690d      	ldr	r5, [r1, #16]
 8008f9a:	f101 0c14 	add.w	ip, r1, #20
 8008f9e:	f8dc 3000 	ldr.w	r3, [ip]
 8008fa2:	3001      	adds	r0, #1
 8008fa4:	b299      	uxth	r1, r3
 8008fa6:	fb02 6101 	mla	r1, r2, r1, r6
 8008faa:	0c1e      	lsrs	r6, r3, #16
 8008fac:	0c0b      	lsrs	r3, r1, #16
 8008fae:	fb02 3306 	mla	r3, r2, r6, r3
 8008fb2:	b289      	uxth	r1, r1
 8008fb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008fb8:	4285      	cmp	r5, r0
 8008fba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008fbe:	f84c 1b04 	str.w	r1, [ip], #4
 8008fc2:	dcec      	bgt.n	8008f9e <__multadd+0x12>
 8008fc4:	b30e      	cbz	r6, 800900a <__multadd+0x7e>
 8008fc6:	68a3      	ldr	r3, [r4, #8]
 8008fc8:	42ab      	cmp	r3, r5
 8008fca:	dc19      	bgt.n	8009000 <__multadd+0x74>
 8008fcc:	6861      	ldr	r1, [r4, #4]
 8008fce:	4638      	mov	r0, r7
 8008fd0:	3101      	adds	r1, #1
 8008fd2:	f7ff ff79 	bl	8008ec8 <_Balloc>
 8008fd6:	4680      	mov	r8, r0
 8008fd8:	b928      	cbnz	r0, 8008fe6 <__multadd+0x5a>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	21b5      	movs	r1, #181	; 0xb5
 8008fde:	4b0c      	ldr	r3, [pc, #48]	; (8009010 <__multadd+0x84>)
 8008fe0:	480c      	ldr	r0, [pc, #48]	; (8009014 <__multadd+0x88>)
 8008fe2:	f000 fdc1 	bl	8009b68 <__assert_func>
 8008fe6:	6922      	ldr	r2, [r4, #16]
 8008fe8:	f104 010c 	add.w	r1, r4, #12
 8008fec:	3202      	adds	r2, #2
 8008fee:	0092      	lsls	r2, r2, #2
 8008ff0:	300c      	adds	r0, #12
 8008ff2:	f7fc ff35 	bl	8005e60 <memcpy>
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	f7ff ffa5 	bl	8008f48 <_Bfree>
 8008ffe:	4644      	mov	r4, r8
 8009000:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009004:	3501      	adds	r5, #1
 8009006:	615e      	str	r6, [r3, #20]
 8009008:	6125      	str	r5, [r4, #16]
 800900a:	4620      	mov	r0, r4
 800900c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009010:	0800ab10 	.word	0x0800ab10
 8009014:	0800ab9c 	.word	0x0800ab9c

08009018 <__s2b>:
 8009018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800901c:	4615      	mov	r5, r2
 800901e:	2209      	movs	r2, #9
 8009020:	461f      	mov	r7, r3
 8009022:	3308      	adds	r3, #8
 8009024:	460c      	mov	r4, r1
 8009026:	fb93 f3f2 	sdiv	r3, r3, r2
 800902a:	4606      	mov	r6, r0
 800902c:	2201      	movs	r2, #1
 800902e:	2100      	movs	r1, #0
 8009030:	429a      	cmp	r2, r3
 8009032:	db09      	blt.n	8009048 <__s2b+0x30>
 8009034:	4630      	mov	r0, r6
 8009036:	f7ff ff47 	bl	8008ec8 <_Balloc>
 800903a:	b940      	cbnz	r0, 800904e <__s2b+0x36>
 800903c:	4602      	mov	r2, r0
 800903e:	21ce      	movs	r1, #206	; 0xce
 8009040:	4b18      	ldr	r3, [pc, #96]	; (80090a4 <__s2b+0x8c>)
 8009042:	4819      	ldr	r0, [pc, #100]	; (80090a8 <__s2b+0x90>)
 8009044:	f000 fd90 	bl	8009b68 <__assert_func>
 8009048:	0052      	lsls	r2, r2, #1
 800904a:	3101      	adds	r1, #1
 800904c:	e7f0      	b.n	8009030 <__s2b+0x18>
 800904e:	9b08      	ldr	r3, [sp, #32]
 8009050:	2d09      	cmp	r5, #9
 8009052:	6143      	str	r3, [r0, #20]
 8009054:	f04f 0301 	mov.w	r3, #1
 8009058:	6103      	str	r3, [r0, #16]
 800905a:	dd16      	ble.n	800908a <__s2b+0x72>
 800905c:	f104 0909 	add.w	r9, r4, #9
 8009060:	46c8      	mov	r8, r9
 8009062:	442c      	add	r4, r5
 8009064:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009068:	4601      	mov	r1, r0
 800906a:	220a      	movs	r2, #10
 800906c:	4630      	mov	r0, r6
 800906e:	3b30      	subs	r3, #48	; 0x30
 8009070:	f7ff ff8c 	bl	8008f8c <__multadd>
 8009074:	45a0      	cmp	r8, r4
 8009076:	d1f5      	bne.n	8009064 <__s2b+0x4c>
 8009078:	f1a5 0408 	sub.w	r4, r5, #8
 800907c:	444c      	add	r4, r9
 800907e:	1b2d      	subs	r5, r5, r4
 8009080:	1963      	adds	r3, r4, r5
 8009082:	42bb      	cmp	r3, r7
 8009084:	db04      	blt.n	8009090 <__s2b+0x78>
 8009086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800908a:	2509      	movs	r5, #9
 800908c:	340a      	adds	r4, #10
 800908e:	e7f6      	b.n	800907e <__s2b+0x66>
 8009090:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009094:	4601      	mov	r1, r0
 8009096:	220a      	movs	r2, #10
 8009098:	4630      	mov	r0, r6
 800909a:	3b30      	subs	r3, #48	; 0x30
 800909c:	f7ff ff76 	bl	8008f8c <__multadd>
 80090a0:	e7ee      	b.n	8009080 <__s2b+0x68>
 80090a2:	bf00      	nop
 80090a4:	0800ab10 	.word	0x0800ab10
 80090a8:	0800ab9c 	.word	0x0800ab9c

080090ac <__hi0bits>:
 80090ac:	0c02      	lsrs	r2, r0, #16
 80090ae:	0412      	lsls	r2, r2, #16
 80090b0:	4603      	mov	r3, r0
 80090b2:	b9ca      	cbnz	r2, 80090e8 <__hi0bits+0x3c>
 80090b4:	0403      	lsls	r3, r0, #16
 80090b6:	2010      	movs	r0, #16
 80090b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80090bc:	bf04      	itt	eq
 80090be:	021b      	lsleq	r3, r3, #8
 80090c0:	3008      	addeq	r0, #8
 80090c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80090c6:	bf04      	itt	eq
 80090c8:	011b      	lsleq	r3, r3, #4
 80090ca:	3004      	addeq	r0, #4
 80090cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80090d0:	bf04      	itt	eq
 80090d2:	009b      	lsleq	r3, r3, #2
 80090d4:	3002      	addeq	r0, #2
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	db05      	blt.n	80090e6 <__hi0bits+0x3a>
 80090da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80090de:	f100 0001 	add.w	r0, r0, #1
 80090e2:	bf08      	it	eq
 80090e4:	2020      	moveq	r0, #32
 80090e6:	4770      	bx	lr
 80090e8:	2000      	movs	r0, #0
 80090ea:	e7e5      	b.n	80090b8 <__hi0bits+0xc>

080090ec <__lo0bits>:
 80090ec:	6803      	ldr	r3, [r0, #0]
 80090ee:	4602      	mov	r2, r0
 80090f0:	f013 0007 	ands.w	r0, r3, #7
 80090f4:	d00b      	beq.n	800910e <__lo0bits+0x22>
 80090f6:	07d9      	lsls	r1, r3, #31
 80090f8:	d421      	bmi.n	800913e <__lo0bits+0x52>
 80090fa:	0798      	lsls	r0, r3, #30
 80090fc:	bf49      	itett	mi
 80090fe:	085b      	lsrmi	r3, r3, #1
 8009100:	089b      	lsrpl	r3, r3, #2
 8009102:	2001      	movmi	r0, #1
 8009104:	6013      	strmi	r3, [r2, #0]
 8009106:	bf5c      	itt	pl
 8009108:	2002      	movpl	r0, #2
 800910a:	6013      	strpl	r3, [r2, #0]
 800910c:	4770      	bx	lr
 800910e:	b299      	uxth	r1, r3
 8009110:	b909      	cbnz	r1, 8009116 <__lo0bits+0x2a>
 8009112:	2010      	movs	r0, #16
 8009114:	0c1b      	lsrs	r3, r3, #16
 8009116:	b2d9      	uxtb	r1, r3
 8009118:	b909      	cbnz	r1, 800911e <__lo0bits+0x32>
 800911a:	3008      	adds	r0, #8
 800911c:	0a1b      	lsrs	r3, r3, #8
 800911e:	0719      	lsls	r1, r3, #28
 8009120:	bf04      	itt	eq
 8009122:	091b      	lsreq	r3, r3, #4
 8009124:	3004      	addeq	r0, #4
 8009126:	0799      	lsls	r1, r3, #30
 8009128:	bf04      	itt	eq
 800912a:	089b      	lsreq	r3, r3, #2
 800912c:	3002      	addeq	r0, #2
 800912e:	07d9      	lsls	r1, r3, #31
 8009130:	d403      	bmi.n	800913a <__lo0bits+0x4e>
 8009132:	085b      	lsrs	r3, r3, #1
 8009134:	f100 0001 	add.w	r0, r0, #1
 8009138:	d003      	beq.n	8009142 <__lo0bits+0x56>
 800913a:	6013      	str	r3, [r2, #0]
 800913c:	4770      	bx	lr
 800913e:	2000      	movs	r0, #0
 8009140:	4770      	bx	lr
 8009142:	2020      	movs	r0, #32
 8009144:	4770      	bx	lr
	...

08009148 <__i2b>:
 8009148:	b510      	push	{r4, lr}
 800914a:	460c      	mov	r4, r1
 800914c:	2101      	movs	r1, #1
 800914e:	f7ff febb 	bl	8008ec8 <_Balloc>
 8009152:	4602      	mov	r2, r0
 8009154:	b928      	cbnz	r0, 8009162 <__i2b+0x1a>
 8009156:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800915a:	4b04      	ldr	r3, [pc, #16]	; (800916c <__i2b+0x24>)
 800915c:	4804      	ldr	r0, [pc, #16]	; (8009170 <__i2b+0x28>)
 800915e:	f000 fd03 	bl	8009b68 <__assert_func>
 8009162:	2301      	movs	r3, #1
 8009164:	6144      	str	r4, [r0, #20]
 8009166:	6103      	str	r3, [r0, #16]
 8009168:	bd10      	pop	{r4, pc}
 800916a:	bf00      	nop
 800916c:	0800ab10 	.word	0x0800ab10
 8009170:	0800ab9c 	.word	0x0800ab9c

08009174 <__multiply>:
 8009174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009178:	4691      	mov	r9, r2
 800917a:	690a      	ldr	r2, [r1, #16]
 800917c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009180:	460c      	mov	r4, r1
 8009182:	429a      	cmp	r2, r3
 8009184:	bfbe      	ittt	lt
 8009186:	460b      	movlt	r3, r1
 8009188:	464c      	movlt	r4, r9
 800918a:	4699      	movlt	r9, r3
 800918c:	6927      	ldr	r7, [r4, #16]
 800918e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009192:	68a3      	ldr	r3, [r4, #8]
 8009194:	6861      	ldr	r1, [r4, #4]
 8009196:	eb07 060a 	add.w	r6, r7, sl
 800919a:	42b3      	cmp	r3, r6
 800919c:	b085      	sub	sp, #20
 800919e:	bfb8      	it	lt
 80091a0:	3101      	addlt	r1, #1
 80091a2:	f7ff fe91 	bl	8008ec8 <_Balloc>
 80091a6:	b930      	cbnz	r0, 80091b6 <__multiply+0x42>
 80091a8:	4602      	mov	r2, r0
 80091aa:	f240 115d 	movw	r1, #349	; 0x15d
 80091ae:	4b43      	ldr	r3, [pc, #268]	; (80092bc <__multiply+0x148>)
 80091b0:	4843      	ldr	r0, [pc, #268]	; (80092c0 <__multiply+0x14c>)
 80091b2:	f000 fcd9 	bl	8009b68 <__assert_func>
 80091b6:	f100 0514 	add.w	r5, r0, #20
 80091ba:	462b      	mov	r3, r5
 80091bc:	2200      	movs	r2, #0
 80091be:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80091c2:	4543      	cmp	r3, r8
 80091c4:	d321      	bcc.n	800920a <__multiply+0x96>
 80091c6:	f104 0314 	add.w	r3, r4, #20
 80091ca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80091ce:	f109 0314 	add.w	r3, r9, #20
 80091d2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80091d6:	9202      	str	r2, [sp, #8]
 80091d8:	1b3a      	subs	r2, r7, r4
 80091da:	3a15      	subs	r2, #21
 80091dc:	f022 0203 	bic.w	r2, r2, #3
 80091e0:	3204      	adds	r2, #4
 80091e2:	f104 0115 	add.w	r1, r4, #21
 80091e6:	428f      	cmp	r7, r1
 80091e8:	bf38      	it	cc
 80091ea:	2204      	movcc	r2, #4
 80091ec:	9201      	str	r2, [sp, #4]
 80091ee:	9a02      	ldr	r2, [sp, #8]
 80091f0:	9303      	str	r3, [sp, #12]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d80c      	bhi.n	8009210 <__multiply+0x9c>
 80091f6:	2e00      	cmp	r6, #0
 80091f8:	dd03      	ble.n	8009202 <__multiply+0x8e>
 80091fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d059      	beq.n	80092b6 <__multiply+0x142>
 8009202:	6106      	str	r6, [r0, #16]
 8009204:	b005      	add	sp, #20
 8009206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800920a:	f843 2b04 	str.w	r2, [r3], #4
 800920e:	e7d8      	b.n	80091c2 <__multiply+0x4e>
 8009210:	f8b3 a000 	ldrh.w	sl, [r3]
 8009214:	f1ba 0f00 	cmp.w	sl, #0
 8009218:	d023      	beq.n	8009262 <__multiply+0xee>
 800921a:	46a9      	mov	r9, r5
 800921c:	f04f 0c00 	mov.w	ip, #0
 8009220:	f104 0e14 	add.w	lr, r4, #20
 8009224:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009228:	f8d9 1000 	ldr.w	r1, [r9]
 800922c:	fa1f fb82 	uxth.w	fp, r2
 8009230:	b289      	uxth	r1, r1
 8009232:	fb0a 110b 	mla	r1, sl, fp, r1
 8009236:	4461      	add	r1, ip
 8009238:	f8d9 c000 	ldr.w	ip, [r9]
 800923c:	0c12      	lsrs	r2, r2, #16
 800923e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009242:	fb0a c202 	mla	r2, sl, r2, ip
 8009246:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800924a:	b289      	uxth	r1, r1
 800924c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009250:	4577      	cmp	r7, lr
 8009252:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009256:	f849 1b04 	str.w	r1, [r9], #4
 800925a:	d8e3      	bhi.n	8009224 <__multiply+0xb0>
 800925c:	9a01      	ldr	r2, [sp, #4]
 800925e:	f845 c002 	str.w	ip, [r5, r2]
 8009262:	9a03      	ldr	r2, [sp, #12]
 8009264:	3304      	adds	r3, #4
 8009266:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800926a:	f1b9 0f00 	cmp.w	r9, #0
 800926e:	d020      	beq.n	80092b2 <__multiply+0x13e>
 8009270:	46ae      	mov	lr, r5
 8009272:	f04f 0a00 	mov.w	sl, #0
 8009276:	6829      	ldr	r1, [r5, #0]
 8009278:	f104 0c14 	add.w	ip, r4, #20
 800927c:	f8bc b000 	ldrh.w	fp, [ip]
 8009280:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009284:	b289      	uxth	r1, r1
 8009286:	fb09 220b 	mla	r2, r9, fp, r2
 800928a:	4492      	add	sl, r2
 800928c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009290:	f84e 1b04 	str.w	r1, [lr], #4
 8009294:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009298:	f8be 1000 	ldrh.w	r1, [lr]
 800929c:	0c12      	lsrs	r2, r2, #16
 800929e:	fb09 1102 	mla	r1, r9, r2, r1
 80092a2:	4567      	cmp	r7, ip
 80092a4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80092a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80092ac:	d8e6      	bhi.n	800927c <__multiply+0x108>
 80092ae:	9a01      	ldr	r2, [sp, #4]
 80092b0:	50a9      	str	r1, [r5, r2]
 80092b2:	3504      	adds	r5, #4
 80092b4:	e79b      	b.n	80091ee <__multiply+0x7a>
 80092b6:	3e01      	subs	r6, #1
 80092b8:	e79d      	b.n	80091f6 <__multiply+0x82>
 80092ba:	bf00      	nop
 80092bc:	0800ab10 	.word	0x0800ab10
 80092c0:	0800ab9c 	.word	0x0800ab9c

080092c4 <__pow5mult>:
 80092c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092c8:	4615      	mov	r5, r2
 80092ca:	f012 0203 	ands.w	r2, r2, #3
 80092ce:	4606      	mov	r6, r0
 80092d0:	460f      	mov	r7, r1
 80092d2:	d007      	beq.n	80092e4 <__pow5mult+0x20>
 80092d4:	4c25      	ldr	r4, [pc, #148]	; (800936c <__pow5mult+0xa8>)
 80092d6:	3a01      	subs	r2, #1
 80092d8:	2300      	movs	r3, #0
 80092da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092de:	f7ff fe55 	bl	8008f8c <__multadd>
 80092e2:	4607      	mov	r7, r0
 80092e4:	10ad      	asrs	r5, r5, #2
 80092e6:	d03d      	beq.n	8009364 <__pow5mult+0xa0>
 80092e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80092ea:	b97c      	cbnz	r4, 800930c <__pow5mult+0x48>
 80092ec:	2010      	movs	r0, #16
 80092ee:	f7fc fda7 	bl	8005e40 <malloc>
 80092f2:	4602      	mov	r2, r0
 80092f4:	6270      	str	r0, [r6, #36]	; 0x24
 80092f6:	b928      	cbnz	r0, 8009304 <__pow5mult+0x40>
 80092f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80092fc:	4b1c      	ldr	r3, [pc, #112]	; (8009370 <__pow5mult+0xac>)
 80092fe:	481d      	ldr	r0, [pc, #116]	; (8009374 <__pow5mult+0xb0>)
 8009300:	f000 fc32 	bl	8009b68 <__assert_func>
 8009304:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009308:	6004      	str	r4, [r0, #0]
 800930a:	60c4      	str	r4, [r0, #12]
 800930c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009310:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009314:	b94c      	cbnz	r4, 800932a <__pow5mult+0x66>
 8009316:	f240 2171 	movw	r1, #625	; 0x271
 800931a:	4630      	mov	r0, r6
 800931c:	f7ff ff14 	bl	8009148 <__i2b>
 8009320:	2300      	movs	r3, #0
 8009322:	4604      	mov	r4, r0
 8009324:	f8c8 0008 	str.w	r0, [r8, #8]
 8009328:	6003      	str	r3, [r0, #0]
 800932a:	f04f 0900 	mov.w	r9, #0
 800932e:	07eb      	lsls	r3, r5, #31
 8009330:	d50a      	bpl.n	8009348 <__pow5mult+0x84>
 8009332:	4639      	mov	r1, r7
 8009334:	4622      	mov	r2, r4
 8009336:	4630      	mov	r0, r6
 8009338:	f7ff ff1c 	bl	8009174 <__multiply>
 800933c:	4680      	mov	r8, r0
 800933e:	4639      	mov	r1, r7
 8009340:	4630      	mov	r0, r6
 8009342:	f7ff fe01 	bl	8008f48 <_Bfree>
 8009346:	4647      	mov	r7, r8
 8009348:	106d      	asrs	r5, r5, #1
 800934a:	d00b      	beq.n	8009364 <__pow5mult+0xa0>
 800934c:	6820      	ldr	r0, [r4, #0]
 800934e:	b938      	cbnz	r0, 8009360 <__pow5mult+0x9c>
 8009350:	4622      	mov	r2, r4
 8009352:	4621      	mov	r1, r4
 8009354:	4630      	mov	r0, r6
 8009356:	f7ff ff0d 	bl	8009174 <__multiply>
 800935a:	6020      	str	r0, [r4, #0]
 800935c:	f8c0 9000 	str.w	r9, [r0]
 8009360:	4604      	mov	r4, r0
 8009362:	e7e4      	b.n	800932e <__pow5mult+0x6a>
 8009364:	4638      	mov	r0, r7
 8009366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800936a:	bf00      	nop
 800936c:	0800ace8 	.word	0x0800ace8
 8009370:	0800aa9e 	.word	0x0800aa9e
 8009374:	0800ab9c 	.word	0x0800ab9c

08009378 <__lshift>:
 8009378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800937c:	460c      	mov	r4, r1
 800937e:	4607      	mov	r7, r0
 8009380:	4691      	mov	r9, r2
 8009382:	6923      	ldr	r3, [r4, #16]
 8009384:	6849      	ldr	r1, [r1, #4]
 8009386:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800938a:	68a3      	ldr	r3, [r4, #8]
 800938c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009390:	f108 0601 	add.w	r6, r8, #1
 8009394:	42b3      	cmp	r3, r6
 8009396:	db0b      	blt.n	80093b0 <__lshift+0x38>
 8009398:	4638      	mov	r0, r7
 800939a:	f7ff fd95 	bl	8008ec8 <_Balloc>
 800939e:	4605      	mov	r5, r0
 80093a0:	b948      	cbnz	r0, 80093b6 <__lshift+0x3e>
 80093a2:	4602      	mov	r2, r0
 80093a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80093a8:	4b29      	ldr	r3, [pc, #164]	; (8009450 <__lshift+0xd8>)
 80093aa:	482a      	ldr	r0, [pc, #168]	; (8009454 <__lshift+0xdc>)
 80093ac:	f000 fbdc 	bl	8009b68 <__assert_func>
 80093b0:	3101      	adds	r1, #1
 80093b2:	005b      	lsls	r3, r3, #1
 80093b4:	e7ee      	b.n	8009394 <__lshift+0x1c>
 80093b6:	2300      	movs	r3, #0
 80093b8:	f100 0114 	add.w	r1, r0, #20
 80093bc:	f100 0210 	add.w	r2, r0, #16
 80093c0:	4618      	mov	r0, r3
 80093c2:	4553      	cmp	r3, sl
 80093c4:	db37      	blt.n	8009436 <__lshift+0xbe>
 80093c6:	6920      	ldr	r0, [r4, #16]
 80093c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093cc:	f104 0314 	add.w	r3, r4, #20
 80093d0:	f019 091f 	ands.w	r9, r9, #31
 80093d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80093dc:	d02f      	beq.n	800943e <__lshift+0xc6>
 80093de:	468a      	mov	sl, r1
 80093e0:	f04f 0c00 	mov.w	ip, #0
 80093e4:	f1c9 0e20 	rsb	lr, r9, #32
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	fa02 f209 	lsl.w	r2, r2, r9
 80093ee:	ea42 020c 	orr.w	r2, r2, ip
 80093f2:	f84a 2b04 	str.w	r2, [sl], #4
 80093f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80093fa:	4298      	cmp	r0, r3
 80093fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009400:	d8f2      	bhi.n	80093e8 <__lshift+0x70>
 8009402:	1b03      	subs	r3, r0, r4
 8009404:	3b15      	subs	r3, #21
 8009406:	f023 0303 	bic.w	r3, r3, #3
 800940a:	3304      	adds	r3, #4
 800940c:	f104 0215 	add.w	r2, r4, #21
 8009410:	4290      	cmp	r0, r2
 8009412:	bf38      	it	cc
 8009414:	2304      	movcc	r3, #4
 8009416:	f841 c003 	str.w	ip, [r1, r3]
 800941a:	f1bc 0f00 	cmp.w	ip, #0
 800941e:	d001      	beq.n	8009424 <__lshift+0xac>
 8009420:	f108 0602 	add.w	r6, r8, #2
 8009424:	3e01      	subs	r6, #1
 8009426:	4638      	mov	r0, r7
 8009428:	4621      	mov	r1, r4
 800942a:	612e      	str	r6, [r5, #16]
 800942c:	f7ff fd8c 	bl	8008f48 <_Bfree>
 8009430:	4628      	mov	r0, r5
 8009432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009436:	f842 0f04 	str.w	r0, [r2, #4]!
 800943a:	3301      	adds	r3, #1
 800943c:	e7c1      	b.n	80093c2 <__lshift+0x4a>
 800943e:	3904      	subs	r1, #4
 8009440:	f853 2b04 	ldr.w	r2, [r3], #4
 8009444:	4298      	cmp	r0, r3
 8009446:	f841 2f04 	str.w	r2, [r1, #4]!
 800944a:	d8f9      	bhi.n	8009440 <__lshift+0xc8>
 800944c:	e7ea      	b.n	8009424 <__lshift+0xac>
 800944e:	bf00      	nop
 8009450:	0800ab10 	.word	0x0800ab10
 8009454:	0800ab9c 	.word	0x0800ab9c

08009458 <__mcmp>:
 8009458:	4603      	mov	r3, r0
 800945a:	690a      	ldr	r2, [r1, #16]
 800945c:	6900      	ldr	r0, [r0, #16]
 800945e:	b530      	push	{r4, r5, lr}
 8009460:	1a80      	subs	r0, r0, r2
 8009462:	d10d      	bne.n	8009480 <__mcmp+0x28>
 8009464:	3314      	adds	r3, #20
 8009466:	3114      	adds	r1, #20
 8009468:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800946c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009470:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009474:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009478:	4295      	cmp	r5, r2
 800947a:	d002      	beq.n	8009482 <__mcmp+0x2a>
 800947c:	d304      	bcc.n	8009488 <__mcmp+0x30>
 800947e:	2001      	movs	r0, #1
 8009480:	bd30      	pop	{r4, r5, pc}
 8009482:	42a3      	cmp	r3, r4
 8009484:	d3f4      	bcc.n	8009470 <__mcmp+0x18>
 8009486:	e7fb      	b.n	8009480 <__mcmp+0x28>
 8009488:	f04f 30ff 	mov.w	r0, #4294967295
 800948c:	e7f8      	b.n	8009480 <__mcmp+0x28>
	...

08009490 <__mdiff>:
 8009490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009494:	460d      	mov	r5, r1
 8009496:	4607      	mov	r7, r0
 8009498:	4611      	mov	r1, r2
 800949a:	4628      	mov	r0, r5
 800949c:	4614      	mov	r4, r2
 800949e:	f7ff ffdb 	bl	8009458 <__mcmp>
 80094a2:	1e06      	subs	r6, r0, #0
 80094a4:	d111      	bne.n	80094ca <__mdiff+0x3a>
 80094a6:	4631      	mov	r1, r6
 80094a8:	4638      	mov	r0, r7
 80094aa:	f7ff fd0d 	bl	8008ec8 <_Balloc>
 80094ae:	4602      	mov	r2, r0
 80094b0:	b928      	cbnz	r0, 80094be <__mdiff+0x2e>
 80094b2:	f240 2132 	movw	r1, #562	; 0x232
 80094b6:	4b3a      	ldr	r3, [pc, #232]	; (80095a0 <__mdiff+0x110>)
 80094b8:	483a      	ldr	r0, [pc, #232]	; (80095a4 <__mdiff+0x114>)
 80094ba:	f000 fb55 	bl	8009b68 <__assert_func>
 80094be:	2301      	movs	r3, #1
 80094c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80094c4:	4610      	mov	r0, r2
 80094c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ca:	bfa4      	itt	ge
 80094cc:	4623      	movge	r3, r4
 80094ce:	462c      	movge	r4, r5
 80094d0:	4638      	mov	r0, r7
 80094d2:	6861      	ldr	r1, [r4, #4]
 80094d4:	bfa6      	itte	ge
 80094d6:	461d      	movge	r5, r3
 80094d8:	2600      	movge	r6, #0
 80094da:	2601      	movlt	r6, #1
 80094dc:	f7ff fcf4 	bl	8008ec8 <_Balloc>
 80094e0:	4602      	mov	r2, r0
 80094e2:	b918      	cbnz	r0, 80094ec <__mdiff+0x5c>
 80094e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80094e8:	4b2d      	ldr	r3, [pc, #180]	; (80095a0 <__mdiff+0x110>)
 80094ea:	e7e5      	b.n	80094b8 <__mdiff+0x28>
 80094ec:	f102 0814 	add.w	r8, r2, #20
 80094f0:	46c2      	mov	sl, r8
 80094f2:	f04f 0c00 	mov.w	ip, #0
 80094f6:	6927      	ldr	r7, [r4, #16]
 80094f8:	60c6      	str	r6, [r0, #12]
 80094fa:	692e      	ldr	r6, [r5, #16]
 80094fc:	f104 0014 	add.w	r0, r4, #20
 8009500:	f105 0914 	add.w	r9, r5, #20
 8009504:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009508:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800950c:	3410      	adds	r4, #16
 800950e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009512:	f859 3b04 	ldr.w	r3, [r9], #4
 8009516:	fa1f f18b 	uxth.w	r1, fp
 800951a:	448c      	add	ip, r1
 800951c:	b299      	uxth	r1, r3
 800951e:	0c1b      	lsrs	r3, r3, #16
 8009520:	ebac 0101 	sub.w	r1, ip, r1
 8009524:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009528:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800952c:	b289      	uxth	r1, r1
 800952e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009532:	454e      	cmp	r6, r9
 8009534:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009538:	f84a 3b04 	str.w	r3, [sl], #4
 800953c:	d8e7      	bhi.n	800950e <__mdiff+0x7e>
 800953e:	1b73      	subs	r3, r6, r5
 8009540:	3b15      	subs	r3, #21
 8009542:	f023 0303 	bic.w	r3, r3, #3
 8009546:	3515      	adds	r5, #21
 8009548:	3304      	adds	r3, #4
 800954a:	42ae      	cmp	r6, r5
 800954c:	bf38      	it	cc
 800954e:	2304      	movcc	r3, #4
 8009550:	4418      	add	r0, r3
 8009552:	4443      	add	r3, r8
 8009554:	461e      	mov	r6, r3
 8009556:	4605      	mov	r5, r0
 8009558:	4575      	cmp	r5, lr
 800955a:	d30e      	bcc.n	800957a <__mdiff+0xea>
 800955c:	f10e 0103 	add.w	r1, lr, #3
 8009560:	1a09      	subs	r1, r1, r0
 8009562:	f021 0103 	bic.w	r1, r1, #3
 8009566:	3803      	subs	r0, #3
 8009568:	4586      	cmp	lr, r0
 800956a:	bf38      	it	cc
 800956c:	2100      	movcc	r1, #0
 800956e:	4419      	add	r1, r3
 8009570:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009574:	b18b      	cbz	r3, 800959a <__mdiff+0x10a>
 8009576:	6117      	str	r7, [r2, #16]
 8009578:	e7a4      	b.n	80094c4 <__mdiff+0x34>
 800957a:	f855 8b04 	ldr.w	r8, [r5], #4
 800957e:	fa1f f188 	uxth.w	r1, r8
 8009582:	4461      	add	r1, ip
 8009584:	140c      	asrs	r4, r1, #16
 8009586:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800958a:	b289      	uxth	r1, r1
 800958c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009590:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009594:	f846 1b04 	str.w	r1, [r6], #4
 8009598:	e7de      	b.n	8009558 <__mdiff+0xc8>
 800959a:	3f01      	subs	r7, #1
 800959c:	e7e8      	b.n	8009570 <__mdiff+0xe0>
 800959e:	bf00      	nop
 80095a0:	0800ab10 	.word	0x0800ab10
 80095a4:	0800ab9c 	.word	0x0800ab9c

080095a8 <__ulp>:
 80095a8:	4b11      	ldr	r3, [pc, #68]	; (80095f0 <__ulp+0x48>)
 80095aa:	400b      	ands	r3, r1
 80095ac:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	dd02      	ble.n	80095ba <__ulp+0x12>
 80095b4:	2000      	movs	r0, #0
 80095b6:	4619      	mov	r1, r3
 80095b8:	4770      	bx	lr
 80095ba:	425b      	negs	r3, r3
 80095bc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80095c0:	f04f 0000 	mov.w	r0, #0
 80095c4:	f04f 0100 	mov.w	r1, #0
 80095c8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80095cc:	da04      	bge.n	80095d8 <__ulp+0x30>
 80095ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80095d2:	fa43 f102 	asr.w	r1, r3, r2
 80095d6:	4770      	bx	lr
 80095d8:	f1a2 0314 	sub.w	r3, r2, #20
 80095dc:	2b1e      	cmp	r3, #30
 80095de:	bfd6      	itet	le
 80095e0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80095e4:	2301      	movgt	r3, #1
 80095e6:	fa22 f303 	lsrle.w	r3, r2, r3
 80095ea:	4618      	mov	r0, r3
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	7ff00000 	.word	0x7ff00000

080095f4 <__b2d>:
 80095f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095f8:	6907      	ldr	r7, [r0, #16]
 80095fa:	f100 0914 	add.w	r9, r0, #20
 80095fe:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009602:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009606:	f1a7 0804 	sub.w	r8, r7, #4
 800960a:	4630      	mov	r0, r6
 800960c:	f7ff fd4e 	bl	80090ac <__hi0bits>
 8009610:	f1c0 0320 	rsb	r3, r0, #32
 8009614:	280a      	cmp	r0, #10
 8009616:	600b      	str	r3, [r1, #0]
 8009618:	491f      	ldr	r1, [pc, #124]	; (8009698 <__b2d+0xa4>)
 800961a:	dc17      	bgt.n	800964c <__b2d+0x58>
 800961c:	45c1      	cmp	r9, r8
 800961e:	bf28      	it	cs
 8009620:	2200      	movcs	r2, #0
 8009622:	f1c0 0c0b 	rsb	ip, r0, #11
 8009626:	fa26 f30c 	lsr.w	r3, r6, ip
 800962a:	bf38      	it	cc
 800962c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009630:	ea43 0501 	orr.w	r5, r3, r1
 8009634:	f100 0315 	add.w	r3, r0, #21
 8009638:	fa06 f303 	lsl.w	r3, r6, r3
 800963c:	fa22 f20c 	lsr.w	r2, r2, ip
 8009640:	ea43 0402 	orr.w	r4, r3, r2
 8009644:	4620      	mov	r0, r4
 8009646:	4629      	mov	r1, r5
 8009648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800964c:	45c1      	cmp	r9, r8
 800964e:	bf2e      	itee	cs
 8009650:	2200      	movcs	r2, #0
 8009652:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009656:	f1a7 0808 	subcc.w	r8, r7, #8
 800965a:	f1b0 030b 	subs.w	r3, r0, #11
 800965e:	d016      	beq.n	800968e <__b2d+0x9a>
 8009660:	f1c3 0720 	rsb	r7, r3, #32
 8009664:	fa22 f107 	lsr.w	r1, r2, r7
 8009668:	45c8      	cmp	r8, r9
 800966a:	fa06 f603 	lsl.w	r6, r6, r3
 800966e:	ea46 0601 	orr.w	r6, r6, r1
 8009672:	bf94      	ite	ls
 8009674:	2100      	movls	r1, #0
 8009676:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800967a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800967e:	fa02 f003 	lsl.w	r0, r2, r3
 8009682:	40f9      	lsrs	r1, r7
 8009684:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009688:	ea40 0401 	orr.w	r4, r0, r1
 800968c:	e7da      	b.n	8009644 <__b2d+0x50>
 800968e:	4614      	mov	r4, r2
 8009690:	ea46 0501 	orr.w	r5, r6, r1
 8009694:	e7d6      	b.n	8009644 <__b2d+0x50>
 8009696:	bf00      	nop
 8009698:	3ff00000 	.word	0x3ff00000

0800969c <__d2b>:
 800969c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80096a0:	2101      	movs	r1, #1
 80096a2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80096a6:	4690      	mov	r8, r2
 80096a8:	461d      	mov	r5, r3
 80096aa:	f7ff fc0d 	bl	8008ec8 <_Balloc>
 80096ae:	4604      	mov	r4, r0
 80096b0:	b930      	cbnz	r0, 80096c0 <__d2b+0x24>
 80096b2:	4602      	mov	r2, r0
 80096b4:	f240 310a 	movw	r1, #778	; 0x30a
 80096b8:	4b24      	ldr	r3, [pc, #144]	; (800974c <__d2b+0xb0>)
 80096ba:	4825      	ldr	r0, [pc, #148]	; (8009750 <__d2b+0xb4>)
 80096bc:	f000 fa54 	bl	8009b68 <__assert_func>
 80096c0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80096c4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80096c8:	bb2d      	cbnz	r5, 8009716 <__d2b+0x7a>
 80096ca:	9301      	str	r3, [sp, #4]
 80096cc:	f1b8 0300 	subs.w	r3, r8, #0
 80096d0:	d026      	beq.n	8009720 <__d2b+0x84>
 80096d2:	4668      	mov	r0, sp
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	f7ff fd09 	bl	80090ec <__lo0bits>
 80096da:	9900      	ldr	r1, [sp, #0]
 80096dc:	b1f0      	cbz	r0, 800971c <__d2b+0x80>
 80096de:	9a01      	ldr	r2, [sp, #4]
 80096e0:	f1c0 0320 	rsb	r3, r0, #32
 80096e4:	fa02 f303 	lsl.w	r3, r2, r3
 80096e8:	430b      	orrs	r3, r1
 80096ea:	40c2      	lsrs	r2, r0
 80096ec:	6163      	str	r3, [r4, #20]
 80096ee:	9201      	str	r2, [sp, #4]
 80096f0:	9b01      	ldr	r3, [sp, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	bf14      	ite	ne
 80096f6:	2102      	movne	r1, #2
 80096f8:	2101      	moveq	r1, #1
 80096fa:	61a3      	str	r3, [r4, #24]
 80096fc:	6121      	str	r1, [r4, #16]
 80096fe:	b1c5      	cbz	r5, 8009732 <__d2b+0x96>
 8009700:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009704:	4405      	add	r5, r0
 8009706:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800970a:	603d      	str	r5, [r7, #0]
 800970c:	6030      	str	r0, [r6, #0]
 800970e:	4620      	mov	r0, r4
 8009710:	b002      	add	sp, #8
 8009712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800971a:	e7d6      	b.n	80096ca <__d2b+0x2e>
 800971c:	6161      	str	r1, [r4, #20]
 800971e:	e7e7      	b.n	80096f0 <__d2b+0x54>
 8009720:	a801      	add	r0, sp, #4
 8009722:	f7ff fce3 	bl	80090ec <__lo0bits>
 8009726:	2101      	movs	r1, #1
 8009728:	9b01      	ldr	r3, [sp, #4]
 800972a:	6121      	str	r1, [r4, #16]
 800972c:	6163      	str	r3, [r4, #20]
 800972e:	3020      	adds	r0, #32
 8009730:	e7e5      	b.n	80096fe <__d2b+0x62>
 8009732:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009736:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800973a:	6038      	str	r0, [r7, #0]
 800973c:	6918      	ldr	r0, [r3, #16]
 800973e:	f7ff fcb5 	bl	80090ac <__hi0bits>
 8009742:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009746:	6031      	str	r1, [r6, #0]
 8009748:	e7e1      	b.n	800970e <__d2b+0x72>
 800974a:	bf00      	nop
 800974c:	0800ab10 	.word	0x0800ab10
 8009750:	0800ab9c 	.word	0x0800ab9c

08009754 <__ratio>:
 8009754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009758:	4688      	mov	r8, r1
 800975a:	4669      	mov	r1, sp
 800975c:	4681      	mov	r9, r0
 800975e:	f7ff ff49 	bl	80095f4 <__b2d>
 8009762:	460f      	mov	r7, r1
 8009764:	4604      	mov	r4, r0
 8009766:	460d      	mov	r5, r1
 8009768:	4640      	mov	r0, r8
 800976a:	a901      	add	r1, sp, #4
 800976c:	f7ff ff42 	bl	80095f4 <__b2d>
 8009770:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009774:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009778:	468b      	mov	fp, r1
 800977a:	eba3 0c02 	sub.w	ip, r3, r2
 800977e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009782:	1a9b      	subs	r3, r3, r2
 8009784:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009788:	2b00      	cmp	r3, #0
 800978a:	bfd5      	itete	le
 800978c:	460a      	movle	r2, r1
 800978e:	462a      	movgt	r2, r5
 8009790:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009794:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009798:	bfd8      	it	le
 800979a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800979e:	465b      	mov	r3, fp
 80097a0:	4602      	mov	r2, r0
 80097a2:	4639      	mov	r1, r7
 80097a4:	4620      	mov	r0, r4
 80097a6:	f7f6 ffc1 	bl	800072c <__aeabi_ddiv>
 80097aa:	b003      	add	sp, #12
 80097ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080097b0 <__copybits>:
 80097b0:	3901      	subs	r1, #1
 80097b2:	b570      	push	{r4, r5, r6, lr}
 80097b4:	1149      	asrs	r1, r1, #5
 80097b6:	6914      	ldr	r4, [r2, #16]
 80097b8:	3101      	adds	r1, #1
 80097ba:	f102 0314 	add.w	r3, r2, #20
 80097be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80097c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80097c6:	1f05      	subs	r5, r0, #4
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	d30c      	bcc.n	80097e6 <__copybits+0x36>
 80097cc:	1aa3      	subs	r3, r4, r2
 80097ce:	3b11      	subs	r3, #17
 80097d0:	f023 0303 	bic.w	r3, r3, #3
 80097d4:	3211      	adds	r2, #17
 80097d6:	42a2      	cmp	r2, r4
 80097d8:	bf88      	it	hi
 80097da:	2300      	movhi	r3, #0
 80097dc:	4418      	add	r0, r3
 80097de:	2300      	movs	r3, #0
 80097e0:	4288      	cmp	r0, r1
 80097e2:	d305      	bcc.n	80097f0 <__copybits+0x40>
 80097e4:	bd70      	pop	{r4, r5, r6, pc}
 80097e6:	f853 6b04 	ldr.w	r6, [r3], #4
 80097ea:	f845 6f04 	str.w	r6, [r5, #4]!
 80097ee:	e7eb      	b.n	80097c8 <__copybits+0x18>
 80097f0:	f840 3b04 	str.w	r3, [r0], #4
 80097f4:	e7f4      	b.n	80097e0 <__copybits+0x30>

080097f6 <__any_on>:
 80097f6:	f100 0214 	add.w	r2, r0, #20
 80097fa:	6900      	ldr	r0, [r0, #16]
 80097fc:	114b      	asrs	r3, r1, #5
 80097fe:	4298      	cmp	r0, r3
 8009800:	b510      	push	{r4, lr}
 8009802:	db11      	blt.n	8009828 <__any_on+0x32>
 8009804:	dd0a      	ble.n	800981c <__any_on+0x26>
 8009806:	f011 011f 	ands.w	r1, r1, #31
 800980a:	d007      	beq.n	800981c <__any_on+0x26>
 800980c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009810:	fa24 f001 	lsr.w	r0, r4, r1
 8009814:	fa00 f101 	lsl.w	r1, r0, r1
 8009818:	428c      	cmp	r4, r1
 800981a:	d10b      	bne.n	8009834 <__any_on+0x3e>
 800981c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009820:	4293      	cmp	r3, r2
 8009822:	d803      	bhi.n	800982c <__any_on+0x36>
 8009824:	2000      	movs	r0, #0
 8009826:	bd10      	pop	{r4, pc}
 8009828:	4603      	mov	r3, r0
 800982a:	e7f7      	b.n	800981c <__any_on+0x26>
 800982c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009830:	2900      	cmp	r1, #0
 8009832:	d0f5      	beq.n	8009820 <__any_on+0x2a>
 8009834:	2001      	movs	r0, #1
 8009836:	e7f6      	b.n	8009826 <__any_on+0x30>

08009838 <_calloc_r>:
 8009838:	b570      	push	{r4, r5, r6, lr}
 800983a:	fba1 5402 	umull	r5, r4, r1, r2
 800983e:	b934      	cbnz	r4, 800984e <_calloc_r+0x16>
 8009840:	4629      	mov	r1, r5
 8009842:	f7fc fb8b 	bl	8005f5c <_malloc_r>
 8009846:	4606      	mov	r6, r0
 8009848:	b928      	cbnz	r0, 8009856 <_calloc_r+0x1e>
 800984a:	4630      	mov	r0, r6
 800984c:	bd70      	pop	{r4, r5, r6, pc}
 800984e:	220c      	movs	r2, #12
 8009850:	2600      	movs	r6, #0
 8009852:	6002      	str	r2, [r0, #0]
 8009854:	e7f9      	b.n	800984a <_calloc_r+0x12>
 8009856:	462a      	mov	r2, r5
 8009858:	4621      	mov	r1, r4
 800985a:	f7fc fb0f 	bl	8005e7c <memset>
 800985e:	e7f4      	b.n	800984a <_calloc_r+0x12>

08009860 <__ssputs_r>:
 8009860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009864:	688e      	ldr	r6, [r1, #8]
 8009866:	4682      	mov	sl, r0
 8009868:	429e      	cmp	r6, r3
 800986a:	460c      	mov	r4, r1
 800986c:	4690      	mov	r8, r2
 800986e:	461f      	mov	r7, r3
 8009870:	d838      	bhi.n	80098e4 <__ssputs_r+0x84>
 8009872:	898a      	ldrh	r2, [r1, #12]
 8009874:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009878:	d032      	beq.n	80098e0 <__ssputs_r+0x80>
 800987a:	6825      	ldr	r5, [r4, #0]
 800987c:	6909      	ldr	r1, [r1, #16]
 800987e:	3301      	adds	r3, #1
 8009880:	eba5 0901 	sub.w	r9, r5, r1
 8009884:	6965      	ldr	r5, [r4, #20]
 8009886:	444b      	add	r3, r9
 8009888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800988c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009890:	106d      	asrs	r5, r5, #1
 8009892:	429d      	cmp	r5, r3
 8009894:	bf38      	it	cc
 8009896:	461d      	movcc	r5, r3
 8009898:	0553      	lsls	r3, r2, #21
 800989a:	d531      	bpl.n	8009900 <__ssputs_r+0xa0>
 800989c:	4629      	mov	r1, r5
 800989e:	f7fc fb5d 	bl	8005f5c <_malloc_r>
 80098a2:	4606      	mov	r6, r0
 80098a4:	b950      	cbnz	r0, 80098bc <__ssputs_r+0x5c>
 80098a6:	230c      	movs	r3, #12
 80098a8:	f04f 30ff 	mov.w	r0, #4294967295
 80098ac:	f8ca 3000 	str.w	r3, [sl]
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098b6:	81a3      	strh	r3, [r4, #12]
 80098b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098bc:	464a      	mov	r2, r9
 80098be:	6921      	ldr	r1, [r4, #16]
 80098c0:	f7fc face 	bl	8005e60 <memcpy>
 80098c4:	89a3      	ldrh	r3, [r4, #12]
 80098c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098ce:	81a3      	strh	r3, [r4, #12]
 80098d0:	6126      	str	r6, [r4, #16]
 80098d2:	444e      	add	r6, r9
 80098d4:	6026      	str	r6, [r4, #0]
 80098d6:	463e      	mov	r6, r7
 80098d8:	6165      	str	r5, [r4, #20]
 80098da:	eba5 0509 	sub.w	r5, r5, r9
 80098de:	60a5      	str	r5, [r4, #8]
 80098e0:	42be      	cmp	r6, r7
 80098e2:	d900      	bls.n	80098e6 <__ssputs_r+0x86>
 80098e4:	463e      	mov	r6, r7
 80098e6:	4632      	mov	r2, r6
 80098e8:	4641      	mov	r1, r8
 80098ea:	6820      	ldr	r0, [r4, #0]
 80098ec:	f000 f96f 	bl	8009bce <memmove>
 80098f0:	68a3      	ldr	r3, [r4, #8]
 80098f2:	2000      	movs	r0, #0
 80098f4:	1b9b      	subs	r3, r3, r6
 80098f6:	60a3      	str	r3, [r4, #8]
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	4433      	add	r3, r6
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	e7db      	b.n	80098b8 <__ssputs_r+0x58>
 8009900:	462a      	mov	r2, r5
 8009902:	f000 f97e 	bl	8009c02 <_realloc_r>
 8009906:	4606      	mov	r6, r0
 8009908:	2800      	cmp	r0, #0
 800990a:	d1e1      	bne.n	80098d0 <__ssputs_r+0x70>
 800990c:	4650      	mov	r0, sl
 800990e:	6921      	ldr	r1, [r4, #16]
 8009910:	f7fc fabc 	bl	8005e8c <_free_r>
 8009914:	e7c7      	b.n	80098a6 <__ssputs_r+0x46>
	...

08009918 <_svfiprintf_r>:
 8009918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991c:	4698      	mov	r8, r3
 800991e:	898b      	ldrh	r3, [r1, #12]
 8009920:	4607      	mov	r7, r0
 8009922:	061b      	lsls	r3, r3, #24
 8009924:	460d      	mov	r5, r1
 8009926:	4614      	mov	r4, r2
 8009928:	b09d      	sub	sp, #116	; 0x74
 800992a:	d50e      	bpl.n	800994a <_svfiprintf_r+0x32>
 800992c:	690b      	ldr	r3, [r1, #16]
 800992e:	b963      	cbnz	r3, 800994a <_svfiprintf_r+0x32>
 8009930:	2140      	movs	r1, #64	; 0x40
 8009932:	f7fc fb13 	bl	8005f5c <_malloc_r>
 8009936:	6028      	str	r0, [r5, #0]
 8009938:	6128      	str	r0, [r5, #16]
 800993a:	b920      	cbnz	r0, 8009946 <_svfiprintf_r+0x2e>
 800993c:	230c      	movs	r3, #12
 800993e:	603b      	str	r3, [r7, #0]
 8009940:	f04f 30ff 	mov.w	r0, #4294967295
 8009944:	e0d1      	b.n	8009aea <_svfiprintf_r+0x1d2>
 8009946:	2340      	movs	r3, #64	; 0x40
 8009948:	616b      	str	r3, [r5, #20]
 800994a:	2300      	movs	r3, #0
 800994c:	9309      	str	r3, [sp, #36]	; 0x24
 800994e:	2320      	movs	r3, #32
 8009950:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009954:	2330      	movs	r3, #48	; 0x30
 8009956:	f04f 0901 	mov.w	r9, #1
 800995a:	f8cd 800c 	str.w	r8, [sp, #12]
 800995e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009b04 <_svfiprintf_r+0x1ec>
 8009962:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009966:	4623      	mov	r3, r4
 8009968:	469a      	mov	sl, r3
 800996a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800996e:	b10a      	cbz	r2, 8009974 <_svfiprintf_r+0x5c>
 8009970:	2a25      	cmp	r2, #37	; 0x25
 8009972:	d1f9      	bne.n	8009968 <_svfiprintf_r+0x50>
 8009974:	ebba 0b04 	subs.w	fp, sl, r4
 8009978:	d00b      	beq.n	8009992 <_svfiprintf_r+0x7a>
 800997a:	465b      	mov	r3, fp
 800997c:	4622      	mov	r2, r4
 800997e:	4629      	mov	r1, r5
 8009980:	4638      	mov	r0, r7
 8009982:	f7ff ff6d 	bl	8009860 <__ssputs_r>
 8009986:	3001      	adds	r0, #1
 8009988:	f000 80aa 	beq.w	8009ae0 <_svfiprintf_r+0x1c8>
 800998c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800998e:	445a      	add	r2, fp
 8009990:	9209      	str	r2, [sp, #36]	; 0x24
 8009992:	f89a 3000 	ldrb.w	r3, [sl]
 8009996:	2b00      	cmp	r3, #0
 8009998:	f000 80a2 	beq.w	8009ae0 <_svfiprintf_r+0x1c8>
 800999c:	2300      	movs	r3, #0
 800999e:	f04f 32ff 	mov.w	r2, #4294967295
 80099a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099a6:	f10a 0a01 	add.w	sl, sl, #1
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	9307      	str	r3, [sp, #28]
 80099ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099b2:	931a      	str	r3, [sp, #104]	; 0x68
 80099b4:	4654      	mov	r4, sl
 80099b6:	2205      	movs	r2, #5
 80099b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099bc:	4851      	ldr	r0, [pc, #324]	; (8009b04 <_svfiprintf_r+0x1ec>)
 80099be:	f7ff fa69 	bl	8008e94 <memchr>
 80099c2:	9a04      	ldr	r2, [sp, #16]
 80099c4:	b9d8      	cbnz	r0, 80099fe <_svfiprintf_r+0xe6>
 80099c6:	06d0      	lsls	r0, r2, #27
 80099c8:	bf44      	itt	mi
 80099ca:	2320      	movmi	r3, #32
 80099cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099d0:	0711      	lsls	r1, r2, #28
 80099d2:	bf44      	itt	mi
 80099d4:	232b      	movmi	r3, #43	; 0x2b
 80099d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099da:	f89a 3000 	ldrb.w	r3, [sl]
 80099de:	2b2a      	cmp	r3, #42	; 0x2a
 80099e0:	d015      	beq.n	8009a0e <_svfiprintf_r+0xf6>
 80099e2:	4654      	mov	r4, sl
 80099e4:	2000      	movs	r0, #0
 80099e6:	f04f 0c0a 	mov.w	ip, #10
 80099ea:	9a07      	ldr	r2, [sp, #28]
 80099ec:	4621      	mov	r1, r4
 80099ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099f2:	3b30      	subs	r3, #48	; 0x30
 80099f4:	2b09      	cmp	r3, #9
 80099f6:	d94e      	bls.n	8009a96 <_svfiprintf_r+0x17e>
 80099f8:	b1b0      	cbz	r0, 8009a28 <_svfiprintf_r+0x110>
 80099fa:	9207      	str	r2, [sp, #28]
 80099fc:	e014      	b.n	8009a28 <_svfiprintf_r+0x110>
 80099fe:	eba0 0308 	sub.w	r3, r0, r8
 8009a02:	fa09 f303 	lsl.w	r3, r9, r3
 8009a06:	4313      	orrs	r3, r2
 8009a08:	46a2      	mov	sl, r4
 8009a0a:	9304      	str	r3, [sp, #16]
 8009a0c:	e7d2      	b.n	80099b4 <_svfiprintf_r+0x9c>
 8009a0e:	9b03      	ldr	r3, [sp, #12]
 8009a10:	1d19      	adds	r1, r3, #4
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	9103      	str	r1, [sp, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	bfbb      	ittet	lt
 8009a1a:	425b      	neglt	r3, r3
 8009a1c:	f042 0202 	orrlt.w	r2, r2, #2
 8009a20:	9307      	strge	r3, [sp, #28]
 8009a22:	9307      	strlt	r3, [sp, #28]
 8009a24:	bfb8      	it	lt
 8009a26:	9204      	strlt	r2, [sp, #16]
 8009a28:	7823      	ldrb	r3, [r4, #0]
 8009a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a2c:	d10c      	bne.n	8009a48 <_svfiprintf_r+0x130>
 8009a2e:	7863      	ldrb	r3, [r4, #1]
 8009a30:	2b2a      	cmp	r3, #42	; 0x2a
 8009a32:	d135      	bne.n	8009aa0 <_svfiprintf_r+0x188>
 8009a34:	9b03      	ldr	r3, [sp, #12]
 8009a36:	3402      	adds	r4, #2
 8009a38:	1d1a      	adds	r2, r3, #4
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	9203      	str	r2, [sp, #12]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	bfb8      	it	lt
 8009a42:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a46:	9305      	str	r3, [sp, #20]
 8009a48:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009b08 <_svfiprintf_r+0x1f0>
 8009a4c:	2203      	movs	r2, #3
 8009a4e:	4650      	mov	r0, sl
 8009a50:	7821      	ldrb	r1, [r4, #0]
 8009a52:	f7ff fa1f 	bl	8008e94 <memchr>
 8009a56:	b140      	cbz	r0, 8009a6a <_svfiprintf_r+0x152>
 8009a58:	2340      	movs	r3, #64	; 0x40
 8009a5a:	eba0 000a 	sub.w	r0, r0, sl
 8009a5e:	fa03 f000 	lsl.w	r0, r3, r0
 8009a62:	9b04      	ldr	r3, [sp, #16]
 8009a64:	3401      	adds	r4, #1
 8009a66:	4303      	orrs	r3, r0
 8009a68:	9304      	str	r3, [sp, #16]
 8009a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a6e:	2206      	movs	r2, #6
 8009a70:	4826      	ldr	r0, [pc, #152]	; (8009b0c <_svfiprintf_r+0x1f4>)
 8009a72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a76:	f7ff fa0d 	bl	8008e94 <memchr>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d038      	beq.n	8009af0 <_svfiprintf_r+0x1d8>
 8009a7e:	4b24      	ldr	r3, [pc, #144]	; (8009b10 <_svfiprintf_r+0x1f8>)
 8009a80:	bb1b      	cbnz	r3, 8009aca <_svfiprintf_r+0x1b2>
 8009a82:	9b03      	ldr	r3, [sp, #12]
 8009a84:	3307      	adds	r3, #7
 8009a86:	f023 0307 	bic.w	r3, r3, #7
 8009a8a:	3308      	adds	r3, #8
 8009a8c:	9303      	str	r3, [sp, #12]
 8009a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a90:	4433      	add	r3, r6
 8009a92:	9309      	str	r3, [sp, #36]	; 0x24
 8009a94:	e767      	b.n	8009966 <_svfiprintf_r+0x4e>
 8009a96:	460c      	mov	r4, r1
 8009a98:	2001      	movs	r0, #1
 8009a9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a9e:	e7a5      	b.n	80099ec <_svfiprintf_r+0xd4>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	f04f 0c0a 	mov.w	ip, #10
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	3401      	adds	r4, #1
 8009aaa:	9305      	str	r3, [sp, #20]
 8009aac:	4620      	mov	r0, r4
 8009aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ab2:	3a30      	subs	r2, #48	; 0x30
 8009ab4:	2a09      	cmp	r2, #9
 8009ab6:	d903      	bls.n	8009ac0 <_svfiprintf_r+0x1a8>
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d0c5      	beq.n	8009a48 <_svfiprintf_r+0x130>
 8009abc:	9105      	str	r1, [sp, #20]
 8009abe:	e7c3      	b.n	8009a48 <_svfiprintf_r+0x130>
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ac8:	e7f0      	b.n	8009aac <_svfiprintf_r+0x194>
 8009aca:	ab03      	add	r3, sp, #12
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	462a      	mov	r2, r5
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	4b10      	ldr	r3, [pc, #64]	; (8009b14 <_svfiprintf_r+0x1fc>)
 8009ad4:	a904      	add	r1, sp, #16
 8009ad6:	f7fc fb53 	bl	8006180 <_printf_float>
 8009ada:	1c42      	adds	r2, r0, #1
 8009adc:	4606      	mov	r6, r0
 8009ade:	d1d6      	bne.n	8009a8e <_svfiprintf_r+0x176>
 8009ae0:	89ab      	ldrh	r3, [r5, #12]
 8009ae2:	065b      	lsls	r3, r3, #25
 8009ae4:	f53f af2c 	bmi.w	8009940 <_svfiprintf_r+0x28>
 8009ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aea:	b01d      	add	sp, #116	; 0x74
 8009aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af0:	ab03      	add	r3, sp, #12
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	462a      	mov	r2, r5
 8009af6:	4638      	mov	r0, r7
 8009af8:	4b06      	ldr	r3, [pc, #24]	; (8009b14 <_svfiprintf_r+0x1fc>)
 8009afa:	a904      	add	r1, sp, #16
 8009afc:	f7fc fddc 	bl	80066b8 <_printf_i>
 8009b00:	e7eb      	b.n	8009ada <_svfiprintf_r+0x1c2>
 8009b02:	bf00      	nop
 8009b04:	0800acf4 	.word	0x0800acf4
 8009b08:	0800acfa 	.word	0x0800acfa
 8009b0c:	0800acfe 	.word	0x0800acfe
 8009b10:	08006181 	.word	0x08006181
 8009b14:	08009861 	.word	0x08009861

08009b18 <nan>:
 8009b18:	2000      	movs	r0, #0
 8009b1a:	4901      	ldr	r1, [pc, #4]	; (8009b20 <nan+0x8>)
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	7ff80000 	.word	0x7ff80000

08009b24 <strncmp>:
 8009b24:	4603      	mov	r3, r0
 8009b26:	b510      	push	{r4, lr}
 8009b28:	b172      	cbz	r2, 8009b48 <strncmp+0x24>
 8009b2a:	3901      	subs	r1, #1
 8009b2c:	1884      	adds	r4, r0, r2
 8009b2e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b32:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009b36:	4290      	cmp	r0, r2
 8009b38:	d101      	bne.n	8009b3e <strncmp+0x1a>
 8009b3a:	42a3      	cmp	r3, r4
 8009b3c:	d101      	bne.n	8009b42 <strncmp+0x1e>
 8009b3e:	1a80      	subs	r0, r0, r2
 8009b40:	bd10      	pop	{r4, pc}
 8009b42:	2800      	cmp	r0, #0
 8009b44:	d1f3      	bne.n	8009b2e <strncmp+0xa>
 8009b46:	e7fa      	b.n	8009b3e <strncmp+0x1a>
 8009b48:	4610      	mov	r0, r2
 8009b4a:	e7f9      	b.n	8009b40 <strncmp+0x1c>

08009b4c <__ascii_wctomb>:
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	4608      	mov	r0, r1
 8009b50:	b141      	cbz	r1, 8009b64 <__ascii_wctomb+0x18>
 8009b52:	2aff      	cmp	r2, #255	; 0xff
 8009b54:	d904      	bls.n	8009b60 <__ascii_wctomb+0x14>
 8009b56:	228a      	movs	r2, #138	; 0x8a
 8009b58:	f04f 30ff 	mov.w	r0, #4294967295
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	4770      	bx	lr
 8009b60:	2001      	movs	r0, #1
 8009b62:	700a      	strb	r2, [r1, #0]
 8009b64:	4770      	bx	lr
	...

08009b68 <__assert_func>:
 8009b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b6a:	4614      	mov	r4, r2
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	4b09      	ldr	r3, [pc, #36]	; (8009b94 <__assert_func+0x2c>)
 8009b70:	4605      	mov	r5, r0
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68d8      	ldr	r0, [r3, #12]
 8009b76:	b14c      	cbz	r4, 8009b8c <__assert_func+0x24>
 8009b78:	4b07      	ldr	r3, [pc, #28]	; (8009b98 <__assert_func+0x30>)
 8009b7a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b7e:	9100      	str	r1, [sp, #0]
 8009b80:	462b      	mov	r3, r5
 8009b82:	4906      	ldr	r1, [pc, #24]	; (8009b9c <__assert_func+0x34>)
 8009b84:	f000 f80e 	bl	8009ba4 <fiprintf>
 8009b88:	f000 fa82 	bl	800a090 <abort>
 8009b8c:	4b04      	ldr	r3, [pc, #16]	; (8009ba0 <__assert_func+0x38>)
 8009b8e:	461c      	mov	r4, r3
 8009b90:	e7f3      	b.n	8009b7a <__assert_func+0x12>
 8009b92:	bf00      	nop
 8009b94:	20000014 	.word	0x20000014
 8009b98:	0800ad05 	.word	0x0800ad05
 8009b9c:	0800ad12 	.word	0x0800ad12
 8009ba0:	0800ad40 	.word	0x0800ad40

08009ba4 <fiprintf>:
 8009ba4:	b40e      	push	{r1, r2, r3}
 8009ba6:	b503      	push	{r0, r1, lr}
 8009ba8:	4601      	mov	r1, r0
 8009baa:	ab03      	add	r3, sp, #12
 8009bac:	4805      	ldr	r0, [pc, #20]	; (8009bc4 <fiprintf+0x20>)
 8009bae:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bb2:	6800      	ldr	r0, [r0, #0]
 8009bb4:	9301      	str	r3, [sp, #4]
 8009bb6:	f000 f87b 	bl	8009cb0 <_vfiprintf_r>
 8009bba:	b002      	add	sp, #8
 8009bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bc0:	b003      	add	sp, #12
 8009bc2:	4770      	bx	lr
 8009bc4:	20000014 	.word	0x20000014

08009bc8 <__retarget_lock_init_recursive>:
 8009bc8:	4770      	bx	lr

08009bca <__retarget_lock_acquire_recursive>:
 8009bca:	4770      	bx	lr

08009bcc <__retarget_lock_release_recursive>:
 8009bcc:	4770      	bx	lr

08009bce <memmove>:
 8009bce:	4288      	cmp	r0, r1
 8009bd0:	b510      	push	{r4, lr}
 8009bd2:	eb01 0402 	add.w	r4, r1, r2
 8009bd6:	d902      	bls.n	8009bde <memmove+0x10>
 8009bd8:	4284      	cmp	r4, r0
 8009bda:	4623      	mov	r3, r4
 8009bdc:	d807      	bhi.n	8009bee <memmove+0x20>
 8009bde:	1e43      	subs	r3, r0, #1
 8009be0:	42a1      	cmp	r1, r4
 8009be2:	d008      	beq.n	8009bf6 <memmove+0x28>
 8009be4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009be8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bec:	e7f8      	b.n	8009be0 <memmove+0x12>
 8009bee:	4601      	mov	r1, r0
 8009bf0:	4402      	add	r2, r0
 8009bf2:	428a      	cmp	r2, r1
 8009bf4:	d100      	bne.n	8009bf8 <memmove+0x2a>
 8009bf6:	bd10      	pop	{r4, pc}
 8009bf8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bfc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c00:	e7f7      	b.n	8009bf2 <memmove+0x24>

08009c02 <_realloc_r>:
 8009c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c06:	4680      	mov	r8, r0
 8009c08:	4614      	mov	r4, r2
 8009c0a:	460e      	mov	r6, r1
 8009c0c:	b921      	cbnz	r1, 8009c18 <_realloc_r+0x16>
 8009c0e:	4611      	mov	r1, r2
 8009c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c14:	f7fc b9a2 	b.w	8005f5c <_malloc_r>
 8009c18:	b92a      	cbnz	r2, 8009c26 <_realloc_r+0x24>
 8009c1a:	f7fc f937 	bl	8005e8c <_free_r>
 8009c1e:	4625      	mov	r5, r4
 8009c20:	4628      	mov	r0, r5
 8009c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c26:	f000 fc53 	bl	800a4d0 <_malloc_usable_size_r>
 8009c2a:	4284      	cmp	r4, r0
 8009c2c:	4607      	mov	r7, r0
 8009c2e:	d802      	bhi.n	8009c36 <_realloc_r+0x34>
 8009c30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c34:	d812      	bhi.n	8009c5c <_realloc_r+0x5a>
 8009c36:	4621      	mov	r1, r4
 8009c38:	4640      	mov	r0, r8
 8009c3a:	f7fc f98f 	bl	8005f5c <_malloc_r>
 8009c3e:	4605      	mov	r5, r0
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d0ed      	beq.n	8009c20 <_realloc_r+0x1e>
 8009c44:	42bc      	cmp	r4, r7
 8009c46:	4622      	mov	r2, r4
 8009c48:	4631      	mov	r1, r6
 8009c4a:	bf28      	it	cs
 8009c4c:	463a      	movcs	r2, r7
 8009c4e:	f7fc f907 	bl	8005e60 <memcpy>
 8009c52:	4631      	mov	r1, r6
 8009c54:	4640      	mov	r0, r8
 8009c56:	f7fc f919 	bl	8005e8c <_free_r>
 8009c5a:	e7e1      	b.n	8009c20 <_realloc_r+0x1e>
 8009c5c:	4635      	mov	r5, r6
 8009c5e:	e7df      	b.n	8009c20 <_realloc_r+0x1e>

08009c60 <__sfputc_r>:
 8009c60:	6893      	ldr	r3, [r2, #8]
 8009c62:	b410      	push	{r4}
 8009c64:	3b01      	subs	r3, #1
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	6093      	str	r3, [r2, #8]
 8009c6a:	da07      	bge.n	8009c7c <__sfputc_r+0x1c>
 8009c6c:	6994      	ldr	r4, [r2, #24]
 8009c6e:	42a3      	cmp	r3, r4
 8009c70:	db01      	blt.n	8009c76 <__sfputc_r+0x16>
 8009c72:	290a      	cmp	r1, #10
 8009c74:	d102      	bne.n	8009c7c <__sfputc_r+0x1c>
 8009c76:	bc10      	pop	{r4}
 8009c78:	f000 b94a 	b.w	8009f10 <__swbuf_r>
 8009c7c:	6813      	ldr	r3, [r2, #0]
 8009c7e:	1c58      	adds	r0, r3, #1
 8009c80:	6010      	str	r0, [r2, #0]
 8009c82:	7019      	strb	r1, [r3, #0]
 8009c84:	4608      	mov	r0, r1
 8009c86:	bc10      	pop	{r4}
 8009c88:	4770      	bx	lr

08009c8a <__sfputs_r>:
 8009c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8c:	4606      	mov	r6, r0
 8009c8e:	460f      	mov	r7, r1
 8009c90:	4614      	mov	r4, r2
 8009c92:	18d5      	adds	r5, r2, r3
 8009c94:	42ac      	cmp	r4, r5
 8009c96:	d101      	bne.n	8009c9c <__sfputs_r+0x12>
 8009c98:	2000      	movs	r0, #0
 8009c9a:	e007      	b.n	8009cac <__sfputs_r+0x22>
 8009c9c:	463a      	mov	r2, r7
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ca4:	f7ff ffdc 	bl	8009c60 <__sfputc_r>
 8009ca8:	1c43      	adds	r3, r0, #1
 8009caa:	d1f3      	bne.n	8009c94 <__sfputs_r+0xa>
 8009cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009cb0 <_vfiprintf_r>:
 8009cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb4:	460d      	mov	r5, r1
 8009cb6:	4614      	mov	r4, r2
 8009cb8:	4698      	mov	r8, r3
 8009cba:	4606      	mov	r6, r0
 8009cbc:	b09d      	sub	sp, #116	; 0x74
 8009cbe:	b118      	cbz	r0, 8009cc8 <_vfiprintf_r+0x18>
 8009cc0:	6983      	ldr	r3, [r0, #24]
 8009cc2:	b90b      	cbnz	r3, 8009cc8 <_vfiprintf_r+0x18>
 8009cc4:	f000 fb02 	bl	800a2cc <__sinit>
 8009cc8:	4b89      	ldr	r3, [pc, #548]	; (8009ef0 <_vfiprintf_r+0x240>)
 8009cca:	429d      	cmp	r5, r3
 8009ccc:	d11b      	bne.n	8009d06 <_vfiprintf_r+0x56>
 8009cce:	6875      	ldr	r5, [r6, #4]
 8009cd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cd2:	07d9      	lsls	r1, r3, #31
 8009cd4:	d405      	bmi.n	8009ce2 <_vfiprintf_r+0x32>
 8009cd6:	89ab      	ldrh	r3, [r5, #12]
 8009cd8:	059a      	lsls	r2, r3, #22
 8009cda:	d402      	bmi.n	8009ce2 <_vfiprintf_r+0x32>
 8009cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cde:	f7ff ff74 	bl	8009bca <__retarget_lock_acquire_recursive>
 8009ce2:	89ab      	ldrh	r3, [r5, #12]
 8009ce4:	071b      	lsls	r3, r3, #28
 8009ce6:	d501      	bpl.n	8009cec <_vfiprintf_r+0x3c>
 8009ce8:	692b      	ldr	r3, [r5, #16]
 8009cea:	b9eb      	cbnz	r3, 8009d28 <_vfiprintf_r+0x78>
 8009cec:	4629      	mov	r1, r5
 8009cee:	4630      	mov	r0, r6
 8009cf0:	f000 f960 	bl	8009fb4 <__swsetup_r>
 8009cf4:	b1c0      	cbz	r0, 8009d28 <_vfiprintf_r+0x78>
 8009cf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cf8:	07dc      	lsls	r4, r3, #31
 8009cfa:	d50e      	bpl.n	8009d1a <_vfiprintf_r+0x6a>
 8009cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009d00:	b01d      	add	sp, #116	; 0x74
 8009d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d06:	4b7b      	ldr	r3, [pc, #492]	; (8009ef4 <_vfiprintf_r+0x244>)
 8009d08:	429d      	cmp	r5, r3
 8009d0a:	d101      	bne.n	8009d10 <_vfiprintf_r+0x60>
 8009d0c:	68b5      	ldr	r5, [r6, #8]
 8009d0e:	e7df      	b.n	8009cd0 <_vfiprintf_r+0x20>
 8009d10:	4b79      	ldr	r3, [pc, #484]	; (8009ef8 <_vfiprintf_r+0x248>)
 8009d12:	429d      	cmp	r5, r3
 8009d14:	bf08      	it	eq
 8009d16:	68f5      	ldreq	r5, [r6, #12]
 8009d18:	e7da      	b.n	8009cd0 <_vfiprintf_r+0x20>
 8009d1a:	89ab      	ldrh	r3, [r5, #12]
 8009d1c:	0598      	lsls	r0, r3, #22
 8009d1e:	d4ed      	bmi.n	8009cfc <_vfiprintf_r+0x4c>
 8009d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d22:	f7ff ff53 	bl	8009bcc <__retarget_lock_release_recursive>
 8009d26:	e7e9      	b.n	8009cfc <_vfiprintf_r+0x4c>
 8009d28:	2300      	movs	r3, #0
 8009d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d2c:	2320      	movs	r3, #32
 8009d2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d32:	2330      	movs	r3, #48	; 0x30
 8009d34:	f04f 0901 	mov.w	r9, #1
 8009d38:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d3c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009efc <_vfiprintf_r+0x24c>
 8009d40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d44:	4623      	mov	r3, r4
 8009d46:	469a      	mov	sl, r3
 8009d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d4c:	b10a      	cbz	r2, 8009d52 <_vfiprintf_r+0xa2>
 8009d4e:	2a25      	cmp	r2, #37	; 0x25
 8009d50:	d1f9      	bne.n	8009d46 <_vfiprintf_r+0x96>
 8009d52:	ebba 0b04 	subs.w	fp, sl, r4
 8009d56:	d00b      	beq.n	8009d70 <_vfiprintf_r+0xc0>
 8009d58:	465b      	mov	r3, fp
 8009d5a:	4622      	mov	r2, r4
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	4630      	mov	r0, r6
 8009d60:	f7ff ff93 	bl	8009c8a <__sfputs_r>
 8009d64:	3001      	adds	r0, #1
 8009d66:	f000 80aa 	beq.w	8009ebe <_vfiprintf_r+0x20e>
 8009d6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d6c:	445a      	add	r2, fp
 8009d6e:	9209      	str	r2, [sp, #36]	; 0x24
 8009d70:	f89a 3000 	ldrb.w	r3, [sl]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f000 80a2 	beq.w	8009ebe <_vfiprintf_r+0x20e>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d84:	f10a 0a01 	add.w	sl, sl, #1
 8009d88:	9304      	str	r3, [sp, #16]
 8009d8a:	9307      	str	r3, [sp, #28]
 8009d8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d90:	931a      	str	r3, [sp, #104]	; 0x68
 8009d92:	4654      	mov	r4, sl
 8009d94:	2205      	movs	r2, #5
 8009d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d9a:	4858      	ldr	r0, [pc, #352]	; (8009efc <_vfiprintf_r+0x24c>)
 8009d9c:	f7ff f87a 	bl	8008e94 <memchr>
 8009da0:	9a04      	ldr	r2, [sp, #16]
 8009da2:	b9d8      	cbnz	r0, 8009ddc <_vfiprintf_r+0x12c>
 8009da4:	06d1      	lsls	r1, r2, #27
 8009da6:	bf44      	itt	mi
 8009da8:	2320      	movmi	r3, #32
 8009daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dae:	0713      	lsls	r3, r2, #28
 8009db0:	bf44      	itt	mi
 8009db2:	232b      	movmi	r3, #43	; 0x2b
 8009db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009db8:	f89a 3000 	ldrb.w	r3, [sl]
 8009dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8009dbe:	d015      	beq.n	8009dec <_vfiprintf_r+0x13c>
 8009dc0:	4654      	mov	r4, sl
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	f04f 0c0a 	mov.w	ip, #10
 8009dc8:	9a07      	ldr	r2, [sp, #28]
 8009dca:	4621      	mov	r1, r4
 8009dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dd0:	3b30      	subs	r3, #48	; 0x30
 8009dd2:	2b09      	cmp	r3, #9
 8009dd4:	d94e      	bls.n	8009e74 <_vfiprintf_r+0x1c4>
 8009dd6:	b1b0      	cbz	r0, 8009e06 <_vfiprintf_r+0x156>
 8009dd8:	9207      	str	r2, [sp, #28]
 8009dda:	e014      	b.n	8009e06 <_vfiprintf_r+0x156>
 8009ddc:	eba0 0308 	sub.w	r3, r0, r8
 8009de0:	fa09 f303 	lsl.w	r3, r9, r3
 8009de4:	4313      	orrs	r3, r2
 8009de6:	46a2      	mov	sl, r4
 8009de8:	9304      	str	r3, [sp, #16]
 8009dea:	e7d2      	b.n	8009d92 <_vfiprintf_r+0xe2>
 8009dec:	9b03      	ldr	r3, [sp, #12]
 8009dee:	1d19      	adds	r1, r3, #4
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	9103      	str	r1, [sp, #12]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	bfbb      	ittet	lt
 8009df8:	425b      	neglt	r3, r3
 8009dfa:	f042 0202 	orrlt.w	r2, r2, #2
 8009dfe:	9307      	strge	r3, [sp, #28]
 8009e00:	9307      	strlt	r3, [sp, #28]
 8009e02:	bfb8      	it	lt
 8009e04:	9204      	strlt	r2, [sp, #16]
 8009e06:	7823      	ldrb	r3, [r4, #0]
 8009e08:	2b2e      	cmp	r3, #46	; 0x2e
 8009e0a:	d10c      	bne.n	8009e26 <_vfiprintf_r+0x176>
 8009e0c:	7863      	ldrb	r3, [r4, #1]
 8009e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e10:	d135      	bne.n	8009e7e <_vfiprintf_r+0x1ce>
 8009e12:	9b03      	ldr	r3, [sp, #12]
 8009e14:	3402      	adds	r4, #2
 8009e16:	1d1a      	adds	r2, r3, #4
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	9203      	str	r2, [sp, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	bfb8      	it	lt
 8009e20:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e24:	9305      	str	r3, [sp, #20]
 8009e26:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009f00 <_vfiprintf_r+0x250>
 8009e2a:	2203      	movs	r2, #3
 8009e2c:	4650      	mov	r0, sl
 8009e2e:	7821      	ldrb	r1, [r4, #0]
 8009e30:	f7ff f830 	bl	8008e94 <memchr>
 8009e34:	b140      	cbz	r0, 8009e48 <_vfiprintf_r+0x198>
 8009e36:	2340      	movs	r3, #64	; 0x40
 8009e38:	eba0 000a 	sub.w	r0, r0, sl
 8009e3c:	fa03 f000 	lsl.w	r0, r3, r0
 8009e40:	9b04      	ldr	r3, [sp, #16]
 8009e42:	3401      	adds	r4, #1
 8009e44:	4303      	orrs	r3, r0
 8009e46:	9304      	str	r3, [sp, #16]
 8009e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e4c:	2206      	movs	r2, #6
 8009e4e:	482d      	ldr	r0, [pc, #180]	; (8009f04 <_vfiprintf_r+0x254>)
 8009e50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e54:	f7ff f81e 	bl	8008e94 <memchr>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d03f      	beq.n	8009edc <_vfiprintf_r+0x22c>
 8009e5c:	4b2a      	ldr	r3, [pc, #168]	; (8009f08 <_vfiprintf_r+0x258>)
 8009e5e:	bb1b      	cbnz	r3, 8009ea8 <_vfiprintf_r+0x1f8>
 8009e60:	9b03      	ldr	r3, [sp, #12]
 8009e62:	3307      	adds	r3, #7
 8009e64:	f023 0307 	bic.w	r3, r3, #7
 8009e68:	3308      	adds	r3, #8
 8009e6a:	9303      	str	r3, [sp, #12]
 8009e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e6e:	443b      	add	r3, r7
 8009e70:	9309      	str	r3, [sp, #36]	; 0x24
 8009e72:	e767      	b.n	8009d44 <_vfiprintf_r+0x94>
 8009e74:	460c      	mov	r4, r1
 8009e76:	2001      	movs	r0, #1
 8009e78:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e7c:	e7a5      	b.n	8009dca <_vfiprintf_r+0x11a>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f04f 0c0a 	mov.w	ip, #10
 8009e84:	4619      	mov	r1, r3
 8009e86:	3401      	adds	r4, #1
 8009e88:	9305      	str	r3, [sp, #20]
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e90:	3a30      	subs	r2, #48	; 0x30
 8009e92:	2a09      	cmp	r2, #9
 8009e94:	d903      	bls.n	8009e9e <_vfiprintf_r+0x1ee>
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d0c5      	beq.n	8009e26 <_vfiprintf_r+0x176>
 8009e9a:	9105      	str	r1, [sp, #20]
 8009e9c:	e7c3      	b.n	8009e26 <_vfiprintf_r+0x176>
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ea6:	e7f0      	b.n	8009e8a <_vfiprintf_r+0x1da>
 8009ea8:	ab03      	add	r3, sp, #12
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	462a      	mov	r2, r5
 8009eae:	4630      	mov	r0, r6
 8009eb0:	4b16      	ldr	r3, [pc, #88]	; (8009f0c <_vfiprintf_r+0x25c>)
 8009eb2:	a904      	add	r1, sp, #16
 8009eb4:	f7fc f964 	bl	8006180 <_printf_float>
 8009eb8:	4607      	mov	r7, r0
 8009eba:	1c78      	adds	r0, r7, #1
 8009ebc:	d1d6      	bne.n	8009e6c <_vfiprintf_r+0x1bc>
 8009ebe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ec0:	07d9      	lsls	r1, r3, #31
 8009ec2:	d405      	bmi.n	8009ed0 <_vfiprintf_r+0x220>
 8009ec4:	89ab      	ldrh	r3, [r5, #12]
 8009ec6:	059a      	lsls	r2, r3, #22
 8009ec8:	d402      	bmi.n	8009ed0 <_vfiprintf_r+0x220>
 8009eca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ecc:	f7ff fe7e 	bl	8009bcc <__retarget_lock_release_recursive>
 8009ed0:	89ab      	ldrh	r3, [r5, #12]
 8009ed2:	065b      	lsls	r3, r3, #25
 8009ed4:	f53f af12 	bmi.w	8009cfc <_vfiprintf_r+0x4c>
 8009ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eda:	e711      	b.n	8009d00 <_vfiprintf_r+0x50>
 8009edc:	ab03      	add	r3, sp, #12
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	462a      	mov	r2, r5
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	4b09      	ldr	r3, [pc, #36]	; (8009f0c <_vfiprintf_r+0x25c>)
 8009ee6:	a904      	add	r1, sp, #16
 8009ee8:	f7fc fbe6 	bl	80066b8 <_printf_i>
 8009eec:	e7e4      	b.n	8009eb8 <_vfiprintf_r+0x208>
 8009eee:	bf00      	nop
 8009ef0:	0800ad64 	.word	0x0800ad64
 8009ef4:	0800ad84 	.word	0x0800ad84
 8009ef8:	0800ad44 	.word	0x0800ad44
 8009efc:	0800acf4 	.word	0x0800acf4
 8009f00:	0800acfa 	.word	0x0800acfa
 8009f04:	0800acfe 	.word	0x0800acfe
 8009f08:	08006181 	.word	0x08006181
 8009f0c:	08009c8b 	.word	0x08009c8b

08009f10 <__swbuf_r>:
 8009f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f12:	460e      	mov	r6, r1
 8009f14:	4614      	mov	r4, r2
 8009f16:	4605      	mov	r5, r0
 8009f18:	b118      	cbz	r0, 8009f22 <__swbuf_r+0x12>
 8009f1a:	6983      	ldr	r3, [r0, #24]
 8009f1c:	b90b      	cbnz	r3, 8009f22 <__swbuf_r+0x12>
 8009f1e:	f000 f9d5 	bl	800a2cc <__sinit>
 8009f22:	4b21      	ldr	r3, [pc, #132]	; (8009fa8 <__swbuf_r+0x98>)
 8009f24:	429c      	cmp	r4, r3
 8009f26:	d12b      	bne.n	8009f80 <__swbuf_r+0x70>
 8009f28:	686c      	ldr	r4, [r5, #4]
 8009f2a:	69a3      	ldr	r3, [r4, #24]
 8009f2c:	60a3      	str	r3, [r4, #8]
 8009f2e:	89a3      	ldrh	r3, [r4, #12]
 8009f30:	071a      	lsls	r2, r3, #28
 8009f32:	d52f      	bpl.n	8009f94 <__swbuf_r+0x84>
 8009f34:	6923      	ldr	r3, [r4, #16]
 8009f36:	b36b      	cbz	r3, 8009f94 <__swbuf_r+0x84>
 8009f38:	6923      	ldr	r3, [r4, #16]
 8009f3a:	6820      	ldr	r0, [r4, #0]
 8009f3c:	b2f6      	uxtb	r6, r6
 8009f3e:	1ac0      	subs	r0, r0, r3
 8009f40:	6963      	ldr	r3, [r4, #20]
 8009f42:	4637      	mov	r7, r6
 8009f44:	4283      	cmp	r3, r0
 8009f46:	dc04      	bgt.n	8009f52 <__swbuf_r+0x42>
 8009f48:	4621      	mov	r1, r4
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f000 f92a 	bl	800a1a4 <_fflush_r>
 8009f50:	bb30      	cbnz	r0, 8009fa0 <__swbuf_r+0x90>
 8009f52:	68a3      	ldr	r3, [r4, #8]
 8009f54:	3001      	adds	r0, #1
 8009f56:	3b01      	subs	r3, #1
 8009f58:	60a3      	str	r3, [r4, #8]
 8009f5a:	6823      	ldr	r3, [r4, #0]
 8009f5c:	1c5a      	adds	r2, r3, #1
 8009f5e:	6022      	str	r2, [r4, #0]
 8009f60:	701e      	strb	r6, [r3, #0]
 8009f62:	6963      	ldr	r3, [r4, #20]
 8009f64:	4283      	cmp	r3, r0
 8009f66:	d004      	beq.n	8009f72 <__swbuf_r+0x62>
 8009f68:	89a3      	ldrh	r3, [r4, #12]
 8009f6a:	07db      	lsls	r3, r3, #31
 8009f6c:	d506      	bpl.n	8009f7c <__swbuf_r+0x6c>
 8009f6e:	2e0a      	cmp	r6, #10
 8009f70:	d104      	bne.n	8009f7c <__swbuf_r+0x6c>
 8009f72:	4621      	mov	r1, r4
 8009f74:	4628      	mov	r0, r5
 8009f76:	f000 f915 	bl	800a1a4 <_fflush_r>
 8009f7a:	b988      	cbnz	r0, 8009fa0 <__swbuf_r+0x90>
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f80:	4b0a      	ldr	r3, [pc, #40]	; (8009fac <__swbuf_r+0x9c>)
 8009f82:	429c      	cmp	r4, r3
 8009f84:	d101      	bne.n	8009f8a <__swbuf_r+0x7a>
 8009f86:	68ac      	ldr	r4, [r5, #8]
 8009f88:	e7cf      	b.n	8009f2a <__swbuf_r+0x1a>
 8009f8a:	4b09      	ldr	r3, [pc, #36]	; (8009fb0 <__swbuf_r+0xa0>)
 8009f8c:	429c      	cmp	r4, r3
 8009f8e:	bf08      	it	eq
 8009f90:	68ec      	ldreq	r4, [r5, #12]
 8009f92:	e7ca      	b.n	8009f2a <__swbuf_r+0x1a>
 8009f94:	4621      	mov	r1, r4
 8009f96:	4628      	mov	r0, r5
 8009f98:	f000 f80c 	bl	8009fb4 <__swsetup_r>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	d0cb      	beq.n	8009f38 <__swbuf_r+0x28>
 8009fa0:	f04f 37ff 	mov.w	r7, #4294967295
 8009fa4:	e7ea      	b.n	8009f7c <__swbuf_r+0x6c>
 8009fa6:	bf00      	nop
 8009fa8:	0800ad64 	.word	0x0800ad64
 8009fac:	0800ad84 	.word	0x0800ad84
 8009fb0:	0800ad44 	.word	0x0800ad44

08009fb4 <__swsetup_r>:
 8009fb4:	4b32      	ldr	r3, [pc, #200]	; (800a080 <__swsetup_r+0xcc>)
 8009fb6:	b570      	push	{r4, r5, r6, lr}
 8009fb8:	681d      	ldr	r5, [r3, #0]
 8009fba:	4606      	mov	r6, r0
 8009fbc:	460c      	mov	r4, r1
 8009fbe:	b125      	cbz	r5, 8009fca <__swsetup_r+0x16>
 8009fc0:	69ab      	ldr	r3, [r5, #24]
 8009fc2:	b913      	cbnz	r3, 8009fca <__swsetup_r+0x16>
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	f000 f981 	bl	800a2cc <__sinit>
 8009fca:	4b2e      	ldr	r3, [pc, #184]	; (800a084 <__swsetup_r+0xd0>)
 8009fcc:	429c      	cmp	r4, r3
 8009fce:	d10f      	bne.n	8009ff0 <__swsetup_r+0x3c>
 8009fd0:	686c      	ldr	r4, [r5, #4]
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fd8:	0719      	lsls	r1, r3, #28
 8009fda:	d42c      	bmi.n	800a036 <__swsetup_r+0x82>
 8009fdc:	06dd      	lsls	r5, r3, #27
 8009fde:	d411      	bmi.n	800a004 <__swsetup_r+0x50>
 8009fe0:	2309      	movs	r3, #9
 8009fe2:	6033      	str	r3, [r6, #0]
 8009fe4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fec:	81a3      	strh	r3, [r4, #12]
 8009fee:	e03e      	b.n	800a06e <__swsetup_r+0xba>
 8009ff0:	4b25      	ldr	r3, [pc, #148]	; (800a088 <__swsetup_r+0xd4>)
 8009ff2:	429c      	cmp	r4, r3
 8009ff4:	d101      	bne.n	8009ffa <__swsetup_r+0x46>
 8009ff6:	68ac      	ldr	r4, [r5, #8]
 8009ff8:	e7eb      	b.n	8009fd2 <__swsetup_r+0x1e>
 8009ffa:	4b24      	ldr	r3, [pc, #144]	; (800a08c <__swsetup_r+0xd8>)
 8009ffc:	429c      	cmp	r4, r3
 8009ffe:	bf08      	it	eq
 800a000:	68ec      	ldreq	r4, [r5, #12]
 800a002:	e7e6      	b.n	8009fd2 <__swsetup_r+0x1e>
 800a004:	0758      	lsls	r0, r3, #29
 800a006:	d512      	bpl.n	800a02e <__swsetup_r+0x7a>
 800a008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a00a:	b141      	cbz	r1, 800a01e <__swsetup_r+0x6a>
 800a00c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a010:	4299      	cmp	r1, r3
 800a012:	d002      	beq.n	800a01a <__swsetup_r+0x66>
 800a014:	4630      	mov	r0, r6
 800a016:	f7fb ff39 	bl	8005e8c <_free_r>
 800a01a:	2300      	movs	r3, #0
 800a01c:	6363      	str	r3, [r4, #52]	; 0x34
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a024:	81a3      	strh	r3, [r4, #12]
 800a026:	2300      	movs	r3, #0
 800a028:	6063      	str	r3, [r4, #4]
 800a02a:	6923      	ldr	r3, [r4, #16]
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	f043 0308 	orr.w	r3, r3, #8
 800a034:	81a3      	strh	r3, [r4, #12]
 800a036:	6923      	ldr	r3, [r4, #16]
 800a038:	b94b      	cbnz	r3, 800a04e <__swsetup_r+0x9a>
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a044:	d003      	beq.n	800a04e <__swsetup_r+0x9a>
 800a046:	4621      	mov	r1, r4
 800a048:	4630      	mov	r0, r6
 800a04a:	f000 fa01 	bl	800a450 <__smakebuf_r>
 800a04e:	89a0      	ldrh	r0, [r4, #12]
 800a050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a054:	f010 0301 	ands.w	r3, r0, #1
 800a058:	d00a      	beq.n	800a070 <__swsetup_r+0xbc>
 800a05a:	2300      	movs	r3, #0
 800a05c:	60a3      	str	r3, [r4, #8]
 800a05e:	6963      	ldr	r3, [r4, #20]
 800a060:	425b      	negs	r3, r3
 800a062:	61a3      	str	r3, [r4, #24]
 800a064:	6923      	ldr	r3, [r4, #16]
 800a066:	b943      	cbnz	r3, 800a07a <__swsetup_r+0xc6>
 800a068:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a06c:	d1ba      	bne.n	8009fe4 <__swsetup_r+0x30>
 800a06e:	bd70      	pop	{r4, r5, r6, pc}
 800a070:	0781      	lsls	r1, r0, #30
 800a072:	bf58      	it	pl
 800a074:	6963      	ldrpl	r3, [r4, #20]
 800a076:	60a3      	str	r3, [r4, #8]
 800a078:	e7f4      	b.n	800a064 <__swsetup_r+0xb0>
 800a07a:	2000      	movs	r0, #0
 800a07c:	e7f7      	b.n	800a06e <__swsetup_r+0xba>
 800a07e:	bf00      	nop
 800a080:	20000014 	.word	0x20000014
 800a084:	0800ad64 	.word	0x0800ad64
 800a088:	0800ad84 	.word	0x0800ad84
 800a08c:	0800ad44 	.word	0x0800ad44

0800a090 <abort>:
 800a090:	2006      	movs	r0, #6
 800a092:	b508      	push	{r3, lr}
 800a094:	f000 fa4c 	bl	800a530 <raise>
 800a098:	2001      	movs	r0, #1
 800a09a:	f7f8 fb36 	bl	800270a <_exit>
	...

0800a0a0 <__sflush_r>:
 800a0a0:	898a      	ldrh	r2, [r1, #12]
 800a0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a4:	4605      	mov	r5, r0
 800a0a6:	0710      	lsls	r0, r2, #28
 800a0a8:	460c      	mov	r4, r1
 800a0aa:	d457      	bmi.n	800a15c <__sflush_r+0xbc>
 800a0ac:	684b      	ldr	r3, [r1, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	dc04      	bgt.n	800a0bc <__sflush_r+0x1c>
 800a0b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	dc01      	bgt.n	800a0bc <__sflush_r+0x1c>
 800a0b8:	2000      	movs	r0, #0
 800a0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0be:	2e00      	cmp	r6, #0
 800a0c0:	d0fa      	beq.n	800a0b8 <__sflush_r+0x18>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0c8:	682f      	ldr	r7, [r5, #0]
 800a0ca:	602b      	str	r3, [r5, #0]
 800a0cc:	d032      	beq.n	800a134 <__sflush_r+0x94>
 800a0ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0d0:	89a3      	ldrh	r3, [r4, #12]
 800a0d2:	075a      	lsls	r2, r3, #29
 800a0d4:	d505      	bpl.n	800a0e2 <__sflush_r+0x42>
 800a0d6:	6863      	ldr	r3, [r4, #4]
 800a0d8:	1ac0      	subs	r0, r0, r3
 800a0da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0dc:	b10b      	cbz	r3, 800a0e2 <__sflush_r+0x42>
 800a0de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0e0:	1ac0      	subs	r0, r0, r3
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	6a21      	ldr	r1, [r4, #32]
 800a0ec:	47b0      	blx	r6
 800a0ee:	1c43      	adds	r3, r0, #1
 800a0f0:	89a3      	ldrh	r3, [r4, #12]
 800a0f2:	d106      	bne.n	800a102 <__sflush_r+0x62>
 800a0f4:	6829      	ldr	r1, [r5, #0]
 800a0f6:	291d      	cmp	r1, #29
 800a0f8:	d82c      	bhi.n	800a154 <__sflush_r+0xb4>
 800a0fa:	4a29      	ldr	r2, [pc, #164]	; (800a1a0 <__sflush_r+0x100>)
 800a0fc:	40ca      	lsrs	r2, r1
 800a0fe:	07d6      	lsls	r6, r2, #31
 800a100:	d528      	bpl.n	800a154 <__sflush_r+0xb4>
 800a102:	2200      	movs	r2, #0
 800a104:	6062      	str	r2, [r4, #4]
 800a106:	6922      	ldr	r2, [r4, #16]
 800a108:	04d9      	lsls	r1, r3, #19
 800a10a:	6022      	str	r2, [r4, #0]
 800a10c:	d504      	bpl.n	800a118 <__sflush_r+0x78>
 800a10e:	1c42      	adds	r2, r0, #1
 800a110:	d101      	bne.n	800a116 <__sflush_r+0x76>
 800a112:	682b      	ldr	r3, [r5, #0]
 800a114:	b903      	cbnz	r3, 800a118 <__sflush_r+0x78>
 800a116:	6560      	str	r0, [r4, #84]	; 0x54
 800a118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a11a:	602f      	str	r7, [r5, #0]
 800a11c:	2900      	cmp	r1, #0
 800a11e:	d0cb      	beq.n	800a0b8 <__sflush_r+0x18>
 800a120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a124:	4299      	cmp	r1, r3
 800a126:	d002      	beq.n	800a12e <__sflush_r+0x8e>
 800a128:	4628      	mov	r0, r5
 800a12a:	f7fb feaf 	bl	8005e8c <_free_r>
 800a12e:	2000      	movs	r0, #0
 800a130:	6360      	str	r0, [r4, #52]	; 0x34
 800a132:	e7c2      	b.n	800a0ba <__sflush_r+0x1a>
 800a134:	6a21      	ldr	r1, [r4, #32]
 800a136:	2301      	movs	r3, #1
 800a138:	4628      	mov	r0, r5
 800a13a:	47b0      	blx	r6
 800a13c:	1c41      	adds	r1, r0, #1
 800a13e:	d1c7      	bne.n	800a0d0 <__sflush_r+0x30>
 800a140:	682b      	ldr	r3, [r5, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0c4      	beq.n	800a0d0 <__sflush_r+0x30>
 800a146:	2b1d      	cmp	r3, #29
 800a148:	d001      	beq.n	800a14e <__sflush_r+0xae>
 800a14a:	2b16      	cmp	r3, #22
 800a14c:	d101      	bne.n	800a152 <__sflush_r+0xb2>
 800a14e:	602f      	str	r7, [r5, #0]
 800a150:	e7b2      	b.n	800a0b8 <__sflush_r+0x18>
 800a152:	89a3      	ldrh	r3, [r4, #12]
 800a154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a158:	81a3      	strh	r3, [r4, #12]
 800a15a:	e7ae      	b.n	800a0ba <__sflush_r+0x1a>
 800a15c:	690f      	ldr	r7, [r1, #16]
 800a15e:	2f00      	cmp	r7, #0
 800a160:	d0aa      	beq.n	800a0b8 <__sflush_r+0x18>
 800a162:	0793      	lsls	r3, r2, #30
 800a164:	bf18      	it	ne
 800a166:	2300      	movne	r3, #0
 800a168:	680e      	ldr	r6, [r1, #0]
 800a16a:	bf08      	it	eq
 800a16c:	694b      	ldreq	r3, [r1, #20]
 800a16e:	1bf6      	subs	r6, r6, r7
 800a170:	600f      	str	r7, [r1, #0]
 800a172:	608b      	str	r3, [r1, #8]
 800a174:	2e00      	cmp	r6, #0
 800a176:	dd9f      	ble.n	800a0b8 <__sflush_r+0x18>
 800a178:	4633      	mov	r3, r6
 800a17a:	463a      	mov	r2, r7
 800a17c:	4628      	mov	r0, r5
 800a17e:	6a21      	ldr	r1, [r4, #32]
 800a180:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a184:	47e0      	blx	ip
 800a186:	2800      	cmp	r0, #0
 800a188:	dc06      	bgt.n	800a198 <__sflush_r+0xf8>
 800a18a:	89a3      	ldrh	r3, [r4, #12]
 800a18c:	f04f 30ff 	mov.w	r0, #4294967295
 800a190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a194:	81a3      	strh	r3, [r4, #12]
 800a196:	e790      	b.n	800a0ba <__sflush_r+0x1a>
 800a198:	4407      	add	r7, r0
 800a19a:	1a36      	subs	r6, r6, r0
 800a19c:	e7ea      	b.n	800a174 <__sflush_r+0xd4>
 800a19e:	bf00      	nop
 800a1a0:	20400001 	.word	0x20400001

0800a1a4 <_fflush_r>:
 800a1a4:	b538      	push	{r3, r4, r5, lr}
 800a1a6:	690b      	ldr	r3, [r1, #16]
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	b913      	cbnz	r3, 800a1b4 <_fflush_r+0x10>
 800a1ae:	2500      	movs	r5, #0
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	bd38      	pop	{r3, r4, r5, pc}
 800a1b4:	b118      	cbz	r0, 800a1be <_fflush_r+0x1a>
 800a1b6:	6983      	ldr	r3, [r0, #24]
 800a1b8:	b90b      	cbnz	r3, 800a1be <_fflush_r+0x1a>
 800a1ba:	f000 f887 	bl	800a2cc <__sinit>
 800a1be:	4b14      	ldr	r3, [pc, #80]	; (800a210 <_fflush_r+0x6c>)
 800a1c0:	429c      	cmp	r4, r3
 800a1c2:	d11b      	bne.n	800a1fc <_fflush_r+0x58>
 800a1c4:	686c      	ldr	r4, [r5, #4]
 800a1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d0ef      	beq.n	800a1ae <_fflush_r+0xa>
 800a1ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1d0:	07d0      	lsls	r0, r2, #31
 800a1d2:	d404      	bmi.n	800a1de <_fflush_r+0x3a>
 800a1d4:	0599      	lsls	r1, r3, #22
 800a1d6:	d402      	bmi.n	800a1de <_fflush_r+0x3a>
 800a1d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1da:	f7ff fcf6 	bl	8009bca <__retarget_lock_acquire_recursive>
 800a1de:	4628      	mov	r0, r5
 800a1e0:	4621      	mov	r1, r4
 800a1e2:	f7ff ff5d 	bl	800a0a0 <__sflush_r>
 800a1e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1e8:	4605      	mov	r5, r0
 800a1ea:	07da      	lsls	r2, r3, #31
 800a1ec:	d4e0      	bmi.n	800a1b0 <_fflush_r+0xc>
 800a1ee:	89a3      	ldrh	r3, [r4, #12]
 800a1f0:	059b      	lsls	r3, r3, #22
 800a1f2:	d4dd      	bmi.n	800a1b0 <_fflush_r+0xc>
 800a1f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1f6:	f7ff fce9 	bl	8009bcc <__retarget_lock_release_recursive>
 800a1fa:	e7d9      	b.n	800a1b0 <_fflush_r+0xc>
 800a1fc:	4b05      	ldr	r3, [pc, #20]	; (800a214 <_fflush_r+0x70>)
 800a1fe:	429c      	cmp	r4, r3
 800a200:	d101      	bne.n	800a206 <_fflush_r+0x62>
 800a202:	68ac      	ldr	r4, [r5, #8]
 800a204:	e7df      	b.n	800a1c6 <_fflush_r+0x22>
 800a206:	4b04      	ldr	r3, [pc, #16]	; (800a218 <_fflush_r+0x74>)
 800a208:	429c      	cmp	r4, r3
 800a20a:	bf08      	it	eq
 800a20c:	68ec      	ldreq	r4, [r5, #12]
 800a20e:	e7da      	b.n	800a1c6 <_fflush_r+0x22>
 800a210:	0800ad64 	.word	0x0800ad64
 800a214:	0800ad84 	.word	0x0800ad84
 800a218:	0800ad44 	.word	0x0800ad44

0800a21c <std>:
 800a21c:	2300      	movs	r3, #0
 800a21e:	b510      	push	{r4, lr}
 800a220:	4604      	mov	r4, r0
 800a222:	e9c0 3300 	strd	r3, r3, [r0]
 800a226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a22a:	6083      	str	r3, [r0, #8]
 800a22c:	8181      	strh	r1, [r0, #12]
 800a22e:	6643      	str	r3, [r0, #100]	; 0x64
 800a230:	81c2      	strh	r2, [r0, #14]
 800a232:	6183      	str	r3, [r0, #24]
 800a234:	4619      	mov	r1, r3
 800a236:	2208      	movs	r2, #8
 800a238:	305c      	adds	r0, #92	; 0x5c
 800a23a:	f7fb fe1f 	bl	8005e7c <memset>
 800a23e:	4b05      	ldr	r3, [pc, #20]	; (800a254 <std+0x38>)
 800a240:	6224      	str	r4, [r4, #32]
 800a242:	6263      	str	r3, [r4, #36]	; 0x24
 800a244:	4b04      	ldr	r3, [pc, #16]	; (800a258 <std+0x3c>)
 800a246:	62a3      	str	r3, [r4, #40]	; 0x28
 800a248:	4b04      	ldr	r3, [pc, #16]	; (800a25c <std+0x40>)
 800a24a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a24c:	4b04      	ldr	r3, [pc, #16]	; (800a260 <std+0x44>)
 800a24e:	6323      	str	r3, [r4, #48]	; 0x30
 800a250:	bd10      	pop	{r4, pc}
 800a252:	bf00      	nop
 800a254:	0800a569 	.word	0x0800a569
 800a258:	0800a58b 	.word	0x0800a58b
 800a25c:	0800a5c3 	.word	0x0800a5c3
 800a260:	0800a5e7 	.word	0x0800a5e7

0800a264 <_cleanup_r>:
 800a264:	4901      	ldr	r1, [pc, #4]	; (800a26c <_cleanup_r+0x8>)
 800a266:	f000 b8af 	b.w	800a3c8 <_fwalk_reent>
 800a26a:	bf00      	nop
 800a26c:	0800a1a5 	.word	0x0800a1a5

0800a270 <__sfmoreglue>:
 800a270:	2268      	movs	r2, #104	; 0x68
 800a272:	b570      	push	{r4, r5, r6, lr}
 800a274:	1e4d      	subs	r5, r1, #1
 800a276:	4355      	muls	r5, r2
 800a278:	460e      	mov	r6, r1
 800a27a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a27e:	f7fb fe6d 	bl	8005f5c <_malloc_r>
 800a282:	4604      	mov	r4, r0
 800a284:	b140      	cbz	r0, 800a298 <__sfmoreglue+0x28>
 800a286:	2100      	movs	r1, #0
 800a288:	e9c0 1600 	strd	r1, r6, [r0]
 800a28c:	300c      	adds	r0, #12
 800a28e:	60a0      	str	r0, [r4, #8]
 800a290:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a294:	f7fb fdf2 	bl	8005e7c <memset>
 800a298:	4620      	mov	r0, r4
 800a29a:	bd70      	pop	{r4, r5, r6, pc}

0800a29c <__sfp_lock_acquire>:
 800a29c:	4801      	ldr	r0, [pc, #4]	; (800a2a4 <__sfp_lock_acquire+0x8>)
 800a29e:	f7ff bc94 	b.w	8009bca <__retarget_lock_acquire_recursive>
 800a2a2:	bf00      	nop
 800a2a4:	200004e9 	.word	0x200004e9

0800a2a8 <__sfp_lock_release>:
 800a2a8:	4801      	ldr	r0, [pc, #4]	; (800a2b0 <__sfp_lock_release+0x8>)
 800a2aa:	f7ff bc8f 	b.w	8009bcc <__retarget_lock_release_recursive>
 800a2ae:	bf00      	nop
 800a2b0:	200004e9 	.word	0x200004e9

0800a2b4 <__sinit_lock_acquire>:
 800a2b4:	4801      	ldr	r0, [pc, #4]	; (800a2bc <__sinit_lock_acquire+0x8>)
 800a2b6:	f7ff bc88 	b.w	8009bca <__retarget_lock_acquire_recursive>
 800a2ba:	bf00      	nop
 800a2bc:	200004ea 	.word	0x200004ea

0800a2c0 <__sinit_lock_release>:
 800a2c0:	4801      	ldr	r0, [pc, #4]	; (800a2c8 <__sinit_lock_release+0x8>)
 800a2c2:	f7ff bc83 	b.w	8009bcc <__retarget_lock_release_recursive>
 800a2c6:	bf00      	nop
 800a2c8:	200004ea 	.word	0x200004ea

0800a2cc <__sinit>:
 800a2cc:	b510      	push	{r4, lr}
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	f7ff fff0 	bl	800a2b4 <__sinit_lock_acquire>
 800a2d4:	69a3      	ldr	r3, [r4, #24]
 800a2d6:	b11b      	cbz	r3, 800a2e0 <__sinit+0x14>
 800a2d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2dc:	f7ff bff0 	b.w	800a2c0 <__sinit_lock_release>
 800a2e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a2e4:	6523      	str	r3, [r4, #80]	; 0x50
 800a2e6:	4b13      	ldr	r3, [pc, #76]	; (800a334 <__sinit+0x68>)
 800a2e8:	4a13      	ldr	r2, [pc, #76]	; (800a338 <__sinit+0x6c>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800a2ee:	42a3      	cmp	r3, r4
 800a2f0:	bf08      	it	eq
 800a2f2:	2301      	moveq	r3, #1
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	bf08      	it	eq
 800a2f8:	61a3      	streq	r3, [r4, #24]
 800a2fa:	f000 f81f 	bl	800a33c <__sfp>
 800a2fe:	6060      	str	r0, [r4, #4]
 800a300:	4620      	mov	r0, r4
 800a302:	f000 f81b 	bl	800a33c <__sfp>
 800a306:	60a0      	str	r0, [r4, #8]
 800a308:	4620      	mov	r0, r4
 800a30a:	f000 f817 	bl	800a33c <__sfp>
 800a30e:	2200      	movs	r2, #0
 800a310:	2104      	movs	r1, #4
 800a312:	60e0      	str	r0, [r4, #12]
 800a314:	6860      	ldr	r0, [r4, #4]
 800a316:	f7ff ff81 	bl	800a21c <std>
 800a31a:	2201      	movs	r2, #1
 800a31c:	2109      	movs	r1, #9
 800a31e:	68a0      	ldr	r0, [r4, #8]
 800a320:	f7ff ff7c 	bl	800a21c <std>
 800a324:	2202      	movs	r2, #2
 800a326:	2112      	movs	r1, #18
 800a328:	68e0      	ldr	r0, [r4, #12]
 800a32a:	f7ff ff77 	bl	800a21c <std>
 800a32e:	2301      	movs	r3, #1
 800a330:	61a3      	str	r3, [r4, #24]
 800a332:	e7d1      	b.n	800a2d8 <__sinit+0xc>
 800a334:	0800a900 	.word	0x0800a900
 800a338:	0800a265 	.word	0x0800a265

0800a33c <__sfp>:
 800a33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33e:	4607      	mov	r7, r0
 800a340:	f7ff ffac 	bl	800a29c <__sfp_lock_acquire>
 800a344:	4b1e      	ldr	r3, [pc, #120]	; (800a3c0 <__sfp+0x84>)
 800a346:	681e      	ldr	r6, [r3, #0]
 800a348:	69b3      	ldr	r3, [r6, #24]
 800a34a:	b913      	cbnz	r3, 800a352 <__sfp+0x16>
 800a34c:	4630      	mov	r0, r6
 800a34e:	f7ff ffbd 	bl	800a2cc <__sinit>
 800a352:	3648      	adds	r6, #72	; 0x48
 800a354:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a358:	3b01      	subs	r3, #1
 800a35a:	d503      	bpl.n	800a364 <__sfp+0x28>
 800a35c:	6833      	ldr	r3, [r6, #0]
 800a35e:	b30b      	cbz	r3, 800a3a4 <__sfp+0x68>
 800a360:	6836      	ldr	r6, [r6, #0]
 800a362:	e7f7      	b.n	800a354 <__sfp+0x18>
 800a364:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a368:	b9d5      	cbnz	r5, 800a3a0 <__sfp+0x64>
 800a36a:	4b16      	ldr	r3, [pc, #88]	; (800a3c4 <__sfp+0x88>)
 800a36c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a370:	60e3      	str	r3, [r4, #12]
 800a372:	6665      	str	r5, [r4, #100]	; 0x64
 800a374:	f7ff fc28 	bl	8009bc8 <__retarget_lock_init_recursive>
 800a378:	f7ff ff96 	bl	800a2a8 <__sfp_lock_release>
 800a37c:	2208      	movs	r2, #8
 800a37e:	4629      	mov	r1, r5
 800a380:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a384:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a388:	6025      	str	r5, [r4, #0]
 800a38a:	61a5      	str	r5, [r4, #24]
 800a38c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a390:	f7fb fd74 	bl	8005e7c <memset>
 800a394:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a398:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a39c:	4620      	mov	r0, r4
 800a39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3a0:	3468      	adds	r4, #104	; 0x68
 800a3a2:	e7d9      	b.n	800a358 <__sfp+0x1c>
 800a3a4:	2104      	movs	r1, #4
 800a3a6:	4638      	mov	r0, r7
 800a3a8:	f7ff ff62 	bl	800a270 <__sfmoreglue>
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	6030      	str	r0, [r6, #0]
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d1d5      	bne.n	800a360 <__sfp+0x24>
 800a3b4:	f7ff ff78 	bl	800a2a8 <__sfp_lock_release>
 800a3b8:	230c      	movs	r3, #12
 800a3ba:	603b      	str	r3, [r7, #0]
 800a3bc:	e7ee      	b.n	800a39c <__sfp+0x60>
 800a3be:	bf00      	nop
 800a3c0:	0800a900 	.word	0x0800a900
 800a3c4:	ffff0001 	.word	0xffff0001

0800a3c8 <_fwalk_reent>:
 800a3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3cc:	4606      	mov	r6, r0
 800a3ce:	4688      	mov	r8, r1
 800a3d0:	2700      	movs	r7, #0
 800a3d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a3d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3da:	f1b9 0901 	subs.w	r9, r9, #1
 800a3de:	d505      	bpl.n	800a3ec <_fwalk_reent+0x24>
 800a3e0:	6824      	ldr	r4, [r4, #0]
 800a3e2:	2c00      	cmp	r4, #0
 800a3e4:	d1f7      	bne.n	800a3d6 <_fwalk_reent+0xe>
 800a3e6:	4638      	mov	r0, r7
 800a3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ec:	89ab      	ldrh	r3, [r5, #12]
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d907      	bls.n	800a402 <_fwalk_reent+0x3a>
 800a3f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	d003      	beq.n	800a402 <_fwalk_reent+0x3a>
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	47c0      	blx	r8
 800a400:	4307      	orrs	r7, r0
 800a402:	3568      	adds	r5, #104	; 0x68
 800a404:	e7e9      	b.n	800a3da <_fwalk_reent+0x12>

0800a406 <__swhatbuf_r>:
 800a406:	b570      	push	{r4, r5, r6, lr}
 800a408:	460e      	mov	r6, r1
 800a40a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a40e:	4614      	mov	r4, r2
 800a410:	2900      	cmp	r1, #0
 800a412:	461d      	mov	r5, r3
 800a414:	b096      	sub	sp, #88	; 0x58
 800a416:	da08      	bge.n	800a42a <__swhatbuf_r+0x24>
 800a418:	2200      	movs	r2, #0
 800a41a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a41e:	602a      	str	r2, [r5, #0]
 800a420:	061a      	lsls	r2, r3, #24
 800a422:	d410      	bmi.n	800a446 <__swhatbuf_r+0x40>
 800a424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a428:	e00e      	b.n	800a448 <__swhatbuf_r+0x42>
 800a42a:	466a      	mov	r2, sp
 800a42c:	f000 f902 	bl	800a634 <_fstat_r>
 800a430:	2800      	cmp	r0, #0
 800a432:	dbf1      	blt.n	800a418 <__swhatbuf_r+0x12>
 800a434:	9a01      	ldr	r2, [sp, #4]
 800a436:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a43a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a43e:	425a      	negs	r2, r3
 800a440:	415a      	adcs	r2, r3
 800a442:	602a      	str	r2, [r5, #0]
 800a444:	e7ee      	b.n	800a424 <__swhatbuf_r+0x1e>
 800a446:	2340      	movs	r3, #64	; 0x40
 800a448:	2000      	movs	r0, #0
 800a44a:	6023      	str	r3, [r4, #0]
 800a44c:	b016      	add	sp, #88	; 0x58
 800a44e:	bd70      	pop	{r4, r5, r6, pc}

0800a450 <__smakebuf_r>:
 800a450:	898b      	ldrh	r3, [r1, #12]
 800a452:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a454:	079d      	lsls	r5, r3, #30
 800a456:	4606      	mov	r6, r0
 800a458:	460c      	mov	r4, r1
 800a45a:	d507      	bpl.n	800a46c <__smakebuf_r+0x1c>
 800a45c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a460:	6023      	str	r3, [r4, #0]
 800a462:	6123      	str	r3, [r4, #16]
 800a464:	2301      	movs	r3, #1
 800a466:	6163      	str	r3, [r4, #20]
 800a468:	b002      	add	sp, #8
 800a46a:	bd70      	pop	{r4, r5, r6, pc}
 800a46c:	466a      	mov	r2, sp
 800a46e:	ab01      	add	r3, sp, #4
 800a470:	f7ff ffc9 	bl	800a406 <__swhatbuf_r>
 800a474:	9900      	ldr	r1, [sp, #0]
 800a476:	4605      	mov	r5, r0
 800a478:	4630      	mov	r0, r6
 800a47a:	f7fb fd6f 	bl	8005f5c <_malloc_r>
 800a47e:	b948      	cbnz	r0, 800a494 <__smakebuf_r+0x44>
 800a480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a484:	059a      	lsls	r2, r3, #22
 800a486:	d4ef      	bmi.n	800a468 <__smakebuf_r+0x18>
 800a488:	f023 0303 	bic.w	r3, r3, #3
 800a48c:	f043 0302 	orr.w	r3, r3, #2
 800a490:	81a3      	strh	r3, [r4, #12]
 800a492:	e7e3      	b.n	800a45c <__smakebuf_r+0xc>
 800a494:	4b0d      	ldr	r3, [pc, #52]	; (800a4cc <__smakebuf_r+0x7c>)
 800a496:	62b3      	str	r3, [r6, #40]	; 0x28
 800a498:	89a3      	ldrh	r3, [r4, #12]
 800a49a:	6020      	str	r0, [r4, #0]
 800a49c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4a0:	81a3      	strh	r3, [r4, #12]
 800a4a2:	9b00      	ldr	r3, [sp, #0]
 800a4a4:	6120      	str	r0, [r4, #16]
 800a4a6:	6163      	str	r3, [r4, #20]
 800a4a8:	9b01      	ldr	r3, [sp, #4]
 800a4aa:	b15b      	cbz	r3, 800a4c4 <__smakebuf_r+0x74>
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4b2:	f000 f8d1 	bl	800a658 <_isatty_r>
 800a4b6:	b128      	cbz	r0, 800a4c4 <__smakebuf_r+0x74>
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	f023 0303 	bic.w	r3, r3, #3
 800a4be:	f043 0301 	orr.w	r3, r3, #1
 800a4c2:	81a3      	strh	r3, [r4, #12]
 800a4c4:	89a0      	ldrh	r0, [r4, #12]
 800a4c6:	4305      	orrs	r5, r0
 800a4c8:	81a5      	strh	r5, [r4, #12]
 800a4ca:	e7cd      	b.n	800a468 <__smakebuf_r+0x18>
 800a4cc:	0800a265 	.word	0x0800a265

0800a4d0 <_malloc_usable_size_r>:
 800a4d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4d4:	1f18      	subs	r0, r3, #4
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	bfbc      	itt	lt
 800a4da:	580b      	ldrlt	r3, [r1, r0]
 800a4dc:	18c0      	addlt	r0, r0, r3
 800a4de:	4770      	bx	lr

0800a4e0 <_raise_r>:
 800a4e0:	291f      	cmp	r1, #31
 800a4e2:	b538      	push	{r3, r4, r5, lr}
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	460d      	mov	r5, r1
 800a4e8:	d904      	bls.n	800a4f4 <_raise_r+0x14>
 800a4ea:	2316      	movs	r3, #22
 800a4ec:	6003      	str	r3, [r0, #0]
 800a4ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f2:	bd38      	pop	{r3, r4, r5, pc}
 800a4f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4f6:	b112      	cbz	r2, 800a4fe <_raise_r+0x1e>
 800a4f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4fc:	b94b      	cbnz	r3, 800a512 <_raise_r+0x32>
 800a4fe:	4620      	mov	r0, r4
 800a500:	f000 f830 	bl	800a564 <_getpid_r>
 800a504:	462a      	mov	r2, r5
 800a506:	4601      	mov	r1, r0
 800a508:	4620      	mov	r0, r4
 800a50a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a50e:	f000 b817 	b.w	800a540 <_kill_r>
 800a512:	2b01      	cmp	r3, #1
 800a514:	d00a      	beq.n	800a52c <_raise_r+0x4c>
 800a516:	1c59      	adds	r1, r3, #1
 800a518:	d103      	bne.n	800a522 <_raise_r+0x42>
 800a51a:	2316      	movs	r3, #22
 800a51c:	6003      	str	r3, [r0, #0]
 800a51e:	2001      	movs	r0, #1
 800a520:	e7e7      	b.n	800a4f2 <_raise_r+0x12>
 800a522:	2400      	movs	r4, #0
 800a524:	4628      	mov	r0, r5
 800a526:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a52a:	4798      	blx	r3
 800a52c:	2000      	movs	r0, #0
 800a52e:	e7e0      	b.n	800a4f2 <_raise_r+0x12>

0800a530 <raise>:
 800a530:	4b02      	ldr	r3, [pc, #8]	; (800a53c <raise+0xc>)
 800a532:	4601      	mov	r1, r0
 800a534:	6818      	ldr	r0, [r3, #0]
 800a536:	f7ff bfd3 	b.w	800a4e0 <_raise_r>
 800a53a:	bf00      	nop
 800a53c:	20000014 	.word	0x20000014

0800a540 <_kill_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	2300      	movs	r3, #0
 800a544:	4d06      	ldr	r5, [pc, #24]	; (800a560 <_kill_r+0x20>)
 800a546:	4604      	mov	r4, r0
 800a548:	4608      	mov	r0, r1
 800a54a:	4611      	mov	r1, r2
 800a54c:	602b      	str	r3, [r5, #0]
 800a54e:	f7f8 f8cc 	bl	80026ea <_kill>
 800a552:	1c43      	adds	r3, r0, #1
 800a554:	d102      	bne.n	800a55c <_kill_r+0x1c>
 800a556:	682b      	ldr	r3, [r5, #0]
 800a558:	b103      	cbz	r3, 800a55c <_kill_r+0x1c>
 800a55a:	6023      	str	r3, [r4, #0]
 800a55c:	bd38      	pop	{r3, r4, r5, pc}
 800a55e:	bf00      	nop
 800a560:	200004e4 	.word	0x200004e4

0800a564 <_getpid_r>:
 800a564:	f7f8 b8ba 	b.w	80026dc <_getpid>

0800a568 <__sread>:
 800a568:	b510      	push	{r4, lr}
 800a56a:	460c      	mov	r4, r1
 800a56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a570:	f000 f894 	bl	800a69c <_read_r>
 800a574:	2800      	cmp	r0, #0
 800a576:	bfab      	itete	ge
 800a578:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a57a:	89a3      	ldrhlt	r3, [r4, #12]
 800a57c:	181b      	addge	r3, r3, r0
 800a57e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a582:	bfac      	ite	ge
 800a584:	6563      	strge	r3, [r4, #84]	; 0x54
 800a586:	81a3      	strhlt	r3, [r4, #12]
 800a588:	bd10      	pop	{r4, pc}

0800a58a <__swrite>:
 800a58a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a58e:	461f      	mov	r7, r3
 800a590:	898b      	ldrh	r3, [r1, #12]
 800a592:	4605      	mov	r5, r0
 800a594:	05db      	lsls	r3, r3, #23
 800a596:	460c      	mov	r4, r1
 800a598:	4616      	mov	r6, r2
 800a59a:	d505      	bpl.n	800a5a8 <__swrite+0x1e>
 800a59c:	2302      	movs	r3, #2
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a4:	f000 f868 	bl	800a678 <_lseek_r>
 800a5a8:	89a3      	ldrh	r3, [r4, #12]
 800a5aa:	4632      	mov	r2, r6
 800a5ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5b0:	81a3      	strh	r3, [r4, #12]
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	463b      	mov	r3, r7
 800a5b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5be:	f000 b817 	b.w	800a5f0 <_write_r>

0800a5c2 <__sseek>:
 800a5c2:	b510      	push	{r4, lr}
 800a5c4:	460c      	mov	r4, r1
 800a5c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ca:	f000 f855 	bl	800a678 <_lseek_r>
 800a5ce:	1c43      	adds	r3, r0, #1
 800a5d0:	89a3      	ldrh	r3, [r4, #12]
 800a5d2:	bf15      	itete	ne
 800a5d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5de:	81a3      	strheq	r3, [r4, #12]
 800a5e0:	bf18      	it	ne
 800a5e2:	81a3      	strhne	r3, [r4, #12]
 800a5e4:	bd10      	pop	{r4, pc}

0800a5e6 <__sclose>:
 800a5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ea:	f000 b813 	b.w	800a614 <_close_r>
	...

0800a5f0 <_write_r>:
 800a5f0:	b538      	push	{r3, r4, r5, lr}
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	4608      	mov	r0, r1
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	4d05      	ldr	r5, [pc, #20]	; (800a610 <_write_r+0x20>)
 800a5fc:	602a      	str	r2, [r5, #0]
 800a5fe:	461a      	mov	r2, r3
 800a600:	f7f8 f8aa 	bl	8002758 <_write>
 800a604:	1c43      	adds	r3, r0, #1
 800a606:	d102      	bne.n	800a60e <_write_r+0x1e>
 800a608:	682b      	ldr	r3, [r5, #0]
 800a60a:	b103      	cbz	r3, 800a60e <_write_r+0x1e>
 800a60c:	6023      	str	r3, [r4, #0]
 800a60e:	bd38      	pop	{r3, r4, r5, pc}
 800a610:	200004e4 	.word	0x200004e4

0800a614 <_close_r>:
 800a614:	b538      	push	{r3, r4, r5, lr}
 800a616:	2300      	movs	r3, #0
 800a618:	4d05      	ldr	r5, [pc, #20]	; (800a630 <_close_r+0x1c>)
 800a61a:	4604      	mov	r4, r0
 800a61c:	4608      	mov	r0, r1
 800a61e:	602b      	str	r3, [r5, #0]
 800a620:	f7f8 f8b6 	bl	8002790 <_close>
 800a624:	1c43      	adds	r3, r0, #1
 800a626:	d102      	bne.n	800a62e <_close_r+0x1a>
 800a628:	682b      	ldr	r3, [r5, #0]
 800a62a:	b103      	cbz	r3, 800a62e <_close_r+0x1a>
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	bd38      	pop	{r3, r4, r5, pc}
 800a630:	200004e4 	.word	0x200004e4

0800a634 <_fstat_r>:
 800a634:	b538      	push	{r3, r4, r5, lr}
 800a636:	2300      	movs	r3, #0
 800a638:	4d06      	ldr	r5, [pc, #24]	; (800a654 <_fstat_r+0x20>)
 800a63a:	4604      	mov	r4, r0
 800a63c:	4608      	mov	r0, r1
 800a63e:	4611      	mov	r1, r2
 800a640:	602b      	str	r3, [r5, #0]
 800a642:	f7f8 f8b0 	bl	80027a6 <_fstat>
 800a646:	1c43      	adds	r3, r0, #1
 800a648:	d102      	bne.n	800a650 <_fstat_r+0x1c>
 800a64a:	682b      	ldr	r3, [r5, #0]
 800a64c:	b103      	cbz	r3, 800a650 <_fstat_r+0x1c>
 800a64e:	6023      	str	r3, [r4, #0]
 800a650:	bd38      	pop	{r3, r4, r5, pc}
 800a652:	bf00      	nop
 800a654:	200004e4 	.word	0x200004e4

0800a658 <_isatty_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	2300      	movs	r3, #0
 800a65c:	4d05      	ldr	r5, [pc, #20]	; (800a674 <_isatty_r+0x1c>)
 800a65e:	4604      	mov	r4, r0
 800a660:	4608      	mov	r0, r1
 800a662:	602b      	str	r3, [r5, #0]
 800a664:	f7f8 f8ae 	bl	80027c4 <_isatty>
 800a668:	1c43      	adds	r3, r0, #1
 800a66a:	d102      	bne.n	800a672 <_isatty_r+0x1a>
 800a66c:	682b      	ldr	r3, [r5, #0]
 800a66e:	b103      	cbz	r3, 800a672 <_isatty_r+0x1a>
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	bd38      	pop	{r3, r4, r5, pc}
 800a674:	200004e4 	.word	0x200004e4

0800a678 <_lseek_r>:
 800a678:	b538      	push	{r3, r4, r5, lr}
 800a67a:	4604      	mov	r4, r0
 800a67c:	4608      	mov	r0, r1
 800a67e:	4611      	mov	r1, r2
 800a680:	2200      	movs	r2, #0
 800a682:	4d05      	ldr	r5, [pc, #20]	; (800a698 <_lseek_r+0x20>)
 800a684:	602a      	str	r2, [r5, #0]
 800a686:	461a      	mov	r2, r3
 800a688:	f7f8 f8a6 	bl	80027d8 <_lseek>
 800a68c:	1c43      	adds	r3, r0, #1
 800a68e:	d102      	bne.n	800a696 <_lseek_r+0x1e>
 800a690:	682b      	ldr	r3, [r5, #0]
 800a692:	b103      	cbz	r3, 800a696 <_lseek_r+0x1e>
 800a694:	6023      	str	r3, [r4, #0]
 800a696:	bd38      	pop	{r3, r4, r5, pc}
 800a698:	200004e4 	.word	0x200004e4

0800a69c <_read_r>:
 800a69c:	b538      	push	{r3, r4, r5, lr}
 800a69e:	4604      	mov	r4, r0
 800a6a0:	4608      	mov	r0, r1
 800a6a2:	4611      	mov	r1, r2
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	4d05      	ldr	r5, [pc, #20]	; (800a6bc <_read_r+0x20>)
 800a6a8:	602a      	str	r2, [r5, #0]
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	f7f8 f837 	bl	800271e <_read>
 800a6b0:	1c43      	adds	r3, r0, #1
 800a6b2:	d102      	bne.n	800a6ba <_read_r+0x1e>
 800a6b4:	682b      	ldr	r3, [r5, #0]
 800a6b6:	b103      	cbz	r3, 800a6ba <_read_r+0x1e>
 800a6b8:	6023      	str	r3, [r4, #0]
 800a6ba:	bd38      	pop	{r3, r4, r5, pc}
 800a6bc:	200004e4 	.word	0x200004e4

0800a6c0 <_init>:
 800a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c2:	bf00      	nop
 800a6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c6:	bc08      	pop	{r3}
 800a6c8:	469e      	mov	lr, r3
 800a6ca:	4770      	bx	lr

0800a6cc <_fini>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	bf00      	nop
 800a6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6d2:	bc08      	pop	{r3}
 800a6d4:	469e      	mov	lr, r3
 800a6d6:	4770      	bx	lr
